export memory memory(initial: 3, max: 0);

global stack_pointer:int = 131824;
export global pm_encoding_unicode_table:int = 32208;
export global pm_encodings:int = 49568;
export global stderr:int = 62844;
export global pm_global_name_punctuation_hash:int = 57504;
export global pm_binding_powers:int = 63600;
export global errno:int = 66200;
export global heap_end:int = 196608;
export global heap_base:int = 131824;
export global stderr_FILE:int = 65584;
export global progname:int = 66232;
export global progname_full:int = 66236;
export global libc:int = 66240;
export global hwcap:int = 66268;
export global program_invocation_short_name:int = 66232;
export global program_invocation_name:int = 66236;
export global stdin_used:int = 66276;
export global stdout_used:int = 66276;
export global stderr_used:int = 65696;
export global dso_handle:int = 1024;
export global data_end:int = 66288;
export global stack_low:int = 66288;
export global stack_high:int = 131824;
export global global_base:int = 1024;
export global memory_base:int = 0;
export global table_base:int = 1;

export table indirect_function_table:funcref(min: 205, max: 205);

data rodata(offset: 1024) =
  "\03\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00"
  "\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00\01\00\00\00"
  "\01\00\00\00\01\00\00\00 \e2\88\85\00~\00 ignore_visibility\00retry\00"
  "failed to allocate memory\00 binary\00pm_node_destroy\00expected a pat"
  "tern expression after the key\00invalid `return` in a class or module "
  "body\00could not parse the endless method body\00expected an element f"
  "or the array\00expected an expression after `*` in the array\00expecte"
  "d a `]` to close the array\00parse_expression_infix\00parse_expression"
  "_prefix\00ambiguous `*` has been interpreted as an argument prefix\00p"
  "arser_lex\00\x\00-+   0X0x\00-0X+0X 0X-0x+0x 0x\00\v\00expected a clos"
  "ing delimiter for the `%w` list\00expected a string in a `%w` list\00e"
  "xpected a closing delimiter for the `%i` list\00expected a symbol in a"
  " `%i` list\00expected a closing delimiter for the `%W` list\00expected"
  " a string in a `%W` list\00expected a closing delimiter for the `%I` l"
  "ist\00expected a symbol in a `%I` list\00latest\00parse_pattern_rest\00"
  "parse_pattern_keyword_rest\00pm_constant_pool_insert\00cursor >= list-"
  ">start\00location->start\00cannot parse the string part\00not\00pm_utf"
  "_8_codepoint\00pm_serialize_content\00invalid exponent\00unexpected `*"
  "` splat argument after a `**` keyword splat argument\00unexpected `*` "
  "splat argument after a `*` splat argument\00expected an expression aft"
  "er `*` splat in an argument\00expected an argument\00invalid argument "
  "being passed to `undef`; expected a bare word, constant, or symbol arg"
  "ument\00unexpected argument after a block argument\00unexpected bare h"
  "ash argument\00could not find a terminator for the embedded document\00"
  "dynamic constant assignment\00expected a `)` after multiple assignment"
  "\00multiple splats in multiple assignment\00unexpected operator for a "
  "multiple assignment\00unexpected `||=` in a multiple assignment\00unex"
  "pected `&&=` in a multiple assignment\00unknown or invalid encoding in"
  " the magic comment\00expected a predicate for a case matching statemen"
  "t\00expected an exception variable after `=>` in a rescue statement\00"
  "expected a newline or semicolon after the statement\00expected a predi"
  "cate expression for the `unless` statement\00expected an `end` to clos"
  "e the `class` statement\00expected an `in` after the index in a `for` "
  "statement\00expected a collection after the `in` in a `for` statement\00"
  "expected an `end` to close the `begin` statement\00expected a predicat"
  "e expression for the `until` statement\00expected an `end` to close th"
  "e `until` statement\00expected a predicate expression for the `elsif` "
  "statement\00expected a predicate expression for the `if` statement\00e"
  "xpected an `end` to close the `def` statement\00expected an `end` to c"
  "lose the `case` statement\00expected an `end` to close the `module` st"
  "atement\00expected a predicate expression for the `while` statement\00"
  "expected an `end` to close the `while` statement\00expected a `}` to c"
  "lose the `BEGIN` statement\00expected a `}` to close the `END` stateme"
  "nt\00expected an expression for the array element\00pm_constant_pool_i"
  "d_to_constant\00invalid formal argument; formal argument cannot be a c"
  "onstant\00END in method; use at_exit\00pm_parser_init\00pm_string_shar"
  "ed_init\00 ascii_8bit\000it\00pm_block_parameters_node_closing_set\00p"
  "m_array_node_close_set\00pm_begin_node_end_keyword_set\00unexpected wr"
  "ite target\00immutable variable as a write target\00fstat\00pm_parser_"
  "errors_format\00 contains_splat\00 contains_keyword_splat\00\t\00 symb"
  "ol_keys\00unexpected `in` keyword in arguments\00unexpected operator a"
  "fter a call with arguments\00expected a `)` to close the arguments\00e"
  "xpected a `,` separator for the array elements\00invalid Unicode escap"
  "e sequence; maximum length is 6 digits\00unless\00class\00unexpected m"
  "ultiple `*` splat parameters\00unexpected multiple `**` splat paramete"
  "rs\00unexpected `...` in parameters\00unexpected `,` in parameters\00e"
  "xpected a local variable name in the block parameters\00expected a del"
  "imiter to close the parameters\00expected a `)` to close the parameter"
  "s\00%.2s is reserved for numbered parameters\00euc-jp-ms\00eucJP-ms\00"
  "unexpected `{` after a method call without parenthesis\00parse_strings"
  "\00invalid Unicode escape sequence; Unicode cannot be combined with co"
  "ntrol or meta flags\00parse_assocs\00alias\00:%.*s\00*breakpoint == le"
  "x_mode->as.list.incrementor\00*breakpoint == lex_mode->as.regexp.incre"
  "mentor\00expected an expression after `?` in the ternary operator\00ex"
  "pected an expression after `:` in the ternary operator\00expected a `:"
  "` after the true expression of a ternary operator\00expected a pattern"
  " expression after the `^` pin operator\00expected an expression after "
  "the operator\00expected a pattern expression after the range operator\00"
  "expected a pattern expression after the `|` operator\00expected a patt"
  "ern expression after the `[` operator\00expected an identifier after t"
  "he `=>` operator\00expected a constant after the `::` operator\00ambig"
  "uous `/`; wrap regexp in parentheses or add a space after `/` operator"
  "\00ambiguous first argument; put parentheses or a space even after `-`"
  " operator\00ambiguous first argument; put parentheses or a space even "
  "after `+` operator\00expected a pattern expression after the `(` opera"
  "tor\00for\00expected a method name after the receiver\00expected strin"
  "g content after opening string delimiter\00pm_node_flag_set_repeated_p"
  "arameter\00 repeated_parameter\00expected a default value for the para"
  "meter\00expected a default value for the keyword parameter\00expected "
  "an identifier for the required parameter\00expected a `(` to start a r"
  "equired parameter\00expected a `)` to end a required parameter\00unexp"
  "ected name for a parameter\00super\00 begin_modifier\00expected a valu"
  "e after the `rescue` modifier\00unexpected parameter order\00parse_dec"
  "imal_number\00invalid binary number\00invalid underscore placement in "
  "number\00invalid octal number\00invalid hexadecimal number\00invalid d"
  "ecimal number\00\r\00expected an `end` to close the `for` loop\00 euc_"
  "jp\00token_begins_expression_p\00macCentEuro\00SJIS-DoCoMo\00UTF8-DoCo"
  "Mo\00return\00unexpected rest pattern\00expected a label as the key in"
  " the hash pattern\00expected a key in the hash pattern\00expected a la"
  "bel after the `,` in the hash pattern\00unexpected an `alias` at a non"
  "-statement position\00unexpected an `undef` at a non-statement positio"
  "n\00unexpected a `BEGIN` at a non-statement position\00unexpected an `"
  "END` at a non-statement position\00invalid method name; a setter metho"
  "d cannot be defined in an endless method definition\00expected a recei"
  "ver for the method definition\00expected a `.` or `::` after the recei"
  "ver in a method definition\00unexpected class definition in a method d"
  "efinition\00unexpected module definition in a method definition\00expe"
  "cted a string for concatenation\00 safe_navigation\00pm_serialize_loca"
  "tion\00expected a closing delimiter for the regular expression\00expec"
  "ted a `}` to close the pattern expression\00expected a `]` to close th"
  "e pattern expression\00expected a `)` to close the pattern expression\00"
  "unexpected bare hash in expression\00unexpected void value expression\00"
  "cannot parse the expression\00expected a rescued expression\00expected"
  " a `}` to close the embedded expression\00unexpected pattern expressio"
  "n after the `**` expression\00pm_newline_list_line_column\00begin\00 f"
  "rozen\00open\00invalid token\00invalid `%` token\00MacJapan\00nan\00ma"
  "cRoman\00macCroatian\00\n\00\1b[1;31m^\1b[0m\00\1b[38;5;102m%5zu | \1b"
  "[0m\00\1b[38;5;102m%4zu | \1b[0m\00\1b[38;5;102m%3zu | \1b[0m\00\1b[38"
  ";5;102m%2zu | \1b[0m\00\1b[38;5;102m%1zu | \1b[0m\00\1b[38;5;102m  | \1b"
  "[0m\00\1b[38;5;102m   | \1b[0m\00\1b[38;5;102m    | \1b[0m\00\1b[38;5;"
  "102m     | \1b[0m\00\1b[38;5;102m      | \1b[0m\00\1b[1;31m> \1b[0m\00"
  "invalid symbol\00expected a closing delimiter for the interpolated sym"
  "bol\00expected a closing delimiter for the dynamic symbol\00 variable_"
  "call\00unexpected `...` in an non-parenthesized call\00until\00nil\00B"
  "EGIN is permitted only at toplevel\00 octal\00frozen_string_literal\00"
  "invalid Unicode escape sequence; multiple codepoints are not allowed i"
  "n a character literal\00expected a key in the hash literal\00expected "
  "a value in the hash literal\00expected a `}` to close the hash literal"
  "\00expected a closing delimiter for the string literal\00parse_conditi"
  "onal\00 hexadecimal\00 decimal\00content_offset < owned_mask\00SJIS-So"
  "ftBank\00UTF8-SoftBank\00macGreek\00parse_block\00expected a `do` keyw"
  "ord or a `{` to open the lambda block\00unexpected operator after a ca"
  "ll with a block\00break\00 windows_31j\00macThai\00macTurkish\00parse_"
  "pattern_hash\00expected an expression after the label in a hash\00expe"
  "cted an expression after `**` in a hash\00pm_serialize_string\00expect"
  "ed a closing delimiter for the `%x` or backtick string\00expected a cl"
  "osing delimiter for the interpolated string\00unexpected `...` when th"
  "e parent method is not forwarding\00unexpected `*` when the parent met"
  "hod is not forwarding\00unexpected `&` when the parent method is not f"
  "orwarding\00 forced_binary_encoding\00 forced_us_ascii_encoding\00 for"
  "ced_utf8_encoding\00inf\00parameter default value references itself\00"
  "elsif\00undef\00\f\00pm_constant_pool_resize\00constant_id != PM_CONST"
  "ANT_ID_UNSET && constant_id <= pool->size\00true\00expected a `=>` bet"
  "ween the hash key and value\00rescue\00 attribute_write\00pm_float_nod"
  "e_rational_imaginary_create\00pm_integer_node_rational_imaginary_creat"
  "e\00pm_float_node_imaginary_create\00pm_integer_node_imaginary_create\00"
  "pm_hash_pattern_node_node_list_create\00pm_regular_expression_flags_cr"
  "eate\00pm_symbol_node_label_create\00pm_float_node_rational_create\00p"
  "m_integer_node_rational_create\00pm_retry_node_create\00pm_next_node_c"
  "reate\00pm_implicit_rest_node_create\00pm_float_node_create\00pm_assoc"
  "_splat_node_create\00pm_forwarding_arguments_node_create\00pm_no_keywo"
  "rds_parameter_node_create\00pm_block_parameter_node_create\00pm_forwar"
  "ding_parameter_node_create\00pm_super_node_create\00pm_forwarding_supe"
  "r_node_create\00pm_integer_node_create\00pm_redo_node_create\00pm_nil_"
  "node_create\00pm_break_node_create\00pm_hash_node_create\00pm_source_e"
  "ncoding_node_create\00pm_self_node_create\00pm_undef_node_create\00pm_"
  "true_node_create\00pm_call_operator_write_node_create\00pm_index_or_wr"
  "ite_node_create\00pm_constant_or_write_node_create\00pm_call_or_write_"
  "node_create\00pm_constant_path_or_write_node_create\00pm_class_variabl"
  "e_or_write_node_create\00pm_local_variable_or_write_node_create\00pm_g"
  "lobal_variable_or_write_node_create\00pm_instance_variable_or_write_no"
  "de_create\00pm_index_and_write_node_create\00pm_constant_and_write_nod"
  "e_create\00pm_call_and_write_node_create\00pm_constant_path_and_write_"
  "node_create\00pm_class_variable_and_write_node_create\00pm_local_varia"
  "ble_and_write_node_create\00pm_global_variable_and_write_node_create\00"
  "pm_instance_variable_and_write_node_create\00pm_false_node_create\00pm"
  "_source_line_node_create\00pm_source_file_node_create\00pm_block_local"
  "_variable_node_create\00pm_alias_global_variable_node_create\00pm_alia"
  "s_method_node_create\00pm_constant_read_node_create\00pm_class_variabl"
  "e_read_node_create\00pm_instance_variable_read_node_create\00pm_back_r"
  "eference_read_node_create\00pm_numbered_reference_read_node_create\00e"
  "xpected an `end` to close the conditional clause\00expected a delimite"
  "r after the predicates of a `when` clause\00expected a closing delimit"
  "er for the `rescue` clause\00expected an `end` to close the `else` cla"
  "use\00false\00MacJapanese\00 ignore_case\00ensure\00numbered parameter"
  " is already used in outer scope\00next_newline\00 multi_line\00macUkra"
  "ine\00pm_global_variable_write_name\00repeated parameter name\00expect"
  "ed a method name\00module\00Emacs-Mule\00while\00incomplete class vari"
  "able\00invalid formal argument; formal argument cannot be a class vari"
  "able\00%.*s: no such local variable\00invalid argument being passed to"
  " `alias`; expected a bare word, symbol, constant, or global variable\00"
  "invalid global variable\00invalid formal argument; formal argument can"
  "not be a global variable\00invalid formal argument; formal argument ca"
  "nnot be an instance variable\00incomplete instance variable\00invalid "
  "embedded variable\00pm_diagnostic_message\00UTF-8 mixed within %s sour"
  "ce\00 once\00invalid control escape sequence\00invalid hexadecimal esc"
  "ape sequence\00invalid Unicode escape sequence\00invalid meta escape s"
  "equence\00expected a pattern expression after the `in` keyword\00pm_ne"
  "wline_list_append\00pm_case_node_condition_append\00 exclude_end\00par"
  "ser_flush_heredoc_end\00parser->heredoc_end <= parser->end\00parser->c"
  "urrent.end <= parser->end\00location->start <= location->end\00start <"
  "= end\00macIceland\00yield\00both a block argument and a forwarding ar"
  "gument; only one block is allowed\00multiple block arguments; only one"
  " block is allowed\00multiple block parameters; only one block is allow"
  "ed\00invalid control escape sequence; control cannot be repeated\00inv"
  "alid meta escape sequence; meta cannot be repeated\00`it` is not allow"
  "ed when an ordinary parameter is defined\00numbered parameters are not"
  " allowed when an ordinary parameter is defined\00Map failed\00 extende"
  "d\00could not find a terminator for the heredoc\00parse_negative_numer"
  "ic\00macCyrillic\00src/util/pm_newline_list.c\00src/prism.c\00src/util"
  "/pm_constant_pool.c\00src/util/pm_string.c\00src/encoding.c\00src/seri"
  "alize.c\00src/diagnostic.c\00serialize.c.erb\00node.c.erb\00\b\00macRo"
  "mania\00\a\00expected a receiver for unary `~`\00expected a lambda blo"
  "ck beginning with `{` to end with `}`\00expected a block beginning wit"
  "h `{` to end with `}`\00invalid Unicode escape sequence; needs closing"
  " `}`\00expected the block parameters to end with `|`\00expected an exp"
  "ression after `not`\00expected a constant name after `class`\00expecte"
  "d an index after `for`\00expected an expression after `when`\00unexpec"
  "ted `else` in `begin` block; a `rescue` clause must precede `else`\00e"
  "xpected an expression after `case`\00expected a `when` or `in` clause "
  "after `case`\00expected a constant name after `module`\00expected a la"
  "mbda block beginning with `do` to end with `end`\00expected a block be"
  "ginning with `do` to end with `end`\00number literal ending with a `_`"
  "\00expected a matching `]`\00expected a `{` after `BEGIN`\00expected a"
  " `{` after `END`\00expected an expression after `defined?`\00incomplet"
  "e expression at `?`\00expected a pattern expression after `=>`\00expec"
  "ted an expression after `||=`\00expected an expression after `=`\00exp"
  "ected an expression after `&&=`\00expected a superclass after `<`\00ex"
  "pected an expression after `<<`\00unexpected argument after `...`\00ex"
  "pected a receiver for unary `-`\00expected a pattern expression after "
  "`,`\00expected an expression after `,`\00expected a receiver for unary"
  " `+`\00expected an expression after `*`\00unexpected parameter `*`\00e"
  "xpected a matching `)`\00expected an expression after `(`\00expected a"
  " receiver for unary `!`\00token->type == PM_TOKEN_KEYWORD___ENCODING__"
  "\00token->type == PM_TOKEN_KEYWORD___LINE__\00file_keyword->type == PM"
  "_TOKEN_KEYWORD___FILE__\00__END__\00[]\00list->size == 0 || newline_of"
  "fset > list->offsets[list->size - 1]\00\\\00 [\00token->type == PM_TOK"
  "EN_KEYWORD_RETRY\00token->type == PM_TOKEN_FLOAT_IMAGINARY\00token->ty"
  "pe == PM_TOKEN_INTEGER_IMAGINARY\00token->type == PM_TOKEN_FLOAT_RATIO"
  "NAL_IMAGINARY\00token->type == PM_TOKEN_INTEGER_RATIONAL_IMAGINARY\00B"
  "INARY\00BRACKET_LEFT_ARRAY\00PERCENT_LOWER_X\00value < UINT32_MAX\00va"
  "lue >= 0 && ((unsigned long) value) < UINT32_MAX\00\x%02X\00PERCENT_LO"
  "WER_W\00PERCENT_UPPER_W\00eucTW\00EUC-TW\00KOI8-U\00keyword->type == P"
  "M_TOKEN_KEYWORD_NEXT\00HEREDOC_START\00KEYWORD_NOT\00token->type == PM"
  "_TOKEN_UDOT_DOT_DOT\00UDOT_DOT\00AMPERSAND_DOT\00STRING_CONTENT\00COMM"
  "ENT\00PERCENT\00CONSTANT\00ASCII-8BIT\00BRACKET_LEFT_RIGHT\00BRACKET_R"
  "IGHT\00PARENTHESIS_RIGHT\00BRACE_RIGHT\00BRACKET_LEFT\00PARENTHESIS_LE"
  "FT\00BRACE_LEFT\00pm_binding_powers[type].left == PM_BINDING_POWER_UNS"
  "ET\00CARET\00token->type == PM_TOKEN_FLOAT\00UMINUS\00UPLUS\00LESS_LES"
  "S\00KEYWORD_UNLESS\00KEYWORD_CLASS\00Shift_JIS\00SJIS\00UTF-8-HFS\00PA"
  "RENTHESIS_LEFT_PARENTHESES\00Big5-HKSCS\00keyword->type == PM_TOKEN_KE"
  "YWORD_ALIAS\00KEYWORD_OR\00KEYWORD_FOR\00eucKR\00EUC-KR\00MINUS_GREATE"
  "R\00GREATER_GREATER\00LESS_EQUAL_GREATER\00token->type == PM_TOKEN_KEY"
  "WORD_SUPER\00keyword->type == PM_TOKEN_KEYWORD_SUPER\00IDENTIFIER\00KE"
  "YWORD_UNLESS_MODIFIER\00KEYWORD_UNTIL_MODIFIER\00KEYWORD_IF_MODIFIER\00"
  "KEYWORD_RESCUE_MODIFIER\00KEYWORD_WHILE_MODIFIER\00token->type == PM_T"
  "OKEN_INTEGER\00EMBVAR\00operator->type == PM_TOKEN_USTAR_STAR || opera"
  "tor->type == PM_TOKEN_STAR_STAR\00operator->type == PM_TOKEN_USTAR_STA"
  "R\00parser->current.type == PM_TOKEN_USTAR_STAR\00parser->previous.typ"
  "e == PM_TOKEN_USTAR\00KOI8-R\00KEYWORD_DO_LOOP\00eucJP\00EUC-JP\00stat"
  "eless-ISO-2022-JP\00WORDS_SEP\00KEYWORD_DO\00token->type == PM_TOKEN_K"
  "EYWORD_REDO\00Big5-UAO\00KEYWORD_RETURN\00UCOLON_COLON\00SEMICOLON\00K"
  "EYWORD_IN\00EMBEXPR_BEGIN\00REGEXP_BEGIN\00SYMBOL_BEGIN\00parser->curr"
  "ent.type == PM_TOKEN_STRING_BEGIN\00KEYWORD_BEGIN\00EMBDOC_BEGIN\00LAM"
  "BDA_BEGIN\00diag_id < PM_DIAGNOSTIC_ID_LEN\00KEYWORD_WHEN\00KEYWORD_TH"
  "EN\00eucCN\00EUC-CN\00NAN\00UMINUS_NUM\00MAXIMUM\00PRISM\00target->blo"
  "ck == NULL\00rest != NULL\00opening != NULL\00source != NULL\00KEYWORD"
  "_UNTIL\00token->type == PM_TOKEN_KEYWORD_NIL\00keyword->type == PM_TOK"
  "EN_KEYWORD_NIL\00LABEL\00PERCENT_EQUAL\00BRACKET_LEFT_RIGHT_EQUAL\00CA"
  "RET_EQUAL\00MINUS_EQUAL\00PLUS_EQUAL\00LESS_LESS_EQUAL\00GREATER_GREAT"
  "ER_EQUAL\00STAR_STAR_EQUAL\00EQUAL_EQUAL_EQUAL\00SLASH_EQUAL\00BANG_EQ"
  "UAL\00operator->type == PM_TOKEN_PIPE_PIPE_EQUAL\00operator->type == P"
  "M_TOKEN_AMPERSAND_AMPERSAND_EQUAL\00CHARACTER_LITERAL\00token->type =="
  " PM_TOKEN_FLOAT_RATIONAL\00token->type == PM_TOKEN_INTEGER_RATIONAL\00"
  "QUESTION_MARK\00PCK\00BACKTICK\00GBK\00keyword->type == PM_TOKEN_KEYWO"
  "RD_BREAK\00csWindows31J\00Windows-31J\00PERCENT_LOWER_I\00PERCENT_UPPE"
  "R_I\00US-ASCII\00SJIS-KDDI\00stateless-ISO-2022-JP-KDDI\00UTF8-KDDI\00"
  "SLASH\00closing->type == PM_TOKEN_PIPE || closing->type == PM_TOKEN_PA"
  "RENTHESIS_RIGHT || closing->type == PM_TOKEN_MISSING\00name->type == P"
  "M_TOKEN_CONSTANT || name->type == PM_TOKEN_MISSING\00name->type == PM_"
  "TOKEN_IDENTIFIER || name->type == PM_TOKEN_MISSING\00end_keyword->type"
  " == PM_TOKEN_KEYWORD_END || end_keyword->type == PM_TOKEN_MISSING\00le"
  "x_mode->mode == PM_LEX_STRING\00BANG\00EOF\00INF\00token->type == PM_T"
  "OKEN_KEYWORD_SELF\00KEYWORD_IF\00KEYWORD_ELSIF\00KEYWORD_DEF\00token->"
  "type == PM_TOKEN_KEYWORD_UNDEF\00token->type == PM_TOKEN_KEYWORD_TRUE\00"
  "KEYWORD_RESCUE\00KEYWORD_ELSE\00token->type == PM_TOKEN_KEYWORD_FALSE\00"
  "KEYWORD_CASE\00KEYWORD_BEGIN_UPCASE\00KEYWORD_END_UPCASE\00KEYWORD_ENS"
  "URE\00PIPE_PIPE\00EMBDOC_LINE\00IGNORED_NEWLINE\00METHOD_NAME\00KEYWOR"
  "D_MODULE\00KEYWORD_WHILE\00token->type == PM_TOKEN_CLASS_VARIABLE\00GL"
  "OBAL_VARIABLE\00token->type == PM_TOKEN_INSTANCE_VARIABLE\00PM_RETRY_N"
  "ODE\00PM_IMAGINARY_NODE\00PM_ARRAY_NODE\00PM_NEXT_NODE\00PM_IMPLICIT_R"
  "EST_NODE\00PM_BLOCK_ARGUMENT_NODE\00PM_IMPLICIT_NODE\00PM_INDEX_TARGET"
  "_NODE\00PM_CONSTANT_TARGET_NODE\00PM_CALL_TARGET_NODE\00PM_MULTI_TARGE"
  "T_NODE\00PM_CONSTANT_PATH_TARGET_NODE\00PM_CLASS_VARIABLE_TARGET_NODE\00"
  "PM_LOCAL_VARIABLE_TARGET_NODE\00PM_GLOBAL_VARIABLE_TARGET_NODE\00PM_IN"
  "STANCE_VARIABLE_TARGET_NODE\00PM_FLOAT_NODE\00PM_SPLAT_NODE\00PM_ASSOC"
  "_SPLAT_NODE\00PM_ARGUMENTS_NODE\00PM_FORWARDING_ARGUMENTS_NODE\00PM_ST"
  "ATEMENTS_NODE\00PM_EMBEDDED_STATEMENTS_NODE\00PM_UNLESS_NODE\00PM_SING"
  "LETON_CLASS_NODE\00PM_CLASS_NODE\00PM_PARAMETERS_NODE\00PM_BLOCK_PARAM"
  "ETERS_NODE\00PM_NUMBERED_PARAMETERS_NODE\00PM_PARENTHESES_NODE\00PM_OR"
  "_NODE\00PM_FOR_NODE\00PM_NODE_TYPE(node) == PM_BLOCK_LOCAL_VARIABLE_NO"
  "DE || PM_NODE_TYPE(node) == PM_BLOCK_PARAMETER_NODE || PM_NODE_TYPE(no"
  "de) == PM_KEYWORD_REST_PARAMETER_NODE || PM_NODE_TYPE(node) == PM_OPTI"
  "ONAL_KEYWORD_PARAMETER_NODE || PM_NODE_TYPE(node) == PM_OPTIONAL_PARAM"
  "ETER_NODE || PM_NODE_TYPE(node) == PM_REQUIRED_KEYWORD_PARAMETER_NODE "
  "|| PM_NODE_TYPE(node) == PM_REQUIRED_PARAMETER_NODE || PM_NODE_TYPE(no"
  "de) == PM_REST_PARAMETER_NODE\00PM_KEYWORD_REST_PARAMETER_NODE\00PM_NO"
  "_KEYWORDS_PARAMETER_NODE\00PM_OPTIONAL_PARAMETER_NODE\00PM_BLOCK_PARAM"
  "ETER_NODE\00PM_FORWARDING_PARAMETER_NODE\00PM_OPTIONAL_KEYWORD_PARAMET"
  "ER_NODE\00PM_REQUIRED_KEYWORD_PARAMETER_NODE\00PM_REQUIRED_PARAMETER_N"
  "ODE\00PM_SUPER_NODE\00PM_FORWARDING_SUPER_NODE\00PM_RESCUE_MODIFIER_NO"
  "DE\00PM_INTEGER_NODE\00PM_FLIP_FLOP_NODE\00PM_REDO_NODE\00PM_RETURN_NO"
  "DE\00PM_ARRAY_PATTERN_NODE\00PM_ALTERNATION_PATTERN_NODE\00PM_HASH_PAT"
  "TERN_NODE\00PM_CAPTURE_PATTERN_NODE\00PM_FIND_PATTERN_NODE\00PM_POST_E"
  "XECUTION_NODE\00PM_PRE_EXECUTION_NODE\00PM_REGULAR_EXPRESSION_NODE\00P"
  "M_INTERPOLATED_REGULAR_EXPRESSION_NODE\00PM_PINNED_EXPRESSION_NODE\00P"
  "M_IN_NODE\00PM_BEGIN_NODE\00PM_WHEN_NODE\00PM_PROGRAM_NODE\00PM_SYMBOL"
  "_NODE\00PM_INTERPOLATED_SYMBOL_NODE\00PM_CALL_NODE\00PM_UNTIL_NODE\00P"
  "M_NIL_NODE\00PM_RATIONAL_NODE\00PM_BLOCK_NODE\00PM_BREAK_NODE\00PM_CON"
  "STANT_PATH_NODE\00PM_HASH_NODE\00PM_KEYWORD_HASH_NODE\00PM_CASE_MATCH_"
  "NODE\00PM_MISSING_NODE\00PM_X_STRING_NODE\00PM_INTERPOLATED_X_STRING_N"
  "ODE\00PM_STRING_NODE\00PM_INTERPOLATED_STRING_NODE\00PM_SOURCE_ENCODIN"
  "G_NODE\00PM_SELF_NODE\00PM_IF_NODE\00PM_DEF_NODE\00PM_UNDEF_NODE\00PM_"
  "TRUE_NODE\00PM_RESCUE_NODE\00PM_CONSTANT_WRITE_NODE\00PM_INDEX_OR_WRIT"
  "E_NODE\00PM_CONSTANT_OR_WRITE_NODE\00PM_CALL_OR_WRITE_NODE\00PM_CONSTA"
  "NT_PATH_OR_WRITE_NODE\00PM_CLASS_VARIABLE_OR_WRITE_NODE\00PM_LOCAL_VAR"
  "IABLE_OR_WRITE_NODE\00PM_GLOBAL_VARIABLE_OR_WRITE_NODE\00PM_INSTANCE_V"
  "ARIABLE_OR_WRITE_NODE\00PM_INDEX_OPERATOR_WRITE_NODE\00PM_CONSTANT_OPE"
  "RATOR_WRITE_NODE\00PM_CALL_OPERATOR_WRITE_NODE\00PM_CONSTANT_PATH_OPER"
  "ATOR_WRITE_NODE\00PM_CLASS_VARIABLE_OPERATOR_WRITE_NODE\00PM_LOCAL_VAR"
  "IABLE_OPERATOR_WRITE_NODE\00PM_GLOBAL_VARIABLE_OPERATOR_WRITE_NODE\00P"
  "M_INSTANCE_VARIABLE_OPERATOR_WRITE_NODE\00PM_MULTI_WRITE_NODE\00PM_CON"
  "STANT_PATH_WRITE_NODE\00PM_MATCH_WRITE_NODE\00PM_CLASS_VARIABLE_WRITE_"
  "NODE\00PM_LOCAL_VARIABLE_WRITE_NODE\00PM_GLOBAL_VARIABLE_WRITE_NODE\00"
  "PM_INSTANCE_VARIABLE_WRITE_NODE\00PM_INDEX_AND_WRITE_NODE\00PM_CONSTAN"
  "T_AND_WRITE_NODE\00PM_CALL_AND_WRITE_NODE\00PM_CONSTANT_PATH_AND_WRITE"
  "_NODE\00PM_CLASS_VARIABLE_AND_WRITE_NODE\00PM_LOCAL_VARIABLE_AND_WRITE"
  "_NODE\00PM_GLOBAL_VARIABLE_AND_WRITE_NODE\00PM_INSTANCE_VARIABLE_AND_W"
  "RITE_NODE\00PM_MATCH_PREDICATE_NODE\00PM_ELSE_NODE\00PM_FALSE_NODE\00P"
  "M_CASE_NODE\00PM_ENSURE_NODE\00PM_MATCH_LAST_LINE_NODE\00PM_INTERPOLAT"
  "ED_MATCH_LAST_LINE_NODE\00PM_SOURCE_LINE_NODE\00PM_MODULE_NODE\00PM_WH"
  "ILE_NODE\00PM_SOURCE_FILE_NODE\00PM_BLOCK_LOCAL_VARIABLE_NODE\00PM_ALI"
  "AS_GLOBAL_VARIABLE_NODE\00PM_PINNED_VARIABLE_NODE\00PM_EMBEDDED_VARIAB"
  "LE_NODE\00PM_RANGE_NODE\00PM_ALIAS_METHOD_NODE\00PM_AND_NODE\00PM_YIEL"
  "D_NODE\00PM_MATCH_REQUIRED_NODE\00PM_DEFINED_NODE\00PM_CONSTANT_READ_N"
  "ODE\00PM_CLASS_VARIABLE_READ_NODE\00PM_LOCAL_VARIABLE_READ_NODE\00PM_G"
  "LOBAL_VARIABLE_READ_NODE\00PM_INSTANCE_VARIABLE_READ_NODE\00PM_BACK_RE"
  "FERENCE_READ_NODE\00PM_NUMBERED_REFERENCE_READ_NODE\00PM_ASSOC_NODE\00"
  "PM_LAMBDA_NODE\00EQUAL_TILDE\00BANG_TILDE\00name->type == PM_TOKEN_BAC"
  "K_REFERENCE\00name->type == PM_TOKEN_NUMBERED_REFERENCE\00EMBEXPR_END\00"
  "REGEXP_END\00LABEL_END\00STRING_END\00KEYWORD_END\00HEREDOC_END\00EMBD"
  "OC_END\00KEYWORD_AND\00operator->type == PM_TOKEN_NOT_PROVIDED || oper"
  "ator->type == PM_TOKEN_UAMPERSAND || operator->type == PM_TOKEN_AMPERS"
  "AND\00AMPERSAND_AMPERSAND\00UAMPERSAND\00KEYWORD_YIELD\00KEYWORD_DEFIN"
  "ED\00closing->type == PM_TOKEN_BRACKET_RIGHT || closing->type == PM_TO"
  "KEN_STRING_END || closing->type == PM_TOKEN_MISSING || closing->type ="
  "= PM_TOKEN_NOT_PROVIDED\00lex_mode->mode == PM_LEX_HEREDOC\00UTF8-MAC\00"
  "token->type == PM_TOKEN_COMMA\00-@\00+@\00[]=\00\e2\94\9c\e2\94\80\e2\94"
  "\80 key:\00\e2\94\9c\e2\94\80\e2\94\80 body:\00\e2\94\94\e2\94\80\e2\94"
  "\80 body:\00\e2\94\9c\e2\94\80\e2\94\80 locals_body_index:\00\e2\94\9c"
  "\e2\94\80\e2\94\80 index:\00\e2\94\9c\e2\94\80\e2\94\80 keyword_rest:\00"
  "\e2\94\9c\e2\94\80\e2\94\80 rest:\00\e2\94\9c\e2\94\80\e2\94\80 conseq"
  "uent:\00\e2\94\94\e2\94\80\e2\94\80 consequent:\00\e2\94\9c\e2\94\80\e2"
  "\94\80 parent:\00\e2\94\9c\e2\94\80\e2\94\80 constant:\00\e2\94\9c\e2\94"
  "\80\e2\94\80 right:\00\e2\94\9c\e2\94\80\e2\94\80 left:\00\e2\94\9c\e2"
  "\94\80\e2\94\80 target:\00\e2\94\9c\e2\94\80\e2\94\80 posts:\00\e2\94\9c"
  "\e2\94\80\e2\94\80 parts:\00\e2\94\9c\e2\94\80\e2\94\80 arguments:\00\e2"
  "\94\94\e2\94\80\e2\94\80 arguments:\00\e2\94\9c\e2\94\80\e2\94\80 stat"
  "ements:\00\e2\94\94\e2\94\80\e2\94\80 statements:\00\e2\94\9c\e2\94\80"
  "\e2\94\80 elements:\00\e2\94\94\e2\94\80\e2\94\80 elements:\00\e2\94\9c"
  "\e2\94\80\e2\94\80 rights:\00\e2\94\9c\e2\94\80\e2\94\80 lefts:\00\e2\94"
  "\94\e2\94\80\e2\94\80 targets:\00\e2\94\9c\e2\94\80\e2\94\80 superclas"
  "s:\00\e2\94\9c\e2\94\80\e2\94\80 parameters:\00\e2\94\9c\e2\94\80\e2\94"
  "\80 exceptions:\00\e2\94\9c\e2\94\80\e2\94\80 conditions:\00\e2\94\9c\e2"
  "\94\80\e2\94\80 optionals:\00\e2\94\9c\e2\94\80\e2\94\80 locals:\00\e2"
  "\94\9c\e2\94\80\e2\94\80 flags:\00\e2\94\94\e2\94\80\e2\94\80 flags:\00"
  "\e2\94\9c\e2\94\80\e2\94\80 names:\00\e2\94\9c\e2\94\80\e2\94\80 keywo"
  "rds:\00\e2\94\9c\e2\94\80\e2\94\80 requireds:\00\e2\94\9c\e2\94\80\e2\94"
  "\80 operator:\00\e2\94\94\e2\94\80\e2\94\80 operator:\00\e2\94\9c\e2\94"
  "\80\e2\94\80 receiver:\00\e2\94\94\e2\94\80\e2\94\80 number:\00\e2\94\9c"
  "\e2\94\80\e2\94\80 pattern:\00\e2\94\9c\e2\94\80\e2\94\80 collection:\00"
  "\e2\94\94\e2\94\80\e2\94\80 rescue_expression:\00\e2\94\9c\e2\94\80\e2"
  "\94\80 expression:\00\e2\94\94\e2\94\80\e2\94\80 expression:\00\e2\94\94"
  "\e2\94\80\e2\94\80 maximum:\00\e2\94\9c\e2\94\80\e2\94\80 call:\00\e2\94"
  "\9c\e2\94\80\e2\94\80 block:\00\e2\94\94\e2\94\80\e2\94\80 block:\00\e2"
  "\94\9c\e2\94\80\e2\94\80 depth:\00\e2\94\94\e2\94\80\e2\94\80 depth:\00"
  "\e2\94\94\e2\94\80\e2\94\80 filepath:\00\e2\94\9c\e2\94\80\e2\94\80 co"
  "nstant_path:\00\e2\94\9c\e2\94\80\e2\94\80 value:\00\e2\94\94\e2\94\80"
  "\e2\94\80 value:\00\e2\94\9c\e2\94\80\e2\94\80 predicate:\00\e2\94\9c\e2"
  "\94\80\e2\94\80 rescue_clause:\00\e2\94\9c\e2\94\80\e2\94\80 else_clau"
  "se:\00\e2\94\9c\e2\94\80\e2\94\80 ensure_clause:\00\e2\94\9c\e2\94\80\e2"
  "\94\80 new_name:\00\e2\94\9c\e2\94\80\e2\94\80 write_name:\00\e2\94\9c"
  "\e2\94\80\e2\94\80 old_name:\00\e2\94\9c\e2\94\80\e2\94\80 read_name:\00"
  "\e2\94\9c\e2\94\80\e2\94\80 name:\00\e2\94\94\e2\94\80\e2\94\80 name:\00"
  "\e2\94\9c\e2\94\80\e2\94\80 variable:\00\e2\94\94\e2\94\80\e2\94\80 va"
  "riable:\00\e2\94\9c\e2\94\80\e2\94\80 reference:\00\e2\94\9c\e2\94\80\e2"
  "\94\80 child:\00\e2\94\94\e2\94\80\e2\94\80 unescaped:\00\e2\94\9c\e2\94"
  "\80\e2\94\80 content_loc:\00\e2\94\9c\e2\94\80\e2\94\80 call_operator_"
  "loc:\00\e2\94\9c\e2\94\80\e2\94\80 inheritance_operator_loc:\00\e2\94\9c"
  "\e2\94\80\e2\94\80 operator_loc:\00\e2\94\94\e2\94\80\e2\94\80 operato"
  "r_loc:\00\e2\94\94\e2\94\80\e2\94\80 delimiter_loc:\00\e2\94\9c\e2\94\80"
  "\e2\94\80 in_loc:\00\e2\94\9c\e2\94\80\e2\94\80 rparen_loc:\00\e2\94\94"
  "\e2\94\80\e2\94\80 rparen_loc:\00\e2\94\9c\e2\94\80\e2\94\80 lparen_lo"
  "c:\00\e2\94\94\e2\94\80\e2\94\80 then_loc:\00\e2\94\9c\e2\94\80\e2\94\80"
  " equal_loc:\00\e2\94\9c\e2\94\80\e2\94\80 closing_loc:\00\e2\94\94\e2\94"
  "\80\e2\94\80 closing_loc:\00\e2\94\9c\e2\94\80\e2\94\80 opening_loc:\00"
  "\e2\94\9c\e2\94\80\e2\94\80 value_loc:\00\e2\94\9c\e2\94\80\e2\94\80 n"
  "ame_loc:\00\e2\94\94\e2\94\80\e2\94\80 name_loc:\00\e2\94\9c\e2\94\80\e2"
  "\94\80 message_loc:\00\e2\94\94\e2\94\80\e2\94\80 message_loc:\00\e2\94"
  "\9c\e2\94\80\e2\94\80 class_keyword_loc:\00\e2\94\9c\e2\94\80\e2\94\80"
  " for_keyword_loc:\00\e2\94\9c\e2\94\80\e2\94\80 do_keyword_loc:\00\e2\94"
  "\9c\e2\94\80\e2\94\80 begin_keyword_loc:\00\e2\94\9c\e2\94\80\e2\94\80"
  " in_keyword_loc:\00\e2\94\9c\e2\94\80\e2\94\80 then_keyword_loc:\00\e2"
  "\94\9c\e2\94\80\e2\94\80 if_keyword_loc:\00\e2\94\9c\e2\94\80\e2\94\80"
  " def_keyword_loc:\00\e2\94\9c\e2\94\80\e2\94\80 else_keyword_loc:\00\e2"
  "\94\9c\e2\94\80\e2\94\80 case_keyword_loc:\00\e2\94\9c\e2\94\80\e2\94\80"
  " ensure_keyword_loc:\00\e2\94\9c\e2\94\80\e2\94\80 module_keyword_loc:"
  "\00\e2\94\9c\e2\94\80\e2\94\80 end_keyword_loc:\00\e2\94\94\e2\94\80\e2"
  "\94\80 end_keyword_loc:\00\e2\94\9c\e2\94\80\e2\94\80 keyword_loc:\00\e2"
  "\94\94\e2\94\80\e2\94\80 keyword_loc:\00\e2\94\94\e2\94\80\e2\94\80 nu"
  "meric:\00CP869\00IBM869\00CP949\00ISO8859-9\00ISO-8859-9\00 utf_8\00GB"
  "1988\00CP878\00ANSI_X3.4-1968\00CP1258\00Windows-1258\00Big5-HKSCS:200"
  "8\00CESU-8\00UTF-8\00ISO8859-8\00ISO-8859-8\00CP857\00IBM857\00CP1257\00"
  "Windows-1257\00CP737\00IBM737\00CP437\00IBM437\00ISO8859-7\00ISO-8859-"
  "7\00CP866\00IBM866\00CP1256\00Windows-1256\00646\00CP936\00ISO8859-16\00"
  "ISO-8859-16\00ISO8859-6\00ISO-8859-6\00Big5\00CP775\00IBM775\00CP865\00"
  "IBM865\00CP855\00IBM855\00CP1255\00Windows-1255\00GB12345\00ISO8859-15"
  "\00ISO-8859-15\00ISO8859-5\00ISO-8859-5\00CP874\00Windows-874\00CP864\00"
  "IBM864\00CP1254\00Windows-1254\00ISO8859-14\00ISO-8859-14\00EUC-JIS-20"
  "04\00ISO8859-4\00ISO-8859-4\00CP863\00IBM863\00CP1253\00Windows-1253\00"
  "EUC-JISX0213\00ISO8859-13\00ISO-8859-13\00ISO8859-3\00ISO-8859-3\00CP8"
  "62\00IBM862\00CP852\00IBM852\00CP1252\00Windows-1252\00pm_ptrdifft_to_"
  "u32\00pm_sizet_to_u32\00CP932\00CP51932\00GB2312\00ISO8859-2\00ISO-885"
  "9-2\00CP861\00IBM861\00CP951\00CP1251\00Windows-1251\00ISO8859-11\00IS"
  "O-8859-11\00CP65001\00ISO8859-1\00ISO-8859-1\00n >= 1\00CP860\00IBM860"
  "\00CP950\00CP850\00IBM850\00CP1250\00Windows-1250\00GB18030\00CP720\00"
  "IBM720\00TIS-620\00ISO8859-10\00ISO-8859-10\000.19.0\003.3.0\00length "
  ">= 0\00(label.end - label.start) >= 0\00error_list->size != 0\00...\00"
  "is_power_of_two(pool->capacity)\00(%lu,%lu)-(%lu,%lu)\00(null)\00diff "
  "> 0 && ((unsigned long) diff < SIZE_MAX)\00body == NULL || PM_NODE_TYP"
  "E_P(body, PM_STATEMENTS_NODE)\00statements == NULL || PM_NODE_TYPE_P(s"
  "tatements, PM_STATEMENTS_NODE)\00PM_NODE_TYPE_P(condition, PM_WHEN_NOD"
  "E)\00PM_NODE_TYPE_P(target, PM_LOCAL_VARIABLE_READ_NODE) || PM_NODE_TY"
  "PE_P(target, PM_CALL_NODE)\00arguments->block == NULL || PM_NODE_TYPE_"
  "P(arguments->block, PM_BLOCK_NODE)\00PM_NODE_TYPE_P(node, PM_HASH_NODE"
  ") || PM_NODE_TYPE_P(node, PM_KEYWORD_HASH_NODE)\00pool->size < ((uint3"
  "2_t) (1 << 30))\00expected `then` or `;` or '\n'\00unexpected `end`, e"
  "xpecting ';' or '\n'\00*cursor == '\n'\00false && "unreachable"\00\"\00"
  "false && "Cannot serialize mapped strings."\00 = "\00!\00\e2\94\9c\e2\94"
  "\80\e2\94\80 \00\e2\94\94\e2\94\80\e2\94\80 \00%5zu | \00%4zu | \00%3z"
  "u | \00%2zu | \00%1zu | \00      | \00> \00@ RetryNode (location: \00@"
  " ImaginaryNode (location: \00@ ArrayNode (location: \00@ NextNode (loc"
  "ation: \00@ ImplicitRestNode (location: \00@ BlockArgumentNode (locati"
  "on: \00@ ImplicitNode (location: \00@ IndexTargetNode (location: \00@ "
  "ConstantTargetNode (location: \00@ CallTargetNode (location: \00@ Mult"
  "iTargetNode (location: \00@ ConstantPathTargetNode (location: \00@ Cla"
  "ssVariableTargetNode (location: \00@ LocalVariableTargetNode (location"
  ": \00@ GlobalVariableTargetNode (location: \00@ InstanceVariableTarget"
  "Node (location: \00@ FloatNode (location: \00@ AssocSplatNode (locatio"
  "n: \00@ SplatNode (location: \00@ ForwardingArgumentsNode (location: \00"
  "@ ArgumentsNode (location: \00@ EmbeddedStatementsNode (location: \00@"
  " StatementsNode (location: \00@ UnlessNode (location: \00@ SingletonCl"
  "assNode (location: \00@ ClassNode (location: \00@ BlockParametersNode "
  "(location: \00@ NumberedParametersNode (location: \00@ ParametersNode "
  "(location: \00@ ParenthesesNode (location: \00@ ForNode (location: \00"
  "@ KeywordRestParameterNode (location: \00@ RestParameterNode (location"
  ": \00@ NoKeywordsParameterNode (location: \00@ OptionalParameterNode ("
  "location: \00@ BlockParameterNode (location: \00@ ForwardingParameterN"
  "ode (location: \00@ OptionalKeywordParameterNode (location: \00@ Requi"
  "redKeywordParameterNode (location: \00@ RequiredParameterNode (locatio"
  "n: \00@ ForwardingSuperNode (location: \00@ SuperNode (location: \00@ "
  "RescueModifierNode (location: \00@ IntegerNode (location: \00@ OrNode "
  "(location: \00@ FlipFlopNode (location: \00@ RedoNode (location: \00@ "
  "ReturnNode (location: \00@ ArrayPatternNode (location: \00@ Alternatio"
  "nPatternNode (location: \00@ HashPatternNode (location: \00@ CapturePa"
  "tternNode (location: \00@ FindPatternNode (location: \00@ PostExecutio"
  "nNode (location: \00@ PreExecutionNode (location: \00@ InterpolatedReg"
  "ularExpressionNode (location: \00@ RegularExpressionNode (location: \00"
  "@ PinnedExpressionNode (location: \00@ BeginNode (location: \00@ WhenN"
  "ode (location: \00@ InNode (location: \00@ ProgramNode (location: \00@"
  " InterpolatedSymbolNode (location: \00@ SymbolNode (location: \00@ Cal"
  "lNode (location: \00@ UntilNode (location: \00@ NilNode (location: \00"
  "@ RationalNode (location: \00@ BlockNode (location: \00@ BreakNode (lo"
  "cation: \00@ ConstantPathNode (location: \00@ KeywordHashNode (locatio"
  "n: \00@ HashNode (location: \00@ CaseMatchNode (location: \00@ Missing"
  "Node (location: \00@ InterpolatedStringNode (location: \00@ Interpolat"
  "edXStringNode (location: \00@ XStringNode (location: \00@ StringNode ("
  "location: \00@ SourceEncodingNode (location: \00@ SelfNode (location: "
  "\00@ UndefNode (location: \00@ DefNode (location: \00@ IfNode (locatio"
  "n: \00@ TrueNode (location: \00@ RescueNode (location: \00@ ConstantWr"
  "iteNode (location: \00@ IndexOperatorWriteNode (location: \00@ Constan"
  "tOperatorWriteNode (location: \00@ CallOperatorWriteNode (location: \00"
  "@ ConstantPathOperatorWriteNode (location: \00@ ClassVariableOperatorW"
  "riteNode (location: \00@ LocalVariableOperatorWriteNode (location: \00"
  "@ GlobalVariableOperatorWriteNode (location: \00@ InstanceVariableOper"
  "atorWriteNode (location: \00@ IndexOrWriteNode (location: \00@ Constan"
  "tOrWriteNode (location: \00@ CallOrWriteNode (location: \00@ ConstantP"
  "athOrWriteNode (location: \00@ ClassVariableOrWriteNode (location: \00"
  "@ LocalVariableOrWriteNode (location: \00@ GlobalVariableOrWriteNode ("
  "location: \00@ InstanceVariableOrWriteNode (location: \00@ MultiWriteN"
  "ode (location: \00@ ConstantPathWriteNode (location: \00@ MatchWriteNo"
  "de (location: \00@ ClassVariableWriteNode (location: \00@ LocalVariabl"
  "eWriteNode (location: \00@ GlobalVariableWriteNode (location: \00@ Ins"
  "tanceVariableWriteNode (location: \00@ IndexAndWriteNode (location: \00"
  "@ ConstantAndWriteNode (location: \00@ CallAndWriteNode (location: \00"
  "@ ConstantPathAndWriteNode (location: \00@ ClassVariableAndWriteNode ("
  "location: \00@ LocalVariableAndWriteNode (location: \00@ GlobalVariabl"
  "eAndWriteNode (location: \00@ InstanceVariableAndWriteNode (location: "
  "\00@ MatchPredicateNode (location: \00@ FalseNode (location: \00@ Else"
  "Node (location: \00@ CaseNode (location: \00@ EnsureNode (location: \00"
  "@ InterpolatedMatchLastLineNode (location: \00@ MatchLastLineNode (loc"
  "ation: \00@ SourceLineNode (location: \00@ ModuleNode (location: \00@ "
  "WhileNode (location: \00@ SourceFileNode (location: \00@ BlockLocalVar"
  "iableNode (location: \00@ AliasGlobalVariableNode (location: \00@ Pinn"
  "edVariableNode (location: \00@ EmbeddedVariableNode (location: \00@ Ra"
  "ngeNode (location: \00@ AliasMethodNode (location: \00@ AndNode (locat"
  "ion: \00@ YieldNode (location: \00@ MatchRequiredNode (location: \00@ "
  "DefinedNode (location: \00@ ConstantReadNode (location: \00@ ClassVari"
  "ableReadNode (location: \00@ LocalVariableReadNode (location: \00@ Glo"
  "balVariableReadNode (location: \00@ InstanceVariableReadNode (location"
  ": \00@ BackReferenceReadNode (location: \00@ NumberedReferenceReadNode"
  " (location: \00@ AssocNode (location: \00@ LambdaNode (location: \00, "
  "\00\e2\94\82   \00    \00 \e2\88\85\0a\00  ~~~~~~~~\0a\00  ~~~~~~~\0a\00"
  "  ~~~~~~\0a\00  ~~~~~\0a\00Failed to allocate %zu bytes\0a\00\1b[38;5;"
  "102m  ~~~~~~~~\1b[0m\0a\00\1b[38;5;102m  ~~~~~~~\1b[0m\0a\00\1b[38;5;1"
  "02m  ~~~~~~\1b[0m\0a\00\1b[38;5;102m  ~~~~~\1b[0m\0a\00 %d\0a\00]\0a\00"
  "Support for formatting long double values is currently disabled.\0aTo "
  "enable it, add -lc-printscan-long-double to the link command.\0a\00 (l"
  "ength: %lu)\0a\00Assertion failed: %s (%s: %s: %d)\0a\00"\0a\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00"
  "\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\03\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\03\00"
  "\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\00\07\07\07\07\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\00\03\03\03\03\03\03\03\03\00\01\00\00"
  "\c1\02\00\00\c6\02\00\00\d1\02\00\00\e0\02\00\00\e4\02\00\00\ec\02\00\00"
  "\ec\02\00\00\ee\02\00\00\ee\02\00\00E\03\00\00E\03\00\00p\03\00\00t\03"
  "\00\00v\03\00\00w\03\00\00z\03\00\00}\03\00\00\7f\03\00\00\7f\03\00\00"
  "\86\03\00\00\86\03\00\00\88\03\00\00\8a\03\00\00\8c\03\00\00\8c\03\00\00"
  "\8e\03\00\00\a1\03\00\00\a3\03\00\00\f5\03\00\00\f7\03\00\00\81\04\00\00"
  "\8a\04\00\00/\05\00\001\05\00\00V\05\00\00Y\05\00\00Y\05\00\00`\05\00\00"
  "\88\05\00\00\b0\05\00\00\bd\05\00\00\bf\05\00\00\bf\05\00\00\c1\05\00\00"
  "\c2\05\00\00\c4\05\00\00\c5\05\00\00\c7\05\00\00\c7\05\00\00\d0\05\00\00"
  "\ea\05\00\00\ef\05\00\00\f2\05\00\00\10\06\00\00\1a\06\00\00 \06\00\00"
  "W\06\00\00Y\06\00\00_\06\00\00n\06\00\00\d3\06\00\00\d5\06\00\00\dc\06"
  "\00\00\e1\06\00\00\e8\06\00\00\ed\06\00\00\ef\06\00\00\fa\06\00\00\fc\06"
  "\00\00\ff\06\00\00\ff\06\00\00\10\07\00\00?\07\00\00M\07\00\00\b1\07\00"
  "\00\ca\07\00\00\ea\07\00\00\f4\07\00\00\f5\07\00\00\fa\07\00\00\fa\07\00"
  "\00\00\08\00\00\17\08\00\00\1a\08\00\00,\08\00\00@\08\00\00X\08\00\00`"
  "\08\00\00j\08\00\00p\08\00\00\87\08\00\00\89\08\00\00\8e\08\00\00\a0\08"
  "\00\00\c9\08\00\00\d4\08\00\00\df\08\00\00\e3\08\00\00\e9\08\00\00\f0\08"
  "\00\00;\09\00\00=\09\00\00L\09\00\00N\09\00\00P\09\00\00U\09\00\00c\09"
  "\00\00q\09\00\00\83\09\00\00\85\09\00\00\8c\09\00\00\8f\09\00\00\90\09"
  "\00\00\93\09\00\00\a8\09\00\00\aa\09\00\00\b0\09\00\00\b2\09\00\00\b2\09"
  "\00\00\b6\09\00\00\b9\09\00\00\bd\09\00\00\c4\09\00\00\c7\09\00\00\c8\09"
  "\00\00\cb\09\00\00\cc\09\00\00\ce\09\00\00\ce\09\00\00\d7\09\00\00\d7\09"
  "\00\00\dc\09\00\00\dd\09\00\00\df\09\00\00\e3\09\00\00\f0\09\00\00\f1\09"
  "\00\00\fc\09\00\00\fc\09\00\00\01\0a\00\00\03\0a\00\00\05\0a\00\00\0a\0a"
  "\00\00\0f\0a\00\00\10\0a\00\00\13\0a\00\00(\0a\00\00*\0a\00\000\0a\00\00"
  "2\0a\00\003\0a\00\005\0a\00\006\0a\00\008\0a\00\009\0a\00\00>\0a\00\00"
  "B\0a\00\00G\0a\00\00H\0a\00\00K\0a\00\00L\0a\00\00Q\0a\00\00Q\0a\00\00"
  "Y\0a\00\00\\0a\00\00^\0a\00\00^\0a\00\00p\0a\00\00u\0a\00\00\81\0a\00\00"
  "\83\0a\00\00\85\0a\00\00\8d\0a\00\00\8f\0a\00\00\91\0a\00\00\93\0a\00\00"
  "\a8\0a\00\00\aa\0a\00\00\b0\0a\00\00\b2\0a\00\00\b3\0a\00\00\b5\0a\00\00"
  "\b9\0a\00\00\bd\0a\00\00\c5\0a\00\00\c7\0a\00\00\c9\0a\00\00\cb\0a\00\00"
  "\cc\0a\00\00\d0\0a\00\00\d0\0a\00\00\e0\0a\00\00\e3\0a\00\00\f9\0a\00\00"
  "\fc\0a\00\00\01\0b\00\00\03\0b\00\00\05\0b\00\00\0c\0b\00\00\0f\0b\00\00"
  "\10\0b\00\00\13\0b\00\00(\0b\00\00*\0b\00\000\0b\00\002\0b\00\003\0b\00"
  "\005\0b\00\009\0b\00\00=\0b\00\00D\0b\00\00G\0b\00\00H\0b\00\00K\0b\00"
  "\00L\0b\00\00V\0b\00\00W\0b\00\00\\0b\00\00]\0b\00\00_\0b\00\00c\0b\00"
  "\00q\0b\00\00q\0b\00\00\82\0b\00\00\83\0b\00\00\85\0b\00\00\8a\0b\00\00"
  "\8e\0b\00\00\90\0b\00\00\92\0b\00\00\95\0b\00\00\99\0b\00\00\9a\0b\00\00"
  "\9c\0b\00\00\9c\0b\00\00\9e\0b\00\00\9f\0b\00\00\a3\0b\00\00\a4\0b\00\00"
  "\a8\0b\00\00\aa\0b\00\00\ae\0b\00\00\b9\0b\00\00\be\0b\00\00\c2\0b\00\00"
  "\c6\0b\00\00\c8\0b\00\00\ca\0b\00\00\cc\0b\00\00\d0\0b\00\00\d0\0b\00\00"
  "\d7\0b\00\00\d7\0b\00\00\00\0c\00\00\0c\0c\00\00\0e\0c\00\00\10\0c\00\00"
  "\12\0c\00\00(\0c\00\00*\0c\00\009\0c\00\00=\0c\00\00D\0c\00\00F\0c\00\00"
  "H\0c\00\00J\0c\00\00L\0c\00\00U\0c\00\00V\0c\00\00X\0c\00\00Z\0c\00\00"
  "]\0c\00\00]\0c\00\00`\0c\00\00c\0c\00\00\80\0c\00\00\83\0c\00\00\85\0c"
  "\00\00\8c\0c\00\00\8e\0c\00\00\90\0c\00\00\92\0c\00\00\a8\0c\00\00\aa\0c"
  "\00\00\b3\0c\00\00\b5\0c\00\00\b9\0c\00\00\bd\0c\00\00\c4\0c\00\00\c6\0c"
  "\00\00\c8\0c\00\00\ca\0c\00\00\cc\0c\00\00\d5\0c\00\00\d6\0c\00\00\dd\0c"
  "\00\00\de\0c\00\00\e0\0c\00\00\e3\0c\00\00\f1\0c\00\00\f3\0c\00\00\00\0d"
  "\00\00\0c\0d\00\00\0e\0d\00\00\10\0d\00\00\12\0d\00\00:\0d\00\00=\0d\00"
  "\00D\0d\00\00F\0d\00\00H\0d\00\00J\0d\00\00L\0d\00\00N\0d\00\00N\0d\00"
  "\00T\0d\00\00W\0d\00\00_\0d\00\00c\0d\00\00z\0d\00\00\7f\0d\00\00\81\0d"
  "\00\00\83\0d\00\00\85\0d\00\00\96\0d\00\00\9a\0d\00\00\b1\0d\00\00\b3\0d"
  "\00\00\bb\0d\00\00\bd\0d\00\00\bd\0d\00\00\c0\0d\00\00\c6\0d\00\00\cf\0d"
  "\00\00\d4\0d\00\00\d6\0d\00\00\d6\0d\00\00\d8\0d\00\00\df\0d\00\00\f2\0d"
  "\00\00\f3\0d\00\00\01\0e\00\00:\0e\00\00@\0e\00\00F\0e\00\00M\0e\00\00"
  "M\0e\00\00\81\0e\00\00\82\0e\00\00\84\0e\00\00\84\0e\00\00\86\0e\00\00"
  "\8a\0e\00\00\8c\0e\00\00\a3\0e\00\00\a5\0e\00\00\a5\0e\00\00\a7\0e\00\00"
  "\b9\0e\00\00\bb\0e\00\00\bd\0e\00\00\c0\0e\00\00\c4\0e\00\00\c6\0e\00\00"
  "\c6\0e\00\00\cd\0e\00\00\cd\0e\00\00\dc\0e\00\00\df\0e\00\00\00\0f\00\00"
  "\00\0f\00\00@\0f\00\00G\0f\00\00I\0f\00\00l\0f\00\00q\0f\00\00\83\0f\00"
  "\00\88\0f\00\00\97\0f\00\00\99\0f\00\00\bc\0f\00\00\00\10\00\006\10\00"
  "\008\10\00\008\10\00\00;\10\00\00?\10\00\00P\10\00\00\8f\10\00\00\9a\10"
  "\00\00\9d\10\00\00\a0\10\00\00\c5\10\00\00\c7\10\00\00\c7\10\00\00\cd\10"
  "\00\00\cd\10\00\00\d0\10\00\00\fa\10\00\00\fc\10\00\00H\12\00\00J\12\00"
  "\00M\12\00\00P\12\00\00V\12\00\00X\12\00\00X\12\00\00Z\12\00\00]\12\00"
  "\00`\12\00\00\88\12\00\00\8a\12\00\00\8d\12\00\00\90\12\00\00\b0\12\00"
  "\00\b2\12\00\00\b5\12\00\00\b8\12\00\00\be\12\00\00\c0\12\00\00\c0\12\00"
  "\00\c2\12\00\00\c5\12\00\00\c8\12\00\00\d6\12\00\00\d8\12\00\00\10\13\00"
  "\00\12\13\00\00\15\13\00\00\18\13\00\00Z\13\00\00\80\13\00\00\8f\13\00"
  "\00\a0\13\00\00\f5\13\00\00\f8\13\00\00\fd\13\00\00\01\14\00\00l\16\00"
  "\00o\16\00\00\7f\16\00\00\81\16\00\00\9a\16\00\00\a0\16\00\00\ea\16\00"
  "\00\ee\16\00\00\f8\16\00\00\00\17\00\00\13\17\00\00\1f\17\00\003\17\00"
  "\00@\17\00\00S\17\00\00`\17\00\00l\17\00\00n\17\00\00p\17\00\00r\17\00"
  "\00s\17\00\00\80\17\00\00\b3\17\00\00\b6\17\00\00\c8\17\00\00\d7\17\00"
  "\00\d7\17\00\00\dc\17\00\00\dc\17\00\00 \18\00\00x\18\00\00\80\18\00\00"
  "\aa\18\00\00\b0\18\00\00\f5\18\00\00\00\19\00\00\1e\19\00\00 \19\00\00"
  "+\19\00\000\19\00\008\19\00\00P\19\00\00m\19\00\00p\19\00\00t\19\00\00"
  "\80\19\00\00\ab\19\00\00\b0\19\00\00\c9\19\00\00\00\1a\00\00\1b\1a\00\00"
  " \1a\00\00^\1a\00\00a\1a\00\00t\1a\00\00\a7\1a\00\00\a7\1a\00\00\bf\1a"
  "\00\00\c0\1a\00\00\cc\1a\00\00\ce\1a\00\00\00\1b\00\003\1b\00\005\1b\00"
  "\00C\1b\00\00E\1b\00\00L\1b\00\00\80\1b\00\00\a9\1b\00\00\ac\1b\00\00\af"
  "\1b\00\00\ba\1b\00\00\e5\1b\00\00\e7\1b\00\00\f1\1b\00\00\00\1c\00\006"
  "\1c\00\00M\1c\00\00O\1c\00\00Z\1c\00\00}\1c\00\00\80\1c\00\00\88\1c\00"
  "\00\90\1c\00\00\ba\1c\00\00\bd\1c\00\00\bf\1c\00\00\e9\1c\00\00\ec\1c\00"
  "\00\ee\1c\00\00\f3\1c\00\00\f5\1c\00\00\f6\1c\00\00\fa\1c\00\00\fa\1c\00"
  "\00\00\1d\00\00\bf\1d\00\00\e7\1d\00\00\f4\1d\00\00\00\1e\00\00\15\1f\00"
  "\00\18\1f\00\00\1d\1f\00\00 \1f\00\00E\1f\00\00H\1f\00\00M\1f\00\00P\1f"
  "\00\00W\1f\00\00Y\1f\00\00Y\1f\00\00[\1f\00\00[\1f\00\00]\1f\00\00]\1f"
  "\00\00_\1f\00\00}\1f\00\00\80\1f\00\00\b4\1f\00\00\b6\1f\00\00\bc\1f\00"
  "\00\be\1f\00\00\be\1f\00\00\c2\1f\00\00\c4\1f\00\00\c6\1f\00\00\cc\1f\00"
  "\00\d0\1f\00\00\d3\1f\00\00\d6\1f\00\00\db\1f\00\00\e0\1f\00\00\ec\1f\00"
  "\00\f2\1f\00\00\f4\1f\00\00\f6\1f\00\00\fc\1f\00\00q \00\00q \00\00\7f"
  " \00\00\7f \00\00\90 \00\00\9c \00\00\02!\00\00\02!\00\00\07!\00\00\07"
  "!\00\00\0a!\00\00\13!\00\00\15!\00\00\15!\00\00\19!\00\00\1d!\00\00$!\00"
  "\00$!\00\00&!\00\00&!\00\00(!\00\00(!\00\00*!\00\00-!\00\00/!\00\009!\00"
  "\00<!\00\00?!\00\00E!\00\00I!\00\00N!\00\00N!\00\00`!\00\00\88!\00\00\b6"
  "$\00\00\e9$\00\00\00,\00\00\e4,\00\00\eb,\00\00\ee,\00\00\f2,\00\00\f3"
  ",\00\00\00-\00\00%-\00\00'-\00\00'-\00\00--\00\00--\00\000-\00\00g-\00"
  "\00o-\00\00o-\00\00\80-\00\00\96-\00\00\a0-\00\00\a6-\00\00\a8-\00\00\ae"
  "-\00\00\b0-\00\00\b6-\00\00\b8-\00\00\be-\00\00\c0-\00\00\c6-\00\00\c8"
  "-\00\00\ce-\00\00\d0-\00\00\d6-\00\00\d8-\00\00\de-\00\00\e0-\00\00\ff"
  "-\00\00/.\00\00/.\00\00\050\00\00\070\00\00!0\00\00)0\00\0010\00\0050\00"
  "\0080\00\00<0\00\00A0\00\00\960\00\00\9d0\00\00\9f0\00\00\a10\00\00\fa"
  "0\00\00\fc0\00\00\ff0\00\00\051\00\00/1\00\0011\00\00\8e1\00\00\a01\00"
  "\00\bf1\00\00\f01\00\00\ff1\00\00\004\00\00\bfM\00\00\00N\00\00\8c\a4\00"
  "\00\d0\a4\00\00\fd\a4\00\00\00\a5\00\00\0c\a6\00\00\10\a6\00\00\1f\a6\00"
  "\00*\a6\00\00+\a6\00\00@\a6\00\00n\a6\00\00t\a6\00\00{\a6\00\00\7f\a6\00"
  "\00\ef\a6\00\00\17\a7\00\00\1f\a7\00\00"\a7\00\00\88\a7\00\00\8b\a7\00"
  "\00\ca\a7\00\00\d0\a7\00\00\d1\a7\00\00\d3\a7\00\00\d3\a7\00\00\d5\a7\00"
  "\00\d9\a7\00\00\f2\a7\00\00\05\a8\00\00\07\a8\00\00'\a8\00\00@\a8\00\00"
  "s\a8\00\00\80\a8\00\00\c3\a8\00\00\c5\a8\00\00\c5\a8\00\00\f2\a8\00\00"
  "\f7\a8\00\00\fb\a8\00\00\fb\a8\00\00\fd\a8\00\00\ff\a8\00\00\0a\a9\00\00"
  "*\a9\00\000\a9\00\00R\a9\00\00`\a9\00\00|\a9\00\00\80\a9\00\00\b2\a9\00"
  "\00\b4\a9\00\00\bf\a9\00\00\cf\a9\00\00\cf\a9\00\00\e0\a9\00\00\ef\a9\00"
  "\00\fa\a9\00\00\fe\a9\00\00\00\aa\00\006\aa\00\00@\aa\00\00M\aa\00\00`"
  "\aa\00\00v\aa\00\00z\aa\00\00\be\aa\00\00\c0\aa\00\00\c0\aa\00\00\c2\aa"
  "\00\00\c2\aa\00\00\db\aa\00\00\dd\aa\00\00\e0\aa\00\00\ef\aa\00\00\f2\aa"
  "\00\00\f5\aa\00\00\01\ab\00\00\06\ab\00\00\09\ab\00\00\0e\ab\00\00\11\ab"
  "\00\00\16\ab\00\00 \ab\00\00&\ab\00\00(\ab\00\00.\ab\00\000\ab\00\00Z\ab"
  "\00\00\\ab\00\00i\ab\00\00p\ab\00\00\ea\ab\00\00\00\ac\00\00\a3\d7\00\00"
  "\b0\d7\00\00\c6\d7\00\00\cb\d7\00\00\fb\d7\00\00\00\f9\00\00m\fa\00\00"
  "p\fa\00\00\d9\fa\00\00\00\fb\00\00\06\fb\00\00\13\fb\00\00\17\fb\00\00"
  "\1d\fb\00\00(\fb\00\00*\fb\00\006\fb\00\008\fb\00\00<\fb\00\00>\fb\00\00"
  ">\fb\00\00@\fb\00\00A\fb\00\00C\fb\00\00D\fb\00\00F\fb\00\00\b1\fb\00\00"
  "\d3\fb\00\00=\fd\00\00P\fd\00\00\8f\fd\00\00\92\fd\00\00\c7\fd\00\00\f0"
  "\fd\00\00\fb\fd\00\00p\fe\00\00t\fe\00\00v\fe\00\00\fc\fe\00\00!\ff\00"
  "\00:\ff\00\00A\ff\00\00Z\ff\00\00f\ff\00\00\be\ff\00\00\c2\ff\00\00\c7"
  "\ff\00\00\ca\ff\00\00\cf\ff\00\00\d2\ff\00\00\d7\ff\00\00\da\ff\00\00\dc"
  "\ff\00\00\00\00\01\00\0b\00\01\00\0d\00\01\00&\00\01\00(\00\01\00:\00\01"
  "\00<\00\01\00=\00\01\00?\00\01\00M\00\01\00P\00\01\00]\00\01\00\80\00\01"
  "\00\fa\00\01\00@\01\01\00t\01\01\00\80\02\01\00\9c\02\01\00\a0\02\01\00"
  "\d0\02\01\00\00\03\01\00\1f\03\01\00-\03\01\00J\03\01\00P\03\01\00z\03"
  "\01\00\80\03\01\00\9d\03\01\00\a0\03\01\00\c3\03\01\00\c8\03\01\00\cf\03"
  "\01\00\d1\03\01\00\d5\03\01\00\00\04\01\00\9d\04\01\00\b0\04\01\00\d3\04"
  "\01\00\d8\04\01\00\fb\04\01\00\00\05\01\00'\05\01\000\05\01\00c\05\01\00"
  "p\05\01\00z\05\01\00|\05\01\00\8a\05\01\00\8c\05\01\00\92\05\01\00\94\05"
  "\01\00\95\05\01\00\97\05\01\00\a1\05\01\00\a3\05\01\00\b1\05\01\00\b3\05"
  "\01\00\b9\05\01\00\bb\05\01\00\bc\05\01\00\00\06\01\006\07\01\00@\07\01"
  "\00U\07\01\00`\07\01\00g\07\01\00\80\07\01\00\85\07\01\00\87\07\01\00\b0"
  "\07\01\00\b2\07\01\00\ba\07\01\00\00\08\01\00\05\08\01\00\08\08\01\00\08"
  "\08\01\00\0a\08\01\005\08\01\007\08\01\008\08\01\00<\08\01\00<\08\01\00"
  "?\08\01\00U\08\01\00`\08\01\00v\08\01\00\80\08\01\00\9e\08\01\00\e0\08"
  "\01\00\f2\08\01\00\f4\08\01\00\f5\08\01\00\00\09\01\00\15\09\01\00 \09"
  "\01\009\09\01\00\80\09\01\00\b7\09\01\00\be\09\01\00\bf\09\01\00\00\0a"
  "\01\00\03\0a\01\00\05\0a\01\00\06\0a\01\00\0c\0a\01\00\13\0a\01\00\15\0a"
  "\01\00\17\0a\01\00\19\0a\01\005\0a\01\00`\0a\01\00|\0a\01\00\80\0a\01\00"
  "\9c\0a\01\00\c0\0a\01\00\c7\0a\01\00\c9\0a\01\00\e4\0a\01\00\00\0b\01\00"
  "5\0b\01\00@\0b\01\00U\0b\01\00`\0b\01\00r\0b\01\00\80\0b\01\00\91\0b\01"
  "\00\00\0c\01\00H\0c\01\00\80\0c\01\00\b2\0c\01\00\c0\0c\01\00\f2\0c\01"
  "\00\00\0d\01\00'\0d\01\00\80\0e\01\00\a9\0e\01\00\ab\0e\01\00\ac\0e\01"
  "\00\b0\0e\01\00\b1\0e\01\00\00\0f\01\00\1c\0f\01\00'\0f\01\00'\0f\01\00"
  "0\0f\01\00E\0f\01\00p\0f\01\00\81\0f\01\00\b0\0f\01\00\c4\0f\01\00\e0\0f"
  "\01\00\f6\0f\01\00\00\10\01\00E\10\01\00q\10\01\00u\10\01\00\80\10\01\00"
  "\b8\10\01\00\c2\10\01\00\c2\10\01\00\d0\10\01\00\e8\10\01\00\00\11\01\00"
  "2\11\01\00D\11\01\00G\11\01\00P\11\01\00r\11\01\00v\11\01\00v\11\01\00"
  "\80\11\01\00\bf\11\01\00\c1\11\01\00\c4\11\01\00\ce\11\01\00\cf\11\01\00"
  "\da\11\01\00\da\11\01\00\dc\11\01\00\dc\11\01\00\00\12\01\00\11\12\01\00"
  "\13\12\01\004\12\01\007\12\01\007\12\01\00>\12\01\00A\12\01\00\80\12\01"
  "\00\86\12\01\00\88\12\01\00\88\12\01\00\8a\12\01\00\8d\12\01\00\8f\12\01"
  "\00\9d\12\01\00\9f\12\01\00\a8\12\01\00\b0\12\01\00\e8\12\01\00\00\13\01"
  "\00\03\13\01\00\05\13\01\00\0c\13\01\00\0f\13\01\00\10\13\01\00\13\13\01"
  "\00(\13\01\00*\13\01\000\13\01\002\13\01\003\13\01\005\13\01\009\13\01"
  "\00=\13\01\00D\13\01\00G\13\01\00H\13\01\00K\13\01\00L\13\01\00P\13\01"
  "\00P\13\01\00W\13\01\00W\13\01\00]\13\01\00c\13\01\00\00\14\01\00A\14\01"
  "\00C\14\01\00E\14\01\00G\14\01\00J\14\01\00_\14\01\00a\14\01\00\80\14\01"
  "\00\c1\14\01\00\c4\14\01\00\c5\14\01\00\c7\14\01\00\c7\14\01\00\80\15\01"
  "\00\b5\15\01\00\b8\15\01\00\be\15\01\00\d8\15\01\00\dd\15\01\00\00\16\01"
  "\00>\16\01\00@\16\01\00@\16\01\00D\16\01\00D\16\01\00\80\16\01\00\b5\16"
  "\01\00\b8\16\01\00\b8\16\01\00\00\17\01\00\1a\17\01\00\1d\17\01\00*\17"
  "\01\00@\17\01\00F\17\01\00\00\18\01\008\18\01\00\a0\18\01\00\df\18\01\00"
  "\ff\18\01\00\06\19\01\00\09\19\01\00\09\19\01\00\0c\19\01\00\13\19\01\00"
  "\15\19\01\00\16\19\01\00\18\19\01\005\19\01\007\19\01\008\19\01\00;\19"
  "\01\00<\19\01\00?\19\01\00B\19\01\00\a0\19\01\00\a7\19\01\00\aa\19\01\00"
  "\d7\19\01\00\da\19\01\00\df\19\01\00\e1\19\01\00\e1\19\01\00\e3\19\01\00"
  "\e4\19\01\00\00\1a\01\002\1a\01\005\1a\01\00>\1a\01\00P\1a\01\00\97\1a"
  "\01\00\9d\1a\01\00\9d\1a\01\00\b0\1a\01\00\f8\1a\01\00\00\1c\01\00\08\1c"
  "\01\00\0a\1c\01\006\1c\01\008\1c\01\00>\1c\01\00@\1c\01\00@\1c\01\00r\1c"
  "\01\00\8f\1c\01\00\92\1c\01\00\a7\1c\01\00\a9\1c\01\00\b6\1c\01\00\00\1d"
  "\01\00\06\1d\01\00\08\1d\01\00\09\1d\01\00\0b\1d\01\006\1d\01\00:\1d\01"
  "\00:\1d\01\00<\1d\01\00=\1d\01\00?\1d\01\00A\1d\01\00C\1d\01\00C\1d\01"
  "\00F\1d\01\00G\1d\01\00`\1d\01\00e\1d\01\00g\1d\01\00h\1d\01\00j\1d\01"
  "\00\8e\1d\01\00\90\1d\01\00\91\1d\01\00\93\1d\01\00\96\1d\01\00\98\1d\01"
  "\00\98\1d\01\00\e0\1e\01\00\f6\1e\01\00\00\1f\01\00\10\1f\01\00\12\1f\01"
  "\00:\1f\01\00>\1f\01\00@\1f\01\00\b0\1f\01\00\b0\1f\01\00\00 \01\00\99"
  "#\01\00\00$\01\00n$\01\00\80$\01\00C%\01\00\90/\01\00\f0/\01\00\000\01"
  "\00/4\01\00A4\01\00F4\01\00\00D\01\00FF\01\00\00h\01\008j\01\00@j\01\00"
  "^j\01\00pj\01\00\bej\01\00\d0j\01\00\edj\01\00\00k\01\00/k\01\00@k\01\00"
  "Ck\01\00ck\01\00wk\01\00}k\01\00\8fk\01\00@n\01\00\7fn\01\00\00o\01\00"
  "Jo\01\00Oo\01\00\87o\01\00\8fo\01\00\9fo\01\00\e0o\01\00\e1o\01\00\e3o"
  "\01\00\e3o\01\00\f0o\01\00\f1o\01\00\00p\01\00\f7\87\01\00\00\88\01\00"
  "\d5\8c\01\00\00\8d\01\00\08\8d\01\00\f0\af\01\00\f3\af\01\00\f5\af\01\00"
  "\fb\af\01\00\fd\af\01\00\fe\af\01\00\00\b0\01\00"\b1\01\002\b1\01\002\b1"
  "\01\00P\b1\01\00R\b1\01\00U\b1\01\00U\b1\01\00d\b1\01\00g\b1\01\00p\b1"
  "\01\00\fb\b2\01\00\00\bc\01\00j\bc\01\00p\bc\01\00|\bc\01\00\80\bc\01\00"
  "\88\bc\01\00\90\bc\01\00\99\bc\01\00\9e\bc\01\00\9e\bc\01\00\00\d4\01\00"
  "T\d4\01\00V\d4\01\00\9c\d4\01\00\9e\d4\01\00\9f\d4\01\00\a2\d4\01\00\a2"
  "\d4\01\00\a5\d4\01\00\a6\d4\01\00\a9\d4\01\00\ac\d4\01\00\ae\d4\01\00\b9"
  "\d4\01\00\bb\d4\01\00\bb\d4\01\00\bd\d4\01\00\c3\d4\01\00\c5\d4\01\00\05"
  "\d5\01\00\07\d5\01\00\0a\d5\01\00\0d\d5\01\00\14\d5\01\00\16\d5\01\00\1c"
  "\d5\01\00\1e\d5\01\009\d5\01\00;\d5\01\00>\d5\01\00@\d5\01\00D\d5\01\00"
  "F\d5\01\00F\d5\01\00J\d5\01\00P\d5\01\00R\d5\01\00\a5\d6\01\00\a8\d6\01"
  "\00\c0\d6\01\00\c2\d6\01\00\da\d6\01\00\dc\d6\01\00\fa\d6\01\00\fc\d6\01"
  "\00\14\d7\01\00\16\d7\01\004\d7\01\006\d7\01\00N\d7\01\00P\d7\01\00n\d7"
  "\01\00p\d7\01\00\88\d7\01\00\8a\d7\01\00\a8\d7\01\00\aa\d7\01\00\c2\d7"
  "\01\00\c4\d7\01\00\cb\d7\01\00\00\df\01\00\1e\df\01\00%\df\01\00*\df\01"
  "\00\00\e0\01\00\06\e0\01\00\08\e0\01\00\18\e0\01\00\1b\e0\01\00!\e0\01"
  "\00#\e0\01\00$\e0\01\00&\e0\01\00*\e0\01\000\e0\01\00m\e0\01\00\8f\e0\01"
  "\00\8f\e0\01\00\00\e1\01\00,\e1\01\007\e1\01\00=\e1\01\00N\e1\01\00N\e1"
  "\01\00\90\e2\01\00\ad\e2\01\00\c0\e2\01\00\eb\e2\01\00\d0\e4\01\00\eb\e4"
  "\01\00\e0\e7\01\00\e6\e7\01\00\e8\e7\01\00\eb\e7\01\00\ed\e7\01\00\ee\e7"
  "\01\00\f0\e7\01\00\fe\e7\01\00\00\e8\01\00\c4\e8\01\00\00\e9\01\00C\e9"
  "\01\00G\e9\01\00G\e9\01\00K\e9\01\00K\e9\01\00\00\ee\01\00\03\ee\01\00"
  "\05\ee\01\00\1f\ee\01\00!\ee\01\00"\ee\01\00$\ee\01\00$\ee\01\00'\ee\01"
  "\00'\ee\01\00)\ee\01\002\ee\01\004\ee\01\007\ee\01\009\ee\01\009\ee\01"
  "\00;\ee\01\00;\ee\01\00B\ee\01\00B\ee\01\00G\ee\01\00G\ee\01\00I\ee\01"
  "\00I\ee\01\00K\ee\01\00K\ee\01\00M\ee\01\00O\ee\01\00Q\ee\01\00R\ee\01"
  "\00T\ee\01\00T\ee\01\00W\ee\01\00W\ee\01\00Y\ee\01\00Y\ee\01\00[\ee\01"
  "\00[\ee\01\00]\ee\01\00]\ee\01\00_\ee\01\00_\ee\01\00a\ee\01\00b\ee\01"
  "\00d\ee\01\00d\ee\01\00g\ee\01\00j\ee\01\00l\ee\01\00r\ee\01\00t\ee\01"
  "\00w\ee\01\00y\ee\01\00|\ee\01\00~\ee\01\00~\ee\01\00\80\ee\01\00\89\ee"
  "\01\00\8b\ee\01\00\9b\ee\01\00\a1\ee\01\00\a3\ee\01\00\a5\ee\01\00\a9\ee"
  "\01\00\ab\ee\01\00\bb\ee\01\000\f1\01\00I\f1\01\00P\f1\01\00i\f1\01\00"
  "p\f1\01\00\89\f1\01\00\00\00\02\00\df\a6\02\00\00\a7\02\009\b7\02\00@\b7"
  "\02\00\1d\b8\02\00 \b8\02\00\a1\ce\02\00\b0\ce\02\00\e0\eb\02\00\00\f8"
  "\02\00\1d\fa\02\00\00\00\03\00J\13\03\00P\13\03\00\af#\03\00\00\00\00\00"
  "\00\00\00\00\00\01\00\00\c1\02\00\00\c6\02\00\00\d1\02\00\00\e0\02\00\00"
  "\e4\02\00\00\ec\02\00\00\ec\02\00\00\ee\02\00\00\ee\02\00\00E\03\00\00"
  "E\03\00\00p\03\00\00t\03\00\00v\03\00\00w\03\00\00z\03\00\00}\03\00\00"
  "\7f\03\00\00\7f\03\00\00\86\03\00\00\86\03\00\00\88\03\00\00\8a\03\00\00"
  "\8c\03\00\00\8c\03\00\00\8e\03\00\00\a1\03\00\00\a3\03\00\00\f5\03\00\00"
  "\f7\03\00\00\81\04\00\00\8a\04\00\00/\05\00\001\05\00\00V\05\00\00Y\05"
  "\00\00Y\05\00\00`\05\00\00\88\05\00\00\b0\05\00\00\bd\05\00\00\bf\05\00"
  "\00\bf\05\00\00\c1\05\00\00\c2\05\00\00\c4\05\00\00\c5\05\00\00\c7\05\00"
  "\00\c7\05\00\00\d0\05\00\00\ea\05\00\00\ef\05\00\00\f2\05\00\00\10\06\00"
  "\00\1a\06\00\00 \06\00\00W\06\00\00Y\06\00\00i\06\00\00n\06\00\00\d3\06"
  "\00\00\d5\06\00\00\dc\06\00\00\e1\06\00\00\e8\06\00\00\ed\06\00\00\fc\06"
  "\00\00\ff\06\00\00\ff\06\00\00\10\07\00\00?\07\00\00M\07\00\00\b1\07\00"
  "\00\c0\07\00\00\ea\07\00\00\f4\07\00\00\f5\07\00\00\fa\07\00\00\fa\07\00"
  "\00\00\08\00\00\17\08\00\00\1a\08\00\00,\08\00\00@\08\00\00X\08\00\00`"
  "\08\00\00j\08\00\00p\08\00\00\87\08\00\00\89\08\00\00\8e\08\00\00\a0\08"
  "\00\00\c9\08\00\00\d4\08\00\00\df\08\00\00\e3\08\00\00\e9\08\00\00\f0\08"
  "\00\00;\09\00\00=\09\00\00L\09\00\00N\09\00\00P\09\00\00U\09\00\00c\09"
  "\00\00f\09\00\00o\09\00\00q\09\00\00\83\09\00\00\85\09\00\00\8c\09\00\00"
  "\8f\09\00\00\90\09\00\00\93\09\00\00\a8\09\00\00\aa\09\00\00\b0\09\00\00"
  "\b2\09\00\00\b2\09\00\00\b6\09\00\00\b9\09\00\00\bd\09\00\00\c4\09\00\00"
  "\c7\09\00\00\c8\09\00\00\cb\09\00\00\cc\09\00\00\ce\09\00\00\ce\09\00\00"
  "\d7\09\00\00\d7\09\00\00\dc\09\00\00\dd\09\00\00\df\09\00\00\e3\09\00\00"
  "\e6\09\00\00\f1\09\00\00\fc\09\00\00\fc\09\00\00\01\0a\00\00\03\0a\00\00"
  "\05\0a\00\00\0a\0a\00\00\0f\0a\00\00\10\0a\00\00\13\0a\00\00(\0a\00\00"
  "*\0a\00\000\0a\00\002\0a\00\003\0a\00\005\0a\00\006\0a\00\008\0a\00\00"
  "9\0a\00\00>\0a\00\00B\0a\00\00G\0a\00\00H\0a\00\00K\0a\00\00L\0a\00\00"
  "Q\0a\00\00Q\0a\00\00Y\0a\00\00\\0a\00\00^\0a\00\00^\0a\00\00f\0a\00\00"
  "u\0a\00\00\81\0a\00\00\83\0a\00\00\85\0a\00\00\8d\0a\00\00\8f\0a\00\00"
  "\91\0a\00\00\93\0a\00\00\a8\0a\00\00\aa\0a\00\00\b0\0a\00\00\b2\0a\00\00"
  "\b3\0a\00\00\b5\0a\00\00\b9\0a\00\00\bd\0a\00\00\c5\0a\00\00\c7\0a\00\00"
  "\c9\0a\00\00\cb\0a\00\00\cc\0a\00\00\d0\0a\00\00\d0\0a\00\00\e0\0a\00\00"
  "\e3\0a\00\00\e6\0a\00\00\ef\0a\00\00\f9\0a\00\00\fc\0a\00\00\01\0b\00\00"
  "\03\0b\00\00\05\0b\00\00\0c\0b\00\00\0f\0b\00\00\10\0b\00\00\13\0b\00\00"
  "(\0b\00\00*\0b\00\000\0b\00\002\0b\00\003\0b\00\005\0b\00\009\0b\00\00"
  "=\0b\00\00D\0b\00\00G\0b\00\00H\0b\00\00K\0b\00\00L\0b\00\00V\0b\00\00"
  "W\0b\00\00\\0b\00\00]\0b\00\00_\0b\00\00c\0b\00\00f\0b\00\00o\0b\00\00"
  "q\0b\00\00q\0b\00\00\82\0b\00\00\83\0b\00\00\85\0b\00\00\8a\0b\00\00\8e"
  "\0b\00\00\90\0b\00\00\92\0b\00\00\95\0b\00\00\99\0b\00\00\9a\0b\00\00\9c"
  "\0b\00\00\9c\0b\00\00\9e\0b\00\00\9f\0b\00\00\a3\0b\00\00\a4\0b\00\00\a8"
  "\0b\00\00\aa\0b\00\00\ae\0b\00\00\b9\0b\00\00\be\0b\00\00\c2\0b\00\00\c6"
  "\0b\00\00\c8\0b\00\00\ca\0b\00\00\cc\0b\00\00\d0\0b\00\00\d0\0b\00\00\d7"
  "\0b\00\00\d7\0b\00\00\e6\0b\00\00\ef\0b\00\00\00\0c\00\00\0c\0c\00\00\0e"
  "\0c\00\00\10\0c\00\00\12\0c\00\00(\0c\00\00*\0c\00\009\0c\00\00=\0c\00"
  "\00D\0c\00\00F\0c\00\00H\0c\00\00J\0c\00\00L\0c\00\00U\0c\00\00V\0c\00"
  "\00X\0c\00\00Z\0c\00\00]\0c\00\00]\0c\00\00`\0c\00\00c\0c\00\00f\0c\00"
  "\00o\0c\00\00\80\0c\00\00\83\0c\00\00\85\0c\00\00\8c\0c\00\00\8e\0c\00"
  "\00\90\0c\00\00\92\0c\00\00\a8\0c\00\00\aa\0c\00\00\b3\0c\00\00\b5\0c\00"
  "\00\b9\0c\00\00\bd\0c\00\00\c4\0c\00\00\c6\0c\00\00\c8\0c\00\00\ca\0c\00"
  "\00\cc\0c\00\00\d5\0c\00\00\d6\0c\00\00\dd\0c\00\00\de\0c\00\00\e0\0c\00"
  "\00\e3\0c\00\00\e6\0c\00\00\ef\0c\00\00\f1\0c\00\00\f3\0c\00\00\00\0d\00"
  "\00\0c\0d\00\00\0e\0d\00\00\10\0d\00\00\12\0d\00\00:\0d\00\00=\0d\00\00"
  "D\0d\00\00F\0d\00\00H\0d\00\00J\0d\00\00L\0d\00\00N\0d\00\00N\0d\00\00"
  "T\0d\00\00W\0d\00\00_\0d\00\00c\0d\00\00f\0d\00\00o\0d\00\00z\0d\00\00"
  "\7f\0d\00\00\81\0d\00\00\83\0d\00\00\85\0d\00\00\96\0d\00\00\9a\0d\00\00"
  "\b1\0d\00\00\b3\0d\00\00\bb\0d\00\00\bd\0d\00\00\bd\0d\00\00\c0\0d\00\00"
  "\c6\0d\00\00\cf\0d\00\00\d4\0d\00\00\d6\0d\00\00\d6\0d\00\00\d8\0d\00\00"
  "\df\0d\00\00\e6\0d\00\00\ef\0d\00\00\f2\0d\00\00\f3\0d\00\00\01\0e\00\00"
  ":\0e\00\00@\0e\00\00F\0e\00\00M\0e\00\00M\0e\00\00P\0e\00\00Y\0e\00\00"
  "\81\0e\00\00\82\0e\00\00\84\0e\00\00\84\0e\00\00\86\0e\00\00\8a\0e\00\00"
  "\8c\0e\00\00\a3\0e\00\00\a5\0e\00\00\a5\0e\00\00\a7\0e\00\00\b9\0e\00\00"
  "\bb\0e\00\00\bd\0e\00\00\c0\0e\00\00\c4\0e\00\00\c6\0e\00\00\c6\0e\00\00"
  "\cd\0e\00\00\cd\0e\00\00\d0\0e\00\00\d9\0e\00\00\dc\0e\00\00\df\0e\00\00"
  "\00\0f\00\00\00\0f\00\00 \0f\00\00)\0f\00\00@\0f\00\00G\0f\00\00I\0f\00"
  "\00l\0f\00\00q\0f\00\00\83\0f\00\00\88\0f\00\00\97\0f\00\00\99\0f\00\00"
  "\bc\0f\00\00\00\10\00\006\10\00\008\10\00\008\10\00\00;\10\00\00I\10\00"
  "\00P\10\00\00\9d\10\00\00\a0\10\00\00\c5\10\00\00\c7\10\00\00\c7\10\00"
  "\00\cd\10\00\00\cd\10\00\00\d0\10\00\00\fa\10\00\00\fc\10\00\00H\12\00"
  "\00J\12\00\00M\12\00\00P\12\00\00V\12\00\00X\12\00\00X\12\00\00Z\12\00"
  "\00]\12\00\00`\12\00\00\88\12\00\00\8a\12\00\00\8d\12\00\00\90\12\00\00"
  "\b0\12\00\00\b2\12\00\00\b5\12\00\00\b8\12\00\00\be\12\00\00\c0\12\00\00"
  "\c0\12\00\00\c2\12\00\00\c5\12\00\00\c8\12\00\00\d6\12\00\00\d8\12\00\00"
  "\10\13\00\00\12\13\00\00\15\13\00\00\18\13\00\00Z\13\00\00\80\13\00\00"
  "\8f\13\00\00\a0\13\00\00\f5\13\00\00\f8\13\00\00\fd\13\00\00\01\14\00\00"
  "l\16\00\00o\16\00\00\7f\16\00\00\81\16\00\00\9a\16\00\00\a0\16\00\00\ea"
  "\16\00\00\ee\16\00\00\f8\16\00\00\00\17\00\00\13\17\00\00\1f\17\00\003"
  "\17\00\00@\17\00\00S\17\00\00`\17\00\00l\17\00\00n\17\00\00p\17\00\00r"
  "\17\00\00s\17\00\00\80\17\00\00\b3\17\00\00\b6\17\00\00\c8\17\00\00\d7"
  "\17\00\00\d7\17\00\00\dc\17\00\00\dc\17\00\00\e0\17\00\00\e9\17\00\00\10"
  "\18\00\00\19\18\00\00 \18\00\00x\18\00\00\80\18\00\00\aa\18\00\00\b0\18"
  "\00\00\f5\18\00\00\00\19\00\00\1e\19\00\00 \19\00\00+\19\00\000\19\00\00"
  "8\19\00\00F\19\00\00m\19\00\00p\19\00\00t\19\00\00\80\19\00\00\ab\19\00"
  "\00\b0\19\00\00\c9\19\00\00\d0\19\00\00\d9\19\00\00\00\1a\00\00\1b\1a\00"
  "\00 \1a\00\00^\1a\00\00a\1a\00\00t\1a\00\00\80\1a\00\00\89\1a\00\00\90"
  "\1a\00\00\99\1a\00\00\a7\1a\00\00\a7\1a\00\00\bf\1a\00\00\c0\1a\00\00\cc"
  "\1a\00\00\ce\1a\00\00\00\1b\00\003\1b\00\005\1b\00\00C\1b\00\00E\1b\00"
  "\00L\1b\00\00P\1b\00\00Y\1b\00\00\80\1b\00\00\a9\1b\00\00\ac\1b\00\00\e5"
  "\1b\00\00\e7\1b\00\00\f1\1b\00\00\00\1c\00\006\1c\00\00@\1c\00\00I\1c\00"
  "\00M\1c\00\00}\1c\00\00\80\1c\00\00\88\1c\00\00\90\1c\00\00\ba\1c\00\00"
  "\bd\1c\00\00\bf\1c\00\00\e9\1c\00\00\ec\1c\00\00\ee\1c\00\00\f3\1c\00\00"
  "\f5\1c\00\00\f6\1c\00\00\fa\1c\00\00\fa\1c\00\00\00\1d\00\00\bf\1d\00\00"
  "\e7\1d\00\00\f4\1d\00\00\00\1e\00\00\15\1f\00\00\18\1f\00\00\1d\1f\00\00"
  " \1f\00\00E\1f\00\00H\1f\00\00M\1f\00\00P\1f\00\00W\1f\00\00Y\1f\00\00"
  "Y\1f\00\00[\1f\00\00[\1f\00\00]\1f\00\00]\1f\00\00_\1f\00\00}\1f\00\00"
  "\80\1f\00\00\b4\1f\00\00\b6\1f\00\00\bc\1f\00\00\be\1f\00\00\be\1f\00\00"
  "\c2\1f\00\00\c4\1f\00\00\c6\1f\00\00\cc\1f\00\00\d0\1f\00\00\d3\1f\00\00"
  "\d6\1f\00\00\db\1f\00\00\e0\1f\00\00\ec\1f\00\00\f2\1f\00\00\f4\1f\00\00"
  "\f6\1f\00\00\fc\1f\00\00q \00\00q \00\00\7f \00\00\7f \00\00\90 \00\00"
  "\9c \00\00\02!\00\00\02!\00\00\07!\00\00\07!\00\00\0a!\00\00\13!\00\00"
  "\15!\00\00\15!\00\00\19!\00\00\1d!\00\00$!\00\00$!\00\00&!\00\00&!\00\00"
  "(!\00\00(!\00\00*!\00\00-!\00\00/!\00\009!\00\00<!\00\00?!\00\00E!\00\00"
  "I!\00\00N!\00\00N!\00\00`!\00\00\88!\00\00\b6$\00\00\e9$\00\00\00,\00\00"
  "\e4,\00\00\eb,\00\00\ee,\00\00\f2,\00\00\f3,\00\00\00-\00\00%-\00\00'-"
  "\00\00'-\00\00--\00\00--\00\000-\00\00g-\00\00o-\00\00o-\00\00\80-\00\00"
  "\96-\00\00\a0-\00\00\a6-\00\00\a8-\00\00\ae-\00\00\b0-\00\00\b6-\00\00"
  "\b8-\00\00\be-\00\00\c0-\00\00\c6-\00\00\c8-\00\00\ce-\00\00\d0-\00\00"
  "\d6-\00\00\d8-\00\00\de-\00\00\e0-\00\00\ff-\00\00/.\00\00/.\00\00\050"
  "\00\00\070\00\00!0\00\00)0\00\0010\00\0050\00\0080\00\00<0\00\00A0\00\00"
  "\960\00\00\9d0\00\00\9f0\00\00\a10\00\00\fa0\00\00\fc0\00\00\ff0\00\00"
  "\051\00\00/1\00\0011\00\00\8e1\00\00\a01\00\00\bf1\00\00\f01\00\00\ff1"
  "\00\00\004\00\00\bfM\00\00\00N\00\00\8c\a4\00\00\d0\a4\00\00\fd\a4\00\00"
  "\00\a5\00\00\0c\a6\00\00\10\a6\00\00+\a6\00\00@\a6\00\00n\a6\00\00t\a6"
  "\00\00{\a6\00\00\7f\a6\00\00\ef\a6\00\00\17\a7\00\00\1f\a7\00\00"\a7\00"
  "\00\88\a7\00\00\8b\a7\00\00\ca\a7\00\00\d0\a7\00\00\d1\a7\00\00\d3\a7\00"
  "\00\d3\a7\00\00\d5\a7\00\00\d9\a7\00\00\f2\a7\00\00\05\a8\00\00\07\a8\00"
  "\00'\a8\00\00@\a8\00\00s\a8\00\00\80\a8\00\00\c3\a8\00\00\c5\a8\00\00\c5"
  "\a8\00\00\d0\a8\00\00\d9\a8\00\00\f2\a8\00\00\f7\a8\00\00\fb\a8\00\00\fb"
  "\a8\00\00\fd\a8\00\00*\a9\00\000\a9\00\00R\a9\00\00`\a9\00\00|\a9\00\00"
  "\80\a9\00\00\b2\a9\00\00\b4\a9\00\00\bf\a9\00\00\cf\a9\00\00\d9\a9\00\00"
  "\e0\a9\00\00\fe\a9\00\00\00\aa\00\006\aa\00\00@\aa\00\00M\aa\00\00P\aa"
  "\00\00Y\aa\00\00`\aa\00\00v\aa\00\00z\aa\00\00\be\aa\00\00\c0\aa\00\00"
  "\c0\aa\00\00\c2\aa\00\00\c2\aa\00\00\db\aa\00\00\dd\aa\00\00\e0\aa\00\00"
  "\ef\aa\00\00\f2\aa\00\00\f5\aa\00\00\01\ab\00\00\06\ab\00\00\09\ab\00\00"
  "\0e\ab\00\00\11\ab\00\00\16\ab\00\00 \ab\00\00&\ab\00\00(\ab\00\00.\ab"
  "\00\000\ab\00\00Z\ab\00\00\\ab\00\00i\ab\00\00p\ab\00\00\ea\ab\00\00\f0"
  "\ab\00\00\f9\ab\00\00\00\ac\00\00\a3\d7\00\00\b0\d7\00\00\c6\d7\00\00\cb"
  "\d7\00\00\fb\d7\00\00\00\f9\00\00m\fa\00\00p\fa\00\00\d9\fa\00\00\00\fb"
  "\00\00\06\fb\00\00\13\fb\00\00\17\fb\00\00\1d\fb\00\00(\fb\00\00*\fb\00"
  "\006\fb\00\008\fb\00\00<\fb\00\00>\fb\00\00>\fb\00\00@\fb\00\00A\fb\00"
  "\00C\fb\00\00D\fb\00\00F\fb\00\00\b1\fb\00\00\d3\fb\00\00=\fd\00\00P\fd"
  "\00\00\8f\fd\00\00\92\fd\00\00\c7\fd\00\00\f0\fd\00\00\fb\fd\00\00p\fe"
  "\00\00t\fe\00\00v\fe\00\00\fc\fe\00\00\10\ff\00\00\19\ff\00\00!\ff\00\00"
  ":\ff\00\00A\ff\00\00Z\ff\00\00f\ff\00\00\be\ff\00\00\c2\ff\00\00\c7\ff"
  "\00\00\ca\ff\00\00\cf\ff\00\00\d2\ff\00\00\d7\ff\00\00\da\ff\00\00\dc\ff"
  "\00\00\00\00\01\00\0b\00\01\00\0d\00\01\00&\00\01\00(\00\01\00:\00\01\00"
  "<\00\01\00=\00\01\00?\00\01\00M\00\01\00P\00\01\00]\00\01\00\80\00\01\00"
  "\fa\00\01\00@\01\01\00t\01\01\00\80\02\01\00\9c\02\01\00\a0\02\01\00\d0"
  "\02\01\00\00\03\01\00\1f\03\01\00-\03\01\00J\03\01\00P\03\01\00z\03\01"
  "\00\80\03\01\00\9d\03\01\00\a0\03\01\00\c3\03\01\00\c8\03\01\00\cf\03\01"
  "\00\d1\03\01\00\d5\03\01\00\00\04\01\00\9d\04\01\00\a0\04\01\00\a9\04\01"
  "\00\b0\04\01\00\d3\04\01\00\d8\04\01\00\fb\04\01\00\00\05\01\00'\05\01"
  "\000\05\01\00c\05\01\00p\05\01\00z\05\01\00|\05\01\00\8a\05\01\00\8c\05"
  "\01\00\92\05\01\00\94\05\01\00\95\05\01\00\97\05\01\00\a1\05\01\00\a3\05"
  "\01\00\b1\05\01\00\b3\05\01\00\b9\05\01\00\bb\05\01\00\bc\05\01\00\00\06"
  "\01\006\07\01\00@\07\01\00U\07\01\00`\07\01\00g\07\01\00\80\07\01\00\85"
  "\07\01\00\87\07\01\00\b0\07\01\00\b2\07\01\00\ba\07\01\00\00\08\01\00\05"
  "\08\01\00\08\08\01\00\08\08\01\00\0a\08\01\005\08\01\007\08\01\008\08\01"
  "\00<\08\01\00<\08\01\00?\08\01\00U\08\01\00`\08\01\00v\08\01\00\80\08\01"
  "\00\9e\08\01\00\e0\08\01\00\f2\08\01\00\f4\08\01\00\f5\08\01\00\00\09\01"
  "\00\15\09\01\00 \09\01\009\09\01\00\80\09\01\00\b7\09\01\00\be\09\01\00"
  "\bf\09\01\00\00\0a\01\00\03\0a\01\00\05\0a\01\00\06\0a\01\00\0c\0a\01\00"
  "\13\0a\01\00\15\0a\01\00\17\0a\01\00\19\0a\01\005\0a\01\00`\0a\01\00|\0a"
  "\01\00\80\0a\01\00\9c\0a\01\00\c0\0a\01\00\c7\0a\01\00\c9\0a\01\00\e4\0a"
  "\01\00\00\0b\01\005\0b\01\00@\0b\01\00U\0b\01\00`\0b\01\00r\0b\01\00\80"
  "\0b\01\00\91\0b\01\00\00\0c\01\00H\0c\01\00\80\0c\01\00\b2\0c\01\00\c0"
  "\0c\01\00\f2\0c\01\00\00\0d\01\00'\0d\01\000\0d\01\009\0d\01\00\80\0e\01"
  "\00\a9\0e\01\00\ab\0e\01\00\ac\0e\01\00\b0\0e\01\00\b1\0e\01\00\00\0f\01"
  "\00\1c\0f\01\00'\0f\01\00'\0f\01\000\0f\01\00E\0f\01\00p\0f\01\00\81\0f"
  "\01\00\b0\0f\01\00\c4\0f\01\00\e0\0f\01\00\f6\0f\01\00\00\10\01\00E\10"
  "\01\00f\10\01\00o\10\01\00q\10\01\00u\10\01\00\80\10\01\00\b8\10\01\00"
  "\c2\10\01\00\c2\10\01\00\d0\10\01\00\e8\10\01\00\f0\10\01\00\f9\10\01\00"
  "\00\11\01\002\11\01\006\11\01\00?\11\01\00D\11\01\00G\11\01\00P\11\01\00"
  "r\11\01\00v\11\01\00v\11\01\00\80\11\01\00\bf\11\01\00\c1\11\01\00\c4\11"
  "\01\00\ce\11\01\00\da\11\01\00\dc\11\01\00\dc\11\01\00\00\12\01\00\11\12"
  "\01\00\13\12\01\004\12\01\007\12\01\007\12\01\00>\12\01\00A\12\01\00\80"
  "\12\01\00\86\12\01\00\88\12\01\00\88\12\01\00\8a\12\01\00\8d\12\01\00\8f"
  "\12\01\00\9d\12\01\00\9f\12\01\00\a8\12\01\00\b0\12\01\00\e8\12\01\00\f0"
  "\12\01\00\f9\12\01\00\00\13\01\00\03\13\01\00\05\13\01\00\0c\13\01\00\0f"
  "\13\01\00\10\13\01\00\13\13\01\00(\13\01\00*\13\01\000\13\01\002\13\01"
  "\003\13\01\005\13\01\009\13\01\00=\13\01\00D\13\01\00G\13\01\00H\13\01"
  "\00K\13\01\00L\13\01\00P\13\01\00P\13\01\00W\13\01\00W\13\01\00]\13\01"
  "\00c\13\01\00\00\14\01\00A\14\01\00C\14\01\00E\14\01\00G\14\01\00J\14\01"
  "\00P\14\01\00Y\14\01\00_\14\01\00a\14\01\00\80\14\01\00\c1\14\01\00\c4"
  "\14\01\00\c5\14\01\00\c7\14\01\00\c7\14\01\00\d0\14\01\00\d9\14\01\00\80"
  "\15\01\00\b5\15\01\00\b8\15\01\00\be\15\01\00\d8\15\01\00\dd\15\01\00\00"
  "\16\01\00>\16\01\00@\16\01\00@\16\01\00D\16\01\00D\16\01\00P\16\01\00Y"
  "\16\01\00\80\16\01\00\b5\16\01\00\b8\16\01\00\b8\16\01\00\c0\16\01\00\c9"
  "\16\01\00\00\17\01\00\1a\17\01\00\1d\17\01\00*\17\01\000\17\01\009\17\01"
  "\00@\17\01\00F\17\01\00\00\18\01\008\18\01\00\a0\18\01\00\e9\18\01\00\ff"
  "\18\01\00\06\19\01\00\09\19\01\00\09\19\01\00\0c\19\01\00\13\19\01\00\15"
  "\19\01\00\16\19\01\00\18\19\01\005\19\01\007\19\01\008\19\01\00;\19\01"
  "\00<\19\01\00?\19\01\00B\19\01\00P\19\01\00Y\19\01\00\a0\19\01\00\a7\19"
  "\01\00\aa\19\01\00\d7\19\01\00\da\19\01\00\df\19\01\00\e1\19\01\00\e1\19"
  "\01\00\e3\19\01\00\e4\19\01\00\00\1a\01\002\1a\01\005\1a\01\00>\1a\01\00"
  "P\1a\01\00\97\1a\01\00\9d\1a\01\00\9d\1a\01\00\b0\1a\01\00\f8\1a\01\00"
  "\00\1c\01\00\08\1c\01\00\0a\1c\01\006\1c\01\008\1c\01\00>\1c\01\00@\1c"
  "\01\00@\1c\01\00P\1c\01\00Y\1c\01\00r\1c\01\00\8f\1c\01\00\92\1c\01\00"
  "\a7\1c\01\00\a9\1c\01\00\b6\1c\01\00\00\1d\01\00\06\1d\01\00\08\1d\01\00"
  "\09\1d\01\00\0b\1d\01\006\1d\01\00:\1d\01\00:\1d\01\00<\1d\01\00=\1d\01"
  "\00?\1d\01\00A\1d\01\00C\1d\01\00C\1d\01\00F\1d\01\00G\1d\01\00P\1d\01"
  "\00Y\1d\01\00`\1d\01\00e\1d\01\00g\1d\01\00h\1d\01\00j\1d\01\00\8e\1d\01"
  "\00\90\1d\01\00\91\1d\01\00\93\1d\01\00\96\1d\01\00\98\1d\01\00\98\1d\01"
  "\00\a0\1d\01\00\a9\1d\01\00\e0\1e\01\00\f6\1e\01\00\00\1f\01\00\10\1f\01"
  "\00\12\1f\01\00:\1f\01\00>\1f\01\00@\1f\01\00P\1f\01\00Y\1f\01\00\b0\1f"
  "\01\00\b0\1f\01\00\00 \01\00\99#\01\00\00$\01\00n$\01\00\80$\01\00C%\01"
  "\00\90/\01\00\f0/\01\00\000\01\00/4\01\00A4\01\00F4\01\00\00D\01\00FF\01"
  "\00\00h\01\008j\01\00@j\01\00^j\01\00`j\01\00ij\01\00pj\01\00\bej\01\00"
  "\c0j\01\00\c9j\01\00\d0j\01\00\edj\01\00\00k\01\00/k\01\00@k\01\00Ck\01"
  "\00Pk\01\00Yk\01\00ck\01\00wk\01\00}k\01\00\8fk\01\00@n\01\00\7fn\01\00"
  "\00o\01\00Jo\01\00Oo\01\00\87o\01\00\8fo\01\00\9fo\01\00\e0o\01\00\e1o"
  "\01\00\e3o\01\00\e3o\01\00\f0o\01\00\f1o\01\00\00p\01\00\f7\87\01\00\00"
  "\88\01\00\d5\8c\01\00\00\8d\01\00\08\8d\01\00\f0\af\01\00\f3\af\01\00\f5"
  "\af\01\00\fb\af\01\00\fd\af\01\00\fe\af\01\00\00\b0\01\00"\b1\01\002\b1"
  "\01\002\b1\01\00P\b1\01\00R\b1\01\00U\b1\01\00U\b1\01\00d\b1\01\00g\b1"
  "\01\00p\b1\01\00\fb\b2\01\00\00\bc\01\00j\bc\01\00p\bc\01\00|\bc\01\00"
  "\80\bc\01\00\88\bc\01\00\90\bc\01\00\99\bc\01\00\9e\bc\01\00\9e\bc\01\00"
  "\00\d4\01\00T\d4\01\00V\d4\01\00\9c\d4\01\00\9e\d4\01\00\9f\d4\01\00\a2"
  "\d4\01\00\a2\d4\01\00\a5\d4\01\00\a6\d4\01\00\a9\d4\01\00\ac\d4\01\00\ae"
  "\d4\01\00\b9\d4\01\00\bb\d4\01\00\bb\d4\01\00\bd\d4\01\00\c3\d4\01\00\c5"
  "\d4\01\00\05\d5\01\00\07\d5\01\00\0a\d5\01\00\0d\d5\01\00\14\d5\01\00\16"
  "\d5\01\00\1c\d5\01\00\1e\d5\01\009\d5\01\00;\d5\01\00>\d5\01\00@\d5\01"
  "\00D\d5\01\00F\d5\01\00F\d5\01\00J\d5\01\00P\d5\01\00R\d5\01\00\a5\d6\01"
  "\00\a8\d6\01\00\c0\d6\01\00\c2\d6\01\00\da\d6\01\00\dc\d6\01\00\fa\d6\01"
  "\00\fc\d6\01\00\14\d7\01\00\16\d7\01\004\d7\01\006\d7\01\00N\d7\01\00P"
  "\d7\01\00n\d7\01\00p\d7\01\00\88\d7\01\00\8a\d7\01\00\a8\d7\01\00\aa\d7"
  "\01\00\c2\d7\01\00\c4\d7\01\00\cb\d7\01\00\ce\d7\01\00\ff\d7\01\00\00\df"
  "\01\00\1e\df\01\00%\df\01\00*\df\01\00\00\e0\01\00\06\e0\01\00\08\e0\01"
  "\00\18\e0\01\00\1b\e0\01\00!\e0\01\00#\e0\01\00$\e0\01\00&\e0\01\00*\e0"
  "\01\000\e0\01\00m\e0\01\00\8f\e0\01\00\8f\e0\01\00\00\e1\01\00,\e1\01\00"
  "7\e1\01\00=\e1\01\00@\e1\01\00I\e1\01\00N\e1\01\00N\e1\01\00\90\e2\01\00"
  "\ad\e2\01\00\c0\e2\01\00\eb\e2\01\00\f0\e2\01\00\f9\e2\01\00\d0\e4\01\00"
  "\eb\e4\01\00\f0\e4\01\00\f9\e4\01\00\e0\e7\01\00\e6\e7\01\00\e8\e7\01\00"
  "\eb\e7\01\00\ed\e7\01\00\ee\e7\01\00\f0\e7\01\00\fe\e7\01\00\00\e8\01\00"
  "\c4\e8\01\00\00\e9\01\00C\e9\01\00G\e9\01\00G\e9\01\00K\e9\01\00K\e9\01"
  "\00P\e9\01\00Y\e9\01\00\00\ee\01\00\03\ee\01\00\05\ee\01\00\1f\ee\01\00"
  "!\ee\01\00"\ee\01\00$\ee\01\00$\ee\01\00'\ee\01\00'\ee\01\00)\ee\01\00"
  "2\ee\01\004\ee\01\007\ee\01\009\ee\01\009\ee\01\00;\ee\01\00;\ee\01\00"
  "B\ee\01\00B\ee\01\00G\ee\01\00G\ee\01\00I\ee\01\00I\ee\01\00K\ee\01\00"
  "K\ee\01\00M\ee\01\00O\ee\01\00Q\ee\01\00R\ee\01\00T\ee\01\00T\ee\01\00"
  "W\ee\01\00W\ee\01\00Y\ee\01\00Y\ee\01\00[\ee\01\00[\ee\01\00]\ee\01\00"
  "]\ee\01\00_\ee\01\00_\ee\01\00a\ee\01\00b\ee\01\00d\ee\01\00d\ee\01\00"
  "g\ee\01\00j\ee\01\00l\ee\01\00r\ee\01\00t\ee\01\00w\ee\01\00y\ee\01\00"
  "|\ee\01\00~\ee\01\00~\ee\01\00\80\ee\01\00\89\ee\01\00\8b\ee\01\00\9b\ee"
  "\01\00\a1\ee\01\00\a3\ee\01\00\a5\ee\01\00\a9\ee\01\00\ab\ee\01\00\bb\ee"
  "\01\000\f1\01\00I\f1\01\00P\f1\01\00i\f1\01\00p\f1\01\00\89\f1\01\00\f0"
  "\fb\01\00\f9\fb\01\00\00\00\02\00\df\a6\02\00\00\a7\02\009\b7\02\00@\b7"
  "\02\00\1d\b8\02\00 \b8\02\00\a1\ce\02\00\b0\ce\02\00\e0\eb\02\00\00\f8"
  "\02\00\1d\fa\02\00\00\00\03\00J\13\03\00P\13\03\00\af#\03\00\00\01\00\00"
  "\00\01\00\00\02\01\00\00\02\01\00\00\04\01\00\00\04\01\00\00\06\01\00\00"
  "\06\01\00\00\08\01\00\00\08\01\00\00\0a\01\00\00\0a\01\00\00\0c\01\00\00"
  "\0c\01\00\00\0e\01\00\00\0e\01\00\00\10\01\00\00\10\01\00\00\12\01\00\00"
  "\12\01\00\00\14\01\00\00\14\01\00\00\16\01\00\00\16\01\00\00\18\01\00\00"
  "\18\01\00\00\1a\01\00\00\1a\01\00\00\1c\01\00\00\1c\01\00\00\1e\01\00\00"
  "\1e\01\00\00 \01\00\00 \01\00\00"\01\00\00"\01\00\00$\01\00\00$\01\00\00"
  "&\01\00\00&\01\00\00(\01\00\00(\01\00\00*\01\00\00*\01\00\00,\01\00\00"
  ",\01\00\00.\01\00\00.\01\00\000\01\00\000\01\00\002\01\00\002\01\00\00"
  "4\01\00\004\01\00\006\01\00\006\01\00\009\01\00\009\01\00\00;\01\00\00"
  ";\01\00\00=\01\00\00=\01\00\00?\01\00\00?\01\00\00A\01\00\00A\01\00\00"
  "C\01\00\00C\01\00\00E\01\00\00E\01\00\00G\01\00\00G\01\00\00J\01\00\00"
  "J\01\00\00L\01\00\00L\01\00\00N\01\00\00N\01\00\00P\01\00\00P\01\00\00"
  "R\01\00\00R\01\00\00T\01\00\00T\01\00\00V\01\00\00V\01\00\00X\01\00\00"
  "X\01\00\00Z\01\00\00Z\01\00\00\\01\00\00\\01\00\00^\01\00\00^\01\00\00"
  "`\01\00\00`\01\00\00b\01\00\00b\01\00\00d\01\00\00d\01\00\00f\01\00\00"
  "f\01\00\00h\01\00\00h\01\00\00j\01\00\00j\01\00\00l\01\00\00l\01\00\00"
  "n\01\00\00n\01\00\00p\01\00\00p\01\00\00r\01\00\00r\01\00\00t\01\00\00"
  "t\01\00\00v\01\00\00v\01\00\00x\01\00\00y\01\00\00{\01\00\00{\01\00\00"
  "}\01\00\00}\01\00\00\81\01\00\00\82\01\00\00\84\01\00\00\84\01\00\00\86"
  "\01\00\00\87\01\00\00\89\01\00\00\8b\01\00\00\8e\01\00\00\91\01\00\00\93"
  "\01\00\00\94\01\00\00\96\01\00\00\98\01\00\00\9c\01\00\00\9d\01\00\00\9f"
  "\01\00\00\a0\01\00\00\a2\01\00\00\a2\01\00\00\a4\01\00\00\a4\01\00\00\a6"
  "\01\00\00\a7\01\00\00\a9\01\00\00\a9\01\00\00\ac\01\00\00\ac\01\00\00\ae"
  "\01\00\00\af\01\00\00\b1\01\00\00\b3\01\00\00\b5\01\00\00\b5\01\00\00\b7"
  "\01\00\00\b8\01\00\00\bc\01\00\00\bc\01\00\00\c4\01\00\00\c4\01\00\00\c7"
  "\01\00\00\c7\01\00\00\ca\01\00\00\ca\01\00\00\cd\01\00\00\cd\01\00\00\cf"
  "\01\00\00\cf\01\00\00\d1\01\00\00\d1\01\00\00\d3\01\00\00\d3\01\00\00\d5"
  "\01\00\00\d5\01\00\00\d7\01\00\00\d7\01\00\00\d9\01\00\00\d9\01\00\00\db"
  "\01\00\00\db\01\00\00\de\01\00\00\de\01\00\00\e0\01\00\00\e0\01\00\00\e2"
  "\01\00\00\e2\01\00\00\e4\01\00\00\e4\01\00\00\e6\01\00\00\e6\01\00\00\e8"
  "\01\00\00\e8\01\00\00\ea\01\00\00\ea\01\00\00\ec\01\00\00\ec\01\00\00\ee"
  "\01\00\00\ee\01\00\00\f1\01\00\00\f1\01\00\00\f4\01\00\00\f4\01\00\00\f6"
  "\01\00\00\f8\01\00\00\fa\01\00\00\fa\01\00\00\fc\01\00\00\fc\01\00\00\fe"
  "\01\00\00\fe\01\00\00\00\02\00\00\00\02\00\00\02\02\00\00\02\02\00\00\04"
  "\02\00\00\04\02\00\00\06\02\00\00\06\02\00\00\08\02\00\00\08\02\00\00\0a"
  "\02\00\00\0a\02\00\00\0c\02\00\00\0c\02\00\00\0e\02\00\00\0e\02\00\00\10"
  "\02\00\00\10\02\00\00\12\02\00\00\12\02\00\00\14\02\00\00\14\02\00\00\16"
  "\02\00\00\16\02\00\00\18\02\00\00\18\02\00\00\1a\02\00\00\1a\02\00\00\1c"
  "\02\00\00\1c\02\00\00\1e\02\00\00\1e\02\00\00 \02\00\00 \02\00\00"\02\00"
  "\00"\02\00\00$\02\00\00$\02\00\00&\02\00\00&\02\00\00(\02\00\00(\02\00"
  "\00*\02\00\00*\02\00\00,\02\00\00,\02\00\00.\02\00\00.\02\00\000\02\00"
  "\000\02\00\002\02\00\002\02\00\00:\02\00\00;\02\00\00=\02\00\00>\02\00"
  "\00A\02\00\00A\02\00\00C\02\00\00F\02\00\00H\02\00\00H\02\00\00J\02\00"
  "\00J\02\00\00L\02\00\00L\02\00\00N\02\00\00N\02\00\00p\03\00\00p\03\00"
  "\00r\03\00\00r\03\00\00v\03\00\00v\03\00\00\7f\03\00\00\7f\03\00\00\86"
  "\03\00\00\86\03\00\00\88\03\00\00\8a\03\00\00\8c\03\00\00\8c\03\00\00\8e"
  "\03\00\00\8f\03\00\00\91\03\00\00\a1\03\00\00\a3\03\00\00\ab\03\00\00\cf"
  "\03\00\00\cf\03\00\00\d2\03\00\00\d4\03\00\00\d8\03\00\00\d8\03\00\00\da"
  "\03\00\00\da\03\00\00\dc\03\00\00\dc\03\00\00\de\03\00\00\de\03\00\00\e0"
  "\03\00\00\e0\03\00\00\e2\03\00\00\e2\03\00\00\e4\03\00\00\e4\03\00\00\e6"
  "\03\00\00\e6\03\00\00\e8\03\00\00\e8\03\00\00\ea\03\00\00\ea\03\00\00\ec"
  "\03\00\00\ec\03\00\00\ee\03\00\00\ee\03\00\00\f4\03\00\00\f4\03\00\00\f7"
  "\03\00\00\f7\03\00\00\f9\03\00\00\fa\03\00\00\fd\03\00\00/\04\00\00`\04"
  "\00\00`\04\00\00b\04\00\00b\04\00\00d\04\00\00d\04\00\00f\04\00\00f\04"
  "\00\00h\04\00\00h\04\00\00j\04\00\00j\04\00\00l\04\00\00l\04\00\00n\04"
  "\00\00n\04\00\00p\04\00\00p\04\00\00r\04\00\00r\04\00\00t\04\00\00t\04"
  "\00\00v\04\00\00v\04\00\00x\04\00\00x\04\00\00z\04\00\00z\04\00\00|\04"
  "\00\00|\04\00\00~\04\00\00~\04\00\00\80\04\00\00\80\04\00\00\8a\04\00\00"
  "\8a\04\00\00\8c\04\00\00\8c\04\00\00\8e\04\00\00\8e\04\00\00\90\04\00\00"
  "\90\04\00\00\92\04\00\00\92\04\00\00\94\04\00\00\94\04\00\00\96\04\00\00"
  "\96\04\00\00\98\04\00\00\98\04\00\00\9a\04\00\00\9a\04\00\00\9c\04\00\00"
  "\9c\04\00\00\9e\04\00\00\9e\04\00\00\a0\04\00\00\a0\04\00\00\a2\04\00\00"
  "\a2\04\00\00\a4\04\00\00\a4\04\00\00\a6\04\00\00\a6\04\00\00\a8\04\00\00"
  "\a8\04\00\00\aa\04\00\00\aa\04\00\00\ac\04\00\00\ac\04\00\00\ae\04\00\00"
  "\ae\04\00\00\b0\04\00\00\b0\04\00\00\b2\04\00\00\b2\04\00\00\b4\04\00\00"
  "\b4\04\00\00\b6\04\00\00\b6\04\00\00\b8\04\00\00\b8\04\00\00\ba\04\00\00"
  "\ba\04\00\00\bc\04\00\00\bc\04\00\00\be\04\00\00\be\04\00\00\c0\04\00\00"
  "\c1\04\00\00\c3\04\00\00\c3\04\00\00\c5\04\00\00\c5\04\00\00\c7\04\00\00"
  "\c7\04\00\00\c9\04\00\00\c9\04\00\00\cb\04\00\00\cb\04\00\00\cd\04\00\00"
  "\cd\04\00\00\d0\04\00\00\d0\04\00\00\d2\04\00\00\d2\04\00\00\d4\04\00\00"
  "\d4\04\00\00\d6\04\00\00\d6\04\00\00\d8\04\00\00\d8\04\00\00\da\04\00\00"
  "\da\04\00\00\dc\04\00\00\dc\04\00\00\de\04\00\00\de\04\00\00\e0\04\00\00"
  "\e0\04\00\00\e2\04\00\00\e2\04\00\00\e4\04\00\00\e4\04\00\00\e6\04\00\00"
  "\e6\04\00\00\e8\04\00\00\e8\04\00\00\ea\04\00\00\ea\04\00\00\ec\04\00\00"
  "\ec\04\00\00\ee\04\00\00\ee\04\00\00\f0\04\00\00\f0\04\00\00\f2\04\00\00"
  "\f2\04\00\00\f4\04\00\00\f4\04\00\00\f6\04\00\00\f6\04\00\00\f8\04\00\00"
  "\f8\04\00\00\fa\04\00\00\fa\04\00\00\fc\04\00\00\fc\04\00\00\fe\04\00\00"
  "\fe\04\00\00\00\05\00\00\00\05\00\00\02\05\00\00\02\05\00\00\04\05\00\00"
  "\04\05\00\00\06\05\00\00\06\05\00\00\08\05\00\00\08\05\00\00\0a\05\00\00"
  "\0a\05\00\00\0c\05\00\00\0c\05\00\00\0e\05\00\00\0e\05\00\00\10\05\00\00"
  "\10\05\00\00\12\05\00\00\12\05\00\00\14\05\00\00\14\05\00\00\16\05\00\00"
  "\16\05\00\00\18\05\00\00\18\05\00\00\1a\05\00\00\1a\05\00\00\1c\05\00\00"
  "\1c\05\00\00\1e\05\00\00\1e\05\00\00 \05\00\00 \05\00\00"\05\00\00"\05"
  "\00\00$\05\00\00$\05\00\00&\05\00\00&\05\00\00(\05\00\00(\05\00\00*\05"
  "\00\00*\05\00\00,\05\00\00,\05\00\00.\05\00\00.\05\00\001\05\00\00V\05"
  "\00\00\a0\10\00\00\c5\10\00\00\c7\10\00\00\c7\10\00\00\cd\10\00\00\cd\10"
  "\00\00\a0\13\00\00\f5\13\00\00\90\1c\00\00\ba\1c\00\00\bd\1c\00\00\bf\1c"
  "\00\00\00\1e\00\00\00\1e\00\00\02\1e\00\00\02\1e\00\00\04\1e\00\00\04\1e"
  "\00\00\06\1e\00\00\06\1e\00\00\08\1e\00\00\08\1e\00\00\0a\1e\00\00\0a\1e"
  "\00\00\0c\1e\00\00\0c\1e\00\00\0e\1e\00\00\0e\1e\00\00\10\1e\00\00\10\1e"
  "\00\00\12\1e\00\00\12\1e\00\00\14\1e\00\00\14\1e\00\00\16\1e\00\00\16\1e"
  "\00\00\18\1e\00\00\18\1e\00\00\1a\1e\00\00\1a\1e\00\00\1c\1e\00\00\1c\1e"
  "\00\00\1e\1e\00\00\1e\1e\00\00 \1e\00\00 \1e\00\00"\1e\00\00"\1e\00\00"
  "$\1e\00\00$\1e\00\00&\1e\00\00&\1e\00\00(\1e\00\00(\1e\00\00*\1e\00\00"
  "*\1e\00\00,\1e\00\00,\1e\00\00.\1e\00\00.\1e\00\000\1e\00\000\1e\00\00"
  "2\1e\00\002\1e\00\004\1e\00\004\1e\00\006\1e\00\006\1e\00\008\1e\00\00"
  "8\1e\00\00:\1e\00\00:\1e\00\00<\1e\00\00<\1e\00\00>\1e\00\00>\1e\00\00"
  "@\1e\00\00@\1e\00\00B\1e\00\00B\1e\00\00D\1e\00\00D\1e\00\00F\1e\00\00"
  "F\1e\00\00H\1e\00\00H\1e\00\00J\1e\00\00J\1e\00\00L\1e\00\00L\1e\00\00"
  "N\1e\00\00N\1e\00\00P\1e\00\00P\1e\00\00R\1e\00\00R\1e\00\00T\1e\00\00"
  "T\1e\00\00V\1e\00\00V\1e\00\00X\1e\00\00X\1e\00\00Z\1e\00\00Z\1e\00\00"
  "\\1e\00\00\\1e\00\00^\1e\00\00^\1e\00\00`\1e\00\00`\1e\00\00b\1e\00\00"
  "b\1e\00\00d\1e\00\00d\1e\00\00f\1e\00\00f\1e\00\00h\1e\00\00h\1e\00\00"
  "j\1e\00\00j\1e\00\00l\1e\00\00l\1e\00\00n\1e\00\00n\1e\00\00p\1e\00\00"
  "p\1e\00\00r\1e\00\00r\1e\00\00t\1e\00\00t\1e\00\00v\1e\00\00v\1e\00\00"
  "x\1e\00\00x\1e\00\00z\1e\00\00z\1e\00\00|\1e\00\00|\1e\00\00~\1e\00\00"
  "~\1e\00\00\80\1e\00\00\80\1e\00\00\82\1e\00\00\82\1e\00\00\84\1e\00\00"
  "\84\1e\00\00\86\1e\00\00\86\1e\00\00\88\1e\00\00\88\1e\00\00\8a\1e\00\00"
  "\8a\1e\00\00\8c\1e\00\00\8c\1e\00\00\8e\1e\00\00\8e\1e\00\00\90\1e\00\00"
  "\90\1e\00\00\92\1e\00\00\92\1e\00\00\94\1e\00\00\94\1e\00\00\9e\1e\00\00"
  "\9e\1e\00\00\a0\1e\00\00\a0\1e\00\00\a2\1e\00\00\a2\1e\00\00\a4\1e\00\00"
  "\a4\1e\00\00\a6\1e\00\00\a6\1e\00\00\a8\1e\00\00\a8\1e\00\00\aa\1e\00\00"
  "\aa\1e\00\00\ac\1e\00\00\ac\1e\00\00\ae\1e\00\00\ae\1e\00\00\b0\1e\00\00"
  "\b0\1e\00\00\b2\1e\00\00\b2\1e\00\00\b4\1e\00\00\b4\1e\00\00\b6\1e\00\00"
  "\b6\1e\00\00\b8\1e\00\00\b8\1e\00\00\ba\1e\00\00\ba\1e\00\00\bc\1e\00\00"
  "\bc\1e\00\00\be\1e\00\00\be\1e\00\00\c0\1e\00\00\c0\1e\00\00\c2\1e\00\00"
  "\c2\1e\00\00\c4\1e\00\00\c4\1e\00\00\c6\1e\00\00\c6\1e\00\00\c8\1e\00\00"
  "\c8\1e\00\00\ca\1e\00\00\ca\1e\00\00\cc\1e\00\00\cc\1e\00\00\ce\1e\00\00"
  "\ce\1e\00\00\d0\1e\00\00\d0\1e\00\00\d2\1e\00\00\d2\1e\00\00\d4\1e\00\00"
  "\d4\1e\00\00\d6\1e\00\00\d6\1e\00\00\d8\1e\00\00\d8\1e\00\00\da\1e\00\00"
  "\da\1e\00\00\dc\1e\00\00\dc\1e\00\00\de\1e\00\00\de\1e\00\00\e0\1e\00\00"
  "\e0\1e\00\00\e2\1e\00\00\e2\1e\00\00\e4\1e\00\00\e4\1e\00\00\e6\1e\00\00"
  "\e6\1e\00\00\e8\1e\00\00\e8\1e\00\00\ea\1e\00\00\ea\1e\00\00\ec\1e\00\00"
  "\ec\1e\00\00\ee\1e\00\00\ee\1e\00\00\f0\1e\00\00\f0\1e\00\00\f2\1e\00\00"
  "\f2\1e\00\00\f4\1e\00\00\f4\1e\00\00\f6\1e\00\00\f6\1e\00\00\f8\1e\00\00"
  "\f8\1e\00\00\fa\1e\00\00\fa\1e\00\00\fc\1e\00\00\fc\1e\00\00\fe\1e\00\00"
  "\fe\1e\00\00\08\1f\00\00\0f\1f\00\00\18\1f\00\00\1d\1f\00\00(\1f\00\00"
  "/\1f\00\008\1f\00\00?\1f\00\00H\1f\00\00M\1f\00\00Y\1f\00\00Y\1f\00\00"
  "[\1f\00\00[\1f\00\00]\1f\00\00]\1f\00\00_\1f\00\00_\1f\00\00h\1f\00\00"
  "o\1f\00\00\b8\1f\00\00\bb\1f\00\00\c8\1f\00\00\cb\1f\00\00\d8\1f\00\00"
  "\db\1f\00\00\e8\1f\00\00\ec\1f\00\00\f8\1f\00\00\fb\1f\00\00\02!\00\00"
  "\02!\00\00\07!\00\00\07!\00\00\0b!\00\00\0d!\00\00\10!\00\00\12!\00\00"
  "\15!\00\00\15!\00\00\19!\00\00\1d!\00\00$!\00\00$!\00\00&!\00\00&!\00\00"
  "(!\00\00(!\00\00*!\00\00-!\00\000!\00\003!\00\00>!\00\00?!\00\00E!\00\00"
  "E!\00\00`!\00\00o!\00\00\83!\00\00\83!\00\00\b6$\00\00\cf$\00\00\00,\00"
  "\00/,\00\00`,\00\00`,\00\00b,\00\00d,\00\00g,\00\00g,\00\00i,\00\00i,\00"
  "\00k,\00\00k,\00\00m,\00\00p,\00\00r,\00\00r,\00\00u,\00\00u,\00\00~,\00"
  "\00\80,\00\00\82,\00\00\82,\00\00\84,\00\00\84,\00\00\86,\00\00\86,\00"
  "\00\88,\00\00\88,\00\00\8a,\00\00\8a,\00\00\8c,\00\00\8c,\00\00\8e,\00"
  "\00\8e,\00\00\90,\00\00\90,\00\00\92,\00\00\92,\00\00\94,\00\00\94,\00"
  "\00\96,\00\00\96,\00\00\98,\00\00\98,\00\00\9a,\00\00\9a,\00\00\9c,\00"
  "\00\9c,\00\00\9e,\00\00\9e,\00\00\a0,\00\00\a0,\00\00\a2,\00\00\a2,\00"
  "\00\a4,\00\00\a4,\00\00\a6,\00\00\a6,\00\00\a8,\00\00\a8,\00\00\aa,\00"
  "\00\aa,\00\00\ac,\00\00\ac,\00\00\ae,\00\00\ae,\00\00\b0,\00\00\b0,\00"
  "\00\b2,\00\00\b2,\00\00\b4,\00\00\b4,\00\00\b6,\00\00\b6,\00\00\b8,\00"
  "\00\b8,\00\00\ba,\00\00\ba,\00\00\bc,\00\00\bc,\00\00\be,\00\00\be,\00"
  "\00\c0,\00\00\c0,\00\00\c2,\00\00\c2,\00\00\c4,\00\00\c4,\00\00\c6,\00"
  "\00\c6,\00\00\c8,\00\00\c8,\00\00\ca,\00\00\ca,\00\00\cc,\00\00\cc,\00"
  "\00\ce,\00\00\ce,\00\00\d0,\00\00\d0,\00\00\d2,\00\00\d2,\00\00\d4,\00"
  "\00\d4,\00\00\d6,\00\00\d6,\00\00\d8,\00\00\d8,\00\00\da,\00\00\da,\00"
  "\00\dc,\00\00\dc,\00\00\de,\00\00\de,\00\00\e0,\00\00\e0,\00\00\e2,\00"
  "\00\e2,\00\00\eb,\00\00\eb,\00\00\ed,\00\00\ed,\00\00\f2,\00\00\f2,\00"
  "\00@\a6\00\00@\a6\00\00B\a6\00\00B\a6\00\00D\a6\00\00D\a6\00\00F\a6\00"
  "\00F\a6\00\00H\a6\00\00H\a6\00\00J\a6\00\00J\a6\00\00L\a6\00\00L\a6\00"
  "\00N\a6\00\00N\a6\00\00P\a6\00\00P\a6\00\00R\a6\00\00R\a6\00\00T\a6\00"
  "\00T\a6\00\00V\a6\00\00V\a6\00\00X\a6\00\00X\a6\00\00Z\a6\00\00Z\a6\00"
  "\00\\a6\00\00\\a6\00\00^\a6\00\00^\a6\00\00`\a6\00\00`\a6\00\00b\a6\00"
  "\00b\a6\00\00d\a6\00\00d\a6\00\00f\a6\00\00f\a6\00\00h\a6\00\00h\a6\00"
  "\00j\a6\00\00j\a6\00\00l\a6\00\00l\a6\00\00\80\a6\00\00\80\a6\00\00\82"
  "\a6\00\00\82\a6\00\00\84\a6\00\00\84\a6\00\00\86\a6\00\00\86\a6\00\00\88"
  "\a6\00\00\88\a6\00\00\8a\a6\00\00\8a\a6\00\00\8c\a6\00\00\8c\a6\00\00\8e"
  "\a6\00\00\8e\a6\00\00\90\a6\00\00\90\a6\00\00\92\a6\00\00\92\a6\00\00\94"
  "\a6\00\00\94\a6\00\00\96\a6\00\00\96\a6\00\00\98\a6\00\00\98\a6\00\00\9a"
  "\a6\00\00\9a\a6\00\00"\a7\00\00"\a7\00\00$\a7\00\00$\a7\00\00&\a7\00\00"
  "&\a7\00\00(\a7\00\00(\a7\00\00*\a7\00\00*\a7\00\00,\a7\00\00,\a7\00\00"
  ".\a7\00\00.\a7\00\002\a7\00\002\a7\00\004\a7\00\004\a7\00\006\a7\00\00"
  "6\a7\00\008\a7\00\008\a7\00\00:\a7\00\00:\a7\00\00<\a7\00\00<\a7\00\00"
  ">\a7\00\00>\a7\00\00@\a7\00\00@\a7\00\00B\a7\00\00B\a7\00\00D\a7\00\00"
  "D\a7\00\00F\a7\00\00F\a7\00\00H\a7\00\00H\a7\00\00J\a7\00\00J\a7\00\00"
  "L\a7\00\00L\a7\00\00N\a7\00\00N\a7\00\00P\a7\00\00P\a7\00\00R\a7\00\00"
  "R\a7\00\00T\a7\00\00T\a7\00\00V\a7\00\00V\a7\00\00X\a7\00\00X\a7\00\00"
  "Z\a7\00\00Z\a7\00\00\\a7\00\00\\a7\00\00^\a7\00\00^\a7\00\00`\a7\00\00"
  "`\a7\00\00b\a7\00\00b\a7\00\00d\a7\00\00d\a7\00\00f\a7\00\00f\a7\00\00"
  "h\a7\00\00h\a7\00\00j\a7\00\00j\a7\00\00l\a7\00\00l\a7\00\00n\a7\00\00"
  "n\a7\00\00y\a7\00\00y\a7\00\00{\a7\00\00{\a7\00\00}\a7\00\00~\a7\00\00"
  "\80\a7\00\00\80\a7\00\00\82\a7\00\00\82\a7\00\00\84\a7\00\00\84\a7\00\00"
  "\86\a7\00\00\86\a7\00\00\8b\a7\00\00\8b\a7\00\00\8d\a7\00\00\8d\a7\00\00"
  "\90\a7\00\00\90\a7\00\00\92\a7\00\00\92\a7\00\00\96\a7\00\00\96\a7\00\00"
  "\98\a7\00\00\98\a7\00\00\9a\a7\00\00\9a\a7\00\00\9c\a7\00\00\9c\a7\00\00"
  "\9e\a7\00\00\9e\a7\00\00\a0\a7\00\00\a0\a7\00\00\a2\a7\00\00\a2\a7\00\00"
  "\a4\a7\00\00\a4\a7\00\00\a6\a7\00\00\a6\a7\00\00\a8\a7\00\00\a8\a7\00\00"
  "\aa\a7\00\00\ae\a7\00\00\b0\a7\00\00\b4\a7\00\00\b6\a7\00\00\b6\a7\00\00"
  "\b8\a7\00\00\b8\a7\00\00\ba\a7\00\00\ba\a7\00\00\bc\a7\00\00\bc\a7\00\00"
  "\be\a7\00\00\be\a7\00\00\c0\a7\00\00\c0\a7\00\00\c2\a7\00\00\c2\a7\00\00"
  "\c4\a7\00\00\c7\a7\00\00\c9\a7\00\00\c9\a7\00\00\d0\a7\00\00\d0\a7\00\00"
  "\d6\a7\00\00\d6\a7\00\00\d8\a7\00\00\d8\a7\00\00\f5\a7\00\00\f5\a7\00\00"
  "!\ff\00\00:\ff\00\00\00\04\01\00'\04\01\00\b0\04\01\00\d3\04\01\00p\05"
  "\01\00z\05\01\00|\05\01\00\8a\05\01\00\8c\05\01\00\92\05\01\00\94\05\01"
  "\00\95\05\01\00\80\0c\01\00\b2\0c\01\00\a0\18\01\00\bf\18\01\00@n\01\00"
  "_n\01\00\00\d4\01\00\19\d4\01\004\d4\01\00M\d4\01\00h\d4\01\00\81\d4\01"
  "\00\9c\d4\01\00\9c\d4\01\00\9e\d4\01\00\9f\d4\01\00\a2\d4\01\00\a2\d4\01"
  "\00\a5\d4\01\00\a6\d4\01\00\a9\d4\01\00\ac\d4\01\00\ae\d4\01\00\b5\d4\01"
  "\00\d0\d4\01\00\e9\d4\01\00\04\d5\01\00\05\d5\01\00\07\d5\01\00\0a\d5\01"
  "\00\0d\d5\01\00\14\d5\01\00\16\d5\01\00\1c\d5\01\008\d5\01\009\d5\01\00"
  ";\d5\01\00>\d5\01\00@\d5\01\00D\d5\01\00F\d5\01\00F\d5\01\00J\d5\01\00"
  "P\d5\01\00l\d5\01\00\85\d5\01\00\a0\d5\01\00\b9\d5\01\00\d4\d5\01\00\ed"
  "\d5\01\00\08\d6\01\00!\d6\01\00<\d6\01\00U\d6\01\00p\d6\01\00\89\d6\01"
  "\00\a8\d6\01\00\c0\d6\01\00\e2\d6\01\00\fa\d6\01\00\1c\d7\01\004\d7\01"
  "\00V\d7\01\00n\d7\01\00\90\d7\01\00\a8\d7\01\00\ca\d7\01\00\ca\d7\01\00"
  "\00\e9\01\00!\e9\01\000\f1\01\00I\f1\01\00P\f1\01\00i\f1\01\00p\f1\01\00"
  "\89\f1\01\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\007c\00\00\01"
  "\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\09\00\00\00y=\00\00\00\00"
  "\00\00\0a\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\f9c\00\00\01\00"
  "\00\00\0a\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\b1>\00\00\01\00"
  "\00\00\0a\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00gA\00\00\01\00\00"
  "\00\0e\00\00\00\0f\00\00\00\10\00\00\00\11\00\00\000c\00\00\01\00\00\00"
  "\12\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\8ae\00\00\01\00\00\00"
  "\06\00\00\00\13\00\00\00\14\00\00\00\15\00\00\00#f\00\00\00\00\00\00\06"
  "\00\00\00\16\00\00\00\17\00\00\00\18\00\00\00@e\00\00\00\00\00\00\06\00"
  "\00\00\19\00\00\00\1a\00\00\00\1b\00\00\00\18d\00\00\00\00\00\00\1c\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\ceb\00\00\01\00\00\00\0a\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\1df\00\00\01\00\00\00\0a\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\bbe\00\00\01\00\00\00\1d\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\95.\00\00\01\00\00\00\12\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\10A\00\00\01\00\00\00\12\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\cf\12\00\00\01\00\00\00\12\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\b7d\00\00\01\00\00\00\1e\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\01?\00\00\01\00\00\00\1f\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\c6<\00\00\01\00\00\00\1e\00"
  "\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\009d\00\00\01\00\00\00 \00\00\00"
  "\0b\00\00\00\0c\00\00\00\0d\00\00\00Df\00\00\01\00\00\00\06\00\00\00!\00"
  "\00\00"\00\00\00#\00\00\00\f0b\00\00\00\00\00\00\1e\00\00\00\0b\00\00\00"
  "\0c\00\00\00\0d\00\00\00\92e\00\00\01\00\00\00$\00\00\00\0b\00\00\00\0c"
  "\00\00\00\0d\00\00\00\a8D\00\00\01\00\00\00\06\00\00\00%\00\00\00&\00\00"
  "\00'\00\00\00\86c\00\00\00\00\00\00\06\00\00\00(\00\00\00)\00\00\00*\00"
  "\00\00Rf\00\00\00\00\00\00\06\00\00\00+\00\00\00,\00\00\00-\00\00\00yc"
  "\00\00\00\00\00\00\06\00\00\00.\00\00\00/\00\00\000\00\00\00\04d\00\00"
  "\00\00\00\00\06\00\00\001\00\00\002\00\00\003\00\00\00Fe\00\00\00\00\00"
  "\00\06\00\00\004\00\00\005\00\00\006\00\00\00\1ed\00\00\00\00\00\00\06"
  "\00\00\007\00\00\008\00\00\009\00\00\00Xc\00\00\00\00\00\00\06\00\00\00"
  ":\00\00\00;\00\00\00<\00\00\00\16f\00\00\00\00\00\00\06\00\00\00=\00\00"
  "\00>\00\00\00?\00\00\00\b4e\00\00\00\00\00\00\06\00\00\00@\00\00\00A\00"
  "\00\00B\00\00\009e\00\00\00\00\00\00\06\00\00\00C\00\00\00D\00\00\00E\00"
  "\00\00\dfd\00\00\00\00\00\00\06\00\00\00F\00\00\00G\00\00\00H\00\00\00"
  "\85d\00\00\00\00\00\00\06\00\00\00I\00\00\00J\00\00\00K\00\00\00\11d\00"
  "\00\00\00\00\00\06\00\00\00L\00\00\00M\00\00\00N\00\00\00\a8c\00\00\00"
  "\00\00\00\06\00\00\00O\00\00\00P\00\00\00Q\00\00\00\c7b\00\00\00\00\00"
  "\00\06\00\00\00R\00\00\00S\00\00\00T\00\00\00\fee\00\00\00\00\00\00\06"
  "\00\00\00U\00\00\00V\00\00\00W\00\00\00\a3e\00\00\00\00\00\00\06\00\00"
  "\00X\00\00\00Y\00\00\00Z\00\00\00(e\00\00\00\00\00\00\06\00\00\00[\00\00"
  "\00\\00\00\00]\00\00\00\ced\00\00\00\00\00\00\06\00\00\00^\00\00\00_\00"
  "\00\00`\00\00\00bd\00\00\00\00\00\00\06\00\00\00a\00\00\00b\00\00\00c\00"
  "\00\00\eec\00\00\00\00\00\00\06\00\00\00d\00\00\00e\00\00\00f\00\00\00"
  "\97c\00\00\00\00\00\00\06\00\00\00g\00\00\00h\00\00\00i\00\00\00Gc\00\00"
  "\00\00\00\00\06\00\00\00j\00\00\00k\00\00\00l\00\00\00\deb\00\00\00\00"
  "\00\00\06\00\00\00m\00\00\00n\00\00\00o\00\00\00lf\00\00\00\00\00\00\06"
  "\00\00\00p\00\00\00q\00\00\00r\00\00\00\e0e\00\00\00\00\00\00\06\00\00"
  "\00s\00\00\00t\00\00\00u\00\00\00\12e\00\00\00\00\00\00\06\00\00\00v\00"
  "\00\00w\00\00\00x\00\00\00\abd\00\00\00\00\00\00\06\00\00\00y\00\00\00"
  "z\00\00\00{\00\00\00Ld\00\00\00\00\00\00\06\00\00\00|\00\00\00}\00\00\00"
  "~\00\00\00\d8c\00\00\00\00\00\00\7f\00\00\00\80\00\00\00\81\00\00\00\82"
  "\00\00\00\f3@\00\00\00\00\00\00\7f\00\00\00\83\00\00\00\84\00\00\00\85"
  "\00\00\00\cd<\00\00\00\00\00\00\06\00\00\00\86\00\00\00\87\00\00\00\88"
  "\00\00\00\ff\19\00\00\00\00\00\00\06\00\00\00\89\00\00\00\8a\00\00\00\8b"
  "\00\00\00\15\1f\00\00\00\00\00\00\06\00\00\00\8c\00\00\00\8d\00\00\00\8e"
  "\00\00\0034\00\00\00\00\00\00\06\00\00\00\8f\00\00\00\90\00\00\00\91\00"
  "\00\00\85"\00\00\00\00\00\00\06\00\00\00\92\00\00\00\93\00\00\00\94\00"
  "\00\00 2\00\00\00\00\00\00\95\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00"
  "\00\cb-\00\00\01\00\00\00\06\00\00\00\96\00\00\00\97\00\00\00\98\00\00"
  "\00\0c\1f\00\00\00\00\00\00\06\00\00\00\99\00\00\00\9a\00\00\00\9b\00\00"
  "\00\e54\00\00\00\00\00\00\06\00\00\00\9c\00\00\00\9d\00\00\00\9e\00\00"
  "\00\15#\00\00\00\00\00\00\06\00\00\00\9f\00\00\00\a0\00\00\00\a1\00\00"
  "\00\1d#\00\00\00\00\00\00\06\00\00\00\a2\00\00\00\a3\00\00\00\a4\00\00"
  "\006.\00\00\00\00\00\00\95\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00"
  "{>\00\00\01\00\00\00\95\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\0b"
  "\1a\00\00\01\00\00\00\95\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\16"
  "E\00\00\01\00\00\00\95\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00i"\00"
  "\00\01\00\00\00\1d\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\17A\00"
  "\00\01\00\00\00\1d\00\00\00\0b\00\00\00\0c\00\00\00\0d\00\00\00 E\00\00"
  "\01\00\00\00\06\00\00\00\a5\00\00\00\a6\00\00\00\a7\00\00\00Yf\00\00\00"
  "\00\00\00\a8\00\00\00\07\00\00\00\08\00\00\00\09\00\00\00\0dE\00\00\00"
  "\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\98Y\00\00\01"
  "\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\17\1a\00\00\01"
  "\00\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00;E\00\00\01\00"
  "\00\00\02\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00w"\00\00\01\00\00"
  "\00\06\00\00\00\a9\00\00\00\aa\00\00\00\ab\00\00\007f\00\00\00\00\00\00"
  "\06\00\00\00\ac\00\00\00\ad\00\00\00\ae\00\00\00\c8e\00\00\00\00\00\00"
  "\06\00\00\00\af\00\00\00\b0\00\00\00\b1\00\00\00Te\00\00\00\00\00\00\06"
  "\00\00\00\b2\00\00\00\b3\00\00\00\b4\00\00\00\edd\00\00\00\00\00\00\06"
  "\00\00\00\b5\00\00\00\b6\00\00\00\b7\00\00\00\93d\00\00\00\00\00\00\06"
  "\00\00\00\b8\00\00\00\b9\00\00\00\ba\00\00\00,d\00\00\00\00\00\00\06\00"
  "\00\00\bb\00\00\00\bc\00\00\00\bd\00\00\00\b6c\00\00\00\00\00\00\06\00"
  "\00\00\be\00\00\00\bf\00\00\00\c0\00\00\00fc\00\00\00\00\00\00\06\00\00"
  "\00\c1\00\00\00\c2\00\00\00\c3\00\00\00\13c\00\00\00\00\00\00\95\00\00"
  "\00\0b\00\00\00\0c\00\00\00\0d\00\00\00\e1D\00\00\01\00\00\00\06\00\00"
  "\00\c4\00\00\00\c5\00\00\00\c6\00\00\00sd\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\09\09\09\09"
  "\09\09\09\09\09\09\09\09\09\09\09\09\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\08\08\02\02"
  "\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02"
  "\02\02\02\02\0a\03\03\03\03\03\03\03\03\03\03\03\03\04\03\03\0b\06\06\06"
  "\05\08\08\08\08\08\08\08\08\08\08\08\00\01\02\03\05\08\07\01\01\01\04\06"
  "\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\01\01"
  "\01\01\01\00\01\00\01\01\01\01\01\01\01\02\01\01\01\01\01\02\01\02\01\01"
  "\01\01\01\01\01\01\01\01\01\01\01\02\01\01\01\01\01\01\01\01\01\02\01\01"
  "\01\01\01\01\01\02\01\01\01\01\01\01\01\01\01\01\01\01\01\03\01\03\01\01"
  "\01\01\01\01\01\03\01\01\01\01\01\03\01\03\01\01\01\01\01\01\01\03\01\01"
  "\01\01\01\01\01\01\01\01\01\01\01\01\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00"
  "\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\07\00\07\00\07\07\00\00\07\07\07\07\00\07\07\00\03\00\03"
  "\00\03\03\00\00\03\03\03\03\00\03\03\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\00\07\07\07\07\07\07\07\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\03\03\03\03"
  "\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00"
  "\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\00\00"
  "\00\00\07\00\00\07\07\07\07\00\00\07\00\03\00\00\00\03\03\00\00\03\03\03"
  "\03\00\00\03\07\07\07\00\07\07\07\07\07\07\07\07\07\07\07\07\00\07\07\07"
  "\07\07\07\00\07\07\07\07\07\07\07\03\03\03\03\00\03\03\03\03\03\03\03\03"
  "\03\03\03\03\00\03\03\03\03\03\03\00\03\03\03\03\03\03\03\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02"
  "\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\07\03\07\00\07\07\00\00\07\07\07"
  "\07\00\07\00\00\03\00\03\00\03\03\00\00\03\03\03\03\07\03\03\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\07\07\07\07"
  "\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\00\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00"
  "\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\00\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\00\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00"
  "\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\00\07\07\07\00"
  "\07\00\07\07\03\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\07"
  "\07\07\07\07\07\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02"
  "\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\07\07\07\07\07\07\00\07\07\07\07"
  "\07\00\07\07\00\03\03\03\03\03\03\00\03\03\03\03\03\00\03\03\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00"
  "\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\07\03\00\07\03\07\00\07\00\07\03\07\00\00\07\07\03\07\03"
  "\07\03\00\07\03\03\03\07\03\07\03\03\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00"
  "\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\07\00\03\00\03\00\00\00\00\00\00\00\00\00\07\03\00\00\03\00\03\00"
  "\07\03\07\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\00\07\07\07\07\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\00\03\03\03\03\03\03\03\03\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02"
  "\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\07\03\07\00\00\07\00\03\00\07\00"
  "\07\00\03\07\00\00\07\03\07\00\00\00\03\03\03\00\07\03\07\03\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00"
  "\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07"
  "\00\00\00\00\00\00\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00"
  "\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03"
  "\03\00\03\03\00\00\00\00\00\03\00\00\00\00\00\07\07\00\07\07\00\00\00\00"
  "\00\07\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02"
  "\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00"
  "\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00"
  "\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\07\00\07\07\07\07\00\00\00\00\00\00\00\00\00\00\03\00"
  "\03\03\03\03\00\00\00\07\00\07\00\00\00\00\07\00\00\00\00\07\00\00\00\03"
  "\00\03\00\00\00\03\03\00\07\00\03\03\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\00\07\07\07\07\07\07\07\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\03\03\03\03"
  "\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00"
  "\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\00\00\00\00\00\07\07\00\03\00\00\00\00\00\00\07\00"
  "\07\07\07\07\03\00\00\00\00\00\00\00\00\00\03\00\03\03\03\03\00\07\03\07"
  "\00\07\00\00\07\00\07\00\00\00\00\07\00\00\07\03\03\03\00\00\03\00\03\00"
  "\03\07\03\03\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02"
  "\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\00\07\00\07\00\00\00\00\00"
  "\00\00\00\00\00\00\03\00\03\00\03\07\00\00\00\00\00\00\00\00\00\00\03\00"
  "\00\00\00\00\00\00\00\00\00\03\00\00\00\00\03\00\00\00\00\00\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\07\07\07\07"
  "\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\00\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00"
  "\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\03\07\00\07\07\07\00\07\00\07\07\03\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\00\07\07\07\07\07\07\07\07\07\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00"
  "\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\00"
  "\07\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\03\00\00\07\00\00\00\00"
  "\00\00\00\00\00\00\03\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\03\00"
  "\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\00\07\07\07\07\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\00\03\03\03\03\03\03\03\03\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02"
  "\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00"
  "\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\02\02\02\02\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00"
  "\00\00\00\00\00\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\07\00\07\00\00\00\00\07\00\00\00\00\00\03\00\00\03\00\03\00"
  "\00\00\00\03\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\00\07\07\07\07\07\07\07\03\03\03\03\03\03\03\03\03\03\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\00\03\03\03\03\03\03\03\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\02\02\02"
  "\02\02\02\02\02\02\00\00\00\00\00\00\00\07\07\07\07\07\07\07\07\07\07\07"
  "\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\00\00\00\00\00\00\03\03\03"
  "\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\d6\dc\01\fc\01\00\00\10\01\00\00@"
  "\0a\\00\00\00\00\0a\#\00\00\00\ \09\0c\0d\0b\0a\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01"
  "\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01"
  "\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01"
  "\01\01\01\01\01\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01"
  "\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\07\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00"
  "\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\01\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\05\00\00\00\02\00\00\00\00\00\00"
  "\00\00\00\00\00\02\00\00\00\04\00\00\00\04\00\00\00\08\00\00\00\01\00\00"
  "\00\02\00\00\00\04\00\00\00\08\00\00\00\04\00\00\00\00\00\00\00\bcF\00"
  "\00\8fF\00\00jY\00\00\b0X\00\00\9bX\00\00\11D\00\00C=\00\00\1bD\00\00\9f"
  "D\00\00\8eW\00\00\b7F\00\00\c0C\00\00lW\00\00\e1=\00\00\b7=\00\00\c3=\00"
  "\000<\00\00\84=\00\000C\00\00\97=\00\00#>\00\00IC\00\00+D\00\00FH\00\00"
  "\90A\00\00\80A\00\00\b9Y\00\00`=\00\00p=\00\00M=\00\00;=\00\00.=\00\00"
  "\05B\00\00\0bX\00\00\e9G\00\00\a1A\00\00\c7W\00\00$@\00\00%D\00\00\a8C"
  "\00\00\a2C\00\00+?\00\00`W\00\00A>\00\00\8b;\00\00UD\00\00\dd;\00\00UH"
  "\00\001?\00\00\84C\00\00\16?\00\00|C\00\00\ffW\00\00\fb<\00\00\87?\00\00"
  "\f5G\00\00}H\00\00\1c@\00\00\b3;\00\00|D\00\00\0e<\00\00\d6>\00\00\16X"
  "\00\00\f7A\00\00\a8G\00\00\c6D\00\00\9bG\00\00m>\00\00\02G\00\00\c8X\00"
  "\007A\00\00\fa@\00\00hG\00\00\f4F\00\00\f3W\00\00\bdG\00\00\d0G\00\00\8d"
  "G\00\00\ef>\00\00\e9F\00\00\c1?\00\00\96A\00\00\11H\00\00\ee<\00\00\10"
  "C\00\00\09=\00\00\e4>\00\00ZA\00\00YG\00\00\d5?\00\00e;\00\00pA\00\00\dc"
  "F\00\00y?\00\00KB\00\00LG\00\00&G\00\00^>\00\00\92?\00\00\c4B\00\00\aa"
  "?\00\00>B\00\00 H\00\00\ed?\00\00\baX\00\00\8c:\00\00\e9:\00\00\b9:\00"
  "\00\1cC\00\00\deW\00\00\12B\00\00h>\00\00qC\00\00&?\00\00T>\00\00lC\00"
  "\00\05H\00\00H>\00\00UC\00\00\08?\00\00\fdG\00\00\b4W\00\00\d0=\00\00\94"
  ">\00\00\a5=\00\00h=\00\00"C\00\00\edD\00\00\a0<\00\00C<\00\00\fdD\00\00"
  "\b0<\00\00\e4G\00\00\ebC\00\00\dfG\00\00\e6C\00\00O>\00\00aC\00\00\8dD"
  "\00\00\afA\00\00\d3W\00\00\8cA\00\00EE\00\00\b4C\00\00\ee@\00\00\97C\00"
  "\00\c1@\00\00\92C\00\00\eaA\00\00Q=\00\00\e8W\00\00\bcA\00\00qW\00\00\af"
  "X\00\00\7fA\00\00:=\00\00-=\00\00G>\00\00iB\00\00N>\00\00\ed@\00\00\c0"
  "@\00\00-A\00\00\fa:\00\00tB\00\00\c9U\00\00'V\00\00ZN\00\00<V\00\00'J\00"
  "\00\afH\00\00DN\00\00CW\00\00\13J\00\00\07W\00\00MO\00\00\e0H\00\00\ac"
  "U\00\00\dbO\00\001M\00\00\cdJ\00\00\e9O\00\00\1cT\00\00\a3O\00\00PR\00"
  "\00ZQ\00\005I\00\00\8bN\00\00/P\00\00\0eU\00\00\acJ\00\00ST\00\00\91R\00"
  "\00\8fQ\00\00\93V\00\00{I\00\00qS\00\00\01T\00\000R\00\00@Q\00\003T\00"
  "\00\f7O\00\00lR\00\00pQ\00\00^I\00\00AS\00\00}V\00\00\1dI\00\00\12Q\00"
  "\00\dcP\00\00mV\00\00\f3T\00\00iJ\00\00\ffU\00\00\1bU\00\00\00U\00\00\a3"
  "N\00\00\16N\00\00\f7I\00\00!K\00\009J\00\00IM\00\00\d5M\00\00\95T\00\00"
  "\ddR\00\00\cfQ\00\00\cbV\00\00\b7I\00\00\abS\00\00\0dP\00\00vN\00\00\d1"
  "P\00\00\9dH\00\00\f7H\00\00\caH\00\00BO\00\00\e9S\00\00\13R\00\00)Q\00"
  "\00\08I\00\00\b7T\00\00\04S\00\00\f0Q\00\00\e8V\00\00\d6I\00\00\c9S\00"
  "\00\06N\00\00BU\00\00\00O\00\00\90P\00\00\87O\00\00cP\00\00\1aP\00\00\d9"
  "L\00\00QW\00\00tT\00\00\b7R\00\00\afQ\00\00\afV\00\00\99I\00\00\8eS\00"
  "\00*U\00\00\dbT\00\00VV\00\00]S\00\00BP\00\00{U\00\00II\00\00-S\00\00\bd"
  "H\00\00\beO\00\00\f8L\00\00\e6J\00\00#W\00\00fM\00\00\16M\00\00\16K\00"
  "\00\baJ\00\00\02K\00\00(O\00\00\e7U\00\00\b8N\00\00\cfN\00\00hO\00\00\19"
  "V\00\00\caO\00\00(N\00\00\e5N\00\00\89M\00\00\acM\00\00\eeM\00\00\03Q\00"
  "\00\c2L\00\00\8fH\00\005N\00\00\c4P\00\00\94J\00\00\acP\00\00\98U\00\00"
  "gU\00\00\05J\00\00VJ\00\00\81P\00\00\c7M\00\00xO\00\00\f6P\00\00\e8P\00"
  "\00\85J\00\00\b0O\00\00[O\00\00\8aU\00\00RP\00\00HV\00\00!/\00\00\84\0a"
  "\00\00A\09\00\0029\00\00l\09\00\0012\00\00|2\00\00\c0.\00\00\12\0f\00\00"
  "\9e/\00\00\e3/\00\00\ab \00\00\8e\10\00\00\94$\00\00"$\00\00\$\00\00\1e"
  "\08\00\00`\08\00\00\e3\10\00\00\d8\12\00\00\09\05\00\00\c5\0e\00\00+\05"
  "\00\00\09\11\00\00Y\05\00\00q6\00\00b\0c\00\00\e37\00\00k\0e\00\00\e3 "
  "\00\00\11\12\00\00\b75\00\00P5\00\00s7\00\00\0e\1e\00\00\c4\07\00\00\bb"
  "6\00\00M6\00\00\df\0a\00\00\df6\00\00\9e\0d\00\00S\1c\00\00\086\00\00\f0"
  "8\00\00\c1\0b\00\00\15i\00\00\fe\0c\00\008\0d\00\00\f6h\00\00\f4,\00\00"
  "\98-\00\00\86\0b\00\00\93\0c\00\00\00\0e\00\00\cd\15\00\00\e1\04\00\00"
  "\8d\1b\00\00w.\00\00\18\17\00\00H\12\00\00u\12\00\00\e4\1b\00\00\12\1c"
  "\00\00o\0d\00\00\1b8\00\00\8a\09\00\00H\1e\00\00H0\00\00\008\00\00\99\0e"
  "\00\00\9b0\00\00\e52\00\00\bb0\00\00\ff0\00\00!3\00\00\df0\00\00\1d\13"
  "\00\00$!\00\009\11\00\00\845\00\00\cf\08\00\00R\0b\00\00\cd8\00\00\898"
  "\00\00\9c9\00\00\ac8\00\00\109\00\001:\00\00\00\00\00\00\d3\14\00\00\99"
  "\08\00\00l#\00\00\df9\00\00\0f\18\00\00A\18\00\00\cb7\00\00\19:\00\00\dc"
  "\09\00\00n\18\00\00B\17\00\00&-\00\00\ca\1d\00\00(\0c\00\00\f2\0b\00\00"
  "/6\00\00\b3\19\00\00;#\00\00\80!\00\00\af%\00\00\c8!\00\00\a3!\00\00\f0"
  "3\00\00C8\00\00\a6.\00\00+0\00\00\ae\0a\00\00\0d\08\00\00,\19\00\00\99"
  "\19\00\00~\19\00\00i\19\00\00B\19\00\00\ed\1e\00\00\df\1e\00\00\86/\00"
  "\00W3\00\00\9a"\00\00\155\00\0057\00\00\90\06\00\00a\06\00\000\07\00\00"
  "\01\07\00\00@\06\00\00\11\06\00\00\e0\06\00\00\b1\06\00\00X\04\00\00x0"
  "\00\00\86\1c\00\00\0d7\00\00\ce\0d\00\00\05\0a\00\00\e55\00\00\04/\00\00"
  "\aa7\00\00\913\00\00\eb-\00\00,\0a\00\00\b3\10\00\00\d4"\00\00\ab\11\00"
  "\00\b02\00\00\18%\00\00\99\18\00\00_.\00\00\b1\17\00\00\dc\17\00\00\9c"
  "\12\00\00\fc\18\00\00\82\11\00\00\00:\00\00\d5\11\00\00\f4\11\00\00i\15"
  "\00\00`8\00\00t9\00\00\1c1\00\00\8a\04\00\00\df\16\00\00\9a\14\00\004\15"
  "\00\00\fd\14\00\00x\1e\00\00r\1a\00\00B\1a\00\00\9e\15\00\00\95\1a\00\00"
  "*\1a\00\00=\1d\00\00l\1d\00\00\9b\1d\00\00Z\0a\00\00\05\1d\00\00*\1e\00"
  "\00\cf\18\00\00c-\00\00\12\0b\00\00\b6\04\00\00\c8\1a\00\00]\1b\00\00,"
  "\1b\00\00\fa\1a\00\00\ba\1c\00\00\e9#\00\00\f1!\00\00  \00\00h \00\00/"
  " \00\00[\14\00\00"\14\00\00\e9\13\00\00R:\00\00R9\00\00\bd9\00\00\f34\00"
  "\00\e4\08\00\00\cd\0c\00\00\ed\1d\00\00:\0e\00\00\c0\09\00\00\13\10\00"
  "\00\fb\0f\00\00\ac#\00\00E\16\00\00\92\16\00\00\aa\05\00\00\f9\15\00\00"
  "P\0f\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\01\03\03\03\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\03\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\04\00\00\00\04\04\04"
  "\00\00\00\04\00\04\00\00\04\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\ff\ff\fc\fc\fc\fc\fc\fc\f0\f0\00\00\00\00\00\00\00\c0\c0\c0\c0\c0\c0\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\aa"
  "\00\c0\c0\c0\c0\c0\c0\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\00\00\00 \00\00\00"
  "@\00\00\00\80\00\00\00\c0\00\00\00\c0\00\00\00\a0\00\00\00`\00\00\00 \00"
  "\00\00@\00\00\00\80\00\00\00\c0\00\00\00\c0\00\00\00\a0\00\00\02\00\00"
  "\00\03\00\00\00\01\00\00\00\04\00\00\00\07\00\00\00\06\00\00\00\00`\00"
  "\00\00 \00\00\00@\00\00\00\80\00\00\00\c0\00\00\00\c0\00\00\00\a0\00\00"
  "Success\00Illegal byte sequence\00Domain error\00Result not representa"
  "ble\00Not a tty\00Permission denied\00Operation not permitted\00No suc"
  "h file or directory\00No such process\00File exists\00Value too large "
  "for data type\00No space left on device\00Out of memory\00Resource bus"
  "y\00Interrupted system call\00Resource temporarily unavailable\00Inval"
  "id seek\00Cross-device link\00Read-only file system\00Directory not em"
  "pty\00Connection reset by peer\00Operation timed out\00Connection refu"
  "sed\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00"
  "No such device or address\00No such device\00Not a directory\00Is a di"
  "rectory\00Text file busy\00Exec format error\00Invalid argument\00Argu"
  "ment list too long\00Symbolic link loop\00Filename too long\00Too many"
  " open files in system\00No file descriptors available\00Bad file descr"
  "iptor\00No child process\00Bad address\00File too large\00Too many lin"
  "ks\00No locks available\00Resource deadlock would occur\00State not re"
  "coverable\00Previous owner died\00Operation canceled\00Function not im"
  "plemented\00No message of desired type\00Identifier removed\00Link has"
  " been severed\00Protocol error\00Bad message\00Not a socket\00Destinat"
  "ion address required\00Message too large\00Protocol wrong type for soc"
  "ket\00Protocol not available\00Protocol not supported\00Not supported\00"
  "Address family not supported by protocol\00Address not available\00Net"
  "work is down\00Network unreachable\00Connection reset by network\00Con"
  "nection aborted\00No buffer space available\00Socket is connected\00So"
  "cket not connected\00Operation already in progress\00Operation in prog"
  "ress\00Stale file handle\00Quota exceeded\00Multihop attempted\00Capab"
  "ilities insufficient\00\00\00\00\00\00\00u\02N\00\d6\01\e2\04\b9\04\18"
  "\01\8e\05\ed\02\16\04\f2\00\97\03\01\038\05\af\01\82\01O\03/\04\1e\00\d4"
  "\05\a2\00\12\03\1e\03\c2\01\de\03\08\00\ac\05\00\01d\02\f1\01e\054\02\8c"
  "\02\cf\02-\03L\04\e3\05\9f\02\f8\04\1c\05\08\05\b1\02K\05\15\02x\00R\02"
  "<\03\f1\03\e4\00\c3\03}\04\cc\00\aa\03y\05$\02n\01m\03"\04\ab\04D\00\fb"
  "\01\ae\00\83\03`\00\e5\01\07\04\94\04^\04+\00X\019\01\92\00\c2\05\9b\01"
  "C\02F\01\f6\05\00\000\00\01\00\19\00\0a\00\19\19\19\00\00\00\00\05\00\00"
  "\00\00\00\00\09\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\0a\19\19"
  "\19\03\0a\07\00\01\1b\09\0b\18\00\00\09\06\0b\00\00\0b\00\06\19\00\00\00"
  "\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00"
  "\00\00\00\00\19\00\0a\0d\19\19\19\00\0d\00\00\02\00\09\0e\00\00\00\09\00"
  "\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00"
  "\00\00\00\09\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00"
  "\00\00\00\0f\00\00\00\04\0f\00\00\00\00\09\10\00\00\00\00\00\10\00\00\10"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\09"
  "\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00"
  "\1a\1a\1a\00\00\00\00\00\00\09\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00"
  "\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\09\14\00\00\00"
  "\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00"
  "\15\00\00\00\00\09\16\00\00\00\00\00\16\00\00\16\00\000123456789ABCDEF"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\00\01\02\03\04\05\06\07\08\09\ff\ff\ff\ff\ff\ff\ff\0a\0b\0c\0d\0e\0f"
  "\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !"#\ff\ff\ff\ff\ff\ff"
  "\0a\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !"#"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff"
  "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\04\07\03\06\05\00";
data data(offset: 63600) =
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  ""\00\00\00#\00\00\00\01\00\00\00\1a\00\00\00\1b\00\00\00\01\00\00\00.\00"
  "\00\00\12\00\00\00\01\00\00\002\00\00\002\00\00\00\01\00\00\00.\00\00\00"
  "\12\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00.\00\00\00.\00\00\00\00\00\00\00\1c\00\00\00\1d"
  "\00\00\00\01\01\00\00\1c\00\00\00\1d\00\00\00\01\01\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\000\00\00\001\00"
  "\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00 \00\00\00!\00\00\00\01\00\00\00.\00\00\00\12\00\00\00"
  "\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\002\00\00\002\00\00\00\01"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\002\00\00\002\00\00\00\01\00"
  "\00\00\16\00\00\00\17\00\00\00\01\01\00\00\16\00\00\00\17\00\00\00\01\01"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00.\00\00\00\12\00\00\00\01\00\00\00\1c\00\00\00\1d\00\00\00\01\01"
  "\00\00\1c\00\00\00\1d\00\00\00\01\01\00\00\0c\00\00\00\0d\00\00\00\01\01"
  "\00\00\1c\00\00\00\1d\00\00\00\01\01\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\1e\00\00\00\1f\00\00\00\01\00\00\00\1e\00\00\00\1f\00\00\00\01\00"
  "\00\00$\00\00\00%\00\00\00\01\00\00\00.\00\00\00\12\00\00\00\01\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\08\00\00\00\09\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\04\00\00\00\05\00\00\00\01\00\00\00\0c\00\00\00\0d\00\00\00\01\01\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\08\00\00\00\09\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\07\00\00\00\01\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\04\00\00\00\05\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\04\00\00\00\05\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\04\00\00\00\05\00\00\00\01\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\1e\00\00\00\1f\00\00\00\01\00\00\00"
  "\1e\00\00\00\1f\00\00\00\01\00\00\00\1c\00\00\00\1d\00\00\00\01\01\00\00"
  "$\00\00\00%\00\00\00\01\00\00\00.\00\00\00\12\00\00\00\01\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00&\00\00\00'\00\00\00\01\00\00\00.\00\00\00"
  "\12\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00(\00\00\00)\00\00\00\01\00\00\00.\00\00\00\12\00"
  "\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\00\00!\00\00"
  "\00\01\00\00\00.\00\00\00\12\00\00\00\01\00\00\00\18\00\00\00\19\00\00"
  "\00\01\00\00\00.\00\00\00\12\00\00\00\01\00\00\00&\00\00\00'\00\00\00\01"
  "\00\00\00.\00\00\00\12\00\00\00\01\00\00\00\14\00\00\00\14\00\00\00\01"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00(\00\00\00)\00\00\00\01\00"
  "\00\00.\00\00\00\12\00\00\00\01\00\00\00(\00\00\00)\00\00\00\01\00\00\00"
  ".\00\00\00\12\00\00\00\01\00\00\00,\00\00\00,\00\00\00\01\00\00\00.\00"
  "\00\00\12\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00.\00\00\00.\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\18\00\00"
  "\00\18\00\00\00\00\00\00\00\18\00\00\00\18\00\00\00\00\00\00\00*\00\00"
  "\00*\00\00\00\00\00\00\00*\00\00\004\00\00\00\00\00\00\00.\00\00\00.\00"
  "\00\00\00\00\00\00(\00\00\00)\00\00\00\01\00\00\00.\00\00\00.\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\05\00\00\00\00\00\00\00\00\00\00\00\c8\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\c9\00\00\00\ca\00\00\00"
  "\f0\02\01\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00"
  "\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
  "0\00\01\00";

import function imported_wasi_snapshot_preview1_args_get(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_args_sizes_get(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_environ_get(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_environ_sizes_get(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_clock_res_get(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_clock_time_get(a:int, b:long, c:int):int;

import function imported_wasi_snapshot_preview1_fd_advise(a:int, b:long, c:long, d:int):int;

import function imported_wasi_snapshot_preview1_fd_allocate(a:int, b:long, c:long):int;

import function imported_wasi_snapshot_preview1_fd_close(a:int):int;

import function imported_wasi_snapshot_preview1_fd_datasync(a:int):int;

import function imported_wasi_snapshot_preview1_fd_fdstat_get(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_fd_fdstat_set_flags(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_fd_fdstat_set_rights(a:int, b:long, c:long):int;

import function imported_wasi_snapshot_preview1_fd_filestat_get(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_fd_filestat_set_size(a:int, b:long):int;

import function imported_wasi_snapshot_preview1_fd_filestat_set_times(a:int, b:long, c:long, d:int):int;

import function imported_wasi_snapshot_preview1_fd_pread(a:int, b:int, c:int, d:long, e:int):int;

import function imported_wasi_snapshot_preview1_fd_prestat_get(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_fd_prestat_dir_name(a:int, b:int, c:int):int;

import function imported_wasi_snapshot_preview1_fd_pwrite(a:int, b:int, c:int, d:long, e:int):int;

import function imported_wasi_snapshot_preview1_fd_read(a:int, b:int, c:int, d:int):int;

import function imported_wasi_snapshot_preview1_fd_readdir(a:int, b:int, c:int, d:long, e:int):int;

import function imported_wasi_snapshot_preview1_fd_renumber(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_fd_seek(a:int, b:long, c:int, d:int):int;

import function imported_wasi_snapshot_preview1_fd_sync(a:int):int;

import function imported_wasi_snapshot_preview1_fd_tell(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_fd_write(a:int, b:int, c:int, d:int):int;

import function imported_wasi_snapshot_preview1_path_create_directory(a:int, b:int, c:int):int;

import function imported_wasi_snapshot_preview1_path_filestat_get(a:int, b:int, c:int, d:int, e:int):int;

import function imported_wasi_snapshot_preview1_path_filestat_set_times(a:int, b:int, c:int, d:int, e:long, f:long, g:int):int;

import function imported_wasi_snapshot_preview1_path_link(a:int, b:int, c:int, d:int, e:int, f:int, g:int):int;

import function imported_wasi_snapshot_preview1_path_open(a:int, b:int, c:int, d:int, e:int, f:long, g:long, h:int, i:int):int;

import function imported_wasi_snapshot_preview1_path_readlink(a:int, b:int, c:int, d:int, e:int, f:int):int;

import function imported_wasi_snapshot_preview1_path_remove_directory(a:int, b:int, c:int):int;

import function imported_wasi_snapshot_preview1_path_rename(a:int, b:int, c:int, d:int, e:int, f:int):int;

import function imported_wasi_snapshot_preview1_path_symlink(a:int, b:int, c:int, d:int, e:int):int;

import function imported_wasi_snapshot_preview1_path_unlink_file(a:int, b:int, c:int):int;

import function imported_wasi_snapshot_preview1_poll_oneoff(a:int, b:int, c:int, d:int):int;

import function imported_wasi_snapshot_preview1_proc_exit(a:int);

import function imported_wasi_snapshot_preview1_sched_yield():int;

import function imported_wasi_snapshot_preview1_random_get(a:int, b:int):int;

import function imported_wasi_snapshot_preview1_sock_accept(a:int, b:int, c:int):int;

import function imported_wasi_snapshot_preview1_sock_recv(a:int, b:int, c:int, d:int, e:int, f:int):int;

import function imported_wasi_snapshot_preview1_sock_send(a:int, b:int, c:int, d:int, e:int):int;

import function imported_wasi_snapshot_preview1_sock_shutdown(a:int, b:int):int;

export function wasm_call_ctors() {
  wasilibc_populate_preopens()
}

function undefined_weak_wasilibc_find_relpath_alloc(a:int, b:int, c:int, d:int, e:int):int {
  return unreachable
}

export function initialize() {
  if (eqz(0[16425]:int)) goto B_a;
  unreachable;
  unreachable;
  label B_a:
  0[16425]:int = 1;
  wasm_call_ctors();
}

export function pm_regexp_named_capture_group_names(a:ubyte_ptr, b:int, c:int, d:int, e:int):int {
  var f:int = stack_pointer - 32;
  stack_pointer = f;
  f[7]:int = e;
  f[24]:byte = d;
  f[5]:int = c;
  f[3]:int = a;
  f[2]:int = a;
  f[4]:int = (d = a + b);
  return loop L_a {
           if (a >= d) goto B_d;
           c = 0;
           if (eqz(pm_regexp_parse_item(f + 8))) goto B_c;
           loop L_e {
             a = f[3]:int;
             if (a >= (d = f[4]:int)) goto B_d;
             e = a[0];
             if (e == 41) goto B_d;
             if (e == 124) goto B_d;
             if (pm_regexp_parse_item(f + 8)) continue L_e;
             goto B_c;
           }
           label B_d:
           if (a < d) goto B_f;
           c = 1;
           goto B_c;
           label B_f:
           if (a[0] == 124) goto B_b;
           c = 0;
           label B_c:
           stack_pointer = f + 32;
           return c;
           label B_b:
           f[3]:int = (a = a + 1);
           continue L_a;
         }
}

function pm_regexp_parse_item(a:int):int {
  var c:int;
  var d:ubyte_ptr;
  var f:ubyte_ptr;
  var g:int;
  var b:int = stack_pointer - 32;
  stack_pointer = b;
  a[1]:int = (d = (c = a[1]:int) + 1);
  var e:int = 1;
  f = c[0]:ubyte;
  br_table[B_e, B_g, B_b, B_a, ..B_h](f + -91);
  label B_h:
  e = 1;
  br_table[B_a, B_b, B_b, B_b, B_f, ..B_b](f + -36);
  label B_g:
  if (d >= a[2]:int) goto B_b;
  a[1]:int = c + 2;
  goto B_b;
  label B_f:
  if (d >= (f = a[2]:int)) goto B_c;
  if (d[0] != 63) goto B_c;
  a[1]:int = (d = c + 2);
  e = 0;
  if (d >= f) goto B_a;
  (b + 17)[0]:long@1 = 0L;
  (b + 23)[0]:long@1 = 0L;
  b[9]:long@1 = 0L;
  b[31]:byte = 1;
  b[8]:byte = 2;
  b[16]:byte = 1;
  b[11]:byte = 2;
  b[20]:byte = 1;
  b[28]:byte = 2;
  br_table[B_j, B_a, B_o, B_a, B_a, B_a, B_m, B_i, B_a, B_a, B_a, B_a, B_k, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_j, B_a, B_n, B_j, B_j, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_l, B_a, B_a, B_l, B_a, B_a, B_a, B_a, B_l, B_a, B_a, B_a, B_l, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_l, B_a, B_a, B_l, B_a, B_a, B_a, B_a, B_a, B_j, ..B_a](
    d[0] + -33)
  label B_o:
  if (eqz(a[16]:ubyte)) goto B_p;
  if (eqz((a[5]:int)[20]:ubyte)) goto B_p;
  c = 0;
  loop L_q {
    if (c & 1) goto B_r;
    if (d[0] != 41) goto B_r;
    a[1]:int = d + 1;
    goto B_b;
    label B_r:
    d = call_indirect(d, f - d, (a[5]:int)[0]:int);
    br_table[B_a, B_t, ..B_u](d);
    label B_u:
    f = a[1]:int;
    c = 0;
    goto B_s;
    label B_t:
    f = a[1]:int;
    c = f[0] == 92;
    label B_s:
    a[1]:int = (d = f + d);
    if (d < (f = a[2]:int)) continue L_q;
    goto B_a;
  }
  label B_p:
  if (eqz(pm_regexp_find(a, 41))) goto B_a;
  if (a[0]:int > (c = (d = a[1]:int) + -2)) goto B_b;
  loop L_v {
    if (c[0]:ubyte != 92) goto B_b;
    if (d >= (c = a[2]:int)) goto B_a;
    c = pm_memchr(d, 41, c - d, a[16]:ubyte, a[5]:int);
    if (eqz(c)) goto B_a;
    a[1]:int = (d = c + 1);
    if (a[0]:int <= (c = c + -1)) continue L_v;
    goto B_b;
  }
  label B_n:
  a[1]:int = (d = c + 3);
  if (d >= f) goto B_a;
  f = d[0];
  if (f == 61) goto B_x;
  if (f != 33) goto B_w;
  label B_x:
  a[1]:int = c + 4;
  goto B_d;
  label B_w:
  if (eqz(pm_regexp_find(a, 62))) goto B_a;
  pm_regexp_parser_named_capture(a, d, a[1]:int + -1);
  goto B_d;
  label B_m:
  a[1]:int = (d = c + 3);
  if (eqz(pm_regexp_find(a, 39))) goto B_a;
  pm_regexp_parser_named_capture(a, d, a[1]:int + -1);
  goto B_d;
  label B_l:
  g = f - d;
  loop L_y {
    c = d[0];
    br_table[B_d, B_z, B_z, B_z, B_k, B_z, B_z, B_z, B_z, B_z, B_z, B_z, B_z, B_z, B_z, B_z, B_z, B_d, ..B_z](
      c + -41);
    label B_z:
    c = c + -97 & 255;
    if (c > 23) goto B_a;
    c = b + 8 + c;
    br_table[B_ba, B_ba, B_aa, ..B_a](c[0]:ubyte + -1);
    label B_ba:
    c[0]:byte = 3;
    label B_aa:
    a[1]:int = (d = d + 1);
    g = g + -1;
    if (g) continue L_y;
    goto B_a;
  }
  label B_k:
  a[1]:int = (c = d + 1);
  if (c >= f) goto B_a;
  c = d + 2;
  f = (d ^ -1) + f;
  loop L_ca {
    d = (c + -1)[0]:ubyte;
    br_table[B_d, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_da, B_d, ..B_da](
      d + -41);
    label B_da:
    d = d + -97 & 255;
    if (d > 23) goto B_a;
    g = b + 8 + d;
    d = g[0]:ubyte;
    if (d > 4) goto B_a;
    if (eqz(1 << d & 26)) goto B_a;
    a[1]:int = c;
    g[0]:byte = 4;
    c = c + 1;
    f = f + -1;
    if (f) continue L_ca;
    goto B_a;
  }
  label B_j:
  a[1]:int = c + 3;
  goto B_d;
  label B_i:
  if (pm_regexp_find(a, 41)) goto B_d;
  goto B_a;
  label B_e:
  e = 0;
  if (eqz(pm_regexp_parse_lbracket(a))) goto B_a;
  goto B_b;
  label B_d:
  f = a[2]:int;
  d = a[1]:int;
  label B_c:
  if (d >= f) goto B_ea;
  if (d[0] == 41) goto B_ea;
  loop L_fa {
    e = 0;
    if (eqz(pm_regexp_parse_item(a))) goto B_a;
    loop L_ha {
      d = a[1]:int;
      if (d >= (f = a[2]:int)) goto B_ga;
      c = d[0];
      if (c == 41) goto B_ga;
      if (c == 124) goto B_ia;
      if (pm_regexp_parse_item(a)) continue L_ha;
      goto B_a;
      label B_ia:
    }
    a[1]:int = (d = d + 1);
    label B_ga:
    if (d >= f) goto B_ea;
    if (d[0] != 41) continue L_fa;
  }
  label B_ea:
  e = 0;
  if (d >= f) goto B_a;
  if (d[0] != 41) goto B_a;
  a[1]:int = d + 1;
  label B_b:
  pm_regexp_parse_quantifier(a);
  e = 1;
  label B_a:
  stack_pointer = b + 32;
  return e;
}

function pm_regexp_find(a:int, b:int):int {
  var e:int;
  var c:int = 0;
  var d:int = a[1]:int;
  if (d >= (e = a[2]:int)) goto B_a;
  d = pm_memchr(d, b, e - d, a[16]:ubyte, a[5]:int);
  if (eqz(d)) goto B_a;
  c = 1;
  a[1]:int = d + 1;
  label B_a:
  return c;
}

function pm_regexp_parser_named_capture(a:int_ptr, b:int, c:int) {
  var d:int = stack_pointer - 16;
  stack_pointer = d;
  pm_string_shared_init(d, b, c);
  pm_string_list_append(a[3], d);
  pm_string_free(d);
  stack_pointer = d + 16;
}

function pm_regexp_parse_lbracket(a:int):int {
  var d:int;
  var e:ubyte_ptr;
  var b:{ a:ubyte, b:ubyte }
  var c:ubyte_ptr;
  b = a[1]:int;
  c = b + 2;
  if (c >= (d = a[2]:int)) goto B_c;
  if (b.a != 91) goto B_c;
  if (b.b != 58) goto B_c;
  a[1]:int = (e = b + 1);
  if (e >= d) goto B_d;
  if (e[0] != 58) goto B_d;
  a[1]:int = c;
  if (c[0] != 94) goto B_e;
  a[1]:int = (c = b + 3);
  label B_e:
  if (c >= d) goto B_d;
  c = pm_memchr(c, 58, d - c, a[16]:ubyte, a[5]:int);
  if (c) goto B_f;
  d = a[2]:int;
  goto B_d;
  label B_f:
  a[1]:int = (e = c + 1);
  if (e >= (d = a[2]:int)) goto B_d;
  if (e[0] != 93) goto B_d;
  a[1]:int = (e = c + 2);
  if (e >= d) goto B_d;
  if (e[0] != 93) goto B_d;
  b = c + 3;
  goto B_b;
  label B_d:
  a[1]:int = b;
  label B_c:
  if (b >= d) goto B_g;
  if (b.a != 94) goto B_g;
  a[1]:int = (b = b + 1);
  label B_g:
  if (b >= d) goto B_h;
  loop L_i {
    c = b;
    if (c[0] != 93) goto B_j;
    b = c;
    goto B_h;
    label B_j:
    a[1]:int = (b = c + 1);
    br_table[B_m, B_l, ..B_k](c[0] + -91)
    label B_m:
    pm_regexp_parse_lbracket(a);
    d = a[2]:int;
    b = a[1]:int;
    goto B_k;
    label B_l:
    if (b >= d) goto B_k;
    a[1]:int = (b = c + 2);
    label B_k:
    if (b < d) continue L_i;
  }
  label B_h:
  c = 0;
  if (b >= d) goto B_a;
  if (b.a != 93) goto B_a;
  b = b + 1;
  label B_b:
  a[1]:int = b;
  c = 1;
  label B_a:
  return c;
}

function pm_regexp_parse_quantifier(a:int_ptr) {
  var c:int;
  var e:int;
  var d:int;
  var b:ubyte_ptr = a[1];
  if (b >= a[2]) goto B_a;
  c = b[0];
  d = c + -42;
  if (d > 21) goto B_c;
  if (eqz(1 << d & 2097155)) goto B_c;
  e = b + 1;
  goto B_b;
  label B_c:
  if (c != 123) goto B_a;
  d = 0;
  e = b + 1;
  b = e;
  loop L_d {
    a[1] = b;
    loop L_k {
      br_table[B_j, B_i, B_g, B_h, ..L_k](d)
    }
    label B_j:
    c = b[0] + -44;
    d = c & 255;
    if (d >= 14) goto B_b;
    if (eqz(16369 >> d & 1)) goto B_b;
    d = ((i32_extend8_s(c) << 2) + 1024)[0]:int;
    b = b + 1;
    continue L_d;
    label B_i:
    d = 1;
    c = b[0];
    if (c + -48 < 10) goto B_e;
    if (c == 44) goto B_f;
    if (c != 125) goto B_b;
    e = b + 1;
    goto B_b;
    label B_h:
    d = 2;
    if ((b[0] + -48 & 255) >= 10) goto B_b;
    goto B_e;
    label B_g:
    d = 2;
    c = b[0];
    if (c + -48 < 10) goto B_e;
    if (c != 125) goto B_b;
    e = b + 1;
    goto B_b;
    label B_f:
    d = 2;
    b = b + 1;
    continue L_d;
    label B_e:
    b = b + 1;
    continue L_d;
  }
  label B_b:
  a[1] = e;
  label B_a:
}

export function pm_serialize_comment_list(a:int, b:int, c:int) {
  var d:int = pm_list_size(b);
  if (d == -1) goto B_a;
  pm_buffer_append_varuint(c, d);
  b = b[1]:int;
  if (eqz(b)) goto B_b;
  loop L_c {
    pm_buffer_append_byte(c, b[12]:ubyte);
    pm_serialize_location(a, b + 4, c);
    b = b[0]:int;
    if (b) continue L_c;
  }
  label B_b:
  return ;
  label B_a:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
}

function pm_serialize_location(a:int_ptr, b:{ a:int, b:int }, c:int) {
  var d:int = b.a;
  if (eqz(d)) goto B_e;
  var e:int = b.b;
  if (eqz(e)) goto B_d;
  if (d > e) goto B_c;
  d = d - a[40];
  if (d <= -1) goto B_b;
  pm_buffer_append_varuint(c, d);
  b = b.b - b.a;
  if (b <= -1) goto B_a;
  pm_buffer_append_varuint(c, b);
  return ;
  label B_e:
  assert_fail(1972, 13478, 26, 7407);
  unreachable;
  label B_d:
  assert_fail(12805, 13478, 27, 7407);
  unreachable;
  label B_c:
  assert_fail(12786, 13478, 28, 7407);
  unreachable;
  label B_b:
  assert_fail(15462, 13478, 14, 25953);
  unreachable;
  label B_a:
  assert_fail(15462, 13478, 14, 25953);
  unreachable;
}

export function pm_serialize_encoding(a:int_ptr, b:int) {
  var c:int;
  c = strlen(a[4]);
  if (c != -1) goto B_a;
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_a:
  pm_buffer_append_varuint(b, c);
  pm_buffer_append_string(b, a[4], c);
}

export function pm_serialize_content(a:int_ptr, b:int, c:int_ptr) {
  var d:int_ptr = a[66];
  var e:int = strlen(d[4]);
  if (e == -1) goto B_g;
  pm_buffer_append_varuint(c, e);
  pm_buffer_append_string(c, d[4], e);
  pm_buffer_append_varsint(c, a[85]);
  e = pm_list_size(a + 200);
  if (e == -1) goto B_f;
  pm_buffer_append_varuint(c, e);
  e = (a + 204)[0]:int;
  if (eqz(e)) goto B_h;
  loop L_i {
    pm_buffer_append_byte(c, e[12]:ubyte);
    pm_serialize_location(a, e + 4, c);
    e = e[0]:int;
    if (e) continue L_i;
  }
  label B_h:
  pm_serialize_magic_comment_list(a, a + 212, c);
  if ((a + 228)[0]:int) goto B_k;
  pm_buffer_append_byte(c, 0);
  goto B_j;
  label B_k:
  pm_buffer_append_byte(c, 1);
  pm_serialize_location(a, a + 224, c);
  label B_j:
  pm_serialize_diagnostic_list(a, a + 244, c);
  pm_serialize_diagnostic_list(a, a + 232, c);
  e = c[0];
  pm_buffer_append_zeroes(c, 4);
  pm_buffer_append_varuint(c, (a + 300)[0]:int);
  pm_serialize_node(a, b, c);
  d = c[0];
  if (d == -1) goto B_e;
  (c[2] + e)[0]:int@1 = d;
  var f:int = c[0];
  pm_buffer_append_zeroes(c, a[75] << 3);
  d = (a + 304)[0]:int;
  if (eqz(d)) goto B_l;
  e = 0;
  b = 0;
  loop L_m {
    var g:int = (a[73] + e)[0]:int;
    var h:int = g & 1073741823;
    if (eqz(h)) goto B_n;
    d = h + -1 << 3;
    h = d + f;
    d = a[74] + d;
    if ((g >> 30) + -1 > 1) goto B_p;
    g = c[0];
    if (g == -1) goto B_d;
    if (g <= -1) goto B_c;
    (c[2] + h)[0]:int@1 = g | -2147483648;
    pm_buffer_append_bytes(c, d[0], d[1]);
    goto B_o;
    label B_p:
    g = d[0] - a[40];
    if (g <= -1) goto B_b;
    (c[2] + h)[0]:int@1 = g;
    label B_o:
    d = d[1];
    if (d == -1) goto B_a;
    (c[2] + h + 4)[0]:int@1 = d;
    d = a[76];
    label B_n:
    e = e + 8;
    b = b + 1;
    if (b < d) continue L_m;
  }
  label B_l:
  return ;
  label B_g:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_f:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_e:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_d:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_c:
  assert_fail(8781, 13511, 267, 2040);
  unreachable;
  label B_b:
  assert_fail(15462, 13478, 14, 25953);
  unreachable;
  label B_a:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
}

function pm_serialize_magic_comment_list(a:int_ptr, b:{ a:int, b:int, c:int, d:int, e:int }, c:int) {
  var d:int = pm_list_size(b);
  if (d == -1) goto B_e;
  pm_buffer_append_varuint(c, d);
  b = b.b;
  if (eqz(b)) goto B_f;
  loop L_g {
    d = b.b - a[40];
    if (d <= -1) goto B_d;
    pm_buffer_append_varuint(c, d);
    d = b.d;
    if (d == -1) goto B_c;
    pm_buffer_append_varuint(c, d);
    d = b.c - a[40];
    if (d <= -1) goto B_b;
    pm_buffer_append_varuint(c, d);
    d = b.e;
    if (d == -1) goto B_a;
    pm_buffer_append_varuint(c, d);
    b = b.a;
    if (b) continue L_g;
  }
  label B_f:
  return ;
  label B_e:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_d:
  assert_fail(15462, 13478, 14, 25953);
  unreachable;
  label B_c:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_b:
  assert_fail(15462, 13478, 14, 25953);
  unreachable;
  label B_a:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
}

function pm_serialize_diagnostic_list(a:int, b:int_ptr, c:int) {
  var d:int = pm_list_size(b);
  if (d == -1) goto B_b;
  pm_buffer_append_varuint(c, d);
  b = b[1];
  if (eqz(b)) goto B_c;
  loop L_d {
    d = strlen(b[3]);
    if (d == -1) goto B_a;
    pm_buffer_append_varuint(c, d);
    pm_buffer_append_string(c, b[3], d);
    pm_serialize_location(a, b + 4, c);
    b = b[0];
    if (b) continue L_d;
  }
  label B_c:
  return ;
  label B_b:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_a:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
}

function pm_serialize_node(a:int, b:int, c:int_ptr) {
  var e:int;
  var f:int;
  var d:int;
  loop L_bd {
    pm_buffer_append_byte(c, b[0]:ubyte);
    d = c[0];
    pm_serialize_location(a, b + 4, c);
    br_table[B_ei, B_di, B_ci, B_bi, B_ai, B_zh, B_yh, B_xh, B_wh, B_vh, B_uh, B_th, B_sh, B_rh, B_qh, B_ph, B_oh, B_nh, B_mh, B_lh, B_kh, B_jh, B_ih, B_hh, B_gh, B_fh, B_eh, B_dh, B_ch, B_bh, B_ah, B_zg, B_yg, B_xg, B_wg, B_vg, B_ug, B_tg, B_sg, B_rg, B_qg, B_pg, B_og, B_ng, B_mg, B_lg, B_kg, B_jg, B_ig, B_hg, B_a, B_gg, B_fg, B_a, B_eg, B_a, B_a, B_dg, B_cg, B_bg, B_ag, B_zf, B_yf, B_xf, B_wf, B_vf, B_uf, B_tf, B_sf, B_a, B_rf, B_qf, B_pf, B_of, B_nf, B_mf, B_lf, B_kf, B_jf, B_if, B_hf, B_gf, B_ff, B_ef, B_df, B_cf, B_bf, B_af, B_ze, B_ye, B_xe, B_we, B_ve, B_ue, B_te, B_se, B_re, B_qe, B_pe, B_oe, B_a, B_ne, B_me, B_le, B_ke, B_a, B_je, B_ie, B_he, B_ge, B_fe, B_ee, B_de, B_ce, B_be, B_ae, B_zd, B_yd, B_xd, B_wd, B_vd, B_a, B_ud, B_td, B_sd, B_rd, B_qd, B_pd, B_a, B_od, B_a, B_nd, B_a, B_md, B_a, B_ld, B_kd, B_jd, B_id, B_hd, B_a, B_gd, B_fd, B_ed, B_dd, B_cd, B_ad, B_zc, ..B_a](
      b[0]:ushort + -1)
    label B_ei:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_di:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_ci:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_bi:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_ai:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    e = b[3]:int;
    if (e == -1) goto B_yc;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_a;
    d = 0;
    loop L_fi {
      pm_serialize_node(a, (b[5]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_fi;
      goto B_a;
    }
    label B_zh:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    e = b[3]:int;
    if (e == -1) goto B_xc;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_gi;
    d = 0;
    loop L_hi {
      pm_serialize_node(a, (b[5]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_hi;
    }
    label B_gi:
    if (b[6]:int) goto B_ji;
    pm_buffer_append_byte(c, 0);
    goto B_ii;
    label B_ji:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 24, c);
    label B_ii:
    if (b[8]:int) goto B_ki;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_ki:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_yh:
    d = b[3]:int;
    if (d) goto B_mi;
    pm_buffer_append_byte(c, 0);
    goto B_li;
    label B_mi:
    pm_serialize_node(a, d, c);
    label B_li:
    e = b[4]:int;
    if (e == -1) goto B_wc;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_ni;
    d = 0;
    loop L_oi {
      pm_serialize_node(a, (b[6]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_oi;
    }
    label B_ni:
    d = b[7]:int;
    if (d) goto B_qi;
    pm_buffer_append_byte(c, 0);
    goto B_pi;
    label B_qi:
    pm_serialize_node(a, d, c);
    label B_pi:
    e = b[8]:int;
    if (e == -1) goto B_vc;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_ri;
    d = 0;
    loop L_si {
      pm_serialize_node(a, (b[10]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_si;
    }
    label B_ri:
    if (b[11]:int) goto B_ui;
    pm_buffer_append_byte(c, 0);
    goto B_ti;
    label B_ui:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 44, c);
    label B_ti:
    if (b[13]:int) goto B_vi;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_vi:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 52, c);
    return ;
    label B_xh:
    pm_serialize_node(a, b[3]:int, c);
    d = b[4]:int;
    if (d) goto B_xi;
    pm_buffer_append_byte(c, 0);
    goto B_wi;
    label B_xi:
    pm_serialize_node(a, d, c);
    label B_wi:
    if (b[5]:int) goto B_yi;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_yi:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_wh:
    d = b[3]:int;
    if (d) goto B_aj;
    pm_buffer_append_byte(c, 0);
    goto B_zi;
    label B_aj:
    pm_serialize_node(a, d, c);
    label B_zi:
    pm_serialize_location(a, b + 16, c);
    return ;
    label B_vh:
    b = b[3]:int;
    if (b == -1) goto B_uc;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_uh:
    if (b[3]:int) goto B_cj;
    pm_buffer_append_byte(c, 0);
    goto B_bj;
    label B_cj:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 12, c);
    label B_bj:
    d = b[5]:int;
    if (d) goto B_ej;
    pm_buffer_append_byte(c, 0);
    goto B_dj;
    label B_ej:
    pm_serialize_node(a, d, c);
    label B_dj:
    d = b[6]:int;
    if (d) goto B_gj;
    pm_buffer_append_byte(c, 0);
    goto B_fj;
    label B_gj:
    pm_serialize_node(a, d, c);
    label B_fj:
    d = b[7]:int;
    if (d) goto B_ij;
    pm_buffer_append_byte(c, 0);
    goto B_hj;
    label B_ij:
    pm_serialize_node(a, d, c);
    label B_hj:
    d = b[8]:int;
    if (d) goto B_kj;
    pm_buffer_append_byte(c, 0);
    goto B_jj;
    label B_kj:
    pm_serialize_node(a, d, c);
    label B_jj:
    if (b[9]:int) goto B_lj;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_lj:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 36, c);
    return ;
    label B_th:
    d = b[3]:int;
    if (d) goto B_nj;
    pm_buffer_append_byte(c, 0);
    goto B_mj;
    label B_nj:
    pm_serialize_node(a, d, c);
    label B_mj:
    pm_serialize_location(a, b + 16, c);
    return ;
    label B_sh:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    b = b[3]:int;
    if (b == -1) goto B_tc;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_rh:
    e = b[3]:int;
    if (e == -1) goto B_sc;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_oj;
    d = 0;
    loop L_pj {
      f = (b[5]:int + d)[0]:int;
      if (f == -1) goto B_rc;
      pm_buffer_append_varuint(c, f);
      d = d + 4;
      e = e + -1;
      if (e) continue L_pj;
    }
    label B_oj:
    pm_buffer_append_varuint(c, b[6]:int);
    d = b[7]:int;
    if (d) goto B_rj;
    pm_buffer_append_byte(c, 0);
    goto B_qj;
    label B_rj:
    pm_serialize_node(a, d, c);
    label B_qj:
    d = b[8]:int;
    if (d) goto B_tj;
    pm_buffer_append_byte(c, 0);
    goto B_sj;
    label B_tj:
    pm_serialize_node(a, d, c);
    label B_sj:
    pm_serialize_location(a, b + 36, c);
    pm_serialize_location(a, b + 44, c);
    return ;
    label B_qh:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d == -1) goto B_qc;
    pm_buffer_append_varuint(c, d);
    if (b[4]:int) goto B_vj;
    pm_buffer_append_byte(c, 0);
    goto B_uj;
    label B_vj:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_uj:
    pm_serialize_location(a, b + 24, c);
    return ;
    label B_ph:
    d = b[3]:int;
    if (d) goto B_xj;
    pm_buffer_append_byte(c, 0);
    goto B_wj;
    label B_xj:
    pm_serialize_node(a, d, c);
    label B_wj:
    e = b[4]:int;
    if (e == -1) goto B_pc;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_yj;
    d = 0;
    loop L_zj {
      pm_serialize_node(a, (b[6]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_zj;
    }
    label B_yj:
    if (b[7]:int) goto B_bk;
    pm_buffer_append_byte(c, 0);
    goto B_ak;
    label B_bk:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 28, c);
    label B_ak:
    if (b[9]:int) goto B_ck;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_ck:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 36, c);
    return ;
    label B_oh:
    d = b[3]:int;
    if (d) goto B_ek;
    pm_buffer_append_byte(c, 0);
    goto B_dk;
    label B_ek:
    pm_serialize_node(a, d, c);
    label B_dk:
    pm_serialize_location(a, b + 16, c);
    return ;
    label B_nh:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d) goto B_gk;
    pm_buffer_append_byte(c, 0);
    goto B_fk;
    label B_gk:
    pm_serialize_node(a, d, c);
    label B_fk:
    if (b[4]:int) goto B_ik;
    pm_buffer_append_byte(c, 0);
    goto B_hk;
    label B_ik:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_hk:
    if (b[6]:int) goto B_kk;
    pm_buffer_append_byte(c, 0);
    goto B_jk;
    label B_kk:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 24, c);
    label B_jk:
    d = b[8]:int;
    if (d == -1) goto B_oc;
    pm_buffer_append_varuint(c, d);
    d = b[9]:int;
    if (d == -1) goto B_nc;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 40, c);
    b = (b + 48)[0]:int;
    continue L_bd;
    label B_mh:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d) goto B_mk;
    pm_buffer_append_byte(c, 0);
    goto B_lk;
    label B_mk:
    pm_serialize_node(a, d, c);
    label B_lk:
    if (b[4]:int) goto B_ok;
    pm_buffer_append_byte(c, 0);
    goto B_nk;
    label B_ok:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_nk:
    d = b[6]:int;
    if (d == -1) goto B_mc;
    pm_buffer_append_varuint(c, d);
    if (b[7]:int) goto B_qk;
    pm_buffer_append_byte(c, 0);
    goto B_pk;
    label B_qk:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 28, c);
    label B_pk:
    if (b[9]:int) goto B_sk;
    pm_buffer_append_byte(c, 0);
    goto B_rk;
    label B_sk:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 36, c);
    label B_rk:
    d = b[11]:int;
    if (d) goto B_uk;
    pm_buffer_append_byte(c, 0);
    goto B_tk;
    label B_uk:
    pm_serialize_node(a, d, c);
    label B_tk:
    if (b[12]:int) goto B_wk;
    pm_buffer_append_byte(c, 0);
    goto B_vk;
    label B_wk:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 48, c);
    label B_vk:
    b = b[14]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_lh:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d) goto B_yk;
    pm_buffer_append_byte(c, 0);
    goto B_xk;
    label B_yk:
    pm_serialize_node(a, d, c);
    label B_xk:
    if (b[4]:int) goto B_al;
    pm_buffer_append_byte(c, 0);
    goto B_zk;
    label B_al:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_zk:
    if (b[6]:int) goto B_cl;
    pm_buffer_append_byte(c, 0);
    goto B_bl;
    label B_cl:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 24, c);
    label B_bl:
    d = b[8]:int;
    if (d == -1) goto B_lc;
    pm_buffer_append_varuint(c, d);
    d = b[9]:int;
    if (d == -1) goto B_kc;
    pm_buffer_append_varuint(c, d);
    d = b[10]:int;
    if (d == -1) goto B_jc;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 44, c);
    b = (b + 52)[0]:int;
    continue L_bd;
    label B_kh:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d) goto B_el;
    pm_buffer_append_byte(c, 0);
    goto B_dl;
    label B_el:
    pm_serialize_node(a, d, c);
    label B_dl:
    if (b[4]:int) goto B_gl;
    pm_buffer_append_byte(c, 0);
    goto B_fl;
    label B_gl:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_fl:
    if (b[6]:int) goto B_il;
    pm_buffer_append_byte(c, 0);
    goto B_hl;
    label B_il:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 24, c);
    label B_hl:
    d = b[8]:int;
    if (d == -1) goto B_ic;
    pm_buffer_append_varuint(c, d);
    d = b[9]:int;
    if (d == -1) goto B_hc;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 40, c);
    b = (b + 48)[0]:int;
    continue L_bd;
    label B_jh:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_location(a, b + 16, c);
    d = b[6]:int;
    if (d == -1) goto B_gc;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 28, c);
    return ;
    label B_ih:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_hh:
    d = b[3]:int;
    if (d) goto B_kl;
    pm_buffer_append_byte(c, 0);
    goto B_jl;
    label B_kl:
    pm_serialize_node(a, d, c);
    label B_jl:
    e = b[4]:int;
    if (e == -1) goto B_fc;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_ll;
    d = 0;
    loop L_ml {
      pm_serialize_node(a, (b[6]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_ml;
    }
    label B_ll:
    d = b[7]:int;
    if (d) goto B_ol;
    pm_buffer_append_byte(c, 0);
    goto B_nl;
    label B_ol:
    pm_serialize_node(a, d, c);
    label B_nl:
    pm_serialize_location(a, b + 32, c);
    pm_serialize_location(a, b + 40, c);
    return ;
    label B_gh:
    d = b[3]:int;
    if (d) goto B_ql;
    pm_buffer_append_byte(c, 0);
    goto B_pl;
    label B_ql:
    pm_serialize_node(a, d, c);
    label B_pl:
    e = b[4]:int;
    if (e == -1) goto B_ec;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_rl;
    d = 0;
    loop L_sl {
      pm_serialize_node(a, (b[6]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_sl;
    }
    label B_rl:
    d = b[7]:int;
    if (d) goto B_ul;
    pm_buffer_append_byte(c, 0);
    goto B_tl;
    label B_ul:
    pm_serialize_node(a, d, c);
    label B_tl:
    pm_serialize_location(a, b + 32, c);
    pm_serialize_location(a, b + 40, c);
    return ;
    label B_fh:
    e = b[3]:int;
    if (e == -1) goto B_dc;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_vl;
    d = 0;
    loop L_wl {
      f = (b[5]:int + d)[0]:int;
      if (f == -1) goto B_cc;
      pm_buffer_append_varuint(c, f);
      d = d + 4;
      e = e + -1;
      if (e) continue L_wl;
    }
    label B_vl:
    pm_serialize_location(a, b + 24, c);
    pm_serialize_node(a, b[8]:int, c);
    if (b[9]:int) goto B_yl;
    pm_buffer_append_byte(c, 0);
    goto B_xl;
    label B_yl:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 36, c);
    label B_xl:
    d = b[11]:int;
    if (d) goto B_am;
    pm_buffer_append_byte(c, 0);
    goto B_zl;
    label B_am:
    pm_serialize_node(a, d, c);
    label B_zl:
    d = b[12]:int;
    if (d) goto B_cm;
    pm_buffer_append_byte(c, 0);
    goto B_bm;
    label B_cm:
    pm_serialize_node(a, d, c);
    label B_bm:
    pm_serialize_location(a, b + 52, c);
    b = b[15]:int;
    if (b == -1) goto B_bc;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_eh:
    d = b[3]:int;
    if (d == -1) goto B_ac;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    b = (b + 32)[0]:int;
    continue L_bd;
    label B_dh:
    d = b[3]:int;
    if (d == -1) goto B_zb;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    pm_serialize_node(a, b[8]:int, c);
    b = b[9]:int;
    if (b == -1) goto B_yb;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_ch:
    d = b[3]:int;
    if (d == -1) goto B_xb;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    b = (b + 32)[0]:int;
    continue L_bd;
    label B_bh:
    b = b[3]:int;
    if (b == -1) goto B_wb;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_ah:
    b = b[3]:int;
    if (b == -1) goto B_vb;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_zg:
    d = b[3]:int;
    if (d == -1) goto B_ub;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_node(a, b[6]:int, c);
    if (b[7]:int) goto B_dm;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_dm:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 28, c);
    return ;
    label B_yg:
    d = b[3]:int;
    if (d == -1) goto B_tb;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    b = (b + 32)[0]:int;
    continue L_bd;
    label B_xg:
    d = b[3]:int;
    if (d == -1) goto B_sb;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    pm_serialize_node(a, b[8]:int, c);
    b = b[9]:int;
    if (b == -1) goto B_rb;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_wg:
    d = b[3]:int;
    if (d == -1) goto B_qb;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    b = (b + 32)[0]:int;
    continue L_bd;
    label B_vg:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_location(a, b + 16, c);
    b = (b + 24)[0]:int;
    continue L_bd;
    label B_ug:
    d = b[3]:int;
    if (d) goto B_fm;
    pm_buffer_append_byte(c, 0);
    goto B_em;
    label B_fm:
    pm_serialize_node(a, d, c);
    label B_em:
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_tg:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_node(a, b[6]:int, c);
    b = b[7]:int;
    if (b == -1) goto B_pb;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_sg:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_location(a, b + 16, c);
    b = (b + 24)[0]:int;
    continue L_bd;
    label B_rg:
    d = b[3]:int;
    if (d) goto B_hm;
    pm_buffer_append_byte(c, 0);
    goto B_gm;
    label B_hm:
    pm_serialize_node(a, d, c);
    label B_gm:
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_qg:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_location(a, b + 16, c);
    b = (b + 24)[0]:int;
    continue L_bd;
    label B_pg:
    b = b[3]:int;
    if (b == -1) goto B_ob;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_og:
    b = b[3]:int;
    if (b == -1) goto B_nb;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_ng:
    d = b[3]:int;
    if (d == -1) goto B_mb;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_node(a, b[6]:int, c);
    pm_serialize_location(a, b + 28, c);
    return ;
    label B_mg:
    var g:int = c[0];
    pm_buffer_append_string(c, 32201, 4);
    e = b[3]:int;
    if (e == -1) goto B_lb;
    pm_buffer_append_varuint(c, e);
    pm_serialize_location(a, b + 16, c);
    e = b[6]:int;
    if (e) goto B_jm;
    pm_buffer_append_byte(c, 0);
    goto B_im;
    label B_jm:
    pm_serialize_node(a, e, c);
    label B_im:
    e = b[7]:int;
    if (e) goto B_lm;
    pm_buffer_append_byte(c, 0);
    goto B_km;
    label B_lm:
    pm_serialize_node(a, e, c);
    label B_km:
    e = b[8]:int;
    if (e) goto B_nm;
    pm_buffer_append_byte(c, 0);
    goto B_mm;
    label B_nm:
    pm_serialize_node(a, e, c);
    label B_mm:
    f = b[9]:int;
    if (f == -1) goto B_kb;
    pm_buffer_append_varuint(c, f);
    if (eqz(f)) goto B_om;
    e = 0;
    loop L_pm {
      var h:int = (b[11]:int + e)[0]:int;
      if (h == -1) goto B_jb;
      pm_buffer_append_varuint(c, h);
      e = e + 4;
      f = f + -1;
      if (f) continue L_pm;
    }
    label B_om:
    pm_buffer_append_varuint(c, b[12]:int);
    pm_serialize_location(a, b + 52, c);
    if (b[15]:int) goto B_rm;
    pm_buffer_append_byte(c, 0);
    goto B_qm;
    label B_rm:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 60, c);
    label B_qm:
    if (b[17]:int) goto B_tm;
    pm_buffer_append_byte(c, 0);
    goto B_sm;
    label B_tm:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 68, c);
    label B_sm:
    if (b[19]:int) goto B_vm;
    pm_buffer_append_byte(c, 0);
    goto B_um;
    label B_vm:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 76, c);
    label B_um:
    if (b[21]:int) goto B_xm;
    pm_buffer_append_byte(c, 0);
    goto B_wm;
    label B_xm:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 84, c);
    label B_wm:
    if (b[23]:int) goto B_zm;
    pm_buffer_append_byte(c, 0);
    goto B_ym;
    label B_zm:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 92, c);
    label B_ym:
    b = c[0] - d + -4;
    if (b == -1) goto B_ib;
    (c[2] + g)[0]:int@1 = b;
    return ;
    label B_lg:
    if (b[3]:int) goto B_bn;
    pm_buffer_append_byte(c, 0);
    goto B_an;
    label B_bn:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 12, c);
    label B_an:
    pm_serialize_node(a, b[5]:int, c);
    if (b[6]:int) goto B_dn;
    pm_buffer_append_byte(c, 0);
    goto B_cn;
    label B_dn:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 24, c);
    label B_cn:
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_kg:
    pm_serialize_location(a, b + 12, c);
    d = b[5]:int;
    if (d) goto B_fn;
    pm_buffer_append_byte(c, 0);
    goto B_en;
    label B_fn:
    pm_serialize_node(a, d, c);
    label B_en:
    if (b[6]:int) goto B_gn;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_gn:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 24, c);
    return ;
    label B_jg:
    pm_serialize_location(a, b + 12, c);
    d = b[5]:int;
    if (d) goto B_in;
    pm_buffer_append_byte(c, 0);
    goto B_hn;
    label B_in:
    pm_serialize_node(a, d, c);
    label B_hn:
    pm_serialize_location(a, b + 24, c);
    return ;
    label B_ig:
    pm_serialize_location(a, b + 12, c);
    b = (b + 20)[0]:int;
    continue L_bd;
    label B_hg:
    pm_serialize_location(a, b + 12, c);
    d = b[5]:int;
    if (d) goto B_kn;
    pm_buffer_append_byte(c, 0);
    goto B_jn;
    label B_kn:
    pm_serialize_node(a, d, c);
    label B_jn:
    pm_serialize_location(a, b + 24, c);
    return ;
    label B_gg:
    d = b[3]:int;
    if (d) goto B_mn;
    pm_buffer_append_byte(c, 0);
    goto B_ln;
    label B_mn:
    pm_serialize_node(a, d, c);
    label B_ln:
    pm_serialize_node(a, b[4]:int, c);
    e = b[5]:int;
    if (e == -1) goto B_hb;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_nn;
    d = 0;
    loop L_on {
      pm_serialize_node(a, (b[7]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_on;
    }
    label B_nn:
    pm_serialize_node(a, b[8]:int, c);
    if (b[9]:int) goto B_qn;
    pm_buffer_append_byte(c, 0);
    goto B_pn;
    label B_qn:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 36, c);
    label B_pn:
    if (b[11]:int) goto B_rn;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_rn:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 44, c);
    return ;
    label B_fg:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d) goto B_tn;
    pm_buffer_append_byte(c, 0);
    goto B_sn;
    label B_tn:
    pm_serialize_node(a, d, c);
    label B_sn:
    d = b[4]:int;
    if (d) goto B_vn;
    pm_buffer_append_byte(c, 0);
    goto B_un;
    label B_vn:
    pm_serialize_node(a, d, c);
    label B_un:
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_eg:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_node(a, b[4]:int, c);
    d = b[5]:int;
    if (d) goto B_xn;
    pm_buffer_append_byte(c, 0);
    goto B_wn;
    label B_xn:
    pm_serialize_node(a, d, c);
    label B_wn:
    pm_serialize_location(a, b + 24, c);
    pm_serialize_location(a, b + 32, c);
    if (b[10]:int) goto B_zn;
    pm_buffer_append_byte(c, 0);
    goto B_yn;
    label B_zn:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 40, c);
    label B_yn:
    pm_serialize_location(a, b + 48, c);
    return ;
    label B_dg:
    b = b[3]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_cg:
    d = b[3]:int;
    if (d == -1) goto B_gb;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    b = (b + 32)[0]:int;
    continue L_bd;
    label B_bg:
    d = b[3]:int;
    if (d == -1) goto B_fb;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    pm_serialize_node(a, b[8]:int, c);
    b = b[9]:int;
    if (b == -1) goto B_eb;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_ag:
    d = b[3]:int;
    if (d == -1) goto B_db;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    b = (b + 32)[0]:int;
    continue L_bd;
    label B_zf:
    b = b[3]:int;
    if (b == -1) goto B_cb;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_yf:
    b = b[3]:int;
    if (b == -1) goto B_bb;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_xf:
    d = b[3]:int;
    if (d == -1) goto B_ab;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_node(a, b[6]:int, c);
    pm_serialize_location(a, b + 28, c);
    return ;
    label B_wf:
    pm_serialize_location(a, b + 12, c);
    e = b[5]:int;
    if (e == -1) goto B_za;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_ao;
    d = 0;
    loop L_bo {
      pm_serialize_node(a, (b[7]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_bo;
    }
    label B_ao:
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_vf:
    d = b[3]:int;
    if (d) goto B_do;
    pm_buffer_append_byte(c, 0);
    goto B_co;
    label B_do:
    pm_serialize_node(a, d, c);
    label B_co:
    e = b[4]:int;
    if (e == -1) goto B_ya;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_eo;
    d = 0;
    loop L_fo {
      pm_serialize_node(a, (b[6]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_fo;
    }
    label B_eo:
    d = b[7]:int;
    if (d) goto B_ho;
    pm_buffer_append_byte(c, 0);
    goto B_go;
    label B_ho:
    pm_serialize_node(a, d, c);
    label B_go:
    if (b[8]:int) goto B_jo;
    pm_buffer_append_byte(c, 0);
    goto B_io;
    label B_jo:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 32, c);
    label B_io:
    if (b[10]:int) goto B_ko;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_ko:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 40, c);
    return ;
    label B_uf:
    if (b[3]:int) goto B_mo;
    pm_buffer_append_byte(c, 0);
    goto B_lo;
    label B_mo:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 12, c);
    label B_lo:
    pm_serialize_node(a, b[5]:int, c);
    if (b[6]:int) goto B_oo;
    pm_buffer_append_byte(c, 0);
    goto B_no;
    label B_oo:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 24, c);
    label B_no:
    d = b[8]:int;
    if (d) goto B_qo;
    pm_buffer_append_byte(c, 0);
    goto B_po;
    label B_qo:
    pm_serialize_node(a, d, c);
    label B_po:
    d = b[9]:int;
    if (d) goto B_so;
    pm_buffer_append_byte(c, 0);
    goto B_ro;
    label B_so:
    pm_serialize_node(a, d, c);
    label B_ro:
    if (b[10]:int) goto B_to;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_to:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 40, c);
    return ;
    label B_tf:
    b = (b + 12)[0]:int;
    continue L_bd;
    label B_sf:
    b = (b + 12)[0]:int;
    continue L_bd;
    label B_rf:
    pm_serialize_node(a, b[3]:int, c);
    d = b[4]:int;
    if (d) goto B_vo;
    pm_buffer_append_byte(c, 0);
    goto B_uo;
    label B_vo:
    pm_serialize_node(a, d, c);
    label B_uo:
    pm_serialize_location(a, b + 20, c);
    if (b[7]:int) goto B_wo;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_wo:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 28, c);
    return ;
    label B_qf:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d) goto B_yo;
    pm_buffer_append_byte(c, 0);
    goto B_xo;
    label B_yo:
    pm_serialize_node(a, d, c);
    label B_xo:
    if (b[4]:int) goto B_ap;
    pm_buffer_append_byte(c, 0);
    goto B_zo;
    label B_ap:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_zo:
    pm_serialize_location(a, b + 24, c);
    d = b[8]:int;
    if (d) goto B_cp;
    pm_buffer_append_byte(c, 0);
    goto B_bp;
    label B_cp:
    pm_serialize_node(a, d, c);
    label B_bp:
    pm_serialize_location(a, b + 36, c);
    d = b[11]:int;
    if (d) goto B_ep;
    pm_buffer_append_byte(c, 0);
    goto B_dp;
    label B_ep:
    pm_serialize_node(a, d, c);
    label B_dp:
    pm_serialize_location(a, b + 48, c);
    b = (b + 56)[0]:int;
    continue L_bd;
    label B_pf:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d) goto B_gp;
    pm_buffer_append_byte(c, 0);
    goto B_fp;
    label B_gp:
    pm_serialize_node(a, d, c);
    label B_fp:
    if (b[4]:int) goto B_ip;
    pm_buffer_append_byte(c, 0);
    goto B_hp;
    label B_ip:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_hp:
    pm_serialize_location(a, b + 24, c);
    d = b[8]:int;
    if (d) goto B_kp;
    pm_buffer_append_byte(c, 0);
    goto B_jp;
    label B_kp:
    pm_serialize_node(a, d, c);
    label B_jp:
    pm_serialize_location(a, b + 36, c);
    d = b[11]:int;
    if (d) goto B_mp;
    pm_buffer_append_byte(c, 0);
    goto B_lp;
    label B_mp:
    pm_serialize_node(a, d, c);
    label B_lp:
    d = b[12]:int;
    if (d == -1) goto B_xa;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 52, c);
    b = (b + 60)[0]:int;
    continue L_bd;
    label B_of:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d) goto B_op;
    pm_buffer_append_byte(c, 0);
    goto B_np;
    label B_op:
    pm_serialize_node(a, d, c);
    label B_np:
    if (b[4]:int) goto B_qp;
    pm_buffer_append_byte(c, 0);
    goto B_pp;
    label B_qp:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_pp:
    pm_serialize_location(a, b + 24, c);
    d = b[8]:int;
    if (d) goto B_sp;
    pm_buffer_append_byte(c, 0);
    goto B_rp;
    label B_sp:
    pm_serialize_node(a, d, c);
    label B_rp:
    pm_serialize_location(a, b + 36, c);
    d = b[11]:int;
    if (d) goto B_up;
    pm_buffer_append_byte(c, 0);
    goto B_tp;
    label B_up:
    pm_serialize_node(a, d, c);
    label B_tp:
    pm_serialize_location(a, b + 48, c);
    b = (b + 56)[0]:int;
    continue L_bd;
    label B_nf:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_location(a, b + 16, c);
    d = b[6]:int;
    if (d) goto B_wp;
    pm_buffer_append_byte(c, 0);
    goto B_vp;
    label B_wp:
    pm_serialize_node(a, d, c);
    label B_vp:
    pm_serialize_location(a, b + 28, c);
    b = b[9]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_mf:
    d = b[3]:int;
    if (d == -1) goto B_wa;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    b = (b + 32)[0]:int;
    continue L_bd;
    label B_lf:
    d = b[3]:int;
    if (d == -1) goto B_va;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    pm_serialize_node(a, b[8]:int, c);
    b = b[9]:int;
    if (b == -1) goto B_ua;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_kf:
    d = b[3]:int;
    if (d == -1) goto B_ta;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    b = (b + 32)[0]:int;
    continue L_bd;
    label B_jf:
    b = b[3]:int;
    if (b == -1) goto B_sa;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_if:
    b = b[3]:int;
    if (b == -1) goto B_ra;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_hf:
    d = b[3]:int;
    if (d == -1) goto B_qa;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_node(a, b[6]:int, c);
    pm_serialize_location(a, b + 28, c);
    return ;
    label B_gf:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    return ;
    label B_ff:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    pm_serialize_location(a, b + 12, c);
    e = b[5]:int;
    if (e == -1) goto B_pa;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_xp;
    d = 0;
    loop L_yp {
      pm_serialize_node(a, (b[7]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_yp;
    }
    label B_xp:
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_ef:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    pm_serialize_location(a, b + 12, c);
    e = b[5]:int;
    if (e == -1) goto B_oa;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_zp;
    d = 0;
    loop L_aq {
      pm_serialize_node(a, (b[7]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_aq;
    }
    label B_zp:
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_df:
    if (b[3]:int) goto B_cq;
    pm_buffer_append_byte(c, 0);
    goto B_bq;
    label B_cq:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 12, c);
    label B_bq:
    e = b[5]:int;
    if (e == -1) goto B_na;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_dq;
    d = 0;
    loop L_eq {
      pm_serialize_node(a, (b[7]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_eq;
    }
    label B_dq:
    if (b[8]:int) goto B_fq;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_fq:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_cf:
    if (b[3]:int) goto B_hq;
    pm_buffer_append_byte(c, 0);
    goto B_gq;
    label B_hq:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 12, c);
    label B_gq:
    e = b[5]:int;
    if (e == -1) goto B_ma;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_iq;
    d = 0;
    loop L_jq {
      pm_serialize_node(a, (b[7]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_jq;
    }
    label B_iq:
    if (b[8]:int) goto B_kq;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_kq:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_bf:
    pm_serialize_location(a, b + 12, c);
    e = b[5]:int;
    if (e == -1) goto B_la;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_lq;
    d = 0;
    loop L_mq {
      pm_serialize_node(a, (b[7]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_mq;
    }
    label B_lq:
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_af:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    e = b[3]:int;
    if (e == -1) goto B_ka;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_a;
    d = 0;
    loop L_nq {
      pm_serialize_node(a, (b[5]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_nq;
      goto B_a;
    }
    label B_ze:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d == -1) goto B_ja;
    pm_buffer_append_varuint(c, d);
    if (b[4]:int) goto B_pq;
    pm_buffer_append_byte(c, 0);
    goto B_oq;
    label B_pq:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_oq:
    pm_serialize_location(a, b + 24, c);
    return ;
    label B_ye:
    e = b[3]:int;
    if (e == -1) goto B_ia;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_qq;
    d = 0;
    loop L_rq {
      f = (b[5]:int + d)[0]:int;
      if (f == -1) goto B_ha;
      pm_buffer_append_varuint(c, f);
      d = d + 4;
      e = e + -1;
      if (e) continue L_rq;
    }
    label B_qq:
    pm_buffer_append_varuint(c, b[6]:int);
    pm_serialize_location(a, b + 28, c);
    pm_serialize_location(a, b + 36, c);
    pm_serialize_location(a, b + 44, c);
    d = b[13]:int;
    if (d) goto B_tq;
    pm_buffer_append_byte(c, 0);
    goto B_sq;
    label B_tq:
    pm_serialize_node(a, d, c);
    label B_sq:
    b = b[14]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_xe:
    pm_serialize_location(a, b + 12, c);
    pm_serialize_location(a, b + 20, c);
    pm_serialize_node(a, b[7]:int, c);
    a = b[8]:int;
    if (a == -1) goto B_ga;
    pm_buffer_append_varuint(c, a);
    pm_buffer_append_varuint(c, b[9]:int);
    return ;
    label B_we:
    pm_serialize_location(a, b + 12, c);
    pm_serialize_location(a, b + 20, c);
    pm_serialize_node(a, b[7]:int, c);
    a = b[8]:int;
    if (a == -1) goto B_fa;
    pm_buffer_append_varuint(c, a);
    a = b[9]:int;
    if (a == -1) goto B_ea;
    pm_buffer_append_varuint(c, a);
    pm_buffer_append_varuint(c, b[10]:int);
    return ;
    label B_ve:
    pm_serialize_location(a, b + 12, c);
    pm_serialize_location(a, b + 20, c);
    pm_serialize_node(a, b[7]:int, c);
    a = b[8]:int;
    if (a == -1) goto B_da;
    pm_buffer_append_varuint(c, a);
    pm_buffer_append_varuint(c, b[9]:int);
    return ;
    label B_ue:
    a = b[3]:int;
    if (a == -1) goto B_ca;
    pm_buffer_append_varuint(c, a);
    pm_buffer_append_varuint(c, b[4]:int);
    return ;
    label B_te:
    a = b[3]:int;
    if (a == -1) goto B_ba;
    pm_buffer_append_varuint(c, a);
    pm_buffer_append_varuint(c, b[4]:int);
    return ;
    label B_se:
    d = b[3]:int;
    if (d == -1) goto B_aa;
    pm_buffer_append_varuint(c, d);
    pm_buffer_append_varuint(c, b[4]:int);
    pm_serialize_location(a, b + 20, c);
    pm_serialize_node(a, b[7]:int, c);
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_re:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    pm_serialize_location(a, b + 12, c);
    pm_serialize_location(a, b + 20, c);
    pm_serialize_location(a, b + 28, c);
    pm_serialize_string(a, b + 36, c);
    return ;
    label B_qe:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_pe:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_oe:
    pm_serialize_node(a, b[3]:int, c);
    e = b[4]:int;
    if (e == -1) goto B_z;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_a;
    d = 0;
    loop L_uq {
      pm_serialize_node(a, (b[6]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_uq;
      goto B_a;
    }
    label B_ne:
    e = b[3]:int;
    if (e == -1) goto B_y;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_vq;
    d = 0;
    loop L_wq {
      f = (b[5]:int + d)[0]:int;
      if (f == -1) goto B_x;
      pm_buffer_append_varuint(c, f);
      d = d + 4;
      e = e + -1;
      if (e) continue L_wq;
    }
    label B_vq:
    pm_serialize_location(a, b + 24, c);
    pm_serialize_node(a, b[8]:int, c);
    d = b[9]:int;
    if (d) goto B_yq;
    pm_buffer_append_byte(c, 0);
    goto B_xq;
    label B_yq:
    pm_serialize_node(a, d, c);
    label B_xq:
    pm_serialize_location(a, b + 40, c);
    b = b[12]:int;
    if (b == -1) goto B_w;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_me:
    e = b[3]:int;
    if (e == -1) goto B_v;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_zq;
    d = 0;
    loop L_ar {
      pm_serialize_node(a, (b[5]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_ar;
    }
    label B_zq:
    d = b[6]:int;
    if (d) goto B_cr;
    pm_buffer_append_byte(c, 0);
    goto B_br;
    label B_cr:
    pm_serialize_node(a, d, c);
    label B_br:
    e = b[7]:int;
    if (e == -1) goto B_u;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_dr;
    d = 0;
    loop L_er {
      pm_serialize_node(a, (b[9]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_er;
    }
    label B_dr:
    if (b[10]:int) goto B_gr;
    pm_buffer_append_byte(c, 0);
    goto B_fr;
    label B_gr:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 40, c);
    label B_fr:
    if (b[12]:int) goto B_hr;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_hr:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 48, c);
    return ;
    label B_le:
    e = b[3]:int;
    if (e == -1) goto B_t;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_ir;
    d = 0;
    loop L_jr {
      pm_serialize_node(a, (b[5]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_jr;
    }
    label B_ir:
    d = b[6]:int;
    if (d) goto B_lr;
    pm_buffer_append_byte(c, 0);
    goto B_kr;
    label B_lr:
    pm_serialize_node(a, d, c);
    label B_kr:
    e = b[7]:int;
    if (e == -1) goto B_s;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_mr;
    d = 0;
    loop L_nr {
      pm_serialize_node(a, (b[9]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_nr;
    }
    label B_mr:
    if (b[10]:int) goto B_pr;
    pm_buffer_append_byte(c, 0);
    goto B_or;
    label B_pr:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 40, c);
    label B_or:
    if (b[12]:int) goto B_rr;
    pm_buffer_append_byte(c, 0);
    goto B_qr;
    label B_rr:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 48, c);
    label B_qr:
    pm_serialize_location(a, b + 56, c);
    b = (b + 64)[0]:int;
    continue L_bd;
    label B_ke:
    d = b[3]:int;
    if (d) goto B_tr;
    pm_buffer_append_byte(c, 0);
    goto B_sr;
    label B_tr:
    pm_serialize_node(a, d, c);
    label B_sr:
    pm_serialize_location(a, b + 16, c);
    return ;
    label B_je:
    pm_serialize_location(a, b + 12, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_ie:
    pm_buffer_append_byte(c, b[12]:ubyte);
    return ;
    label B_he:
    pm_buffer_append_varuint(c, b[3]:int);
    return ;
    label B_ge:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d == -1) goto B_r;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    b = (b + 24)[0]:int;
    continue L_bd;
    label B_fe:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d == -1) goto B_q;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    b = (b + 32)[0]:int;
    continue L_bd;
    label B_ee:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_node(a, b[4]:int, c);
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_de:
    e = b[3]:int;
    if (e == -1) goto B_p;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_ur;
    d = 0;
    loop L_vr {
      pm_serialize_node(a, (b[5]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_vr;
    }
    label B_ur:
    e = b[6]:int;
    if (e == -1) goto B_o;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_wr;
    d = 0;
    loop L_xr {
      pm_serialize_node(a, (b[8]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_xr;
    }
    label B_wr:
    d = b[9]:int;
    if (d) goto B_zr;
    pm_buffer_append_byte(c, 0);
    goto B_yr;
    label B_zr:
    pm_serialize_node(a, d, c);
    label B_yr:
    e = b[10]:int;
    if (e == -1) goto B_n;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_as;
    d = 0;
    loop L_bs {
      pm_serialize_node(a, (b[12]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_bs;
    }
    label B_as:
    e = b[13]:int;
    if (e == -1) goto B_m;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_cs;
    d = 0;
    loop L_ds {
      pm_serialize_node(a, (b[15]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_ds;
    }
    label B_cs:
    d = b[16]:int;
    if (d) goto B_fs;
    pm_buffer_append_byte(c, 0);
    goto B_es;
    label B_fs:
    pm_serialize_node(a, d, c);
    label B_es:
    b = b[17]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_ce:
    d = b[3]:int;
    if (d) goto B_hs;
    pm_buffer_append_byte(c, 0);
    goto B_gs;
    label B_hs:
    pm_serialize_node(a, d, c);
    label B_gs:
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    return ;
    label B_be:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_ae:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_location(a, b + 16, c);
    return ;
    label B_zd:
    d = b[3]:int;
    if (d) goto B_js;
    pm_buffer_append_byte(c, 0);
    goto B_is;
    label B_js:
    pm_serialize_node(a, d, c);
    label B_is:
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_yd:
    d = b[3]:int;
    if (d) goto B_ls;
    pm_buffer_append_byte(c, 0);
    goto B_ks;
    label B_ls:
    pm_serialize_node(a, d, c);
    label B_ks:
    pm_serialize_location(a, b + 16, c);
    pm_serialize_location(a, b + 24, c);
    pm_serialize_location(a, b + 32, c);
    return ;
    label B_xd:
    e = b[3]:int;
    if (e == -1) goto B_l;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_ms;
    d = 0;
    loop L_ns {
      f = (b[5]:int + d)[0]:int;
      if (f == -1) goto B_k;
      pm_buffer_append_varuint(c, f);
      d = d + 4;
      e = e + -1;
      if (e) continue L_ns;
    }
    label B_ms:
    b = (b + 24)[0]:int;
    continue L_bd;
    label B_wd:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d) goto B_ps;
    pm_buffer_append_byte(c, 0);
    goto B_os;
    label B_ps:
    pm_serialize_node(a, d, c);
    label B_os:
    d = b[4]:int;
    if (d) goto B_rs;
    pm_buffer_append_byte(c, 0);
    goto B_qs;
    label B_rs:
    pm_serialize_node(a, d, c);
    label B_qs:
    pm_serialize_location(a, b + 20, c);
    return ;
    label B_vd:
    b = (b + 12)[0]:int;
    continue L_bd;
    label B_ud:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    pm_serialize_location(a, b + 12, c);
    pm_serialize_location(a, b + 20, c);
    pm_serialize_location(a, b + 28, c);
    pm_serialize_string(a, b + 36, c);
    return ;
    label B_td:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d == -1) goto B_j;
    pm_buffer_append_varuint(c, d);
    pm_serialize_location(a, b + 16, c);
    return ;
    label B_sd:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    b = b[3]:int;
    if (b == -1) goto B_i;
    pm_buffer_append_varuint(c, b);
    return ;
    label B_rd:
    pm_serialize_node(a, b[3]:int, c);
    pm_serialize_location(a, b + 16, c);
    b = (b + 24)[0]:int;
    continue L_bd;
    label B_qd:
    pm_serialize_location(a, b + 12, c);
    e = b[5]:int;
    if (e == -1) goto B_h;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_ss;
    d = 0;
    loop L_ts {
      pm_serialize_node(a, (b[7]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_ts;
    }
    label B_ss:
    if (b[8]:int) goto B_vs;
    pm_buffer_append_byte(c, 0);
    goto B_us;
    label B_vs:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 32, c);
    label B_us:
    d = b[10]:int;
    if (d) goto B_xs;
    pm_buffer_append_byte(c, 0);
    goto B_ws;
    label B_xs:
    pm_serialize_node(a, d, c);
    label B_ws:
    d = b[11]:int;
    if (d) goto B_zs;
    pm_buffer_append_byte(c, 0);
    goto B_ys;
    label B_zs:
    pm_serialize_node(a, d, c);
    label B_ys:
    b = b[12]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_pd:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    d = b[3]:int;
    if (d == -1) goto B_g;
    pm_buffer_append_varuint(c, d);
    if (b[4]:int) goto B_bt;
    pm_buffer_append_byte(c, 0);
    goto B_at;
    label B_bt:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 16, c);
    label B_at:
    pm_serialize_location(a, b + 24, c);
    return ;
    label B_od:
    pm_serialize_location(a, b + 12, c);
    b = b[5]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_nd:
    e = b[3]:int;
    if (e == -1) goto B_f;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_ct;
    d = 0;
    loop L_dt {
      f = (b[5]:int + d)[0]:int;
      if (f == -1) goto B_e;
      pm_buffer_append_varuint(c, f);
      d = d + 4;
      e = e + -1;
      if (e) continue L_dt;
    }
    label B_ct:
    pm_serialize_location(a, b + 24, c);
    pm_serialize_location(a, b + 32, c);
    pm_serialize_node(a, b[10]:int, c);
    d = b[11]:int;
    if (d) goto B_ft;
    pm_buffer_append_byte(c, 0);
    goto B_et;
    label B_ft:
    pm_serialize_node(a, d, c);
    label B_et:
    pm_serialize_location(a, b + 48, c);
    return ;
    label B_md:
    pm_serialize_string(a, b + 12, c);
    goto B_a;
    label B_ld:
    pm_serialize_location(a, b + 12, c);
    b = b[5]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_kd:
    e = b[3]:int;
    if (e == -1) goto B_d;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_a;
    d = 0;
    loop L_gt {
      pm_serialize_node(a, (b[5]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_gt;
      goto B_a;
    }
    label B_jd:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    if (b[3]:int) goto B_it;
    pm_buffer_append_byte(c, 0);
    goto B_ht;
    label B_it:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 12, c);
    label B_ht:
    pm_serialize_location(a, b + 20, c);
    if (b[7]:int) goto B_kt;
    pm_buffer_append_byte(c, 0);
    goto B_jt;
    label B_kt:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 28, c);
    label B_jt:
    pm_serialize_string(a, b + 36, c);
    return ;
    label B_id:
    pm_serialize_location(a, b + 12, c);
    if (b[5]:int) goto B_mt;
    pm_buffer_append_byte(c, 0);
    goto B_lt;
    label B_mt:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 20, c);
    label B_lt:
    d = b[7]:int;
    if (d) goto B_ot;
    pm_buffer_append_byte(c, 0);
    goto B_nt;
    label B_ot:
    pm_serialize_node(a, d, c);
    label B_nt:
    if (b[8]:int) goto B_qt;
    pm_buffer_append_byte(c, 0);
    goto B_pt;
    label B_qt:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 32, c);
    label B_pt:
    b = b[10]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_hd:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    if (b[3]:int) goto B_st;
    pm_buffer_append_byte(c, 0);
    goto B_rt;
    label B_st:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 12, c);
    label B_rt:
    if (b[5]:int) goto B_ut;
    pm_buffer_append_byte(c, 0);
    goto B_tt;
    label B_ut:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 20, c);
    label B_tt:
    if (b[7]:int) goto B_wt;
    pm_buffer_append_byte(c, 0);
    goto B_vt;
    label B_wt:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 28, c);
    label B_vt:
    pm_serialize_string(a, b + 36, c);
    return ;
    label B_gd:
    e = b[3]:int;
    if (e == -1) goto B_c;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_xt;
    d = 0;
    loop L_yt {
      pm_serialize_node(a, (b[5]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_yt;
    }
    label B_xt:
    pm_serialize_location(a, b + 24, c);
    return ;
    label B_fd:
    pm_serialize_location(a, b + 12, c);
    pm_serialize_node(a, b[5]:int, c);
    if (b[6]:int) goto B_au;
    pm_buffer_append_byte(c, 0);
    goto B_zt;
    label B_au:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 24, c);
    label B_zt:
    d = b[8]:int;
    if (d) goto B_cu;
    pm_buffer_append_byte(c, 0);
    goto B_bu;
    label B_cu:
    pm_serialize_node(a, d, c);
    label B_bu:
    d = b[9]:int;
    if (d) goto B_eu;
    pm_buffer_append_byte(c, 0);
    goto B_du;
    label B_eu:
    pm_serialize_node(a, d, c);
    label B_du:
    if (b[10]:int) goto B_fu;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_fu:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 40, c);
    return ;
    label B_ed:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    pm_serialize_location(a, b + 12, c);
    if (b[5]:int) goto B_hu;
    pm_buffer_append_byte(c, 0);
    goto B_gu;
    label B_hu:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 20, c);
    label B_gu:
    pm_serialize_node(a, b[7]:int, c);
    b = b[8]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_dd:
    pm_serialize_location(a, b + 12, c);
    e = b[5]:int;
    if (e == -1) goto B_b;
    pm_buffer_append_varuint(c, e);
    if (eqz(e)) goto B_iu;
    d = 0;
    loop L_ju {
      pm_serialize_node(a, (b[7]:int + d)[0]:int, c);
      d = d + 4;
      e = e + -1;
      if (e) continue L_ju;
    }
    label B_iu:
    b = b[8]:int;
    if (b) continue L_bd;
    pm_buffer_append_byte(c, 0);
    return ;
    label B_cd:
    pm_buffer_append_varuint(c, b[1]:ushort & 16383);
    pm_serialize_location(a, b + 12, c);
    if (b[5]:int) goto B_lu;
    pm_buffer_append_byte(c, 0);
    goto B_ku;
    label B_lu:
    pm_buffer_append_byte(c, 1);
    pm_serialize_location(a, b + 20, c);
    label B_ku:
    pm_serialize_node(a, b[7]:int, c);
    b = b[8]:int;
    if (b) continue L_bd;
  }
  pm_buffer_append_byte(c, 0);
  return ;
  label B_ad:
  pm_buffer_append_varuint(c, b[1]:ushort & 16383);
  pm_serialize_location(a, b + 12, c);
  pm_serialize_location(a, b + 20, c);
  pm_serialize_location(a, b + 28, c);
  pm_serialize_string(a, b + 36, c);
  return ;
  label B_zc:
  pm_serialize_location(a, b + 12, c);
  if (b[5]:int) goto B_nu;
  pm_buffer_append_byte(c, 0);
  goto B_mu;
  label B_nu:
  pm_buffer_append_byte(c, 1);
  pm_serialize_location(a, b + 20, c);
  label B_mu:
  d = b[7]:int;
  if (d) goto B_pu;
  pm_buffer_append_byte(c, 0);
  goto B_ou;
  label B_pu:
  pm_serialize_node(a, d, c);
  label B_ou:
  if (b[8]:int) goto B_qu;
  pm_buffer_append_byte(c, 0);
  return ;
  label B_qu:
  pm_buffer_append_byte(c, 1);
  pm_serialize_location(a, b + 32, c);
  return ;
  label B_yc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_xc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_wc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_vc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_uc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_tc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_sc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_rc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_qc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_pc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_oc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_nc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_mc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_lc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_kc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_jc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ic:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_hc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_gc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_fc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ec:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_dc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_cc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_bc:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ac:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_zb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_yb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_xb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_wb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_vb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ub:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_tb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_sb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_rb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_qb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_pb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ob:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_nb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_mb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_lb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_kb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_jb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ib:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_hb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_gb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_fb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_eb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_db:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_cb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_bb:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ab:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_za:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ya:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_xa:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_wa:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_va:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ua:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ta:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_sa:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ra:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_qa:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_pa:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_oa:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_na:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ma:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_la:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ka:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ja:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ia:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ha:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ga:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_fa:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ea:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_da:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ca:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_ba:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_aa:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_z:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_y:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_x:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_w:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_v:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_u:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_t:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_s:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_r:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_q:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_p:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_o:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_n:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_m:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_l:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_k:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_j:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_i:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_h:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_g:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_f:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_e:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_d:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_c:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_b:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_a:
}

function pm_serialize_string(a:int_ptr, b:int_ptr, c:int) {
  br_table[B_f, B_g, B_f, B_a, ..B_e](b[2])
  label B_g:
  pm_buffer_append_byte(c, 1);
  a = pm_string_source(b) - a[40];
  if (a <= -1) goto B_d;
  pm_buffer_append_varuint(c, a);
  b = pm_string_length(b);
  if (b == -1) goto B_c;
  pm_buffer_append_varuint(c, b);
  return ;
  label B_f:
  a = pm_string_length(b);
  if (a == -1) goto B_b;
  pm_buffer_append_byte(c, 2);
  pm_buffer_append_varuint(c, a);
  pm_buffer_append_bytes(c, pm_string_source(b), a);
  label B_e:
  return ;
  label B_d:
  assert_fail(15462, 13478, 14, 25953);
  unreachable;
  label B_c:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_b:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_a:
  assert_fail(26983, 13478, 52, 9112);
  unreachable;
}

export function pm_serialize_lex(a:int, b:int, c:int_ptr, d:int) {
  var e:int = stack_pointer - 432;
  stack_pointer = e;
  (e + 424)[0]:int = 0;
  (e + 416)[0]:long = 0L;
  (e + 408)[0]:long = 0L;
  (e + 400)[0]:long = 0L;
  (e + 392)[0]:long = 0L;
  e[48]:long = 0L;
  pm_options_read(e + 384, d);
  pm_parser_init(e + 16, b, c, e + 384);
  e[3]:int = 1;
  e[2]:int = a;
  e[73]:int = e + 8;
  b = pm_parse(e + 16);
  pm_buffer_append_byte(a, 0);
  c = e[70]:int;
  d = strlen(c[4]);
  if (d == -1) goto B_b;
  pm_buffer_append_varuint(a, d);
  pm_buffer_append_string(a, c[4], d);
  pm_buffer_append_varsint(a, e[89]:int);
  d = pm_list_size(e + 216);
  if (d == -1) goto B_a;
  pm_buffer_append_varuint(a, d);
  d = (e + 220)[0]:int;
  if (eqz(d)) goto B_c;
  loop L_d {
    pm_buffer_append_byte(a, d[12]:ubyte);
    pm_serialize_location(e + 16, d + 4, a);
    d = d[0]:int;
    if (d) continue L_d;
  }
  label B_c:
  pm_serialize_magic_comment_list(e + 16, e + 228, a);
  if ((e + 244)[0]:int) goto B_f;
  pm_buffer_append_byte(a, 0);
  goto B_e;
  label B_f:
  pm_buffer_append_byte(a, 1);
  pm_serialize_location(e + 16, e + 240, a);
  label B_e:
  pm_serialize_diagnostic_list(e + 16, e + 260, a);
  pm_serialize_diagnostic_list(e + 16, e + 248, a);
  pm_node_destroy(e + 16, b);
  pm_parser_free(e + 16);
  pm_options_free(e + 384);
  stack_pointer = e + 432;
  return ;
  label B_b:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
  label B_a:
  assert_fail(15443, 13478, 20, 25972);
  unreachable;
}

function serialize_token(a:int, b:int_ptr, c:{ a:int, b:int, c:int }) {
  pm_buffer_append_varuint(a, c.a);
  var d:int = c.b - b[40];
  if (d <= -1) goto B_b;
  pm_buffer_append_varuint(a, d);
  c = c.c - c.b;
  if (c <= -1) goto B_a;
  pm_buffer_append_varuint(a, c);
  pm_buffer_append_varuint(a, b[0]);
  return ;
  label B_b:
  assert_fail(15462, 13478, 14, 25953);
  unreachable;
  label B_a:
  assert_fail(15462, 13478, 14, 25953);
  unreachable;
}

export function pm_serialize_parse_lex(a:int, b:int, c:int, d:int) {
  var e:int = stack_pointer - 432;
  stack_pointer = e;
  (e + 424)[0]:int = 0;
  (e + 416)[0]:long = 0L;
  (e + 408)[0]:long = 0L;
  (e + 400)[0]:long = 0L;
  (e + 392)[0]:long = 0L;
  e[48]:long = 0L;
  pm_options_read(e + 384, d);
  pm_parser_init(e + 16, b, c, e + 384);
  e[3]:int = 1;
  e[2]:int = a;
  e[73]:int = e + 8;
  d = pm_parse(e + 16);
  pm_buffer_append_byte(a, 0);
  pm_serialize(e + 16, d, a);
  pm_node_destroy(e + 16, d);
  pm_parser_free(e + 16);
  pm_options_free(e + 384);
  stack_pointer = e + 432;
}

export function pm_parse_success_p(a:int, b:int, c:int):int {
  var d:int = stack_pointer - 416;
  stack_pointer = d;
  (d + 408)[0]:int = 0;
  (d + 400)[0]:long = 0L;
  (d + 392)[0]:long = 0L;
  (d + 384)[0]:long = 0L;
  (d + 376)[0]:long = 0L;
  d[46]:long = 0L;
  pm_options_read(d + 368, c);
  pm_parser_init(d, a, b, d + 368);
  pm_node_destroy(d, pm_parse(d));
  c = d[58]:int;
  b = d[61]:int;
  pm_parser_free(d);
  pm_options_free(d + 368);
  stack_pointer = d + 416;
  return eqz(b | c);
}

function pm_encoding_utf_8_alpha(a:int, b:int):int {
  var e:int;
  var c:int;
  var g:int;
  c = a[0]:byte;
  if (c < 0) goto B_a;
  return ((c & 255) + 32208)[0]:ubyte & 1;
  label B_a:
  var d:int = 1;
  if (b < 1) goto B_b;
  var f:int = 255 >> (e = ((c = a[0]:ubyte) + 51728)[0]:ubyte) & c;
  e = (e + 51984)[0]:ubyte;
  if (eqz(e)) goto B_e;
  c = 0;
  b = b + -1;
  b = select_if(b, 3, b < 3);
  if (b) goto B_f;
  b = 0;
  goto B_d;
  label B_f:
  g = a[1]:ubyte;
  f = (g & 63) | f << 6;
  e = ((e << 4) + (g + 51728)[0]:ubyte + 51984)[0]:ubyte;
  if (e) goto B_g;
  d = 2;
  goto B_e;
  label B_g:
  if (b != 1) goto B_h;
  b = 0;
  goto B_d;
  label B_h:
  g = a[2]:ubyte;
  f = (g & 63) | f << 6;
  e = ((e << 4) + (g + 51728)[0]:ubyte + 51984)[0]:ubyte;
  if (e) goto B_i;
  d = 3;
  goto B_e;
  label B_i:
  if (b != 2) goto B_j;
  b = 0;
  goto B_d;
  label B_j:
  d = 4;
  b = 0;
  if (
    ((e << 4) + ((a = a[3]:ubyte) + 51728)[0]:ubyte + 51984)[0]:ubyte) goto B_d;
  f = (a & 63) | f << 6;
  label B_e:
  if (f >= 256) goto B_c;
  c = f;
  b = d;
  label B_d:
  return 0 - ((c + 32208)[0]:ubyte & 1) & b;
  label B_c:
  a = 0;
  e = 1450;
  loop L_l {
    var h:int = (e - a >> 1) + a;
    b = h & -2;
    c = b;
    g = ((b << 2) + 32464)[0]:int > f;
    if (g) goto B_m;
    c = e;
    if (((h << 2 | 4) + 32464)[0]:int >= f) goto B_k;
    label B_m:
    e = c;
    if (c > (a = select_if(a, b + 2, g))) continue L_l;
  }
  d = 0;
  label B_k:
  return d;
  label B_b:
  assert_fail(26121, 13463, 2255, 2021);
  return unreachable;
}

function pm_encoding_utf_8_alnum(a:int, b:int):int {
  var e:int;
  var c:int;
  var g:int;
  c = a[0]:byte;
  if (c < 0) goto B_a;
  return ((c & 255) + 32208)[0]:ubyte >> 1 & 1;
  label B_a:
  var d:int = 1;
  if (b < 1) goto B_b;
  var f:int = 255 >> (e = ((c = a[0]:ubyte) + 51728)[0]:ubyte) & c;
  e = (e + 51984)[0]:ubyte;
  if (eqz(e)) goto B_e;
  c = 0;
  b = b + -1;
  b = select_if(b, 3, b < 3);
  if (b) goto B_f;
  b = 0;
  goto B_d;
  label B_f:
  g = a[1]:ubyte;
  f = (g & 63) | f << 6;
  e = ((e << 4) + (g + 51728)[0]:ubyte + 51984)[0]:ubyte;
  if (e) goto B_g;
  d = 2;
  goto B_e;
  label B_g:
  if (b != 1) goto B_h;
  b = 0;
  goto B_d;
  label B_h:
  g = a[2]:ubyte;
  f = (g & 63) | f << 6;
  e = ((e << 4) + (g + 51728)[0]:ubyte + 51984)[0]:ubyte;
  if (e) goto B_i;
  d = 3;
  goto B_e;
  label B_i:
  if (b != 2) goto B_j;
  b = 0;
  goto B_d;
  label B_j:
  d = 4;
  b = 0;
  if (
    ((e << 4) + ((a = a[3]:ubyte) + 51728)[0]:ubyte + 51984)[0]:ubyte) goto B_d;
  f = (a & 63) | f << 6;
  label B_e:
  if (f >= 256) goto B_c;
  c = f;
  b = d;
  label B_d:
  return ((c + 32208)[0]:ubyte << 30) >> 31 & b;
  label B_c:
  a = 0;
  e = 1528;
  loop L_l {
    var h:int = (e - a >> 1) + a;
    b = h & -2;
    c = b;
    g = ((b << 2) + 38272)[0]:int > f;
    if (g) goto B_m;
    c = e;
    if (((h << 2 | 4) + 38272)[0]:int >= f) goto B_k;
    label B_m:
    e = c;
    if (c > (a = select_if(a, b + 2, g))) continue L_l;
  }
  d = 0;
  label B_k:
  return d;
  label B_b:
  assert_fail(26121, 13463, 2255, 2021);
  return unreachable;
}

function pm_encoding_utf_8_isupper(a:int, b:int):int {
  var d:int;
  var c:int;
  var f:int;
  c = a[0]:byte;
  if (c < 0) goto B_b;
  c = c & 255;
  goto B_a;
  label B_b:
  if (b < 1) goto B_c;
  var e:int = 255 >> (d = ((c = a[0]:ubyte) + 51728)[0]:ubyte) & c;
  d = (d + 51984)[0]:ubyte;
  if (eqz(d)) goto B_d;
  c = 0;
  b = b + -1;
  b = select_if(b, 3, b < 3);
  if (eqz(b)) goto B_a;
  f = a[1]:ubyte;
  e = (f & 63) | e << 6;
  d = ((d << 4) + (f + 51728)[0]:ubyte + 51984)[0]:ubyte;
  if (eqz(d)) goto B_d;
  if (b == 1) goto B_a;
  f = a[2]:ubyte;
  e = (f & 63) | e << 6;
  d = ((d << 4) + (f + 51728)[0]:ubyte + 51984)[0]:ubyte;
  if (eqz(d)) goto B_d;
  if (b == 2) goto B_a;
  if (
    ((d << 4) + ((a = a[3]:ubyte) + 51728)[0]:ubyte + 51984)[0]:ubyte) goto B_a;
  e = (a & 63) | e << 6;
  label B_d:
  if (e >= 256) goto B_e;
  c = e;
  goto B_a;
  label B_e:
  a = 0;
  d = 1296;
  loop L_f {
    var g:int = (d - a >> 1) + a;
    b = g & -2;
    c = b;
    f = ((b << 2) + 44384)[0]:int > e;
    if (f) goto B_g;
    c = d;
    if (((g << 2 | 4) + 44384)[0]:int < e) goto B_g;
    return 1;
    label B_g:
    d = c;
    if (c > (a = select_if(a, b + 2, f))) continue L_f;
  }
  return 0;
  label B_c:
  assert_fail(26121, 13463, 2255, 2021);
  unreachable;
  label B_a:
  return ((c + 32208)[0]:ubyte & 4) >> 2;
}

function pm_encoding_utf_8_width(a:{ a:ubyte, b:ubyte, c:ubyte, d:ubyte }, b:int):int {
  var c:int = 1;
  if (b < 1) goto B_a;
  var d:int = ((a.a + 51728)[0]:ubyte + 51984)[0]:ubyte;
  if (eqz(d)) goto B_b;
  b = b + -1;
  b = select_if(b, 3, b < 3);
  if (eqz(b)) goto B_c;
  c = ((d << 4) + (a.b + 51728)[0]:ubyte + 51984)[0]:ubyte;
  if (c) goto B_d;
  return 2;
  label B_d:
  if (b == 1) goto B_c;
  d = ((c << 4) + (a.c + 51728)[0]:ubyte + 51984)[0]:ubyte;
  if (d) goto B_e;
  return 3;
  label B_e:
  if (b == 2) goto B_c;
  c = 4;
  if (
    eqz(((d << 4) + (a.d + 51728)[0]:ubyte + 51984)[0]:ubyte)) goto B_b;
  label B_c:
  c = 0;
  label B_b:
  return c;
  label B_a:
  assert_fail(26121, 13463, 2255, 2021);
  return unreachable;
}

function pm_encoding_single_width(a:int, b:int):int {
  return 1
}

function pm_encoding_ascii_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ascii_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ascii_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_big5_width(a:{ a:byte, b:ubyte }, b:int):int {
  var c:int = 1;
  var d:int = a.a;
  if (d > -1) goto B_a;
  if (b < 2) goto B_b;
  if (d < -95) goto B_b;
  if (d == -1) goto B_b;
  c = 2;
  a = a.b;
  if ((a + -127 & 255) > 192) goto B_a;
  if ((a + 1 & 255) > 161) goto B_a;
  label B_b:
  c = 0;
  label B_a:
  return c;
}

function pm_encoding_ascii_alpha_7bit(a:byte_ptr, b:int):int {
  var c:int = 0;
  a = a[0];
  if (a < 0) goto B_a;
  c = ((a & 255) + 57248)[0]:ubyte & 1;
  label B_a:
  return c;
}

function pm_encoding_ascii_alnum_7bit(a:byte_ptr, b:int):int {
  var c:int = 0;
  a = a[0];
  if (a < 0) goto B_a;
  c = ((a & 255) + 57248)[0]:ubyte >> 1 & 1;
  label B_a:
  return c;
}

function pm_encoding_ascii_isupper_7bit(a:byte_ptr, b:int):int {
  var c:int = 0;
  a = a[0];
  if (a < 0) goto B_a;
  c = (((a & 255) + 57248)[0]:ubyte & 4) >> 2;
  label B_a:
  return c;
}

function pm_encoding_cesu_8_width(a:int, b:int):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  pm_cesu_8_codepoint(a, b, c + 12);
  b = c[3];
  stack_pointer = c + 16;
  return b;
}

function pm_cesu_8_codepoint(a:int, b:int, c:int_ptr):int {
  var d:int;
  d = a[0]:byte;
  if (d < 0) goto B_a;
  c[0] = 1;
  return a[0]:ubyte;
  label B_a:
  if (b < 2) goto B_b;
  if (d < -62) goto B_b;
  if (d > -33) goto B_b;
  if (a[1]:byte > -65) goto B_b;
  c[0] = 2;
  return (a[0]:ubyte & 31) << 6 | (a[1]:ubyte & 63);
  label B_b:
  var e:int = d & 255;
  if (b < 6) goto B_i;
  br_table[B_e, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_j, ..B_g](
    e + -224)
  label B_j:
  d = a[1]:ubyte;
  if ((d & 240) != 160) goto B_h;
  if (a[2]:byte > -65) goto B_h;
  if (a[3]:ubyte != 237) goto B_h;
  if ((a[4]:ubyte & 240) != 176) goto B_h;
  if (a[5]:byte > -65) goto B_h;
  c[0] = 6;
  return ((((a[1]:ubyte & 15) << 16 | (a[2]:ubyte & 63) << 10) |
           (a[5]:ubyte & 63)) |
          (a[4]:ubyte & 15) << 6) +
         65536;
  label B_i:
  if (b < 3) goto B_c;
  br_table[B_e, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_k, ..B_g](
    e + -224)
  label B_k:
  d = a[1]:ubyte;
  label B_h:
  if ((d & 224) != 160) goto B_f;
  c[0] = 3;
  return (((a[0]:ubyte & 3) << 16 | (a[2]:ubyte & 63)) |
          (a[1]:ubyte & 63) << 10) +
         65536;
  label B_g:
  if ((d + 31 & 255) > 14) goto B_c;
  label B_f:
  d = a[1]:byte;
  if (d > -1) goto B_c;
  goto B_d;
  label B_e:
  d = a[1]:ubyte;
  if (d <= 159) goto B_c;
  label B_d:
  if ((d & 255) > 191) goto B_c;
  if (a[2]:byte > -65) goto B_c;
  c[0] = 3;
  return ((a[1]:ubyte & 63) << 6 | (a[0]:ubyte & 15) << 12) |
         (a[2]:ubyte & 63);
  label B_c:
  c[0] = 0;
  return 0;
}

function pm_encoding_cesu_8_alpha(a:byte_ptr, b:int):int {
  var d:int;
  var h:int;
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = a[0];
  if (d < 0) goto B_b;
  a = ((d & 255) + 32208)[0]:ubyte & 1;
  goto B_a;
  label B_b:
  e = pm_cesu_8_codepoint(a, b, c + 12);
  if (e < 256) goto B_c;
  a = 0;
  var f:int = 1450;
  loop L_e {
    var g:int = (f - a >> 1) + a;
    b = g & -2;
    d = b;
    h = ((b << 2) + 32464)[0]:int > e;
    if (h) goto B_f;
    d = f;
    if (((g << 2 | 4) + 32464)[0]:int >= e) goto B_d;
    label B_f:
    f = d;
    if (d > (a = select_if(a, b + 2, h))) continue L_e;
  }
  a = 0;
  goto B_a;
  label B_d:
  a = c[3];
  goto B_a;
  label B_c:
  a = 0 - ((e + 32208)[0]:ubyte & 1) & c[3];
  label B_a:
  stack_pointer = c + 16;
  return a;
}

function pm_encoding_cesu_8_alnum(a:byte_ptr, b:int):int {
  var d:int;
  var h:int;
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = a[0];
  if (d < 0) goto B_b;
  a = ((d & 255) + 32208)[0]:ubyte >> 1 & 1;
  goto B_a;
  label B_b:
  e = pm_cesu_8_codepoint(a, b, c + 12);
  if (e < 256) goto B_c;
  a = 0;
  var f:int = 1528;
  loop L_e {
    var g:int = (f - a >> 1) + a;
    b = g & -2;
    d = b;
    h = ((b << 2) + 38272)[0]:int > e;
    if (h) goto B_f;
    d = f;
    if (((g << 2 | 4) + 38272)[0]:int >= e) goto B_d;
    label B_f:
    f = d;
    if (d > (a = select_if(a, b + 2, h))) continue L_e;
  }
  a = 0;
  goto B_a;
  label B_d:
  a = c[3];
  goto B_a;
  label B_c:
  a = ((e + 32208)[0]:ubyte << 30) >> 31 & c[3];
  label B_a:
  stack_pointer = c + 16;
  return a;
}

function pm_encoding_cesu_8_isupper(a:byte_ptr, b:int):int {
  var d:int;
  var h:int;
  var e:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  d = a[0];
  if (d < 0) goto B_b;
  a = (((d & 255) + 32208)[0]:ubyte & 4) >> 2;
  goto B_a;
  label B_b:
  e = pm_cesu_8_codepoint(a, b, c + 12);
  if (e < 256) goto B_c;
  a = 0;
  var f:int = 1296;
  loop L_d {
    var g:int = (f - a >> 1) + a;
    b = g & -2;
    d = b;
    h = ((b << 2) + 44384)[0]:int > e;
    if (h) goto B_e;
    d = f;
    if (((g << 2 | 4) + 44384)[0]:int < e) goto B_e;
    a = 1;
    goto B_a;
    label B_e:
    f = d;
    if (d > (a = select_if(a, b + 2, h))) continue L_d;
  }
  a = 0;
  goto B_a;
  label B_c:
  a = ((e + 32208)[0]:ubyte & 4) >> 2;
  label B_a:
  stack_pointer = c + 16;
  return a;
}

function pm_encoding_euc_jp_width(a:{ a:byte, b:ubyte, c:ubyte }, b:int):int {
  var c:int = 1;
  var d:int = a.a;
  if (d > -1) goto B_a;
  if (b < 2) goto B_b;
  if (d == -114) goto B_d;
  if ((d + 1 & 255) < 162) goto B_c;
  label B_d:
  c = 2;
  if ((a.b + 1 & 255) > 161) goto B_a;
  label B_c:
  if (b < 3) goto B_b;
  if (d != -113) goto B_b;
  if (a.b < 161) goto B_b;
  c = 3;
  if ((a.c + 95 & 255) < 94) goto B_a;
  label B_b:
  c = 0;
  label B_a:
  return c;
}

function pm_encoding_cp850_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_cp850_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_cp850_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_cp852_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_cp852_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_cp852_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_cp855_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_cp855_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_cp855_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_cp949_width(a:{ a:ubyte, b:ubyte }, b:int):int {
  var c:int = 1;
  var d:int = a.a;
  if (d < 129) goto B_a;
  if (b < 2) goto B_b;
  if (d == 255) goto B_b;
  c = 2;
  if ((a.b + 1 & 255) > 65) goto B_a;
  label B_b:
  c = 0;
  label B_a:
  return c;
}

function pm_encoding_emacs_mule_width(a:{ a:byte, b:ubyte, c:ubyte, d:ubyte }, b:int):int {
  var c:int = 1;
  var d:int = a.a;
  if (d > -1) goto B_a;
  if (b < 2) goto B_b;
  if (d == -128) goto B_b;
  if (d > -113) goto B_b;
  c = 2;
  if (a.b > 159) goto B_a;
  label B_b:
  if (b < 3) goto B_c;
  if ((d + 112 & 255) > 9) goto B_f;
  if (a.b > 159) goto B_e;
  goto B_d;
  label B_f:
  if ((d & -2) != -102) goto B_d;
  if ((a.b & 240) != 224) goto B_d;
  label B_e:
  c = 3;
  if (a.c > 159) goto B_a;
  label B_d:
  if (b < 4) goto B_c;
  br_table[B_i, B_h, ..B_c]((d & 255) + -156)
  label B_i:
  if ((a.b + 16 & 255) < 5) goto B_g;
  goto B_c;
  label B_h:
  if ((a.b + 1 & 255) < 246) goto B_c;
  label B_g:
  if (a.c < 160) goto B_c;
  c = 4;
  if (a.d > 159) goto B_a;
  label B_c:
  c = 0;
  label B_a:
  return c;
}

function pm_encoding_euc_kr_width(a:{ a:byte, b:ubyte }, b:int):int {
  var c:int = 1;
  var d:int = a.a;
  if (d > -1) goto B_a;
  if (b < 2) goto B_b;
  if (d < -95) goto B_b;
  if (d == -1) goto B_b;
  c = 2;
  if ((a.b + 1 & 255) > 161) goto B_a;
  label B_b:
  c = 0;
  label B_a:
  return c;
}

function pm_encoding_euc_tw_width(a:{ a:byte, b:ubyte, c:ubyte, d:ubyte }, b:int):int {
  var c:int = 1;
  var d:int = a.a;
  if (d > -1) goto B_a;
  if (b < 2) goto B_c;
  if (d < -95) goto B_c;
  if (d == -1) goto B_c;
  c = 2;
  if ((a.b + 1 & 255) < 162) goto B_b;
  goto B_a;
  label B_c:
  if (b < 4) goto B_b;
  if (d != -114) goto B_b;
  if ((a.b + 95 & 255) > 15) goto B_b;
  if ((a.c + 1 & 255) < 162) goto B_b;
  c = 4;
  if ((a.d + 1 & 255) > 161) goto B_a;
  label B_b:
  c = 0;
  label B_a:
  return c;
}

function pm_encoding_gb18030_width(a:{ a:ubyte, b:ubyte, c:ubyte, d:ubyte }, b:int):int {
  var c:int = 1;
  var d:int = a.a;
  var e:int = i32_extend8_s(d);
  if (e > -1) goto B_a;
  if (b < 2) goto B_b;
  if (d == 128) goto B_c;
  if (d == 255) goto B_c;
  c = a.b;
  if ((c & 255) < 64) goto B_c;
  if (((c | 128) & 255) == 255) goto B_c;
  return 2;
  label B_c:
  if (b < 4) goto B_b;
  if ((e + 1 & 255) < 130) goto B_b;
  if ((a.b + -48 & 255) > 9) goto B_b;
  if ((a.c + 1 & 255) < 130) goto B_b;
  c = 4;
  if ((a.d + -48 & 255) < 10) goto B_a;
  label B_b:
  c = 0;
  label B_a:
  return c;
}

function pm_encoding_gb1988_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_gb1988_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_gb1988_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_gbk_width(a:{ a:ubyte, b:ubyte }, b:int):int {
  var e:int;
  var c:int = 1;
  var d:int = a.a;
  if (d < 129) goto B_a;
  if (b < 2) goto B_b;
  b = d + 95;
  if ((b & 255) > 8) goto B_e;
  c = 2;
  e = 0;
  if ((a.b + 1 & 255) >= 162) goto B_a;
  goto B_d;
  label B_e:
  if ((d + 80 & 255) > 71) goto B_g;
  c = 2;
  e = 0;
  if ((a.b + 1 & 255) < 162) goto B_f;
  goto B_a;
  label B_g:
  if (d > 160) goto B_h;
  c = a.b;
  if ((c & 255) < 64) goto B_b;
  return ((c + 1 & 127) != 0) << 1;
  label B_h:
  e = d == 255;
  if ((d + 1 & 255) < 171) goto B_d;
  label B_f:
  var f:int = a.b;
  if (f == 127) goto B_c;
  c = 2;
  if ((f + 95 & 255) >= 159) goto B_a;
  goto B_c;
  label B_d:
  if ((d & 254) != 168) goto B_c;
  a = a.b;
  if (a == 127) goto B_b;
  c = 2;
  if ((a + 95 & 255) < 159) goto B_b;
  goto B_a;
  label B_c:
  if ((d + 86 & 255) > 5) goto B_i;
  c = 2;
  if ((a.b + 1 & 255) < 162) goto B_b;
  goto B_a;
  label B_i:
  if (d < 248 | e) goto B_j;
  c = 2;
  if ((a.b + 1 & 255) < 162) goto B_b;
  goto B_a;
  label B_j:
  if ((b & 255) > 6) goto B_b;
  a = a.b;
  if (a == 127) goto B_b;
  c = 2;
  if ((a + 95 & 255) > 158) goto B_a;
  label B_b:
  c = 0;
  label B_a:
  return c;
}

function pm_encoding_ibm437_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm437_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm437_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm720_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm720_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm720_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm737_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm737_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm737_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm775_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm775_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm775_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm852_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm852_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm852_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm855_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm855_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm855_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm857_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm857_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm857_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm860_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm860_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm860_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm861_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm861_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm861_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm862_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm862_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm862_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm863_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm863_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm863_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm864_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm864_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm864_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm865_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm865_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm865_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm866_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm866_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm866_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_ibm869_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_ibm869_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_ibm869_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_1_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 32208)[0]:ubyte & 1
}

function pm_encoding_iso_8859_1_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 32208)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_1_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 32208)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 52128)[0]:ubyte & 1
}

function pm_encoding_iso_8859_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 52128)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 52128)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_3_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 52384)[0]:ubyte & 1
}

function pm_encoding_iso_8859_3_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 52384)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_3_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 52384)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_4_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 52640)[0]:ubyte & 1
}

function pm_encoding_iso_8859_4_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 52640)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_4_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 52640)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_5_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 52896)[0]:ubyte & 1
}

function pm_encoding_iso_8859_5_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 52896)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_5_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 52896)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_6_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 56736)[0]:ubyte & 1
}

function pm_encoding_iso_8859_6_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 56736)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_6_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 56736)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_7_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 53152)[0]:ubyte & 1
}

function pm_encoding_iso_8859_7_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 53152)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_7_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 53152)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_8_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 56480)[0]:ubyte & 1
}

function pm_encoding_iso_8859_8_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 56480)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_8_isupper(a:ubyte_ptr, b:int):int {
  return a[0] + -65 < 26
}

function pm_encoding_iso_8859_9_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 32208)[0]:ubyte & 1
}

function pm_encoding_iso_8859_9_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 32208)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_9_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 32208)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_10_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 53408)[0]:ubyte & 1
}

function pm_encoding_iso_8859_10_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 53408)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_10_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 53408)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_11_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 54944)[0]:ubyte & 1
}

function pm_encoding_iso_8859_11_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 54944)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_11_isupper(a:ubyte_ptr, b:int):int {
  return a[0] + -65 < 26
}

function pm_encoding_iso_8859_13_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 56992)[0]:ubyte & 1
}

function pm_encoding_iso_8859_13_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 56992)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_13_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 56992)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_14_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 53664)[0]:ubyte & 1
}

function pm_encoding_iso_8859_14_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 53664)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_14_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 53664)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_15_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 53920)[0]:ubyte & 1
}

function pm_encoding_iso_8859_15_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 53920)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_15_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 53920)[0]:ubyte & 4) >> 2
}

function pm_encoding_iso_8859_16_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 54176)[0]:ubyte & 1
}

function pm_encoding_iso_8859_16_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 54176)[0]:ubyte >> 1 & 1
}

function pm_encoding_iso_8859_16_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 54176)[0]:ubyte & 4) >> 2
}

function pm_encoding_koi8_width(a:ubyte_ptr, b:int):int {
  return select_if(1, (a = a[0]) >> 7, (a + -32 & 255) < 95)
}

function pm_encoding_koi8_r_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 54432)[0]:ubyte & 1
}

function pm_encoding_koi8_r_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 54432)[0]:ubyte >> 1 & 1
}

function pm_encoding_koi8_r_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 54432)[0]:ubyte & 4) >> 2
}

function pm_encoding_koi8_u_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 54688)[0]:ubyte & 1
}

function pm_encoding_koi8_u_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 54688)[0]:ubyte >> 1 & 1
}

function pm_encoding_koi8_u_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 54688)[0]:ubyte & 4) >> 2
}

function pm_encoding_mac_cent_euro_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_cent_euro_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_cent_euro_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_mac_croatian_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_croatian_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_croatian_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_mac_cyrillic_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_cyrillic_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_cyrillic_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_mac_greek_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_greek_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_greek_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_mac_iceland_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_iceland_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_iceland_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_shift_jis_width(a:{ a:byte, b:ubyte }, b:int):int {
  var c:int = 1;
  var d:int = a.a;
  if (d > -1) goto B_a;
  if ((d + 95 & 255) < 63) goto B_a;
  if (b < 2) goto B_b;
  if ((d + 127 & 255) < 31) goto B_c;
  if ((d + 32 & 255) > 28) goto B_b;
  label B_c:
  c = 2;
  if ((a.b + -64 & 255) < 189) goto B_a;
  label B_b:
  c = 0;
  label B_a:
  return c;
}

function pm_encoding_mac_roman_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_roman_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_roman_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_mac_romania_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_romania_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_romania_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_mac_thai_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_thai_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_thai_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_mac_turkish_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_turkish_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_turkish_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_mac_ukraine_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_mac_ukraine_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_mac_ukraine_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_tis_620_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 54944)[0]:ubyte & 1
}

function pm_encoding_tis_620_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 54944)[0]:ubyte >> 1 & 1
}

function pm_encoding_tis_620_isupper(a:ubyte_ptr, b:int):int {
  return a[0] + -65 < 26
}

function pm_encoding_ascii_width(a:byte_ptr, b:int):int {
  return a[0] > -1
}

function pm_encoding_windows_1250_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 55200)[0]:ubyte & 1
}

function pm_encoding_windows_1250_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 55200)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_1250_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 55200)[0]:ubyte & 4) >> 2
}

function pm_encoding_windows_1251_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 55456)[0]:ubyte & 1
}

function pm_encoding_windows_1251_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 55456)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_1251_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 55456)[0]:ubyte & 4) >> 2
}

function pm_encoding_windows_1252_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 55712)[0]:ubyte & 1
}

function pm_encoding_windows_1252_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 55712)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_1252_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 55712)[0]:ubyte & 4) >> 2
}

function pm_encoding_windows_1253_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 55968)[0]:ubyte & 1
}

function pm_encoding_windows_1253_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 55968)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_1253_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 55968)[0]:ubyte & 4) >> 2
}

function pm_encoding_windows_1254_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 56224)[0]:ubyte & 1
}

function pm_encoding_windows_1254_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 56224)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_1254_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 56224)[0]:ubyte & 4) >> 2
}

function pm_encoding_windows_1255_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 56480)[0]:ubyte & 1
}

function pm_encoding_windows_1255_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 56480)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_1255_isupper(a:ubyte_ptr, b:int):int {
  return a[0] + -65 < 26
}

function pm_encoding_windows_1256_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 56736)[0]:ubyte & 1
}

function pm_encoding_windows_1256_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 56736)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_1256_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 56736)[0]:ubyte & 4) >> 2
}

function pm_encoding_windows_1257_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 56992)[0]:ubyte & 1
}

function pm_encoding_windows_1257_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 56992)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_1257_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 56992)[0]:ubyte & 4) >> 2
}

function pm_encoding_windows_1258_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_windows_1258_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_1258_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

function pm_encoding_windows_874_alpha(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte & 1
}

function pm_encoding_windows_874_alnum(a:ubyte_ptr, b:int):int {
  return (a[0] + 57248)[0]:ubyte >> 1 & 1
}

function pm_encoding_windows_874_isupper(a:ubyte_ptr, b:int):int {
  return ((a[0] + 57248)[0]:ubyte & 4) >> 2
}

export function pm_encoding_find(a:ubyte_ptr, b:int):int {
  var c:int = b - a;
  var d:int = a + 5;
  if (d > b) goto B_a;
  if (pm_strncasecmp(a, 25399, 5)) goto B_a;
  if (c != 9) goto B_b;
  if (pm_strncasecmp(d, 16015, 4)) goto B_b;
  return 51368;
  label B_b:
  return 49568;
  label B_a:
  if (c < 3) goto B_c;
  br_table[B_e, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_r, B_q, B_p, B_c, B_o, B_c, B_n, B_c, B_m, B_c, B_l, B_c, B_k, B_c, B_c, B_j, B_c, B_c, B_i, B_h, B_g, B_c, B_f, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_r, B_q, B_p, B_c, B_o, B_c, B_n, B_c, B_m, B_c, B_l, B_c, B_k, B_c, B_c, B_j, B_c, B_c, B_i, B_h, B_g, B_c, B_f, ..B_c](
    a[0] + -54)
  label B_r:
  br_table[B_u, B_c, B_c, B_c, B_c, B_t, B_c, B_c, B_c, B_s, ..B_c](
    c + -5)
  label B_u:
  if (pm_strncasecmp(a, 17680, 5)) goto B_c;
  return 51344;
  label B_t:
  if (pm_strncasecmp(a, 15737, 10)) goto B_c;
  return 49592;
  label B_s:
  if (pm_strncasecmp(a, 25341, 14)) goto B_c;
  return 51344;
  label B_q:
  br_table[B_y, B_c, B_z, B_c, B_v, B_c, B_x, B_c, B_c, B_c, B_c, B_w, ..B_c](
    c + -4)
  label B_z:
  if (pm_strncasecmp(a, 15401, 6)) goto B_c;
  return 49592;
  label B_y:
  if (pm_strncasecmp(a, 25593, 4)) goto B_c;
  return 49616;
  label B_x:
  if (pm_strncasecmp(a, 16049, 10)) goto B_c;
  return 49640;
  label B_w:
  if (pm_strncasecmp(a, 25376, 15)) goto B_c;
  return 49640;
  label B_v:
  if (pm_strncasecmp(a, 16743, 8)) goto B_c;
  return 49664;
  label B_p:
  br_table[B_ea, B_fa, B_aa, B_c, B_c, B_c, B_c, B_da, ..B_c](c + -5)
  label B_fa:
  if (pm_strncasecmp(a, 25392, 6)) goto B_ba;
  return 49688;
  label B_ea:
  if (pm_strncasecmp(a, 25472, 5)) goto B_ga;
  return 50144;
  label B_ga:
  if (pm_strncasecmp(a, 26188, 5)) goto B_ha;
  return 50168;
  label B_ha:
  if (pm_strncasecmp(a, 25459, 5)) goto B_ia;
  return 50192;
  label B_ia:
  if (pm_strncasecmp(a, 25598, 5)) goto B_ja;
  return 50216;
  label B_ja:
  if (pm_strncasecmp(a, 26147, 5)) goto B_ka;
  return 49736;
  label B_ka:
  if (pm_strncasecmp(a, 25920, 5)) goto B_la;
  return 49760;
  label B_la:
  if (pm_strncasecmp(a, 25624, 5)) goto B_ma;
  return 49784;
  label B_ma:
  if (pm_strncasecmp(a, 25426, 5)) goto B_na;
  return 50288;
  label B_na:
  if (pm_strncasecmp(a, 26128, 5)) goto B_oa;
  return 50312;
  label B_oa:
  if (pm_strncasecmp(a, 26030, 5)) goto B_pa;
  return 50336;
  label B_pa:
  if (pm_strncasecmp(a, 25907, 5)) goto B_qa;
  return 50360;
  label B_qa:
  if (pm_strncasecmp(a, 25727, 5)) goto B_ra;
  return 50408;
  label B_ra:
  if (pm_strncasecmp(a, 25611, 5)) goto B_sa;
  return 50432;
  label B_sa:
  if (pm_strncasecmp(a, 25506, 5)) goto B_ta;
  return 50456;
  label B_ta:
  if (pm_strncasecmp(a, 25281, 5)) goto B_ua;
  return 50480;
  label B_ua:
  if (pm_strncasecmp(a, 25709, 5)) goto B_va;
  return 51704;
  label B_va:
  if (pm_strncasecmp(a, 25335, 5)) goto B_wa;
  return 50864;
  label B_wa:
  if (pm_strncasecmp(a, 25817, 5)) goto B_xa;
  return 50384;
  label B_xa:
  if (pm_strncasecmp(a, 25988, 5)) goto B_ca;
  return 51680;
  label B_da:
  if (pm_strncasecmp(a, 17620, 12)) goto B_c;
  return 51680;
  label B_ca:
  if (pm_strncasecmp(a, 25543, 5)) goto B_ya;
  return 50120;
  label B_ya:
  if (pm_strncasecmp(a, 25294, 5)) goto B_za;
  return 49808;
  label B_za:
  if (pm_strncasecmp(a, 26141, 5)) goto B_ab;
  return 49832;
  label B_ab:
  if (pm_strncasecmp(a, 26043, 5)) goto B_c;
  return 49856;
  label B_ba:
  if (pm_strncasecmp(a, 26160, 6)) goto B_bb;
  return 51464;
  label B_bb:
  if (pm_strncasecmp(a, 26049, 6)) goto B_cb;
  return 51488;
  label B_cb:
  if (pm_strncasecmp(a, 25933, 6)) goto B_db;
  return 51512;
  label B_db:
  if (pm_strncasecmp(a, 25830, 6)) goto B_eb;
  return 51536;
  label B_eb:
  if (pm_strncasecmp(a, 25740, 6)) goto B_fb;
  return 51560;
  label B_fb:
  if (pm_strncasecmp(a, 25637, 6)) goto B_gb;
  return 51584;
  label B_gb:
  if (pm_strncasecmp(a, 25519, 6)) goto B_hb;
  return 51608;
  label B_hb:
  if (pm_strncasecmp(a, 25439, 6)) goto B_ib;
  return 51632;
  label B_ib:
  if (pm_strncasecmp(a, 25356, 6)) goto B_c;
  return 51656;
  label B_aa:
  if (pm_strncasecmp(a, 25994, 7)) goto B_jb;
  return 49712;
  label B_jb:
  if (pm_strncasecmp(a, 26092, 7)) goto B_c;
  return 49568;
  label B_o:
  br_table[B_ub, B_vb, B_c, B_tb, B_sb, B_kb, B_c, B_rb, ..B_c](c + -5)
  label B_vb:
  if (pm_strncasecmp(a, 16656, 6)) goto B_qb;
  return 49904;
  label B_ub:
  if (pm_strncasecmp(a, 16650, 5)) goto B_pb;
  return 49904;
  label B_tb:
  if (pm_strncasecmp(a, 4815, 8)) goto B_c;
  return 49928;
  label B_sb:
  if (pm_strncasecmp(a, 4805, 9)) goto B_c;
  return 49928;
  label B_rb:
  b = 49952;
  if (eqz(pm_strncasecmp(a, 25783, 12))) goto B_d;
  if (eqz(pm_strncasecmp(a, 25850, 12))) goto B_d;
  goto B_c;
  label B_qb:
  if (pm_strncasecmp(a, 16129, 6)) goto B_ob;
  return 49976;
  label B_pb:
  if (pm_strncasecmp(a, 16123, 5)) goto B_nb;
  return 49976;
  label B_ob:
  if (pm_strncasecmp(a, 16990, 6)) goto B_mb;
  return 50096;
  label B_nb:
  if (pm_strncasecmp(a, 16984, 5)) goto B_lb;
  return 50096;
  label B_mb:
  if (pm_strncasecmp(a, 15558, 6)) goto B_c;
  return 50000;
  label B_lb:
  if (pm_strncasecmp(a, 15552, 5)) goto B_c;
  return 50000;
  label B_kb:
  if (pm_strncasecmp(a, 11925, 10)) goto B_c;
  return 49880;
  label B_n:
  br_table[B_yb, B_c, B_c, B_wb, B_xb, ..B_c](c + -3)
  label B_yb:
  if (pm_strncasecmp(a, 17576, 3)) goto B_c;
  return 50120;
  label B_xb:
  if (pm_strncasecmp(a, 25657, 7)) goto B_zb;
  return 50024;
  label B_zb:
  if (pm_strncasecmp(a, 26180, 7)) goto B_c;
  return 50048;
  label B_wb:
  if (pm_strncasecmp(a, 25328, 6)) goto B_ac;
  return 50072;
  label B_ac:
  if (pm_strncasecmp(a, 26002, 6)) goto B_c;
  return 50096;
  label B_m:
  br_table[B_fd, B_c, B_c, B_dd, B_ed, B_mc, ..B_c](c + -6)
  label B_fd:
  if (pm_strncasecmp(a, 25478, 6)) goto B_gd;
  return 50144;
  label B_gd:
  if (pm_strncasecmp(a, 26194, 6)) goto B_hd;
  return 50168;
  label B_hd:
  if (pm_strncasecmp(a, 25465, 6)) goto B_id;
  return 50192;
  label B_id:
  if (pm_strncasecmp(a, 25604, 6)) goto B_jd;
  return 50216;
  label B_jd:
  if (pm_strncasecmp(a, 26153, 6)) goto B_kd;
  return 49736;
  label B_kd:
  if (pm_strncasecmp(a, 25926, 6)) goto B_ld;
  return 50240;
  label B_ld:
  if (pm_strncasecmp(a, 25630, 6)) goto B_md;
  return 50264;
  label B_md:
  if (pm_strncasecmp(a, 25432, 6)) goto B_nd;
  return 50288;
  label B_nd:
  if (pm_strncasecmp(a, 26134, 6)) goto B_od;
  return 50312;
  label B_od:
  if (pm_strncasecmp(a, 26036, 6)) goto B_pd;
  return 50336;
  label B_pd:
  if (pm_strncasecmp(a, 25913, 6)) goto B_qd;
  return 50360;
  label B_qd:
  if (pm_strncasecmp(a, 25823, 6)) goto B_rd;
  return 50384;
  label B_rd:
  if (pm_strncasecmp(a, 25733, 6)) goto B_sd;
  return 50408;
  label B_sd:
  if (pm_strncasecmp(a, 25617, 6)) goto B_td;
  return 50432;
  label B_td:
  if (pm_strncasecmp(a, 25512, 6)) goto B_ud;
  return 50456;
  label B_ud:
  if (pm_strncasecmp(a, 25287, 6)) goto B_c;
  return 50480;
  label B_ed:
  if (pm_strncasecmp(a, 26110, 10)) goto B_cd;
  return 50504;
  label B_dd:
  if (pm_strncasecmp(a, 26100, 9)) goto B_bd;
  return 50504;
  label B_cd:
  if (pm_strncasecmp(a, 26019, 10)) goto B_ad;
  return 50528;
  label B_bd:
  if (pm_strncasecmp(a, 26009, 9)) goto B_zc;
  return 50528;
  label B_ad:
  if (pm_strncasecmp(a, 25896, 10)) goto B_yc;
  return 50552;
  label B_zc:
  if (pm_strncasecmp(a, 25886, 9)) goto B_xc;
  return 50552;
  label B_yc:
  if (pm_strncasecmp(a, 25806, 10)) goto B_wc;
  return 50576;
  label B_xc:
  if (pm_strncasecmp(a, 25796, 9)) goto B_vc;
  return 50576;
  label B_wc:
  if (pm_strncasecmp(a, 25698, 10)) goto B_uc;
  return 50600;
  label B_vc:
  if (pm_strncasecmp(a, 25688, 9)) goto B_tc;
  return 50600;
  label B_uc:
  if (pm_strncasecmp(a, 25582, 10)) goto B_sc;
  return 50624;
  label B_tc:
  if (pm_strncasecmp(a, 25572, 9)) goto B_rc;
  return 50624;
  label B_sc:
  if (pm_strncasecmp(a, 25495, 10)) goto B_qc;
  return 50648;
  label B_rc:
  if (pm_strncasecmp(a, 25485, 9)) goto B_pc;
  return 50648;
  label B_qc:
  if (pm_strncasecmp(a, 25415, 10)) goto B_oc;
  return 50672;
  label B_pc:
  if (pm_strncasecmp(a, 25405, 9)) goto B_nc;
  return 50672;
  label B_oc:
  if (pm_strncasecmp(a, 25310, 10)) goto B_lc;
  return 50696;
  label B_nc:
  if (pm_strncasecmp(a, 25300, 9)) goto B_c;
  return 50696;
  label B_mc:
  if (pm_strncasecmp(a, 26220, 11)) goto B_kc;
  return 50720;
  label B_lc:
  if (pm_strncasecmp(a, 26209, 10)) goto B_jc;
  return 50720;
  label B_kc:
  if (pm_strncasecmp(a, 26080, 11)) goto B_ic;
  return 50744;
  label B_jc:
  if (pm_strncasecmp(a, 26069, 10)) goto B_hc;
  return 50744;
  label B_ic:
  if (pm_strncasecmp(a, 25874, 11)) goto B_gc;
  return 50768;
  label B_hc:
  if (pm_strncasecmp(a, 25863, 10)) goto B_fc;
  return 50768;
  label B_gc:
  if (pm_strncasecmp(a, 25771, 11)) goto B_ec;
  return 50792;
  label B_fc:
  if (pm_strncasecmp(a, 25760, 10)) goto B_dc;
  return 50792;
  label B_ec:
  if (pm_strncasecmp(a, 25676, 11)) goto B_cc;
  return 50816;
  label B_dc:
  if (pm_strncasecmp(a, 25665, 10)) goto B_bc;
  return 50816;
  label B_cc:
  if (pm_strncasecmp(a, 25560, 11)) goto B_c;
  return 50840;
  label B_bc:
  if (pm_strncasecmp(a, 25549, 10)) goto B_c;
  return 50840;
  label B_l:
  if (c != 6) goto B_c;
  if (pm_strncasecmp(a, 16627, 6)) goto B_vd;
  return 50864;
  label B_vd:
  if (pm_strncasecmp(a, 15565, 6)) goto B_c;
  return 50888;
  label B_k:
  br_table[B_xd, B_ce, B_c, B_be, B_de, ..B_c](c + -7)
  label B_de:
  if (pm_strncasecmp(a, 6655, 11)) goto B_ee;
  return 50912;
  label B_ee:
  if (pm_strncasecmp(a, 7957, 11)) goto B_fe;
  return 50936;
  label B_fe:
  if (pm_strncasecmp(a, 13363, 11)) goto B_ae;
  return 50960;
  label B_ce:
  if (pm_strncasecmp(a, 8837, 8)) goto B_zd;
  return 50984;
  label B_be:
  if (pm_strncasecmp(a, 12832, 10)) goto B_yd;
  return 51008;
  label B_ae:
  if (pm_strncasecmp(a, 11723, 11)) goto B_c;
  return 51032;
  label B_zd:
  if (pm_strncasecmp(a, 7935, 8)) goto B_ge;
  return 51032;
  label B_ge:
  if (pm_strncasecmp(a, 7948, 8)) goto B_c;
  return 51056;
  label B_yd:
  if (pm_strncasecmp(a, 13541, 10)) goto B_wd;
  return 51080;
  label B_xd:
  if (pm_strncasecmp(a, 8981, 7)) goto B_c;
  return 51104;
  label B_wd:
  if (pm_strncasecmp(a, 8989, 10)) goto B_he;
  return 51128;
  label B_he:
  if (pm_strncasecmp(a, 11830, 10)) goto B_c;
  return 51152;
  label B_j:
  if (c != 3) goto B_c;
  if (pm_strncasecmp(a, 17563, 3)) goto B_c;
  return 51680;
  label B_i:
  br_table[B_ne, B_c, B_c, B_c, B_c, B_oe, B_c, B_me, B_c, B_ke, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_je, B_c, B_c, B_c, B_c, B_ie, ..B_c](
    c + -4)
  label B_oe:
  if (pm_strncasecmp(a, 15995, 9)) goto B_le;
  return 51176;
  label B_ne:
  if (pm_strncasecmp(a, 16005, 4)) goto B_c;
  return 51680;
  label B_me:
  if (pm_strncasecmp(a, 6667, 11)) goto B_c;
  return 51200;
  label B_le:
  if (pm_strncasecmp(a, 17686, 9)) goto B_c;
  return 51224;
  label B_ke:
  if (pm_strncasecmp(a, 8809, 13)) goto B_c;
  return 51248;
  label B_je:
  if (pm_strncasecmp(a, 16663, 21)) goto B_c;
  return 51272;
  label B_ie:
  if (pm_strncasecmp(a, 17696, 26)) goto B_c;
  return 51296;
  label B_h:
  if (c != 7) goto B_c;
  if (pm_strncasecmp(a, 26201, 7)) goto B_c;
  return 51320;
  label B_g:
  br_table[B_te, B_se, B_c, B_re, B_c, B_pe, ..B_c](c + -8)
  label B_te:
  if (pm_strncasecmp(a, 17677, 8)) goto B_ue;
  return 51344;
  label B_ue:
  if (pm_strncasecmp(a, 22936, 8)) goto B_c;
  return 51368;
  label B_se:
  if (pm_strncasecmp(a, 16010, 9)) goto B_qe;
  return 51368;
  label B_re:
  if (pm_strncasecmp(a, 6679, 11)) goto B_c;
  return 51392;
  label B_qe:
  if (pm_strncasecmp(a, 17723, 9)) goto B_c;
  return 51416;
  label B_pe:
  if (pm_strncasecmp(a, 8823, 13)) goto B_c;
  return 51440;
  label B_f:
  br_table[B_we, B_ve, ..B_c](c + -11)
  label B_we:
  if (pm_strncasecmp(a, 17633, 11)) goto B_xe;
  return 51680;
  label B_xe:
  if (pm_strncasecmp(a, 25715, 11)) goto B_c;
  return 51704;
  label B_ve:
  if (pm_strncasecmp(a, 26167, 12)) goto B_ye;
  return 51464;
  label B_ye:
  if (pm_strncasecmp(a, 26056, 12)) goto B_ze;
  return 51488;
  label B_ze:
  if (pm_strncasecmp(a, 25940, 12)) goto B_af;
  return 51512;
  label B_af:
  if (pm_strncasecmp(a, 25837, 12)) goto B_bf;
  return 51536;
  label B_bf:
  if (pm_strncasecmp(a, 25747, 12)) goto B_cf;
  return 51560;
  label B_cf:
  if (pm_strncasecmp(a, 25644, 12)) goto B_df;
  return 51584;
  label B_df:
  if (pm_strncasecmp(a, 25526, 12)) goto B_ef;
  return 51608;
  label B_ef:
  if (pm_strncasecmp(a, 25446, 12)) goto B_ff;
  return 51632;
  label B_ff:
  if (pm_strncasecmp(a, 25363, 12)) goto B_c;
  return 51656;
  label B_e:
  if (c != 3) goto B_c;
  if (pm_strncasecmp(a, 25539, 3)) goto B_c;
  b = 51344;
  label B_d:
  return b;
  label B_c:
  return 0;
}

export function pm_options_filepath_set(a:int, b:int) {
  pm_string_constant_init(a, b, strlen(b))
}

export function pm_options_encoding_set(a:int, b:int) {
  pm_string_constant_init(a + 16, b, strlen(b))
}

export function pm_options_line_set(a:int_ptr, b:int) {
  a[3] = b
}

export function pm_options_frozen_string_literal_set(a:byte_ptr, b:int) {
  a[40] = b
}

export function pm_options_suppress_warnings_set(a:byte_ptr, b:int) {
  a[41] = b
}

export function pm_options_version_set(a:int_ptr, b:int, c:int):int {
  var d:int;
  if (b) goto B_c;
  d = 0;
  if (eqz(c)) goto B_b;
  label B_c:
  d = 0;
  if (c != 5) goto B_a;
  if (strncmp(b, 26239, 5)) goto B_d;
  d = 1;
  goto B_b;
  label B_d:
  d = 0;
  if (strncmp(b, 1873, 6)) goto B_a;
  label B_b:
  a[9] = d;
  d = 1;
  label B_a:
  return d;
}

export function pm_options_scopes_init(a:int_ptr, b:int) {
  a[7] = b;
  a[8] = (b = calloc(b, 8));
  if (b) goto B_a;
  abort();
  unreachable;
  label B_a:
}

export function pm_options_scope_get(a:int_ptr, b:int):int {
  return a[8] + (b << 3)
}

export function pm_options_scope_init(a:{ a:int, b:int }, b:int) {
  a.a = b;
  a.b = (b = calloc(b, 12));
  if (b) goto B_a;
  abort();
  unreachable;
  label B_a:
}

export function pm_options_scope_local_get(a:int_ptr, b:int):int {
  return a[1] + b * 12
}

export function pm_options_free(a:int_ptr) {
  var c:{ a:int, b:int }
  pm_string_free(a);
  pm_string_free(a + 16);
  if (eqz(a[7])) goto B_a;
  var b:int = 0;
  loop L_b {
    c = a[8] + (b << 3);
    if (eqz(c.a)) goto B_c;
    var d:int_ptr = c + 4;
    var e:int = 0;
    var f:int = 0;
    loop L_d {
      pm_string_free(d[0] + e);
      e = e + 12;
      f = f + 1;
      if (f < c.a) continue L_d;
    }
    label B_c:
    free(c.b);
    b = b + 1;
    if (b < a[7]) continue L_b;
  }
  label B_a:
  free(a[8]);
}

export function pm_options_read(a:int, b:int) {
  var f:int;
  var g:int;
  a[3]:int = 1;
  if (eqz(b)) goto B_b;
  var c:int = b + 4;
  b = b[0]:int@1;
  if (eqz(b)) goto B_c;
  pm_string_constant_init(a, c, b);
  c = c + b;
  label B_c:
  a[3]:int = c[0]:int@1;
  b = c + 8;
  c = c[4]:int@1;
  if (eqz(c)) goto B_d;
  pm_string_constant_init(a + 16, b, c);
  b = b + c;
  label B_d:
  a[40]:byte = b[0]:ubyte != 0;
  a[41]:byte = b[1]:ubyte != 0;
  a[9]:int = b[2]:byte;
  var d:int = b[3]:int@1;
  if (eqz(d)) goto B_b;
  a[7]:int = d;
  a[8]:int = (c = calloc(d, 8));
  if (eqz(c)) goto B_a;
  b = b + 7;
  var e:int = 0;
  loop L_e {
    c = a[8]:int + (e << 3);
    c[0]:int = (f = b[0]:int@1);
    c[1]:int = (g = calloc(f, 12));
    if (eqz(g)) goto B_a;
    b = b + 4;
    if (eqz(f)) goto B_f;
    var h:int_ptr = c + 4;
    c = 0;
    loop L_g {
      pm_string_constant_init(h[0] + c, g = b + 4, b = b[0]:int@1);
      c = c + 12;
      b = g + b;
      f = f + -1;
      if (f) continue L_g;
    }
    label B_f:
    e = e + 1;
    if (e != d) continue L_e;
  }
  label B_b:
  return ;
  label B_a:
  abort();
  unreachable;
}

export function pm_version():int {
  return 26232
}

export function pm_parser_init(a:int, b:{ a:ubyte, b:ubyte, c:ubyte }, c:int, d:int) {
  var f:int;
  var h:int;
  if (eqz(b)) goto B_b;
  a[3]:long@4 = 0L;
  a[2]:int = -1;
  a[0]:long@4 = 1L;
  var e:int_ptr = a + 20;
  e[0] = 0;
  a[6]:int = (f = a + 28);
  memset(f, 0, 132);
  a[47]:int = b;
  a[46]:int = b;
  a[45]:int = 1;
  a[44]:int = b;
  a[43]:int = b;
  a[42]:int = 1;
  a[41]:int = b + c;
  a[40]:int = b;
  memset(a + 192, 0, 72);
  a[69]:long@4 = 0L;
  a[68]:int = b;
  a[67]:int = 0;
  a[66]:int = 49568;
  (a + 284)[0]:long@4 = 0L;
  var g:long_ptr@4 = a + 292;
  g[0] = 0L;
  (a + 300)[0]:long@4 = 0L;
  f = a + 308;
  f[0]:long@4 = 0L;
  (a + 316)[0]:long@4 = 0L;
  (a + 324)[0]:long@4 = 0L;
  (a + 332)[0]:long@4 = 0L;
  a[86]:long@4 = 0L;
  a[85]:int = 1;
  (a + 352)[0]:int = 0;
  a[357]:int@1 = 0;
  a[356]:byte = 1;
  (a + 360)[0]:int@1 = 0;
  pm_constant_pool_init(g, select_if(h = c / 95, 4, h > 4));
  pm_newline_list_init(f, b, select_if(h = c / 22, 4, h > 4));
  if (eqz(d)) goto B_c;
  a[70]:long@4 = d[0]:long@4;
  (a + 288)[0]:int = (d + 8)[0]:int;
  a[85]:int = d[3]:int;
  f = d + 16;
  h = pm_string_length(f);
  if (eqz(h)) goto B_d;
  f = pm_string_source(f);
  f = pm_encoding_find(f, f + h);
  if (f == 49568) goto B_d;
  if (eqz(f)) goto B_d;
  a[358]:byte = 1;
  a[66]:int = f;
  f = a[67]:int;
  if (eqz(f)) goto B_d;
  call_indirect(a, f);
  label B_d:
  if (eqz(d[40]:ubyte)) goto B_e;
  a[362]:byte = 1;
  label B_e:
  if (eqz(d[41]:ubyte)) goto B_f;
  a[363]:byte = 1;
  label B_f:
  a[88]:int = d[9]:int;
  if (eqz(d[7]:int)) goto B_c;
  var i:int = 0;
  loop L_g {
    var j:int_ptr = pm_options_scope_get(d, i);
    f = malloc(20);
    if (eqz(f)) goto B_h;
    f[17]:short@1 = 0;
    f[0]:long@4 = 0L;
    (f + 19)[0]:byte = 0;
    (f + 8)[0]:int = 0;
    f[16]:byte = eqz(i);
    f[3]:int = a[64]:int;
    pm_constant_id_list_init(f);
    a[64]:int = f;
    label B_h:
    if (eqz(j[0])) goto B_i;
    f = 0;
    loop L_j {
      h = pm_options_scope_local_get(j, f);
      var k:int = pm_string_source(h);
      h = pm_string_length(h);
      var l:int = malloc(h);
      if (eqz(l)) goto B_k;
      h = pm_constant_pool_insert_owned(g, memcpy(l, k, h), h);
      if (eqz(h)) goto B_k;
      if (pm_constant_id_list_includes(a[64]:int, h)) goto B_k;
      pm_constant_id_list_append(a[64]:int, h);
      label B_k:
      f = f + 1;
      if (f < j[0]) continue L_j;
    }
    label B_i:
    i = i + 1;
    if (i < d[7]:int) continue L_g;
  }
  label B_c:
  pm_state_stack_push(e, 0);
  if (c < 3) goto B_l;
  if (b.a != 239) goto B_l;
  if (b.b != 187) goto B_l;
  if (b.c != 191) goto B_l;
  a[47]:int = a[47]:int + 3;
  a[68]:int = a[68]:int + 3;
  label B_l:
  h = a[41]:int;
  if (h <= (f = a[47]:int)) goto B_m;
  if (f[0]:ubyte != 35) goto B_m;
  if (h <= (f = f + 1)) goto B_m;
  if (f[0]:ubyte != 33) goto B_m;
  if (c <= -1) goto B_a;
  f = memchr(b, 10, c);
  if (eqz(f)) goto B_m;
  a[68]:int = f + 1;
  label B_m:
  return ;
  label B_b:
  assert_fail(17077, 13402, 17522, 3947);
  unreachable;
  label B_a:
  assert_fail(26245, 13402, 6354, 11805);
  unreachable;
}

function parser_lex_magic_comment_encoding_value(a:int, b:int, c:int):int {
  c = pm_encoding_find(b, c);
  if (c == 49568) goto B_a;
  if (eqz(c)) goto B_a;
  a[358]:byte = 1;
  a[66]:int = c;
  b = a[67]:int;
  if (eqz(b)) goto B_a;
  call_indirect(a, b);
  label B_a:
  return c != 0;
}

function pm_parser_scope_push(a:int_ptr, b:int) {
  var c:int = malloc(20);
  if (eqz(c)) goto B_a;
  c[17]:short@1 = 0;
  c[0]:long@4 = 0L;
  c[16]:byte = b;
  (c + 19)[0]:byte = 0;
  (c + 8)[0]:int = 0;
  c[3]:int = a[64];
  pm_constant_id_list_init(c);
  a[64] = c;
  label B_a:
}

function next_newline(a:int, b:int):int {
  if (b > -1) goto B_a;
  assert_fail(26245, 13402, 6354, 11805);
  unreachable;
  label B_a:
  return memchr(a, 10, b);
}

export function pm_parser_register_encoding_changed_callback(a:int_ptr, b:int) {
  a[67] = b
}

export function pm_parser_free(a:int_ptr) {
  var b:int_ptr;
  var c:int;
  pm_string_free(a + 280);
  pm_diagnostic_list_free(a + 244);
  pm_diagnostic_list_free(a + 232);
  b = (a + 204)[0]:int;
  if (eqz(b)) goto B_a;
  loop L_b {
    c = b[0];
    free(b);
    b = c;
    if (c) continue L_b;
  }
  label B_a:
  b = (a + 216)[0]:int;
  if (eqz(b)) goto B_c;
  loop L_d {
    c = b[0];
    free(b);
    b = c;
    if (c) continue L_d;
  }
  label B_c:
  pm_constant_pool_free(a + 292);
  pm_newline_list_free(a + 308);
  loop L_e {
    b = a[64];
    if (b) goto B_f;
    c = (a + 156)[0]:int;
    if (c < 4) goto B_g;
    b = a[6];
    loop L_h {
      a[39] = c + -1;
      c = b[7];
      free(b);
      a[6] = c;
      b = c;
      c = a[39];
      if (c > 3) continue L_h;
    }
    label B_g:
    return ;
    label B_f:
    pm_constant_id_list_free(b);
    a[64] = (b = a[64])[3];
    free(b);
    continue L_e;
  }
}

function lex_mode_pop(a:int_ptr) {
  var b:int_ptr;
  var c:int;
  b = (a + 156)[0]:int;
  if (b) goto B_a;
  (a[6])[0]:int = 0;
  return ;
  label B_a:
  a[39] = (c = b + -1);
  if (b > 3) goto B_b;
  a[6] = a + 24 + (c << 5) + 4;
  return ;
  label B_b:
  b = a[6];
  c = b[7];
  free(b);
  a[6] = c;
}

export function pm_parse(a:int):int {
  var c:int;
  var d:int;
  var b:int = stack_pointer - 48;
  stack_pointer = b;
  if (a[64]:int) goto B_a;
  c = malloc(20);
  if (eqz(c)) goto B_a;
  c[17]:short@1 = 0;
  c[0]:long@4 = 0L;
  c[16]:byte = 1;
  (c + 19)[0]:byte = 0;
  (c + 8)[0]:long@4 = 0L;
  pm_constant_id_list_init(c);
  a[64]:int = c;
  label B_a:
  parser_lex(a);
  c = parse_statements(a, 19);
  if (c) goto B_d;
  c = calloc(1, 24);
  if (eqz(c)) goto B_c;
  c[0]:short = 137;
  c[2]:int = (d = a[40]:int);
  c[1]:int = d;
  label B_d:
  (b + 32 + 8)[0]:int = ((d = a[64]:int) + 8)[0]:int;
  var e:long = d[0]:long@4;
  a[64]:int = d[3]:int;
  b[4]:long = e;
  free(d);
  if (c[3]:int) goto B_e;
  (c + 8)[0]:int = (a = a[40]:int);
  c[1]:int = a;
  label B_e:
  a = calloc(1, 28);
  if (eqz(a)) goto B_b;
  a[0]:short = 119;
  a[3]:long@4 = b[4]:long;
  a[6]:int = c;
  a[1]:long@4 = c[1]:long@4;
  (a + 20)[0]:int = (b + 40)[0]:int;
  stack_pointer = b + 48;
  return a;
  label B_c:
  b[0]:int = 24;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_b:
  b[4]:int = 28;
  fprintf(rodata[15455]:int, 31876, b + 16);
  abort();
  return unreachable;
}

function parser_lex(a:int) {
  var e:int;
  var g:int;
  var j:int;
  var r:{ a:ubyte, b:int, c:int, d:int, e:int }
  var q:ubyte_ptr;
  var v:ubyte_ptr;
  var s:ubyte_ptr;
  var w:int;
  var x:int;
  var d:int;
  var i:int;
  var h:ubyte_ptr;
  var f:int_ptr;
  var m:int_ptr;
  var o:int_ptr;
  var c:int;
  var p:int;
  var n:int;
  var l:int;
  var b:int = stack_pointer - 32;
  stack_pointer = b;
  c = a + 188;
  d = c[0]:int;
  if (d > (e = a[41]:int)) goto B_y;
  f = a + 164;
  a[42]:long@4 = (g = a + 180)[0]:long@4;
  (a + 176)[0]:int = (g + 8)[0]:int;
  h = a[356]:ubyte;
  a[356]:byte = 0;
  i = a[361]:ubyte;
  a[361]:byte = 1;
  j = a[6]:int;
  br_table[B_aa, B_aa, B_aa, B_x, B_u, B_v, B_w, ..B_z](j[0]:int);
  label B_aa:
  var k:int = a + 212;
  l = a + 200;
  m = a + 276;
  n = a + 244;
  o = a + 264;
  p = a + 308;
  loop L_ba {
    j = a[48]:int;
    if (j) goto B_da;
    j = c[0]:int;
    goto B_ca;
    label B_da:
    a[48]:int = 0;
    a[47]:int = j;
    label B_ca:
    if (j >= (e = f[0])) goto B_fa;
    q = 0;
    loop L_ga {
      r = j[0]:ubyte;
      d = r + -9;
      if (d > 23) goto B_ia;
      if (1 << d & 8388621) goto B_ja;
      if (d != 4) goto B_ia;
      if (e <= (d = j + 1)) goto B_ka;
      br_table[B_ea, B_ka, B_ka, B_la, ..B_ka](d[0]:ubyte + -10)
      label B_la:
      if (e <= (j = j + 2)) goto B_ka;
      if (j[0]:ubyte == 10) goto B_ea;
      label B_ka:
      c[0]:int = d;
      q = 1;
      goto B_ha;
      label B_ja:
      q = 1;
      c[0]:int = j + 1;
      goto B_ha;
      label B_ia:
      if (r != 92) goto B_ea;
      if (e <= (d = j + 1)) goto B_ma;
      r = 1;
      br_table[B_na, B_ma, B_ma, B_oa, ..B_ma](d[0]:ubyte + -10)
      label B_oa:
      if (e <= (d = j + 2)) goto B_ma;
      r = 2;
      if (d[0]:ubyte != 10) goto B_ma;
      label B_na:
      d = a[49]:int;
      if (eqz(d)) goto B_pa;
      a[49]:int = 0;
      a[47]:int = d;
      goto B_ha;
      label B_pa:
      q = 1;
      c[0]:int = (j = j + r) + 1;
      pm_newline_list_append(p, j);
      goto B_ha;
      label B_ma:
      if (eqz(pm_is_inline_whitespace(92))) goto B_ea;
      c[0]:int = c[0]:int + 2;
      label B_ha:
      j = c[0]:int;
      if (j < (e = f[0])) continue L_ga;
    }
    label B_fa:
    a[46]:int = j;
    goto B_b;
    label B_ea:
    a[46]:int = (j = a[47]:int);
    if (j >= (e = a[41]:int)) goto B_b;
    c[0]:int = (d = j + 1);
    r = 0;
    s = j[0]:ubyte;
    br_table[B_gc, B_nb, B_nb, B_nb, B_gc, B_nb, B_nb, B_nb, B_nb, B_nb, B_ec, B_nb, B_nb, B_ec, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_gc, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_ub, B_g, B_fc, B_hb, B_gb, B_k, B_i, B_cc, B_bc, B_vb, B_m, B_dc, B_n, B_o, B_r, B_p, B_p, B_p, B_p, B_p, B_p, B_p, B_p, B_p, B_p, B_q, B_ac, B_sb, B_tb, B_f, B_j, B_ib, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_zb, B_nb, B_yb, B_s, B_mb, B_h, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_xb, B_l, B_wb, B_t, ..B_nb](
      s);
    label B_gc:
    g[0]:int = 1;
    c[0]:int = j;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_fc:
    r = e - d;
    if (r <= -1) goto B_ob;
    c[0]:int = (e = select_if(r = memchr(d, 10, r), e, r));
    d = calloc(16, 1);
    if (eqz(d)) goto B_hc;
    d[3]:int = 0;
    d[2]:int = e;
    d[1]:int = j;
    label B_hc:
    pm_list_append(l, d);
    if (eqz(r)) goto B_ic;
    c[0]:int = c[0]:int + 1;
    label B_ic:
    g[0]:int = 28;
    j = m[0];
    if (eqz(j)) goto B_jc;
    call_indirect(j[0]:int, a, g, j[1]:int);
    label B_jc:
    var t:int = 1;
    d = a[47]:int;
    if (d - (j = (e = a[46]:int) + 1) < 8) goto B_kc;
    if (e + 4 > d) goto B_lc;
    r = j;
    loop L_nc {
      e = pm_memchr(r, 45, d - r, a[358]:ubyte, a[66]:int);
      if (eqz(e)) goto B_lc;
      r = e + 3;
      if (r > d) goto B_oc;
      if (e[1]:ubyte != 42) goto B_oc;
      if (e[2]:ubyte == 45) goto B_mc;
      label B_oc:
      r = e + 1;
      if (e + 4 <= d) continue L_nc;
    }
    t = 1;
    goto B_lc;
    label B_mc:
    if (e + 6 > d) goto B_kc;
    e = r;
    loop L_pc {
      j = pm_memchr(e, 45, d - e, a[358]:ubyte, a[66]:int);
      if (eqz(j)) goto B_kc;
      if (j + 3 > d) goto B_rc;
      if (j[1]:ubyte != 42) goto B_rc;
      if (j[2]:ubyte == 45) goto B_qc;
      label B_rc:
      e = j + 1;
      if (j + 4 <= d) continue L_pc;
      goto B_kc;
      label B_qc:
    }
    t = 0;
    d = j;
    j = r;
    label B_lc:
    r = 1;
    if (j >= d) goto B_ec;
    var u:int = 1;
    loop L_sc {
      if (j < d) goto B_uc;
      v = j;
      goto B_tc;
      label B_uc:
      e = d - j;
      loop L_vc {
        q = j[0]:ubyte;
        r = q + -34;
        if (r > 25) goto B_xc;
        if (1 << r & 50331681) goto B_wc;
        label B_xc:
        if (pm_is_whitespace(q)) goto B_wc;
        v = j;
        goto B_tc;
        label B_wc:
        j = j + 1;
        e = e + -1;
        if (e) continue L_vc;
      }
      v = d;
      label B_tc:
      q = v;
      if (v >= d) goto B_yc;
      e = d - v;
      s = v + d - v;
      q = v;
      loop L_zc {
        j = q[0];
        r = j + -34;
        if (r > 25) goto B_ad;
        if (1 << r & 50331681) goto B_yc;
        label B_ad:
        if (pm_is_whitespace(j)) goto B_yc;
        q = q + 1;
        e = e + -1;
        if (e) continue L_zc;
      }
      q = s;
      label B_yc:
      j = q;
      if (q >= d) goto B_bd;
      e = d - q;
      r = q + d - q;
      j = q;
      loop L_cd {
        if (eqz(pm_is_whitespace(j[0]:ubyte))) goto B_bd;
        j = j + 1;
        e = e + -1;
        if (e) continue L_cd;
      }
      j = r;
      label B_bd:
      if (j == d) goto B_dd;
      if (j[0]:ubyte != 58) goto B_fd;
      r = j + 2;
      s = j + 1;
      loop L_hd {
        j = r;
        e = s;
        w = e >= d;
        if (w) goto B_gd;
        r = j + 1;
        s = e + 1;
        if (pm_is_whitespace(e[0]:ubyte)) continue L_hd;
      }
      label B_gd:
      if (e == d) goto B_dd;
      r = e[0]:ubyte;
      if (r == 34) goto B_kd;
      s = e;
      if (eqz(w)) goto B_jd;
      s = e;
      goto B_id;
      label B_kd:
      e = e + 1;
      if (e < d) goto B_ld;
      s = e;
      goto B_id;
      label B_ld:
      s = e;
      loop L_md {
        j = s[0];
        if (j == 92) goto B_od;
        if (j != 34) goto B_nd;
        goto B_id;
        label B_od:
        j = s + 1;
        s = select_if(j, s, j < d);
        label B_nd:
        s = s + 1;
        if (s < d) continue L_md;
        goto B_id;
      }
      label B_jd:
      loop L_qd {
        w = r & 255;
        if (w == 34) goto B_pd;
        if (w == 59) goto B_pd;
        if (pm_is_whitespace(r & 255)) goto B_id;
        if (j >= d) goto B_rd;
        s = s + 1;
        r = j[0]:ubyte;
        j = j + 1;
        continue L_qd;
        label B_rd:
      }
      s = j;
      goto B_id;
      label B_pd:
      s = j + -1;
      label B_id:
      if (t) goto B_td;
      j = s;
      if (s >= d) goto B_sd;
      r = d - s;
      j = s;
      loop L_ud {
        w = j[0]:ubyte;
        if (w == 59) goto B_vd;
        if (eqz(pm_is_whitespace(w))) goto B_sd;
        label B_vd:
        j = j + 1;
        r = r + -1;
        if (r) continue L_ud;
      }
      j = d;
      goto B_sd;
      label B_td:
      r = s;
      if (s >= d) goto B_wd;
      j = d - s;
      r = s;
      loop L_xd {
        if (eqz(pm_is_whitespace(r.a))) goto B_wd;
        r = r + 1;
        j = j + -1;
        if (j) continue L_xd;
      }
      r = d;
      label B_wd:
      j = d;
      if (r != d) goto B_kc;
      label B_sd:
      r = pm_memchr(v, 45, x = q - v, a[358]:ubyte, a[66]:int);
      if (r) goto B_ae;
      pm_string_shared_init(b + 8, v, q);
      goto B_zd;
      label B_ae:
      w = malloc(x);
      if (eqz(w)) goto B_yd;
      w = memcpy(w, v, x);
      (w + r - v)[0]:byte = 95;
      r = pm_memchr(r + 1, 45, q + (r ^ -1), a[358]:ubyte, a[66]:int);
      if (eqz(r)) goto B_be;
      loop L_ce {
        (w + r - v)[0]:byte = 95;
        r = pm_memchr(r + 1, 45, q + (r ^ -1), a[358]:ubyte, a[66]:int);
        if (r) continue L_ce;
      }
      label B_be:
      pm_string_owned_init(b + 8, w, x);
      label B_zd:
      r = pm_string_source(b + 8);
      if (a[46]:int != a[68]:int) goto B_ee;
      br_table[B_ge, B_ee, B_he, ..B_ee](x + -6)
      label B_he:
      if (eqz(pm_strncasecmp(r, 9483, 8))) goto B_fe;
      goto B_de;
      label B_ge:
      if (pm_strncasecmp(r, 9485, 6)) goto B_de;
      label B_fe:
      r = pm_encoding_find(e, s);
      u = r != 0;
      if (r == 49568) goto B_de;
      if (eqz(r)) goto B_de;
      u = 1;
      a[358]:byte = 1;
      a[66]:int = r;
      r = a[67]:int;
      if (eqz(r)) goto B_de;
      call_indirect(a, r);
      goto B_de;
      label B_ee:
      if (i & 255) goto B_de;
      if (x != 21) goto B_de;
      if (pm_strncasecmp(r, 8462, 21)) goto B_de;
      if (e + 4 > s) goto B_je;
      if (pm_strncasecmp(e, 9642, 4)) goto B_je;
      r = 1;
      goto B_ie;
      label B_je:
      if (e + 5 > s) goto B_de;
      if (pm_strncasecmp(e, 11717, 5)) goto B_de;
      r = 0;
      label B_ie:
      a[362]:byte = r;
      label B_de:
      pm_string_free(b + 8);
      r = calloc(20, 1);
      if (eqz(r)) goto B_ed;
      r.d = x;
      r.c = e;
      r.b = v;
      r.e = s - e;
      pm_list_append(k, r);
      goto B_ed;
      label B_yd:
      r = 1;
      if (eqz(u & 1)) goto B_kc;
      goto B_ec;
      label B_fd:
      if (t) goto B_kc;
      label B_ed:
      if (j < d) continue L_sc;
      label B_dd:
    }
    r = 1;
    if (u & 1) goto B_ec;
    label B_kc:
    r = 1;
    j = a[46]:int;
    if (j != a[68]:int) goto B_ec;
    if (c[0]:int - j < 10) goto B_ec;
    parser_lex_magic_comment_encoding(a);
    label B_ec:
    a[361]:byte = i;
    e = a[41]:int;
    if (e <= (j = (d = a[47]:int) + -1)) goto B_me;
    q = 0;
    br_table[B_ne, B_me, B_me, B_oe, ..B_me](j[0]:ubyte + -10)
    label B_oe:
    if (e <= d) goto B_me;
    q = 1;
    if (d[0]:ubyte != 10) goto B_me;
    label B_ne:
    if (r) goto B_pe;
    c[0]:int = (d = d + q);
    label B_pe:
    j = a[49]:int;
    if (j) goto B_le;
    pm_newline_list_append(p, d + -1);
    label B_me:
    j = a[49]:int;
    if (eqz(j)) goto B_ke;
    label B_le:
    if (j > f[0]) goto B_pb;
    a[49]:int = 0;
    a[48]:int = j;
    label B_ke:
    j = a[0]:int;
    d = ((j & -1025) == 2064) << 1;
    br_table[B_re, B_se, ..B_qe](
      select_if(select_if(d, 1, j & 2048), d, j & 897) + -1);
    label B_se:
    if (a[359]:ubyte) goto B_te;
    if (eqz(a[360]:ubyte)) goto B_re;
    label B_te:
    if (r) goto B_ue;
    g[0]:int = 56;
    j = m[0];
    if (eqz(j)) goto B_ue;
    call_indirect(j[0]:int, a, g, j[1]:int);
    label B_ue:
    a[356]:byte = 1;
    a[0]:int = 1;
    a[45]:int = 121;
    goto B_a;
    label B_re:
    j = 3;
    if (r) goto B_qa;
    g[0]:int = 56;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_qe:
    j = a[48]:int;
    if (j) goto B_ve;
    j = c[0]:int;
    label B_ve:
    q = j + pm_strspn_inline_whitespace(j, f[0] - j);
    if (q >= (d = f[0])) goto B_xe;
    j = q[0];
    if (j != 35) goto B_cf;
    j = d - q;
    if (j <= -1) goto B_qb;
    j = memchr(q, 10, j);
    if (eqz(j)) goto B_ef;
    loop L_ff {
      e = j + 1;
      if (e >= d) goto B_df;
      j = pm_strspn_inline_whitespace(e, d - e);
      d = f[0];
      if (d <= (j = e + j)) goto B_df;
      if (j[0]:ubyte != 35) goto B_df;
      e = d - j;
      if (e <= -1) goto B_rb;
      j = memchr(j, 10, e);
      if (j) continue L_ff;
    }
    label B_ef:
    j = 0;
    label B_df:
    e = a[0]:int;
    if ((e & 897) != 0 & eqz(e & 2048)) goto B_bf;
    if ((e & -1025) == 2064) goto B_bf;
    if (eqz(j)) goto B_gf;
    if (d <= j) goto B_gf;
    br_table[B_hf, B_gf, B_gf, B_gf, B_gf, B_gf, B_gf, B_gf, B_bf, ..B_gf](
      j[0]:ubyte + -38)
    label B_hf:
    if (d <= (j = j + 1)) goto B_gf;
    e = j[0]:ubyte;
    if (eqz(e != 46 | r)) goto B_af;
    j = 3;
    if (e == 46) goto B_qa;
    label B_gf:
    j = q[0];
    label B_cf:
    if ((j & 255) != 46) goto B_ye;
    if (d <= (j = q + 1)) goto B_ze;
    if (j[0]:ubyte != 46) goto B_ze;
    if (r) goto B_if;
    g[0]:int = 56;
    j = m[0];
    if (eqz(j)) goto B_if;
    call_indirect(j[0]:int, a, g, j[1]:int);
    label B_if:
    a[356]:byte = 1;
    a[0]:int = 1;
    a[45]:int = 121;
    goto B_a;
    label B_bf:
    j = 3;
    if (r) goto B_qa;
    label B_af:
    g[0]:int = 56;
    j = 3;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_ze:
    if (r) goto B_jf;
    g[0]:int = 56;
    c = m[0];
    if (c) goto B_kf;
    a[48]:int = 0;
    a[47]:int = j;
    a[46]:int = q;
    a[0]:int = 256;
    a[45]:int = 30;
    goto B_a;
    label B_kf:
    call_indirect(c[0]:int, a, g, c[1]:int);
    label B_jf:
    a[48]:int = 0;
    a[47]:int = j;
    a[46]:int = q;
    a[0]:int = 256;
    a[45]:int = 30;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_ye:
    if (d > q) goto B_lf;
    a[356]:byte = 1;
    a[0]:int = 1;
    a[45]:int = 121;
    if (eqz(r)) goto B_we;
    goto B_a;
    label B_lf:
    if ((j & 255) != 38) goto B_xe;
    if (d > (j = q + 1)) goto B_mf;
    a[356]:byte = 1;
    a[0]:int = 1;
    a[45]:int = 121;
    if (eqz(r)) goto B_we;
    goto B_a;
    label B_mf:
    if (j[0]:ubyte != 46) goto B_xe;
    if (r) goto B_nf;
    g[0]:int = 56;
    j = m[0];
    if (j) goto B_of;
    a[48]:int = 0;
    a[46]:int = q;
    a[0]:int = 256;
    a[45]:int = 7;
    a[47]:int = q + 2;
    goto B_a;
    label B_of:
    call_indirect(j[0]:int, a, g, j[1]:int);
    label B_nf:
    a[48]:int = 0;
    a[46]:int = q;
    a[0]:int = 256;
    a[45]:int = 7;
    a[47]:int = q + 2;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_xe:
    a[356]:byte = 1;
    a[0]:int = 1;
    a[45]:int = 121;
    if (r) goto B_a;
    label B_we:
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_dc:
    a[45]:int = 27;
    a[0]:int = 1025;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_cc:
    j = 123;
    if (eqz(q & 1)) goto B_pf;
    j = 
      select_if(124, select_if(124, 123, (j = a[0]:int) & 48), j == 1026);
    label B_pf:
    a[0]:int = 1025;
    a[1]:int = a[1]:int + 1;
    pm_state_stack_push(a + 16, 0);
    a[45]:int = j;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_bc:
    a[0]:int = 8;
    a[1]:int = a[1]:int + -1;
    pm_state_stack_pop(a + 16);
    a[45]:int = 125;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_ac:
    a[356]:byte = 1;
    a[0]:int = 1;
    a[45]:int = 142;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_zb:
    a[1]:int = (r = a[1]:int) + 1;
    f = a[0]:int;
    if (eqz(f & 384)) goto B_qf;
    if (e <= d) goto B_rf;
    if (d[0]:ubyte != 93) goto B_rf;
    a[1]:int = r;
    a[0]:int = 16;
    a[47]:int = (d = j + 2);
    f = 18;
    if (e <= d) goto B_sf;
    if (d[0]:ubyte != 61) goto B_sf;
    c[0]:int = j + 3;
    f = 19;
    label B_sf:
    g[0]:int = f;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_rf:
    a[45]:int = 16;
    a[0]:int = 1040;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_qf:
    if (f & 577) goto B_uf;
    if ((f & 2064) == 2064) goto B_uf;
    j = 16;
    if (eqz(f & 48)) goto B_tf;
    if (eqz((q | f >> 11) & 1)) goto B_tf;
    label B_uf:
    j = 17;
    label B_tf:
    a[0]:int = 1025;
    pm_state_stack_push(a + 16, 0);
    a[45]:int = j;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_yb:
    a[0]:int = 2;
    a[1]:int = a[1]:int + -1;
    pm_state_stack_pop(a + 16);
    a[45]:int = 20;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_xb:
    j = 111;
    d = a[1]:int;
    if (d == a[2]:int) goto B_wf;
    j = 14;
    c = 1025;
    e = a[0]:int;
    if (e & 2048) goto B_vf;
    if (eqz(e & 62)) goto B_vf;
    label B_wf:
    c = 1;
    a[356]:byte = 1;
    label B_vf:
    a[0]:int = c;
    a[1]:int = d + 1;
    a[3]:int = a[3]:int + 1;
    pm_state_stack_push(a + 16, 0);
    a[45]:int = j;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_wb:
    a[1]:int = a[1]:int + -1;
    pm_state_stack_pop(a + 16);
    j = a[3]:int;
    c = a[6]:int;
    if (c[0]:int != 1) goto B_xf;
    if (j) goto B_xf;
    j = a[39]:int;
    if (j) goto B_zf;
    c[0]:int = 0;
    goto B_yf;
    label B_zf:
    a[39]:int = (d = j + -1);
    if (j > 3) goto B_ag;
    a[6]:int = a + 24 + (d << 5) + 4;
    goto B_yf;
    label B_ag:
    j = c[7]:int;
    free(c);
    a[6]:int = j;
    label B_yf:
    g[0]:int = 37;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_xf:
    a[45]:int = 15;
    a[0]:int = 2;
    a[3]:int = j + -1;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_vb:
    if (e <= d) goto B_cg;
    if (d[0]:ubyte != 42) goto B_dg;
    c[0]:int = (d = j + 2);
    if (e <= d) goto B_gg;
    if (d[0]:ubyte != 61) goto B_hg;
    a[45]:int = 148;
    a[0]:int = 1;
    a[47]:int = j + 3;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_hg:
    if (((q ^ -1) | eqz(a[0]:ubyte & 48)) & 1) goto B_gg;
    if (pm_is_whitespace(d[0]:ubyte)) goto B_gg;
    j = a[0]:int;
    goto B_fg;
    label B_gg:
    j = a[0]:int;
    if (j & 577) goto B_fg;
    c = 147;
    if ((j & 2064) != 2064) goto B_eg;
    label B_fg:
    c = 162;
    label B_eg:
    a[45]:int = c;
    a[0]:int = select_if(16, 1, j & 384);
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_dg:
    if (d[0]:ubyte != 61) goto B_ig;
    a[45]:int = 146;
    a[0]:int = 1;
    a[47]:int = j + 2;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_ig:
    if (((q ^ -1) | eqz(a[0]:ubyte & 48)) & 1) goto B_cg;
    if (pm_is_whitespace(d[0]:ubyte)) goto B_cg;
    j = 161;
    if (a[363]:ubyte) goto B_bg;
    pm_diagnostic_list_append(a + 232, a[46]:int, a[47]:int, 216);
    goto B_bg;
    label B_cg:
    j = select_if(161,
                  select_if(161, 145, ((j = a[0]:int) & 2064) == 2064),
                  j & 577);
    label B_bg:
    a[45]:int = j;
    a[0]:int = select_if(16, 1, a[0]:int & 384);
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_ub:
    if (eqz(a[0]:ushort & 384)) goto B_kg;
    a[0]:int = 16;
    if (e <= d) goto B_jg;
    if (d[0]:ubyte != 64) goto B_jg;
    g[0]:int = 11;
    c[0]:int = j + 2;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_kg:
    a[0]:int = 1;
    label B_jg:
    if (e <= d) goto B_lg;
    if (d[0]:ubyte != 61) goto B_mg;
    g[0]:int = 12;
    c[0]:int = j + 2;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_mg:
    if (d[0]:ubyte != 126) goto B_lg;
    g[0]:int = 13;
    c[0]:int = j + 2;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_lg:
    g[0]:int = 11;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_tb:
    if (j == a[40]:int) goto B_qg;
    if ((j + -1)[0]:ubyte != 10) goto B_pg;
    label B_qg:
    j = j + 6;
    if (j > e) goto B_pg;
    if (memcmp(d, 7884, 5)) goto B_pg;
    d = 0;
    if (e <= j) goto B_rg;
    d = j[0]:ubyte;
    label B_rg:
    if (pm_is_whitespace(d & 255)) goto B_og;
    e = f[0];
    d = c[0]:int;
    label B_pg:
    a[0]:int = select_if(16, 1, a[0]:int & 384);
    if (e > d) goto B_ng;
    goto B_c;
    label B_og:
    j = 3;
    if (lex_embdoc(a) != 1) goto B_qa;
    g[0]:int = 1;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_ng:
    if (d[0]:ubyte != 62) goto B_sg;
    g[0]:int = 42;
    c[0]:int = d + 1;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_sg:
    if (d[0]:ubyte != 126) goto B_tg;
    g[0]:int = 43;
    c[0]:int = d + 1;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_tg:
    if (d[0]:ubyte != 61) goto B_c;
    c[0]:int = (j = d + 1);
    f = 40;
    if (e <= j) goto B_ug;
    if (j[0]:ubyte != 61) goto B_ug;
    c[0]:int = d + 2;
    f = 41;
    label B_ug:
    g[0]:int = f;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_sb:
    r = e <= d;
    if (r) goto B_e;
    if (d[0]:ubyte != 60) goto B_e;
    a[47]:int = (d = j + 2);
    r = a[0]:int;
    if (r & 782) goto B_xg;
    if (eqz(r & 48)) goto B_yg;
    if (eqz((r >> 11 | q) & 1)) goto B_xg;
    label B_yg:
    h = 0;
    if (e > d) goto B_ah;
    q = d;
    goto B_zg;
    label B_ah:
    r = 1;
    if (d[0]:ubyte == 45) goto B_bh;
    r = 2;
    q = d;
    if (d[0]:ubyte != 126) goto B_zg;
    label B_bh:
    c[0]:int = (q = j + 3);
    h = r;
    label B_zg:
    if (e <= q) goto B_ch;
    r = 96;
    if (q[0] == 96) goto B_eh;
    r = 34;
    if (q[0] == 34) goto B_eh;
    r = 39;
    if (q[0] != 39) goto B_dh;
    label B_eh:
    c[0]:int = (i = q + 1);
    if (i >= e) goto B_ch;
    q = q + (d = e - i) + 1;
    j = i;
    loop L_gh {
      if (r == j[0]:ubyte) goto B_fh;
      c[0]:int = (j = j + 1);
      d = d + -1;
      if (d) continue L_gh;
    }
    j = q;
    label B_fh:
    m = j - i;
    if (e <= j) goto B_hh;
    if (j[0]:ubyte != r) goto B_hh;
    c[0]:int = (j = j + 1);
    label B_hh:
    q = i;
    goto B_vg;
    label B_dh:
    e = is_identifier(a, q);
    if (e) goto B_wg;
    e = f[0];
    label B_ch:
    c[0]:int = d;
    label B_xg:
    if (e <= d) goto B_d;
    if (d[0]:ubyte != 61) goto B_d;
    a[45]:int = 116;
    a[0]:int = 1;
    a[47]:int = j + 3;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_wg:
    c[0]:int = (j = c[0]:int + e);
    if (j >= (d = f[0])) goto B_ih;
    loop L_kh {
      if (eqz(a[358]:ubyte)) goto B_oh;
      d = call_indirect(j, d - j, (o[0])[2]:int);
      if (d) goto B_lh;
      d = 1;
      e = j[0]:byte;
      if (e == 95) goto B_lh;
      if (e > -1) goto B_jh;
      d = call_indirect(j, f[0] - j, (o[0])[0]:int);
      goto B_nh;
      label B_oh:
      r = j[0]:ubyte;
      e = i32_extend8_s(r);
      if (e < 0) goto B_mh;
      d = 1;
      if (e == 95) goto B_lh;
      d = (32208 + r)[0]:ubyte >> 1 & 1;
      label B_nh:
      if (eqz(d)) goto B_jh;
      goto B_lh;
      label B_mh:
      pm_encoding_utf_8_alnum(j, d - j);
      d = 1;
      label B_lh:
      c[0]:int = (j = c[0]:int + d);
      if (j < (d = f[0])) continue L_kh;
    }
    label B_jh:
    j = c[0]:int;
    label B_ih:
    m = j - q;
    r = 0;
    label B_vg:
    a[86]:int = 0;
    a[39]:int = (d = a[39]:int + 1);
    e = a[6]:int;
    if (d < 4) goto B_qh;
    a[6]:int = (d = malloc(32));
    if (eqz(d)) goto B_ph;
    d[7]:int = e;
    d[6]:int = -1;
    d[5]:int = j;
    d[4]:int = h;
    d[3]:int = r;
    d[2]:int = m;
    d[1]:int = q;
    d[0]:int = 3;
    goto B_ph;
    label B_qh:
    i = a + 28;
    d = i + (d << 5);
    d[0]:int = 3;
    d[7]:int = e;
    d[6]:int = -1;
    d[5]:int = j;
    d[4]:int = h;
    d[3]:int = r;
    d[2]:int = m;
    d[1]:int = q;
    a[6]:int = i + (a[39]:int << 5);
    label B_ph:
    j = a[49]:int;
    if (j) goto B_rh;
    j = c[0]:int;
    j = next_newline(j, f[0] - j);
    if (j) goto B_sh;
    pm_diagnostic_list_append(n, a[46]:int, a[47]:int, 111);
    j = a[41]:int;
    goto B_rh;
    label B_sh:
    pm_newline_list_append(p, j);
    j = j + 1;
    label B_rh:
    a[45]:int = 54;
    a[48]:int = j;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_rb:
    assert_fail(26245, 13402, 6354, 11805);
    unreachable;
    label B_qb:
    assert_fail(26245, 13402, 6354, 11805);
    unreachable;
    label B_pb:
    assert_fail(12716, 13402, 8064, 12691);
    unreachable;
    label B_ob:
    assert_fail(26245, 13402, 6354, 11805);
    unreachable;
    label B_nb:
    if (eqz(a[358]:ubyte)) goto B_yh;
    d = call_indirect(j, e - j, (o[0])[1]:int);
    if (d) goto B_uh;
    d = j[0]:byte;
    if (d == 95) goto B_vh;
    if (d > -1) goto B_lb;
    d = call_indirect(j, f[0] - j, (o[0])[0]:int);
    goto B_xh;
    label B_yh:
    if (i32_extend8_s(s) < 0) goto B_wh;
    d = (32208 + s)[0]:ubyte & 1;
    label B_xh:
    if (eqz(d)) goto B_lb;
    j = a[46]:int;
    d = j + d;
    goto B_th;
    label B_wh:
    pm_encoding_utf_8_alpha(j, e - j);
    label B_vh:
    d = 1;
    label B_uh:
    j = a[46]:int;
    d = j + d;
    label B_th:
    c[0]:int = d;
    label B_mb:
    r = a[41]:int;
    s = a[358]:ubyte;
    if (eqz(s)) goto B_zh;
    if (d >= r) goto B_jb;
    e = 1;
    goto B_kb;
    label B_zh:
    if (d >= r) goto B_jb;
    e = r - d;
    loop L_ai {
      i = d[0]:ubyte;
      q = i32_extend8_s(i);
      if (q < 0) goto B_ci;
      if (q == 95) goto B_bi;
      if ((32208 + i)[0]:ubyte & 2) goto B_bi;
      goto B_jb;
      label B_ci:
      pm_encoding_utf_8_alnum(d, e);
      label B_bi:
      d = d + 1;
      e = e + -1;
      if (e) continue L_ai;
    }
    d = r;
    goto B_jb;
    label B_lb:
    pm_diagnostic_list_append(n, a[46]:int, a[47]:int, 123);
    goto B_fb;
    label B_kb:
    loop L_di {
      if (eqz(e & 255)) goto B_fi;
      e = call_indirect(d, f[0] - d, (o[0])[2]:int);
      if (e) goto B_ei;
      e = 1;
      q = d[0]:byte;
      if (q == 95) goto B_ei;
      if (q > -1) goto B_jb;
      e = call_indirect(d, f[0] - d, (o[0])[0]:int);
      if (e) goto B_ei;
      goto B_jb;
      label B_fi:
      i = d[0]:ubyte;
      q = i32_extend8_s(i);
      if (q < 0) goto B_gi;
      e = 1;
      if (q == 95) goto B_ei;
      e = (32208 + i)[0]:ubyte >> 1 & 1;
      if (e) goto B_ei;
      goto B_jb;
      label B_gi:
      pm_encoding_utf_8_alnum(d, f[0] - d);
      e = 1;
      label B_ei:
      d = d + e;
      if (d >= r) goto B_jb;
      e = a[358]:ubyte;
      continue L_di;
    }
    label B_jb:
    c[0]:int = d;
    i = d - j;
    if (d < r) goto B_ji;
    q = a[0]:int;
    goto B_ii;
    label B_ji:
    v = d + 1;
    if (v >= r) goto B_li;
    if (v[0] == 61) goto B_ki;
    label B_li:
    e = f[0];
    if (e <= d) goto B_ki;
    q = d[0]:ubyte;
    if (q == 63) goto B_mi;
    if (q != 33) goto B_ki;
    label B_mi:
    a[47]:int = v;
    if (
      ((eqz(h & 255) & ((r = a[0]:int) & 1032) != 0) | (r & 48) != 0) != 1) goto B_ni;
    if (e <= v) goto B_ni;
    if (v[0] != 58) goto B_ni;
    if (e <= (d = d + 2)) goto B_oi;
    if (d[0]:ubyte == 58) goto B_ni;
    label B_oi:
    a[0]:int = 2064;
    e = 109;
    if (v[0] != 58) goto B_hi;
    c[0]:int = d;
    goto B_hi;
    label B_ni:
    e = 117;
    if (r == 256) goto B_hi;
    if (i != 7) goto B_hi;
    if (j[0]:long@1 != 4567887446949651812L) goto B_hi;
    if (r & 128) goto B_pi;
    a[0]:int = 16;
    e = 70;
    goto B_hi;
    label B_pi:
    a[0]:int = 8;
    e = 70;
    goto B_hi;
    label B_ki:
    q = a[0]:int;
    if (eqz(q & 128)) goto B_qi;
    e = f[0];
    if (e <= v) goto B_si;
    n = v[0];
    br_table[B_ui, B_qi, ..B_ti](n + -61);
    label B_ui:
    if (e <= d + 2) goto B_qi;
    if (d[2]:ubyte != 62) goto B_qi;
    if (e > d) goto B_ri;
    goto B_qi;
    label B_ti:
    if (n == 126) goto B_qi;
    label B_si:
    if (e <= d) goto B_qi;
    label B_ri:
    if (d[0]:ubyte != 61) goto B_qi;
    c[0]:int = v;
    e = 55;
    goto B_hi;
    label B_qi:
    if (eqz(h & 255) & (q & 1032) != 0) goto B_vi;
    if (eqz(q & 48)) goto B_ii;
    label B_vi:
    e = f[0];
    if (e <= d) goto B_ii;
    if (d[0]:ubyte != 58) goto B_ii;
    if (e <= v) goto B_wi;
    if (v[0] == 58) goto B_ii;
    label B_wi:
    a[0]:int = 2064;
    e = 109;
    if (d[0]:ubyte != 58) goto B_hi;
    c[0]:int = v;
    goto B_hi;
    label B_ii:
    if (q == 256) goto B_xi;
    br_table[B_ej, B_dj, B_cj, B_bj, B_aj, B_xi, B_zi, B_xi, B_xi, B_xi, B_yi, ..B_xi](
      i + -2)
    label B_ej:
    if (j[0]:ushort@1 != 28516) goto B_fj;
    j = 8;
    if (q & 128) goto B_gj;
    j = 1;
    a[356]:byte = 1;
    label B_gj:
    a[0]:int = j;
    e = select_if(72, 71, pm_state_stack_p(a + 16));
    goto B_hi;
    label B_fj:
    if (j[0]:ushort@1 != 26217) goto B_hj;
    if (eqz(q & 128)) goto B_ij;
    e = 80;
    a[0]:int = 8;
    goto B_hi;
    label B_ij:
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 80;
    if (q & 2561) goto B_hi;
    e = 81;
    a[0]:int = 1025;
    goto B_hi;
    label B_hj:
    if (j[0]:ushort@1 != 28265) goto B_jj;
    if (q & 128) goto B_kj;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 82;
    goto B_hi;
    label B_kj:
    a[0]:int = 8;
    e = 82;
    goto B_hi;
    label B_jj:
    if (j[0]:ushort@1 != 29295) goto B_xi;
    if (q & 128) goto B_lj;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 87;
    goto B_hi;
    label B_lj:
    a[0]:int = 8;
    e = 87;
    goto B_hi;
    label B_dj:
    if (memcmp(j, 12839, 3)) goto B_mj;
    if (q & 128) goto B_nj;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 63;
    goto B_hi;
    label B_nj:
    a[0]:int = 8;
    e = 63;
    goto B_hi;
    label B_mj:
    if (memcmp(j, 9546, 3)) goto B_oj;
    if (q & 128) goto B_pj;
    a[0]:int = 128;
    e = 69;
    goto B_hi;
    label B_pj:
    a[0]:int = 8;
    e = 69;
    goto B_hi;
    label B_oj:
    if (memcmp(j, 12828, 3)) goto B_qj;
    if (q & 128) goto B_rj;
    a[0]:int = 2;
    e = 75;
    goto B_hi;
    label B_rj:
    a[0]:int = 8;
    e = 75;
    goto B_hi;
    label B_qj:
    if (memcmp(j, 22546, 3)) goto B_sj;
    if (q & 128) goto B_tj;
    a[0]:int = 2;
    e = 76;
    goto B_hi;
    label B_tj:
    a[0]:int = 8;
    e = 76;
    goto B_hi;
    label B_sj:
    if (memcmp(j, 5908, 3)) goto B_uj;
    if (q & 128) goto B_vj;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 79;
    goto B_hi;
    label B_vj:
    a[0]:int = 8;
    e = 79;
    goto B_hi;
    label B_uj:
    if (memcmp(j, 8415, 3)) goto B_wj;
    if (q & 128) goto B_xj;
    a[0]:int = 2;
    e = 85;
    goto B_hi;
    label B_xj:
    a[0]:int = 8;
    e = 85;
    goto B_hi;
    label B_wj:
    if (memcmp(j, 2017, 3)) goto B_xi;
    if (q & 128) goto B_yj;
    a[0]:int = 16;
    e = 86;
    goto B_hi;
    label B_yj:
    a[0]:int = 8;
    e = 86;
    goto B_hi;
    label B_cj:
    if (j[0]:int@1 != 1702060387) goto B_zj;
    if (q & 128) goto B_ak;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 67;
    goto B_hi;
    label B_ak:
    a[0]:int = 8;
    e = 67;
    goto B_hi;
    label B_zj:
    if (j[0]:int@1 != 1702063205) goto B_bk;
    if (q & 128) goto B_ck;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 73;
    goto B_hi;
    label B_ck:
    a[0]:int = 8;
    e = 73;
    goto B_hi;
    label B_bk:
    if (j[0]:int@1 != 1954047342) goto B_dk;
    if (q & 128) goto B_ek;
    a[0]:int = 64;
    e = 84;
    goto B_hi;
    label B_ek:
    a[0]:int = 8;
    e = 84;
    goto B_hi;
    label B_dk:
    if (j[0]:int@1 != 1868850546) goto B_fk;
    if (q & 128) goto B_gk;
    a[0]:int = 2;
    e = 88;
    goto B_hi;
    label B_gk:
    a[0]:int = 8;
    e = 88;
    goto B_hi;
    label B_fk:
    if (j[0]:int@1 != 1718379891) goto B_hk;
    if (q & 128) goto B_ik;
    a[0]:int = 2;
    e = 93;
    goto B_hi;
    label B_ik:
    a[0]:int = 8;
    e = 93;
    goto B_hi;
    label B_hk:
    if (j[0]:int@1 != 1852139636) goto B_jk;
    if (q & 128) goto B_kk;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 95;
    goto B_hi;
    label B_kk:
    a[0]:int = 8;
    e = 95;
    goto B_hi;
    label B_jk:
    if (j[0]:int@1 != 1702195828) goto B_lk;
    if (q & 128) goto B_mk;
    a[0]:int = 2;
    e = 96;
    goto B_hi;
    label B_mk:
    a[0]:int = 8;
    e = 96;
    goto B_hi;
    label B_lk:
    if (j[0]:int@1 != 1852139639) goto B_xi;
    if (q & 128) goto B_nk;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 102;
    goto B_hi;
    label B_nk:
    a[0]:int = 8;
    e = 102;
    goto B_hi;
    label B_bj:
    if (memcmp(j, 4993, 5)) goto B_ok;
    if (q & 128) goto B_pk;
    a[0]:int = 4224;
    e = 62;
    goto B_hi;
    label B_pk:
    a[0]:int = 8;
    e = 62;
    goto B_hi;
    label B_ok:
    if (memcmp(j, 7884, 5)) goto B_qk;
    if (q & 128) goto B_rk;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 64;
    goto B_hi;
    label B_rk:
    a[0]:int = 8;
    e = 64;
    goto B_hi;
    label B_qk:
    if (memcmp(j, 16921, 5)) goto B_sk;
    if (q & 128) goto B_tk;
    a[0]:int = 2;
    e = 65;
    goto B_hi;
    label B_tk:
    a[0]:int = 8;
    e = 65;
    goto B_hi;
    label B_sk:
    if (memcmp(j, 8962, 5)) goto B_uk;
    if (q & 128) goto B_vk;
    a[0]:int = 64;
    e = 66;
    goto B_hi;
    label B_vk:
    a[0]:int = 8;
    e = 66;
    goto B_hi;
    label B_uk:
    if (memcmp(j, 4476, 5)) goto B_wk;
    if (q & 128) goto B_xk;
    a[0]:int = 512;
    e = 68;
    goto B_hi;
    label B_xk:
    a[0]:int = 8;
    e = 68;
    goto B_hi;
    label B_wk:
    if (memcmp(j, 9538, 5)) goto B_yk;
    if (q & 128) goto B_zk;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 74;
    goto B_hi;
    label B_zk:
    a[0]:int = 8;
    e = 74;
    goto B_hi;
    label B_yk:
    if (memcmp(j, 11717, 5)) goto B_al;
    if (q & 128) goto B_bl;
    a[0]:int = 2;
    e = 78;
    goto B_hi;
    label B_bl:
    a[0]:int = 8;
    e = 78;
    goto B_hi;
    label B_al:
    if (memcmp(j, 1106, 5)) goto B_cl;
    if (q & 128) goto B_dl;
    a[0]:int = 2;
    e = 91;
    goto B_hi;
    label B_dl:
    a[0]:int = 8;
    e = 91;
    goto B_hi;
    label B_cl:
    if (memcmp(j, 6329, 5)) goto B_el;
    if (q & 128) goto B_fl;
    a[0]:int = 16;
    e = 94;
    goto B_hi;
    label B_fl:
    a[0]:int = 8;
    e = 94;
    goto B_hi;
    label B_el:
    if (memcmp(j, 9544, 5)) goto B_gl;
    if (q & 128) goto B_hl;
    a[0]:int = 4224;
    e = 97;
    goto B_hi;
    label B_hl:
    a[0]:int = 8;
    e = 97;
    goto B_hi;
    label B_gl:
    if (memcmp(j, 8409, 5)) goto B_il;
    if (eqz(q & 128)) goto B_jl;
    e = 100;
    a[0]:int = 8;
    goto B_hi;
    label B_jl:
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 100;
    if (q & 2561) goto B_hi;
    e = 101;
    a[0]:int = 1025;
    goto B_hi;
    label B_il:
    if (memcmp(j, 11936, 5)) goto B_kl;
    if (eqz(q & 128)) goto B_ll;
    e = 103;
    a[0]:int = 8;
    goto B_hi;
    label B_ll:
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 103;
    if (q & 2561) goto B_hi;
    e = 104;
    a[0]:int = 1025;
    goto B_hi;
    label B_kl:
    if (memcmp(j, 12843, 5)) goto B_xi;
    if (q & 128) goto B_ml;
    a[0]:int = 16;
    e = 105;
    goto B_hi;
    label B_ml:
    a[0]:int = 8;
    e = 105;
    goto B_hi;
    label B_aj:
    if (memcmp(j, 11748, 6)) goto B_nl;
    if (q & 128) goto B_ol;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 77;
    goto B_hi;
    label B_ol:
    a[0]:int = 8;
    e = 77;
    goto B_hi;
    label B_nl:
    if (memcmp(j, 11918, 6)) goto B_pl;
    if (q & 128) goto B_ql;
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 83;
    goto B_hi;
    label B_ql:
    a[0]:int = 8;
    e = 83;
    goto B_hi;
    label B_pl:
    if (memcmp(j, 9694, 6)) goto B_rl;
    if (eqz(q & 128)) goto B_sl;
    e = 89;
    a[0]:int = 8;
    goto B_hi;
    label B_sl:
    a[0]:int = 64;
    e = 89;
    if (q & 2561) goto B_hi;
    e = 90;
    a[0]:int = 1025;
    goto B_hi;
    label B_rl:
    if (memcmp(j, 6691, 6)) goto B_tl;
    if (q & 128) goto B_ul;
    a[0]:int = 64;
    e = 92;
    goto B_hi;
    label B_ul:
    a[0]:int = 8;
    e = 92;
    goto B_hi;
    label B_tl:
    if (memcmp(j, 4469, 6)) goto B_xi;
    if (eqz(q & 128)) goto B_vl;
    e = 98;
    a[0]:int = 8;
    goto B_hi;
    label B_vl:
    a[356]:byte = 1;
    a[0]:int = 1;
    e = 98;
    if (q & 2561) goto B_hi;
    e = 99;
    a[0]:int = 1025;
    goto B_hi;
    label B_zi:
    if (j[0]:long@1 != 6872287758930173791L) goto B_wl;
    if (q & 128) goto B_xl;
    a[0]:int = 2;
    e = 108;
    goto B_hi;
    label B_xl:
    a[0]:int = 8;
    e = 108;
    goto B_hi;
    label B_wl:
    if (j[0]:long@1 != 6872287750339845983L) goto B_xi;
    if (q & 128) goto B_yl;
    a[0]:int = 2;
    e = 107;
    goto B_hi;
    label B_yl:
    a[0]:int = 8;
    e = 107;
    goto B_hi;
    label B_yi:
    if (memcmp(j, 14996, 12)) goto B_xi;
    if (q & 128) goto B_zl;
    a[0]:int = 2;
    e = 106;
    goto B_hi;
    label B_zl:
    a[0]:int = 8;
    e = 106;
    goto B_hi;
    label B_xi:
    if (eqz(s)) goto B_am;
    e = select_if(29, 55, call_indirect(j, r - j, (o[0])[3]:int));
    goto B_hi;
    label B_am:
    e = select_if(29, 55, pm_encoding_utf_8_isupper(j, r - j));
    label B_hi:
    j = a[47]:int;
    q = j - (d = a[46]:int);
    if (q != 7) goto B_bm;
    if (d == a[40]:int) goto B_cm;
    if ((d + -1)[0]:ubyte != 10) goto B_bm;
    label B_cm:
    if (memcmp(d, 15098, 7)) goto B_bm;
    if (j == (r = f[0])) goto B_dm;
    if (eqz(match_eol(a))) goto B_bm;
    label B_dm:
    d = r - j;
    if (d < 0) goto B_fm;
    j = memchr(j, 10, d);
    if (eqz(j)) goto B_em;
    loop L_gm {
      pm_newline_list_append(p, j);
      r = f[0];
      d = r - (j = j + 1);
      if (d <= -1) goto B_fm;
      j = memchr(j, 10, d);
      if (eqz(j)) goto B_em;
      continue L_gm;
    }
    label B_fm:
    assert_fail(26245, 13402, 6354, 11805);
    unreachable;
    label B_em:
    g[0]:int = 164;
    c[0]:int = r;
    j = m[0];
    if (j) goto B_hm;
    a[45]:int = 1;
    (a + 228)[0]:int = r;
    a[56]:int = a[46]:int;
    goto B_a;
    label B_hm:
    call_indirect(j[0]:int, a, g, j[1]:int);
    a[45]:int = 1;
    a[56]:long@4 = a[46]:long@4;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_bm:
    j = a[0]:int;
    if (e == 29) goto B_lm;
    if (e == 117) goto B_lm;
    if (e != 55) goto B_km;
    label B_lm:
    if (eqz(j & 881)) goto B_nm;
    c = select_if(32, 16, h & 255);
    goto B_mm;
    label B_nm:
    c = 2;
    f = 8;
    if (j == 128) goto B_jm;
    label B_mm:
    a[0]:int = c;
    label B_km:
    if (j & 384) goto B_im;
    if (e != 55) goto B_im;
    c = pm_constant_pool_insert_shared(a + 292, d, q);
    j = a[64]:int;
    if (eqz(j)) goto B_om;
    loop L_pm {
      if (eqz(pm_constant_id_list_includes(j, c))) goto B_qm;
      f = 1026;
      goto B_jm;
      label B_qm:
      if (j[16]:ubyte) goto B_om;
      j = j[3]:int;
      if (j) continue L_pm;
    }
    label B_om:
    if (a[47]:int - (j = a[46]:int) != 2) goto B_im;
    if (j[0]:ubyte != 95) goto B_im;
    j = j[1]:ubyte;
    if (j == 48) goto B_im;
    f = 1026;
    if (eqz(pm_is_decimal_digit(j))) goto B_im;
    label B_jm:
    a[0]:int = f;
    label B_im:
    g[0]:int = e;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_ib:
    a[0]:int = select_if(8, 2, a[0]:int & 128);
    r = 0;
    if (e <= d) goto B_rm;
    if (d[0]:ubyte != 64) goto B_rm;
    c[0]:int = (d = j + 2);
    r = 1;
    label B_rm:
    if (d >= e) goto B_vm;
    if (eqz(a[358]:ubyte)) goto B_xm;
    j = call_indirect(d, e - d, (o[0])[1]:int);
    if (j) goto B_tm;
    j = 1;
    e = d[0]:byte;
    if (e == 95) goto B_tm;
    if (e > -1) goto B_vm;
    j = call_indirect(d, f[0] - d, (o[0])[0]:int);
    goto B_wm;
    label B_xm:
    j = d[0]:ubyte;
    q = i32_extend8_s(j);
    if (q < 0) goto B_um;
    j = ((32208 + j)[0]:ubyte | q == 95) & 1;
    label B_wm:
    if (j) goto B_tm;
    label B_vm:
    pm_diagnostic_list_append(n, a[46]:int, a[47]:int, select_if(113, 114, r));
    goto B_sm;
    label B_um:
    pm_encoding_utf_8_alpha(d, e - d);
    j = 1;
    label B_tm:
    c[0]:int = (j = c[0]:int + j);
    if (j >= (d = f[0])) goto B_sm;
    loop L_ym {
      if (eqz(a[358]:ubyte)) goto B_cn;
      d = call_indirect(j, d - j, (o[0])[2]:int);
      if (d) goto B_zm;
      d = 1;
      e = j[0]:byte;
      if (e == 95) goto B_zm;
      if (e > -1) goto B_sm;
      d = call_indirect(j, f[0] - j, (o[0])[0]:int);
      goto B_bn;
      label B_cn:
      q = j[0]:ubyte;
      e = i32_extend8_s(q);
      if (e < 0) goto B_an;
      d = 1;
      if (e == 95) goto B_zm;
      d = (32208 + q)[0]:ubyte >> 1 & 1;
      label B_bn:
      if (eqz(d)) goto B_sm;
      goto B_zm;
      label B_an:
      pm_encoding_utf_8_alnum(j, d - j);
      d = 1;
      label B_zm:
      c[0]:int = (j = c[0]:int + d);
      if (j < (d = f[0])) continue L_ym;
    }
    label B_sm:
    j = a[6]:int;
    if (j[0]:int != 2) goto B_dn;
    c = a[39]:int;
    if (c) goto B_en;
    j[0]:int = 0;
    goto B_dn;
    label B_en:
    a[39]:int = (d = c + -1);
    if (c > 3) goto B_fn;
    a[6]:int = a + 24 + (d << 5) + 4;
    goto B_dn;
    label B_fn:
    c = j[7]:int;
    free(j);
    a[6]:int = c;
    label B_dn:
    g[0]:int = select_if(24, 57, r);
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_hb:
    if (d < e) goto B_kn;
    pm_diagnostic_list_append(n, j, d, 124);
    goto B_jn;
    label B_kn:
    br_table[B_qn, B_qn, B_ln, B_qn, B_ln, B_pn, B_pn, B_ln, B_ln, B_qn, B_pn, B_qn, B_mn, B_qn, B_qn, B_on, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_qn, B_qn, B_qn, B_qn, B_qn, B_qn, B_qn, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_qn, B_ln, B_ln, B_ln, B_pn, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_qn, ..B_ln](
      d[0]:ubyte + -33)
    label B_qn:
    c[0]:int = j + 2;
    goto B_jn;
    label B_pn:
    a[47]:int = j + 2;
    j = select_if(48, 10, a[0]:ubyte & 128);
    goto B_gn;
    label B_on:
    c[0]:int = (d = j + 2);
    j = 48;
    if (d >= e) goto B_gn;
    e = is_identifier(a, d);
    if (eqz(e)) goto B_gn;
    loop L_sn {
      c[0]:int = (d = c[0]:int + e);
      if (d >= (e = f[0])) goto B_rn;
      if (eqz(a[358]:ubyte)) goto B_un;
      e = call_indirect(d, e - d, (o[0])[2]:int);
      if (e) goto B_tn;
      e = 1;
      r = d[0]:byte;
      if (r == 95) goto B_tn;
      if (r > -1) goto B_rn;
      e = call_indirect(d, f[0] - d, (o[0])[0]:int);
      goto B_tn;
      label B_un:
      q = d[0]:ubyte;
      r = i32_extend8_s(q);
      if (r < 0) goto B_vn;
      e = 1;
      if (r == 95) goto B_tn;
      e = (32208 + q)[0]:ubyte >> 1 & 1;
      goto B_tn;
      label B_vn:
      pm_encoding_utf_8_alnum(d, e - d);
      e = 1;
      label B_tn:
      if (e) continue L_sn;
    }
    label B_rn:
    pm_diagnostic_list_append(n, a[46]:int, a[47]:int, 124);
    goto B_gn;
    label B_nn:
    a[47]:int = pm_strspn_decimal_digit(d, e - d) + a[47]:int;
    j = select_if(48, 122, a[0]:ubyte & 128);
    goto B_gn;
    label B_mn:
    c[0]:int = (d = j + 2);
    label B_ln:
    if (eqz(a[358]:ubyte)) goto B_yn;
    e = call_indirect(d, e - d, (o[0])[2]:int);
    if (e) goto B_hn;
    e = 1;
    j = d[0]:byte;
    if (j == 95) goto B_hn;
    if (j > -1) goto B_wn;
    e = call_indirect(d, f[0] - d, (o[0])[0]:int);
    goto B_xn;
    label B_yn:
    r = d[0]:ubyte;
    j = i32_extend8_s(r);
    if (j < 0) goto B_in;
    e = 1;
    if (j == 95) goto B_hn;
    e = (32208 + r)[0]:ubyte >> 1 & 1;
    label B_xn:
    if (e) goto B_hn;
    label B_wn:
    pm_diagnostic_list_append(n, a[46]:int, a[47]:int, 124);
    label B_jn:
    j = 48;
    goto B_gn;
    label B_in:
    pm_encoding_utf_8_alnum(d, e - d);
    e = 1;
    label B_hn:
    loop L_zn {
      c[0]:int = (d = c[0]:int + e);
      j = 48;
      if (d >= (e = f[0])) goto B_gn;
      if (eqz(a[358]:ubyte)) goto B_bo;
      e = call_indirect(d, e - d, (o[0])[2]:int);
      if (e) goto B_ao;
      e = 1;
      r = d[0]:byte;
      if (r == 95) goto B_ao;
      if (r > -1) goto B_gn;
      e = call_indirect(d, f[0] - d, (o[0])[0]:int);
      if (e) continue L_zn;
      goto B_gn;
      label B_bo:
      q = d[0]:ubyte;
      r = i32_extend8_s(q);
      if (r < 0) goto B_co;
      e = 1;
      if (r == 95) goto B_ao;
      e = (32208 + q)[0]:ubyte >> 1 & 1;
      if (e) continue L_zn;
      goto B_gn;
      label B_co:
      pm_encoding_utf_8_alnum(d, e - d);
      e = 1;
      label B_ao:
      if (e) continue L_zn;
    }
    label B_gn:
    c = a[6]:int;
    if (c[0]:int != 2) goto B_do;
    d = a[39]:int;
    if (d) goto B_eo;
    c[0]:int = 0;
    goto B_do;
    label B_eo:
    a[39]:int = (e = d + -1);
    if (d > 3) goto B_fo;
    a[6]:int = a + 24 + (e << 5) + 4;
    goto B_do;
    label B_fo:
    d = c[7]:int;
    free(c);
    a[6]:int = d;
    label B_do:
    a[45]:int = j;
    a[0]:int = 2;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_gb:
    r = a[0]:int;
    if (r & 577) goto B_po;
    if ((r & 2064) == 2064) goto B_po;
    s = r & 48;
    if (eqz(s)) goto B_qo;
    if (d >= e) goto B_oo;
    label B_qo:
    v = d >= e;
    if (v) goto B_ko;
    if (d[0]:ubyte != 61) goto B_no;
    a[45]:int = 127;
    a[0]:int = 1;
    a[47]:int = j + 2;
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_po:
    if (d < e) goto B_mo;
    label B_oo:
    pm_diagnostic_list_append(n, j, d, 122);
    g[0]:int = 126;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_no:
    if (eqz(r & 4096)) goto B_ro;
    if (d[0]:ubyte == 115) goto B_mo;
    label B_ro:
    if (v) goto B_ko;
    if (eqz(q & s != 0)) goto B_ko;
    if (pm_is_whitespace(d[0]:ubyte)) goto B_lo;
    e = f[0];
    d = c[0]:int;
    label B_mo:
    d = call_indirect(d, e - d, (o[0])[2]:int);
    j = c[0]:int;
    if (eqz(d)) goto B_so;
    d = f[0];
    goto B_go;
    label B_so:
    if (j[0]:byte <= -1) goto B_uo;
    e = j;
    goto B_to;
    label B_uo:
    pm_diagnostic_list_append(n, a[46]:int, j, 122);
    e = a[47]:int;
    label B_to:
    j = f[0];
    if (j <= e) goto B_wo;
    r = 1;
    br_table[B_xo, B_wo, B_wo, B_yo, ..B_wo](e[0]:ubyte + -10)
    label B_yo:
    if (j <= (d = e + 1)) goto B_wo;
    r = 2;
    if (d[0]:ubyte != 10) goto B_wo;
    label B_xo:
    d = a[49]:int;
    if (eqz(d)) goto B_ap;
    if (d > j) goto B_jo;
    a[49]:int = 0;
    a[48]:int = d;
    goto B_zo;
    label B_ap:
    pm_newline_list_append(p, e + r + -1);
    e = c[0]:int;
    label B_zo:
    d = e[0]:ubyte;
    c[0]:int = (j = e + r);
    goto B_vo;
    label B_wo:
    c[0]:int = (j = e + 1);
    d = e[0]:ubyte;
    label B_vo:
    e = d & 255;
    if (e > 90) goto B_dp;
    r = d;
    if (e == 40) goto B_bp;
    r = d;
    if (e != 60) goto B_cp;
    goto B_bp;
    label B_dp:
    r = d;
    if (e == 91) goto B_bp;
    r = d;
    if (e == 123) goto B_bp;
    label B_cp:
    r = 0;
    label B_bp:
    e = d & 255;
    if (e > 90) goto B_fp;
    if (e != 40) goto B_ep;
    d = 41;
    goto B_ho;
    label B_fp:
    if (e == 123) goto B_gp;
    if (e != 91) goto B_ho;
    d = 93;
    goto B_ho;
    label B_gp:
    d = 125;
    goto B_ho;
    label B_ep:
    if (e == 60) goto B_io;
    goto B_ho;
    label B_lo:
    r = a[0]:int;
    label B_ko:
    a[45]:int = 126;
    a[0]:int = select_if(16, 1, r & 384);
    j = a[69]:int;
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_jo:
    assert_fail(12716, 13402, 8064, 12691);
    unreachable;
    label B_io:
    d = 62;
    label B_ho:
    a[86]:int = 0;
    a[39]:int = (e = a[39]:int + 1);
    q = a[6]:int;
    if (e < 4) goto B_ip;
    a[6]:int = (e = malloc(32));
    if (eqz(e)) goto B_hp;
    e[17]:long@1 = 0L;
    e[16]:byte = r;
    e[15]:byte = 35;
    e[14]:byte = d;
    e[6]:short = 23562;
    e[11]:byte = d;
    e[10]:byte = r;
    e[4]:short = 1;
    e[0]:long@4 = 6L;
    e[7]:int = q;
    (e + 24)[0]:int@1 = 0;
    goto B_hp;
    label B_ip:
    s = a + 28;
    j = s + (e << 5);
    j[0]:long@4 = 6L;
    j[7]:int = q;
    j[17]:long@1 = 0L;
    j[16]:byte = r;
    j[15]:byte = 35;
    j[14]:byte = d;
    j[6]:short = 23562;
    j[11]:byte = d;
    j[10]:byte = r;
    j[4]:short = 1;
    (j + 24)[0]:int@1 = 0;
    a[6]:int = s + (a[39]:int << 5);
    j = a[47]:int;
    label B_hp:
    if (j >= (d = f[0])) goto B_go;
    g[0]:int = 149;
    j = m[0];
    if (eqz(j)) goto B_a;
    call_indirect(j[0]:int, a, g, j[1]:int);
    goto B_a;
    label B_go:
    if (d > (e = j + 1)) goto B_mp;
    b[8]:byte = 0;
    goto B_lp;
    label B_mp:
    b[8]:byte = (d = e[0]:byte);
    if (d < 0) goto B_kp;
    label B_lp:
    d = call_indirect(b + 8, 1, (o[0])[2]:int);
    j = c[0]:int;
    if (eqz(d)) goto B_jp;
    label B_kp:
    pm_diagnostic_list_append(n, a[46]:int, j, 122);
    goto B_fb;
    label B_jp:
    d = f[0];
    if (d <= j) goto B_np;
    br_table[B_vp, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_sp, B_np, B_np, B_np, B_np, B_np, B_pp, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_wp, B_np, B_np, B_np, B_np, B_np, B_np, B_np, B_tp, B_up, B_rp, B_np, B_np, B_np, B_qp, B_op, ..B_np](
      j[0]:ubyte + -73)
    label B_wp:
    c[0]:int = (j = j + 1);
    if (j >= d) goto B_yp;
    lex_mode_push_list(a, 0, pm_lex_percent_delimiter(a));
    goto B_xp;
    label B_yp:
    lex_mode_push_list_eof(a);
    label B_xp:
    g[0]:int = 128;
    j = 1;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_vp:
    c[0]:int = (j = j + 1);
    if (j >= d) goto B_aq;
    lex_mode_push_list(a, 1, pm_lex_percent_delimiter(a));
    goto B_zp;
    label B_aq:
    lex_mode_push_list_eof(a);
    label B_zp:
    g[0]:int = 131;
    j = 1;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_up:
    c[0]:int = (j = j + 1);
    if (j >= d) goto B_bq;
    j = pm_lex_percent_delimiter(a);
    if (j > 90) goto B_eq;
    d = j;
    if (j == 40) goto B_cq;
    d = j;
    if (j != 60) goto B_dq;
    goto B_cq;
    label B_eq:
    d = j;
    if (j == 91) goto B_cq;
    d = j;
    if (j == 123) goto B_cq;
    label B_dq:
    d = 0;
    label B_cq:
    if (j > 90) goto B_hq;
    if (j != 40) goto B_gq;
    lex_mode_push_regexp(a, d, 41);
    goto B_ra;
    label B_hq:
    if (j == 123) goto B_iq;
    if (j != 91) goto B_fq;
    lex_mode_push_regexp(a, d, 93);
    goto B_ra;
    label B_iq:
    lex_mode_push_regexp(a, d, 125);
    goto B_ra;
    label B_gq:
    if (j == 60) goto B_sa;
    label B_fq:
    lex_mode_push_regexp(a, d, j);
    goto B_ra;
    label B_bq:
    lex_mode_push_regexp(a, 0, 0);
    goto B_ra;
    label B_tp:
    c[0]:int = (j = j + 1);
    if (j >= d) goto B_jq;
    j = pm_lex_percent_delimiter(a);
    if (j > 90) goto B_mq;
    d = j;
    if (j == 40) goto B_kq;
    d = j;
    if (j != 60) goto B_lq;
    goto B_kq;
    label B_mq:
    d = j;
    if (j == 91) goto B_kq;
    d = j;
    if (j == 123) goto B_kq;
    label B_lq:
    d = 0;
    label B_kq:
    if (j > 90) goto B_oq;
    if (j != 40) goto B_nq;
    j = 41;
    goto B_ua;
    label B_oq:
    if (j == 123) goto B_pq;
    if (j != 91) goto B_ua;
    j = 93;
    goto B_ua;
    label B_pq:
    j = 125;
    goto B_ua;
    label B_nq:
    if (j == 60) goto B_va;
    goto B_ua;
    label B_jq:
    lex_mode_push_string_eof(a);
    goto B_ta;
    label B_sp:
    c[0]:int = (j = j + 1);
    if (j >= d) goto B_qq;
    j = pm_lex_percent_delimiter(a);
    if (j > 90) goto B_tq;
    d = j;
    if (j == 40) goto B_rq;
    d = j;
    if (j != 60) goto B_sq;
    goto B_rq;
    label B_tq:
    d = j;
    if (j == 91) goto B_rq;
    d = j;
    if (j == 123) goto B_rq;
    label B_sq:
    d = 0;
    label B_rq:
    if (j > 90) goto B_vq;
    if (j != 40) goto B_uq;
    j = 41;
    goto B_xa;
    label B_vq:
    if (j == 123) goto B_wq;
    if (j != 91) goto B_xa;
    j = 93;
    goto B_xa;
    label B_wq:
    j = 125;
    goto B_xa;
    label B_uq:
    if (j == 60) goto B_ya;
    goto B_xa;
    label B_qq:
    lex_mode_push_string_eof(a);
    goto B_wa;
    label B_rp:
    c[0]:int = (j = j + 1);
    if (j >= d) goto B_xq;
    j = pm_lex_percent_delimiter(a);
    if (j > 90) goto B_ar;
    d = j;
    if (j == 40) goto B_yq;
    d = j;
    if (j != 60) goto B_zq;
    goto B_yq;
    label B_ar:
    d = j;
    if (j == 91) goto B_yq;
    d = j;
    if (j == 123) goto B_yq;
    label B_zq:
    d = 0;
    label B_yq:
    if (j > 90) goto B_cr;
    if (j != 40) goto B_br;
    j = 41;
    goto B_ab;
    label B_cr:
    if (j == 123) goto B_dr;
    if (j != 91) goto B_ab;
    j = 93;
    goto B_ab;
    label B_dr:
    j = 125;
    goto B_ab;
    label B_br:
    if (j == 60) goto B_bb;
    goto B_ab;
    label B_xq:
    lex_mode_push_string_eof(a);
    goto B_za;
    label B_qp:
    c[0]:int = (j = j + 1);
    if (j >= d) goto B_fr;
    lex_mode_push_list(a, 0, pm_lex_percent_delimiter(a));
    goto B_er;
    label B_fr:
    lex_mode_push_list_eof(a);
    label B_er:
    g[0]:int = 129;
    j = 1;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_pp:
    c[0]:int = (j = j + 1);
    if (j >= d) goto B_hr;
    lex_mode_push_list(a, 1, pm_lex_percent_delimiter(a));
    goto B_gr;
    label B_hr:
    lex_mode_push_list_eof(a);
    label B_gr:
    g[0]:int = 132;
    j = 1;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_op:
    c[0]:int = (j = j + 1);
    if (j >= d) goto B_ir;
    j = pm_lex_percent_delimiter(a);
    if (j > 90) goto B_lr;
    d = j;
    if (j == 40) goto B_jr;
    d = j;
    if (j != 60) goto B_kr;
    goto B_jr;
    label B_lr:
    d = j;
    if (j == 91) goto B_jr;
    d = j;
    if (j == 123) goto B_jr;
    label B_kr:
    d = 0;
    label B_jr:
    if (j > 90) goto B_nr;
    if (j != 40) goto B_mr;
    j = 41;
    goto B_db;
    label B_nr:
    if (j == 123) goto B_or;
    if (j != 91) goto B_db;
    j = 93;
    goto B_db;
    label B_or:
    j = 125;
    goto B_db;
    label B_mr:
    if (j == 60) goto B_eb;
    goto B_db;
    label B_ir:
    lex_mode_push_string_eof(a);
    goto B_cb;
    label B_np:
    pm_diagnostic_list_append(n, a[46]:int, j, 122);
    label B_fb:
    j = 3;
    goto B_qa;
    label B_eb:
    j = 62;
    label B_db:
    lex_mode_push_string(a, 1, 0, d, j);
    label B_cb:
    g[0]:int = 130;
    j = 1;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_bb:
    j = 62;
    label B_ab:
    lex_mode_push_string(a, 0, 0, d, j);
    a[0]:int = 4224;
    label B_za:
    g[0]:int = 152;
    j = 1;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_ya:
    j = 62;
    label B_xa:
    lex_mode_push_string(a, 1, 0, d, j);
    label B_wa:
    g[0]:int = 149;
    j = 1;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_va:
    j = 62;
    label B_ua:
    lex_mode_push_string(a, 0, 0, d, j);
    label B_ta:
    g[0]:int = 149;
    j = 1;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    goto B_qa;
    label B_sa:
    lex_mode_push_regexp(a, d, 62);
    label B_ra:
    g[0]:int = 140;
    j = 1;
    d = m[0];
    if (eqz(d)) goto B_qa;
    call_indirect(d[0]:int, a, g, d[1]:int);
    label B_qa:
    if (j == 3) continue L_ba;
    goto B_a;
  }
  label B_z:
  assert_fail(26957, 13402, 10320, 1507);
  unreachable;
  label B_y:
  assert_fail(12751, 13402, 8242, 1507);
  unreachable;
  label B_x:
  r = a[48]:int;
  if (eqz(r)) goto B_pr;
  a[47]:int = r;
  a[48]:long@4 = 0L;
  d = r;
  label B_pr:
  (a + 184)[0]:int = d;
  if (d < e) goto B_qr;
  pm_diagnostic_list_append(a + 244, d, d, 111);
  a[48]:int = (j + 20)[0]:int;
  a[49]:int = a[47]:int;
  a[45]:int = 53;
  a[0]:int = 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_qr:
  i = (j + 8)[0]:int;
  o = j[1]:int;
  if (d == a[40]:int) goto B_sr;
  if ((d + -1)[0]:ubyte != 10) goto B_rr;
  label B_sr:
  r = d + i;
  if (r > e) goto B_tr;
  h = next_newline(d, e - d);
  if (h) goto B_vr;
  m = f[0];
  s = m;
  goto B_ur;
  label B_vr:
  e = h + -1;
  m = select_if(e, h, e[0]:ubyte == 13);
  s = h + 1;
  label B_ur:
  q = m - i;
  e = d;
  if ((j + 16)[0]:int + -1 > 1) goto B_wr;
  e = d;
  if (d >= q) goto B_wr;
  r = m - r;
  e = d;
  loop L_xr {
    if (eqz(pm_is_inline_whitespace(e[0]:ubyte))) goto B_wr;
    e = e + 1;
    r = r + -1;
    if (r) continue L_xr;
  }
  e = q;
  label B_wr:
  if (e != q) goto B_tr;
  if (memcmp(q, o, i)) goto B_tr;
  if (eqz(h)) goto B_yr;
  pm_newline_list_append(a + 308, h);
  label B_yr:
  c[0]:int = s;
  c = 0;
  j = (j + 20)[0]:int;
  if (j[0]:ubyte == 92) goto B_zr;
  a[49]:int = s;
  c = j;
  label B_zr:
  a[45]:int = 53;
  a[0]:int = 2;
  a[48]:int = c;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_tr:
  br_table[B_cs, B_ds, ..B_rr]((j + 16)[0]:int + -1)
  label B_ds:
  e = 0;
  if (d >= f[0]) goto B_as;
  e = 0;
  loop L_es {
    if (eqz(pm_is_inline_whitespace(d[0]:ubyte))) goto B_bs;
    e = select_if((e & -8) + 8, e + 1, d[0]:ubyte == 9);
    d = d + 1;
    if (d < f[0]) continue L_es;
    goto B_bs;
  }
  label B_cs:
  d = d + pm_strspn_inline_whitespace(d, f[0] - d);
  e = 0;
  label B_bs:
  if (j[4]:int != 2) goto B_rr;
  label B_as:
  if ((j + 24)[0]:int <= e) goto B_rr;
  if (f[0] <= d) goto B_fs;
  if (d[0]:ubyte == 10) goto B_rr;
  label B_fs:
  j[6]:int = e;
  label B_rr:
  b[1]:int = 2317322;
  e = (j + 12)[0]:int;
  if (e != 39) goto B_gs;
  b[6]:byte = 0;
  label B_gs:
  d = pm_strpbrk(a, d = a[47]:int, b + 4, a[41]:int - d);
  (b + 8 + 8)[0]:long = 0L;
  b[1]:long = 0L;
  if (eqz(d)) goto B_js;
  v = 0 - i;
  m = a + 308;
  n = i + 1;
  p = e != 39;
  q = 0;
  loop L_ks {
    e = d[0]:ubyte;
    br_table[B_rs, B_ss, B_ss, B_ss, B_ss, B_ss, B_ss, B_ss, B_ss, B_ss, B_at, ..B_bt](
      e);
    label B_bt:
    if (e == 35) goto B_ts;
    if (e != 92) goto B_ss;
    c[0]:int = (d = d + 1);
    if (d == f[0]) goto B_is;
    e = b[5]:int;
    if (e) goto B_ct;
    pm_buffer_init_capacity(b + 8, 16);
    d = a[47]:int;
    e = a[46]:int;
    label B_ct:
    pm_buffer_append_bytes(b + 8, e, (e ^ -1) + d);
    e = 0;
    r = f[0];
    if (r <= (d = c[0]:int)) goto B_dt;
    e = d[0]:ubyte;
    label B_dt:
    if (p) goto B_xs;
    e = e & 255;
    br_table[B_vs, B_ys, B_ys, B_zs, ..B_ys](e + -10);
    label B_at:
    r = d + 1;
    if (a[49]:int <= d) goto B_et;
    parser_flush_heredoc_end(a);
    a[47]:int = r;
    pm_token_buffer_flush(a, b + 8);
    a[45]:int = 150;
    goto B_hs;
    label B_et:
    pm_newline_list_append(m, d);
    q = q & 1;
    if (q) goto B_ft;
    if (r + i > (h = f[0])) goto B_ft;
    e = h - r;
    if (e <= -1) goto B_qs;
    e = memchr(r, 10, e);
    if (eqz(e)) goto B_gt;
    h = e + -1;
    h = select_if(h, e, h[0] == 13);
    label B_gt:
    s = h + v;
    e = r;
    if (j[4]:int + -1 > 1) goto B_ht;
    e = r;
    if (r >= s) goto B_ht;
    l = d + v + h - d;
    d = n + d - h;
    e = r;
    loop L_it {
      if (eqz(pm_is_inline_whitespace(e[0]:ubyte))) goto B_ht;
      e = e + 1;
      d = d + 1;
      if (d) continue L_it;
    }
    e = l;
    label B_ht:
    if (e != s) goto B_ft;
    if (memcmp(s, o, i)) goto B_ft;
    a[47]:int = r;
    pm_token_buffer_flush(a, b + 8);
    a[45]:int = 150;
    goto B_hs;
    label B_ft:
    br_table[B_ps, B_jt, ..B_ms](j[4]:int + -1)
    label B_jt:
    e = 0;
    d = r;
    if (r >= f[0]) goto B_ns;
    e = 0;
    d = r;
    loop L_kt {
      if (eqz(pm_is_inline_whitespace(d[0]:ubyte))) goto B_os;
      e = select_if((e & -8) + 8, e + 1, d[0]:ubyte == 9);
      d = d + 1;
      if (d < f[0]) continue L_kt;
      goto B_os;
    }
    label B_zs:
    c[0]:int = (d = d + 1);
    if (r <= d) goto B_lt;
    if (d[0]:ubyte == 10) goto B_vs;
    label B_lt:
    pm_buffer_append_byte(b + 8, 92);
    pm_buffer_append_byte(b + 8, 13);
    goto B_ws;
    label B_ys:
    c[0]:int = d + 1;
    pm_buffer_append_byte(b + 8, 92);
    pm_buffer_append_byte(b + 8, e);
    goto B_ws;
    label B_xs:
    q = 1;
    br_table[B_us, B_mt, B_mt, B_nt, ..B_mt]((e & 255) + -10)
    label B_nt:
    c[0]:int = (d = d + 1);
    if (r <= d) goto B_ot;
    if (d[0]:ubyte == 10) goto B_us;
    label B_ot:
    pm_buffer_append_byte(b + 8, 13);
    goto B_ws;
    label B_mt:
    escape_read(a, b + 8, 0);
    label B_ws:
    b[5]:int = (d = a[47]:int);
    q = 0;
    d = pm_strpbrk(a, d, b + 4, a[41]:int - d);
    goto B_ls;
    label B_vs:
    pm_buffer_append_byte(b + 8, 92);
    pm_buffer_append_byte(b + 8, 10);
    d = c[0]:int;
    label B_us:
    b[5]:int = d + 1;
    goto B_ls;
    label B_ts:
    d = lex_interpolation(a, d);
    if (d == 3) goto B_pt;
    if (d != 150) goto B_qt;
    j = b[5]:int;
    if (j) goto B_rt;
    pm_string_shared_init(a + 328, a[46]:int, a[47]:int);
    a[45]:int = d;
    goto B_hs;
    label B_rt:
    pm_buffer_append_bytes(b + 8, j, a[47]:int - j);
    pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
    label B_qt:
    a[45]:int = d;
    goto B_hs;
    label B_pt:
    q = 0;
    d = pm_strpbrk(a, d = a[47]:int, b + 4, a[41]:int - d);
    goto B_ls;
    label B_ss:
    assert_fail(26957, 13402, 10300, 1507);
    unreachable;
    label B_rs:
    a[47]:int = (d = d + 1);
    q = 0;
    d = pm_strpbrk(a, d, b + 4, a[41]:int - d);
    goto B_ls;
    label B_qs:
    assert_fail(26245, 13402, 6354, 11805);
    unreachable;
    label B_ps:
    d = r + pm_strspn_inline_whitespace(r, f[0] - r);
    e = 0;
    label B_os:
    if (j[4]:int != 2) goto B_ms;
    label B_ns:
    if (j[6]:int <= e) goto B_st;
    if (f[0] <= d) goto B_tt;
    if (d[0]:ubyte == 10) goto B_st;
    label B_tt:
    j[6]:int = e;
    label B_st:
    c[0]:int = r;
    if (q) goto B_ms;
    j = b[5]:int;
    if (j) goto B_vt;
    pm_string_shared_init(a + 328, a[46]:int, r);
    goto B_ut;
    label B_vt:
    pm_buffer_append_bytes(b + 8, j, r - j);
    pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
    label B_ut:
    a[45]:int = 150;
    goto B_hs;
    label B_ms:
    a[47]:int = r;
    q = 0;
    d = pm_strpbrk(a, r, b + 4, a[41]:int - r);
    label B_ls:
    if (d) continue L_ks;
  }
  label B_js:
  d = c[0]:int;
  label B_is:
  a[47]:int = (c = a[41]:int);
  j = b[5]:int;
  if (d <= (e = a[46]:int)) goto B_wt;
  if (j) goto B_yt;
  pm_string_shared_init(a + 328, e, c);
  goto B_xt;
  label B_yt:
  pm_buffer_append_bytes(b + 8, j, c - j);
  pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
  label B_xt:
  a[45]:int = 150;
  goto B_hs;
  label B_wt:
  if (j) goto B_au;
  pm_string_shared_init(a + 328, e, c);
  goto B_zt;
  label B_au:
  pm_buffer_append_bytes(b + 8, j, c - j);
  pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
  label B_zt:
  a[45]:int = 150;
  label B_hs:
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_w:
  r = a[48]:int;
  if (eqz(r)) goto B_bu;
  a[48]:int = 0;
  a[47]:int = r;
  d = r;
  label B_bu:
  (a + 184)[0]:int = d;
  if (d < e) goto B_cu;
  a[45]:int = 1;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_cu:
  d = pm_strpbrk(a, d, q = j + 12, e - d);
  (b + 16)[0]:long = 0L;
  b[1]:long = 0L;
  if (eqz(d)) goto B_eu;
  i = a + 308;
  loop L_fu {
    e = d[0]:ubyte;
    r = j[10]:ubyte;
    if (eqz(r)) goto B_gu;
    if (e != r) goto B_gu;
    j[1]:int = j[1]:int + 1;
    a[47]:int = (d = d + 1);
    d = pm_strpbrk(a, d, q, a[41]:int - d);
    if (d) continue L_fu;
    goto B_eu;
    label B_gu:
    if (e != j[11]:ubyte) goto B_hu;
    if (eqz(j[1]:int)) goto B_iu;
    a[47]:int = (d = d + 1);
    d = pm_strpbrk(a, d, q, a[41]:int - d);
    j[1]:int = j[1]:int + -1;
    if (d) continue L_fu;
    goto B_eu;
    label B_iu:
    if (d <= a[46]:int) goto B_ju;
    a[47]:int = d;
    pm_token_buffer_flush(a, b + 8);
    a[45]:int = 150;
    goto B_du;
    label B_ju:
    e = match_eol_at(a, d);
    if (eqz(e)) goto B_lu;
    c[0]:int = (d = d + e);
    pm_newline_list_append(i, d + -1);
    goto B_ku;
    label B_lu:
    c[0]:int = d + 1;
    label B_ku:
    if (eqz(j[9]:ubyte)) goto B_mu;
    d = f[0];
    if (d <= (j = c[0]:int)) goto B_mu;
    if (j[0]:ubyte != 58) goto B_mu;
    if (d <= (j = j + 1)) goto B_nu;
    if (j[0]:ubyte == 58) goto B_mu;
    label B_nu:
    a[0]:int = 2064;
    a[47]:int = j;
    lex_mode_pop(a);
    a[45]:int = 110;
    goto B_du;
    label B_mu:
    a[0]:int = 2;
    lex_mode_pop(a);
    a[45]:int = 151;
    goto B_du;
    label B_hu:
    br_table[B_ou, B_pu, B_pu, B_pu, B_pu, B_pu, B_pu, B_pu, B_pu, B_pu, B_wu, ..B_xu](
      e)
    label B_xu:
    if (e == 35) goto B_qu;
    if (e != 92) goto B_pu;
    c[0]:int = (d = d + 1);
    if (d == f[0]) goto B_eu;
    e = b[5]:int;
    if (e) goto B_yu;
    pm_buffer_init_capacity(b + 8, 16);
    d = a[47]:int;
    e = a[46]:int;
    label B_yu:
    pm_buffer_append_bytes(b + 8, e, (e ^ -1) + d);
    d = 0;
    r = f[0];
    if (r <= (e = c[0]:int)) goto B_su;
    d = e[0]:ubyte;
    br_table[B_tu, B_su, B_su, B_uu, ..B_vu](d + -10);
    label B_wu:
    if (a[49]:int) goto B_zu;
    pm_newline_list_append(i, d);
    a[47]:int = (d = d + 1);
    d = pm_strpbrk(a, d, q, a[41]:int - d);
    if (d) continue L_fu;
    goto B_eu;
    label B_zu:
    a[47]:int = d + 1;
    parser_flush_heredoc_end(a);
    pm_token_buffer_flush(a, b + 8);
    a[45]:int = 150;
    goto B_du;
    label B_vu:
    if (d != 92) goto B_su;
    pm_buffer_append_byte(b + 8, 92);
    c[0]:int = c[0]:int + 1;
    goto B_ru;
    label B_uu:
    c[0]:int = (d = e + 1);
    if (r <= d) goto B_av;
    if (d[0]:ubyte == 10) goto B_tu;
    label B_av:
    if (j[8]:ubyte) goto B_bv;
    pm_buffer_append_byte(b + 8, 92);
    label B_bv:
    pm_buffer_append_byte(b + 8, 13);
    goto B_ru;
    label B_tu:
    if (j[8]:ubyte) goto B_cv;
    pm_buffer_append_byte(b + 8, 92);
    pm_buffer_append_byte(b + 8, 10);
    label B_cv:
    if (eqz(a[49]:int)) goto B_dv;
    parser_flush_heredoc_end(a);
    pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
    a[45]:int = 150;
    goto B_du;
    label B_dv:
    pm_newline_list_append(i, c[0]:int);
    c[0]:int = c[0]:int + 1;
    goto B_ru;
    label B_su:
    e = j[10]:ubyte;
    if (eqz(e)) goto B_ev;
    if (d != e) goto B_ev;
    pm_buffer_append_byte(b + 8, d);
    c[0]:int = c[0]:int + 1;
    goto B_ru;
    label B_ev:
    e = j[11]:ubyte;
    if (eqz(e)) goto B_fv;
    if (d != e) goto B_fv;
    pm_buffer_append_byte(b + 8, d);
    c[0]:int = c[0]:int + 1;
    goto B_ru;
    label B_fv:
    if (eqz(j[8]:ubyte)) goto B_gv;
    escape_read(a, b + 8, 0);
    goto B_ru;
    label B_gv:
    pm_buffer_append_byte(b + 8, 92);
    pm_buffer_append_byte(b + 8, d);
    c[0]:int = c[0]:int + 1;
    label B_ru:
    b[5]:int = (d = a[47]:int);
    d = pm_strpbrk(a, d, q, a[41]:int - d);
    if (d) continue L_fu;
    goto B_eu;
    label B_qu:
    d = lex_interpolation(a, d);
    if (d == 3) goto B_hv;
    if (d != 150) goto B_iv;
    j = b[5]:int;
    if (j) goto B_jv;
    pm_string_shared_init(a + 328, a[46]:int, a[47]:int);
    a[45]:int = d;
    goto B_du;
    label B_jv:
    pm_buffer_append_bytes(b + 8, j, a[47]:int - j);
    pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
    label B_iv:
    a[45]:int = d;
    goto B_du;
    label B_hv:
    d = pm_strpbrk(a, d = a[47]:int, q, a[41]:int - d);
    if (d) continue L_fu;
    goto B_eu;
    label B_pu:
    assert_fail(26957, 13402, 10011, 1507);
    unreachable;
    label B_ou:
    a[47]:int = (d = d + 1);
    d = pm_strpbrk(a, d, q, a[41]:int - d);
    if (d) continue L_fu;
  }
  label B_eu:
  j = a[47]:int;
  if (j <= (d = a[46]:int)) goto B_kv;
  c = b[5]:int;
  if (c) goto B_mv;
  pm_string_shared_init(a + 328, d, j);
  goto B_lv;
  label B_mv:
  pm_buffer_append_bytes(b + 8, c, j - c);
  pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
  label B_lv:
  a[45]:int = 150;
  goto B_du;
  label B_kv:
  c[0]:int = (e = f[0]);
  j = b[5]:int;
  if (j) goto B_ov;
  pm_string_shared_init(a + 328, d, e);
  goto B_nv;
  label B_ov:
  pm_buffer_append_bytes(b + 8, j, e - j);
  pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
  label B_nv:
  a[45]:int = 150;
  label B_du:
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_v:
  r = a[48]:int;
  if (eqz(r)) goto B_pv;
  a[48]:int = 0;
  a[47]:int = r;
  d = r;
  label B_pv:
  (a + 184)[0]:int = d;
  if (d < e) goto B_qv;
  a[45]:int = 1;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_qv:
  d = pm_strpbrk(a, d, r = j + 10, e - d);
  (b + 8 + 8)[0]:long = 0L;
  b[1]:long = 0L;
  if (eqz(d)) goto B_sv;
  i = a + 308;
  loop L_tv {
    e = d[0]:ubyte;
    br_table[B_zv, B_xv, B_xv, B_xv, B_xv, B_xv, B_xv, B_xv, B_xv, B_xv, B_yv, ..B_xv](
      e);
    label B_zv:
    a[47]:int = (d = d + 1);
    d = pm_strpbrk(a, d, r, a[41]:int - d);
    if (d) continue L_tv;
    goto B_sv;
    label B_yv:
    e = j[9]:ubyte;
    if (e != 10) goto B_aw;
    if (g[0]:int != 140) goto B_vv;
    label B_aw:
    if (a[49]:int) goto B_bw;
    pm_newline_list_append(i, d);
    e = j[9]:ubyte;
    label B_bw:
    if ((e & 255) != 10) goto B_cw;
    e = d[0]:ubyte;
    q = 10;
    goto B_wv;
    label B_cw:
    a[47]:int = (d = d + 1);
    d = pm_strpbrk(a, d, r, a[41]:int - d);
    if (d) continue L_tv;
    goto B_sv;
    label B_xv:
    q = j[9]:ubyte;
    label B_wv:
    e = e & 255;
    if (e != (q & 255)) goto B_uv;
    label B_vv:
    if (eqz(j[1]:int)) goto B_dw;
    a[47]:int = (d = d + 1);
    d = pm_strpbrk(a, d, r, a[41]:int - d);
    j[1]:int = j[1]:int + -1;
    if (d) continue L_tv;
    goto B_sv;
    label B_dw:
    if (d <= a[46]:int) goto B_ew;
    a[47]:int = d;
    pm_token_buffer_flush(a, b + 8);
    a[45]:int = 150;
    goto B_rv;
    label B_ew:
    a[47]:int = (j = d + 1);
    a[47]:int = pm_strspn_regexp_option(j, a[41]:int - j) + a[47]:int;
    lex_mode_pop(a);
    a[45]:int = 141;
    a[0]:int = 2;
    goto B_rv;
    label B_uv:
    if (e == 35) goto B_ow;
    if (e != 92) goto B_nw;
    c[0]:int = (d = d + 1);
    if (d == f[0]) goto B_sv;
    e = b[5]:int;
    if (e) goto B_pw;
    pm_buffer_init_capacity(b + 8, 16);
    d = a[47]:int;
    e = a[46]:int;
    label B_pw:
    pm_buffer_append_bytes(b + 8, e, (e ^ -1) + d);
    e = f[0];
    if (e <= (d = c[0]:int)) goto B_qw;
    q = d[0]:ubyte;
    h = q + -99;
    if (h > 21) goto B_mw;
    if (eqz(1 << h & 2359297)) goto B_mw;
    goto B_lw;
    label B_qw:
    d = 0;
    if (eqz(j[9]:ubyte)) goto B_gw;
    goto B_jw;
    label B_ow:
    d = lex_interpolation(a, d);
    if (d == 3) goto B_rw;
    if (d != 150) goto B_sw;
    j = b[5]:int;
    if (j) goto B_tw;
    pm_string_shared_init(a + 328, a[46]:int, a[47]:int);
    a[45]:int = d;
    goto B_rv;
    label B_tw:
    pm_buffer_append_bytes(b + 8, j, a[47]:int - j);
    pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
    label B_sw:
    a[45]:int = d;
    goto B_rv;
    label B_rw:
    d = pm_strpbrk(a, d = a[47]:int, r, a[41]:int - d);
    if (d) continue L_tv;
    goto B_sv;
    label B_nw:
    if (e != j[8]:ubyte) goto B_uw;
    a[47]:int = (d = d + 1);
    d = pm_strpbrk(a, d, r, a[41]:int - d);
    j[1]:int = j[1]:int + 1;
    if (d) continue L_tv;
    goto B_sv;
    label B_uw:
    assert_fail(5050, 13402, 9801, 1507);
    unreachable;
    label B_mw:
    br_table[B_vw, B_kw, B_kw, B_ww, ..B_xw](q + -10)
    label B_xw:
    br_table[B_lw, B_kw, B_kw, B_kw, B_kw, B_kw, B_kw, B_kw, B_kw, B_kw, B_lw, ..B_kw](
      q + -67);
    label B_ww:
    c[0]:int = (d = d + 1);
    if (e <= d) goto B_yw;
    if (d[0]:ubyte == 10) goto B_vw;
    label B_yw:
    if (j[9]:ubyte == 13) goto B_zw;
    pm_buffer_append_byte(b + 8, 92);
    label B_zw:
    pm_buffer_append_byte(b + 8, 13);
    goto B_fw;
    label B_vw:
    if (eqz(a[49]:int)) goto B_ax;
    parser_flush_heredoc_end(a);
    pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
    a[45]:int = 150;
    goto B_rv;
    label B_ax:
    pm_newline_list_append(i, d);
    c[0]:int = c[0]:int + 1;
    goto B_fw;
    label B_lw:
    escape_read(a, b + 8, 8);
    goto B_fw;
    label B_kw:
    if (j[9]:ubyte == ((d = i32_extend8_s(q)) & 255)) goto B_hw;
    if (d < 0) goto B_iw;
    label B_jw:
    pm_buffer_append_byte(b + 8, 92);
    label B_iw:
    pm_buffer_append_byte(b + 8, d & 255);
    c[0]:int = c[0]:int + 1;
    goto B_fw;
    label B_hw:
    br_table[B_bx, B_gw, B_gw, B_gw, B_gw, B_bx, B_bx, B_bx, B_gw, B_gw, B_bx, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_bx, B_bx, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_bx, B_bx, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_gw, B_bx, B_bx, ..B_gw](
      q + -36)
    label B_bx:
    pm_buffer_append_byte(b + 8, 92);
    label B_gw:
    pm_buffer_append_byte(b + 8, d & 255);
    c[0]:int = c[0]:int + 1;
    label B_fw:
    b[5]:int = (d = a[47]:int);
    d = pm_strpbrk(a, d, r, a[41]:int - d);
    if (d) continue L_tv;
  }
  label B_sv:
  j = a[47]:int;
  if (j <= (d = a[46]:int)) goto B_cx;
  c = b[5]:int;
  if (c) goto B_ex;
  pm_string_shared_init(a + 328, d, j);
  goto B_dx;
  label B_ex:
  pm_buffer_append_bytes(b + 8, c, j - c);
  pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
  label B_dx:
  a[45]:int = 150;
  goto B_rv;
  label B_cx:
  c[0]:int = (e = f[0]);
  j = b[5]:int;
  if (j) goto B_gx;
  pm_string_shared_init(a + 328, d, e);
  goto B_fx;
  label B_gx:
  pm_buffer_append_bytes(b + 8, j, e - j);
  pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
  label B_fx:
  a[45]:int = 150;
  label B_rv:
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_u:
  j = a[48]:int;
  if (eqz(j)) goto B_hx;
  a[48]:int = 0;
  a[47]:int = j;
  d = j;
  label B_hx:
  (a + 184)[0]:int = d;
  j = e - d;
  if (eqz(a[49]:int)) goto B_jx;
  j = pm_strspn_inline_whitespace(d, j);
  if (f[0] <= (d = j + c[0]:int)) goto B_ix;
  j = j + ((d[0]:ubyte & 255) == 10);
  goto B_ix;
  label B_jx:
  j = pm_strspn_whitespace_newlines(d, j, a + 308);
  label B_ix:
  e = c[0]:int;
  if (eqz(j)) goto B_lx;
  c[0]:int = (j = e + j);
  c = f[0];
  if (c <= (j = j + -1)) goto B_mx;
  if (j[0]:ubyte != 10) goto B_mx;
  j = a[49]:int;
  if (j > c) goto B_kx;
  a[49]:int = 0;
  a[48]:int = j;
  label B_mx:
  a[45]:int = 163;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_lx:
  if (e < (j = f[0])) goto B_nx;
  a[45]:int = 1;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_nx:
  j = pm_strpbrk(a, e, r = (d = a[6]:int) + 11, j - e);
  (b + 16)[0]:long = 0L;
  b[1]:long = 0L;
  if (eqz(j)) goto B_px;
  h = a + 308;
  loop L_qx {
    e = j[0]:ubyte;
    if (e) goto B_rx;
    j = pm_strpbrk(a, j = j + 1, r, a[41]:int - j);
    if (j) continue L_qx;
    goto B_px;
    label B_rx:
    if (eqz(pm_is_whitespace(e))) goto B_sx;
    a[47]:int = j;
    pm_token_buffer_flush(a, b + 8);
    a[45]:int = 150;
    goto B_ox;
    label B_sx:
    e = j[0]:ubyte;
    if (e != d[10]:ubyte) goto B_tx;
    if (eqz(d[1]:int)) goto B_ux;
    a[47]:int = (j = j + 1);
    j = pm_strpbrk(a, j, r, a[41]:int - j);
    d[1]:int = d[1]:int + -1;
    if (j) continue L_qx;
    goto B_px;
    label B_ux:
    if (j <= a[46]:int) goto B_vx;
    a[47]:int = j;
    pm_token_buffer_flush(a, b + 8);
    a[45]:int = 150;
    goto B_ox;
    label B_vx:
    a[47]:int = j + 1;
    lex_mode_pop(a);
    a[45]:int = 151;
    a[0]:int = 2;
    goto B_ox;
    label B_tx:
    if (e == 35) goto B_by;
    if (e != 92) goto B_ay;
    c[0]:int = (j = j + 1);
    if (j == f[0]) goto B_px;
    e = b[5]:int;
    if (e) goto B_cy;
    pm_buffer_init_capacity(b + 8, 16);
    j = a[47]:int;
    e = a[46]:int;
    label B_cy:
    pm_buffer_append_bytes(b + 8, e, (e ^ -1) + j);
    j = 0;
    i = f[0];
    if (i <= (e = c[0]:int)) goto B_xx;
    j = e[0]:ubyte;
    q = j + -9;
    if (q > 23) goto B_zx;
    if (1 << q & 8388621) goto B_yx;
    if (q == 1) goto B_dy;
    if (q != 4) goto B_zx;
    c[0]:int = (j = e + 1);
    if (i <= j) goto B_ey;
    if (j[0]:ubyte == 10) goto B_dy;
    label B_ey:
    pm_buffer_append_byte(b + 8, 13);
    goto B_wx;
    label B_dy:
    pm_buffer_append_byte(b + 8, 10);
    if (eqz(a[49]:int)) goto B_fy;
    parser_flush_heredoc_end(a);
    pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
    a[45]:int = 150;
    goto B_ox;
    label B_fy:
    pm_newline_list_append(h, c[0]:int);
    c[0]:int = c[0]:int + 1;
    goto B_wx;
    label B_by:
    j = lex_interpolation(a, j);
    if (j == 3) goto B_gy;
    if (j != 150) goto B_hy;
    pm_token_buffer_flush(a, b + 8);
    label B_hy:
    a[45]:int = j;
    goto B_ox;
    label B_gy:
    j = pm_strpbrk(a, j = a[47]:int, r, a[41]:int - j);
    if (j) continue L_qx;
    goto B_px;
    label B_ay:
    if (e != d[9]:ubyte) goto B_iy;
    a[47]:int = (j = j + 1);
    j = pm_strpbrk(a, j, r, a[41]:int - j);
    d[1]:int = d[1]:int + 1;
    if (j) continue L_qx;
    goto B_px;
    label B_iy:
    assert_fail(5005, 13402, 9595, 1507);
    unreachable;
    label B_zx:
    if (j != 92) goto B_xx;
    label B_yx:
    pm_buffer_append_byte(b + 8, j);
    c[0]:int = c[0]:int + 1;
    goto B_wx;
    label B_xx:
    if (j == d[9]:ubyte) goto B_ky;
    if (j != d[10]:ubyte) goto B_jy;
    label B_ky:
    pm_buffer_append_byte(b + 8, j);
    c[0]:int = c[0]:int + 1;
    goto B_wx;
    label B_jy:
    if (eqz(d[8]:ubyte)) goto B_ly;
    escape_read(a, b + 8, 0);
    goto B_wx;
    label B_ly:
    pm_buffer_append_byte(b + 8, 92);
    pm_buffer_append_byte(b + 8, j);
    c[0]:int = c[0]:int + 1;
    label B_wx:
    b[5]:int = (j = a[47]:int);
    j = pm_strpbrk(a, j, r, a[41]:int - j);
    if (j) continue L_qx;
  }
  label B_px:
  if (a[47]:int <= a[46]:int) goto B_my;
  pm_token_buffer_flush(a, b + 8);
  a[45]:int = 150;
  goto B_ox;
  label B_my:
  a[47]:int = a[41]:int;
  pm_token_buffer_flush(a, b + 8);
  a[45]:int = 150;
  label B_ox:
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_kx:
  assert_fail(12716, 13402, 8064, 12691);
  unreachable;
  label B_t:
  if (a[0]:ushort & 384) goto B_oy;
  f = 1;
  goto B_ny;
  label B_oy:
  f = 16;
  if (e <= d) goto B_ny;
  if (d[0]:ubyte != 64) goto B_ny;
  c[0]:int = j + 2;
  label B_ny:
  a[45]:int = 153;
  a[0]:int = f;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_s:
  a[0]:int = select_if(16, 1, a[0]:int & 384);
  f = 21;
  if (e <= d) goto B_py;
  if (d[0]:ubyte != 61) goto B_py;
  c[0]:int = j + 2;
  f = 22;
  label B_py:
  g[0]:int = f;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_r:
  c = a[0]:int;
  if (c & 577) goto B_ry;
  if ((c & 2064) != 2064) goto B_qy;
  label B_ry:
  a[39]:int = (j = a[39]:int + 1);
  c = a[6]:int;
  if (j < 4) goto B_ty;
  a[6]:int = (j = malloc(32));
  if (eqz(j)) goto B_sy;
  j[4]:short = 12032;
  j[0]:long@4 = 5L;
  j[7]:long@2 = 0L;
  j[13]:byte = 47;
  j[7]:int = c;
  j[10]:short@1 = rodata[56498]:ushort@1;
  (j + 12)[0]:byte = rodata[56500]:ubyte;
  (j + 20)[0]:long@2 = 0L;
  goto B_sy;
  label B_ty:
  d = a + 28;
  j = d + (j << 5);
  j[0]:long@4 = 5L;
  j[7]:int = c;
  j[4]:short = 12032;
  j[10]:short@1 = rodata[56498]:ushort@1;
  j[7]:long@2 = 0L;
  j[13]:byte = 47;
  (j + 12)[0]:byte = rodata[56500]:ubyte;
  (j + 20)[0]:long@2 = 0L;
  a[6]:int = d + (a[39]:int << 5);
  label B_sy:
  g[0]:int = 140;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_qy:
  if (e <= d) goto B_vy;
  if (d[0]:ubyte != 61) goto B_wy;
  a[45]:int = 144;
  a[0]:int = 1;
  a[47]:int = j + 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_wy:
  if (((q ^ -1) | eqz(c & 48)) & 1) goto B_vy;
  if (eqz(pm_is_whitespace(d[0]:ubyte))) goto B_uy;
  c = a[0]:int;
  label B_vy:
  a[45]:int = 143;
  a[0]:int = select_if(16, 1, c & 384);
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_uy:
  if (a[363]:ubyte) goto B_xy;
  pm_diagnostic_list_append(a + 232, a[46]:int, a[47]:int, 217);
  label B_xy:
  lex_mode_push_regexp(a, 0, 47);
  a[45]:int = 140;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_q:
  if (e <= d) goto B_dz;
  if (d[0]:ubyte != 58) goto B_cz;
  a[47]:int = j + 2;
  j = a[0]:int;
  if (j & 577) goto B_fz;
  if ((j & 2064) == 2064) goto B_fz;
  if (j & 512) goto B_fz;
  if (((j & 48) != 0 & q) != 1) goto B_ez;
  label B_fz:
  a[45]:int = 155;
  a[0]:int = 1;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_ez:
  a[45]:int = 26;
  a[0]:int = 256;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_dz:
  if (a[0]:ubyte & 14) goto B_az;
  j = 0;
  goto B_bz;
  label B_cz:
  if (a[0]:ubyte & 14) goto B_az;
  j = d[0]:ubyte;
  label B_bz:
  if (pm_is_whitespace(j & 255)) goto B_az;
  if (f[0] <= (j = c[0]:int)) goto B_yy;
  j = j[0]:ubyte;
  br_table[B_zy, B_az, B_yy, B_yy, B_yy, B_zy, ..B_yy](j + -34);
  label B_az:
  a[45]:int = 25;
  a[0]:int = 1;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_zy:
  lex_mode_push_string(a, j == 34, 0, 0, j);
  a[47]:int = a[47]:int + 1;
  label B_yy:
  a[45]:int = 152;
  a[0]:int = 128;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_p:
  a[45]:int = lex_numeric(a);
  a[0]:int = 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_o:
  if (e <= d) goto B_gz;
  if (d[0]:ubyte != 46) goto B_gz;
  f = a[0]:int;
  r = (f & 577) != 0 | (f & 2064) == 2064;
  c[0]:int = (d = j + 2);
  if (e <= d) goto B_hz;
  if (d[0]:ubyte != 46) goto B_hz;
  a[47]:int = j + 3;
  c = a[65]:int;
  if (eqz(c)) goto B_iz;
  j = c;
  loop L_jz {
    if (j[0]:int == 8) goto B_iz;
    j = j[1]:int;
    if (j) continue L_jz;
  }
  loop L_lz {
    if (c[0]:int == 7) goto B_kz;
    c = c[1]:int;
    if (eqz(c)) goto B_iz;
    continue L_lz;
  }
  label B_kz:
  a[45]:int = 157;
  a[0]:int = select_if(1, 4, f & 2);
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_iz:
  a[0]:int = 1;
  a[45]:int = select_if(157, 32, r);
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_hz:
  a[0]:int = 1;
  a[45]:int = select_if(156, 31, r);
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_gz:
  a[45]:int = 30;
  a[0]:int = 256;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_n:
  if (eqz(a[0]:ushort & 384)) goto B_mz;
  a[0]:int = 16;
  if (e <= d) goto B_nz;
  if (d[0]:ubyte != 64) goto B_nz;
  g[0]:int = 158;
  c[0]:int = j + 2;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_nz:
  g[0]:int = 118;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_mz:
  if (e <= d) goto B_oz;
  if (d[0]:ubyte != 61) goto B_pz;
  a[45]:int = 119;
  a[0]:int = 1;
  a[47]:int = j + 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_pz:
  if (d[0]:ubyte != 62) goto B_oz;
  a[45]:int = 120;
  a[0]:int = 8;
  a[47]:int = j + 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_oz:
  j = lex_state_spcarg_p(a, q & 1);
  d = a[0]:int;
  d = (d & 577) != 0 | (d & 2064) == 2064;
  if (d) goto B_qz;
  if (eqz(j)) goto B_qz;
  if (a[363]:ubyte) goto B_qz;
  pm_diagnostic_list_append(a + 232, a[46]:int, a[47]:int, 214);
  label B_qz:
  a[0]:int = 1;
  if ((d | j) != 1) goto B_rz;
  j = 0;
  if (f[0] <= (c = c[0]:int)) goto B_sz;
  j = c[0]:ubyte;
  label B_sz:
  g[0]:int = select_if(159, 158, pm_is_decimal_digit(j & 255));
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_rz:
  g[0]:int = 118;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_m:
  r = a[0]:int;
  if (eqz(r & 384)) goto B_tz;
  a[0]:int = 16;
  if (e <= d) goto B_uz;
  if (d[0]:ubyte != 64) goto B_uz;
  g[0]:int = 160;
  c[0]:int = j + 2;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_uz:
  g[0]:int = 137;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_tz:
  i = 0;
  if (e <= d) goto B_vz;
  if (d[0]:ubyte != 61) goto B_wz;
  a[45]:int = 138;
  a[0]:int = 1;
  a[47]:int = j + 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_wz:
  if (((q ^ -1) | eqz(r & 48)) & 1) goto B_vz;
  if (pm_is_whitespace(d[0]:ubyte)) goto B_vz;
  i = 1;
  if (a[363]:ubyte) goto B_vz;
  pm_diagnostic_list_append(a + 232, a[46]:int, a[47]:int, 215);
  label B_vz:
  j = a[0]:int;
  a[0]:int = 1;
  if (i) goto B_yz;
  if (j & 577) goto B_yz;
  if ((j & 2064) != 2064) goto B_xz;
  label B_yz:
  j = 0;
  if (f[0] <= (c = c[0]:int)) goto B_zz;
  j = c[0]:ubyte;
  label B_zz:
  if (eqz(pm_is_decimal_digit(j & 255))) goto B_aaa;
  a[47]:int = a[47]:int + 1;
  a[45]:int = lex_numeric(a);
  a[0]:int = 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_aaa:
  g[0]:int = 160;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_xz:
  g[0]:int = 137;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_l:
  if (e <= d) goto B_baa;
  if (d[0]:ubyte != 124) goto B_caa;
  c[0]:int = (d = j + 2);
  if (e <= d) goto B_daa;
  if (d[0]:ubyte != 61) goto B_daa;
  a[45]:int = 136;
  a[0]:int = 1;
  a[47]:int = j + 3;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_daa:
  if (eqz(a[0]:ubyte & 1)) goto B_eaa;
  g[0]:int = 133;
  c[0]:int = j + 1;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_eaa:
  a[45]:int = 135;
  a[0]:int = 1;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_caa:
  if (d[0]:ubyte != 61) goto B_baa;
  a[45]:int = 134;
  a[0]:int = 1;
  a[47]:int = j + 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_baa:
  a[45]:int = 133;
  a[0]:int = select_if(16, 1025, a[0]:int & 384);
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_k:
  if (e <= d) goto B_faa;
  if (d[0]:ubyte != 38) goto B_gaa;
  a[0]:int = 1;
  a[47]:int = (d = j + 2);
  if (e <= d) goto B_haa;
  if (d[0]:ubyte != 61) goto B_haa;
  g[0]:int = 6;
  c[0]:int = j + 3;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_haa:
  g[0]:int = 5;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_gaa:
  if (d[0]:ubyte != 61) goto B_iaa;
  a[45]:int = 8;
  a[0]:int = 1;
  a[47]:int = j + 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_iaa:
  if (d[0]:ubyte != 46) goto B_faa;
  a[45]:int = 7;
  a[0]:int = 256;
  a[47]:int = j + 2;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_faa:
  c = lex_state_spcarg_p(a, q & 1);
  j = a[0]:int;
  if (c) goto B_kaa;
  if (j & 577) goto B_kaa;
  c = 4;
  if ((j & 2064) != 2064) goto B_jaa;
  label B_kaa:
  c = 154;
  label B_jaa:
  a[45]:int = c;
  a[0]:int = select_if(16, 1, j & 384);
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_j:
  if (eqz(a[0]:ubyte & 14)) goto B_maa;
  a[0]:int = 1;
  j = 139;
  goto B_laa;
  label B_maa:
  if (d < e) goto B_paa;
  pm_diagnostic_list_append(n, j, d, 112);
  pm_string_shared_init(a + 328, a[46]:int + 1, a[47]:int);
  goto B_oaa;
  label B_paa:
  d = pm_is_whitespace(d[0]:ubyte);
  a[0]:int = 1;
  j = 139;
  if (d) goto B_laa;
  e = f[0];
  if (e <= (d = c[0]:int)) goto B_qaa;
  if (d[0]:ubyte != 92) goto B_qaa;
  a[0]:int = 2;
  a[47]:int = d + 1;
  pm_buffer_init_capacity(b + 8, 3);
  escape_read(a, b + 8, 4);
  pm_string_owned_init(a + 328, b[4]:int, b[2]:int);
  goto B_oaa;
  label B_qaa:
  d = call_indirect(d, e - d, (o[0])[0]:int);
  e = c[0]:int;
  r = call_indirect(e, f[0] - e, (o[0])[2]:int);
  e = f[0];
  c = c[0]:int;
  if (r) goto B_saa;
  if (e <= c) goto B_raa;
  if (c[0]:ubyte != 95) goto B_raa;
  label B_saa:
  c = c + d;
  if (c >= e) goto B_raa;
  if (eqz(a[358]:ubyte)) goto B_uaa;
  if (call_indirect(c, e - c, (o[0])[2]:int)) goto B_laa;
  e = c[0]:byte;
  if (e == 95) goto B_laa;
  if (e > -1) goto B_raa;
  c = call_indirect(c, f[0] - c, (o[0])[0]:int);
  goto B_taa;
  label B_uaa:
  r = c[0]:ubyte;
  f = i32_extend8_s(r);
  if (f < 0) goto B_naa;
  if (f == 95) goto B_laa;
  c = (32208 + r)[0]:ubyte >> 1 & 1;
  label B_taa:
  if (c) goto B_laa;
  label B_raa:
  a[0]:int = 2;
  a[47]:int = (j = a[47]:int + d);
  pm_string_shared_init(a + 328, a[46]:int + 1, j);
  label B_oaa:
  j = 23;
  goto B_laa;
  label B_naa:
  pm_encoding_utf_8_alnum(c, e - c);
  label B_laa:
  g[0]:int = j;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_i:
  j = a[0]:int;
  if (h & 255) goto B_waa;
  c = 1;
  if (j & 1032) goto B_vaa;
  label B_waa:
  c = (j & 48) != 0;
  label B_vaa:
  a[86]:int = 0;
  (b + 17)[0]:long@1 = 0L;
  (b + 10)[0]:byte = rodata[56497]:ubyte;
  a[39]:int = (j = a[39]:int + 1);
  b[11]:long@1 = 0L;
  b[4]:short = rodata[56495]:ushort@1;
  d = a[6]:int;
  if (j < 4) goto B_yaa;
  a[6]:int = (j = malloc(32));
  if (eqz(j)) goto B_xaa;
  j[14]:byte = 39;
  j[5]:int@2 = 1544169216;
  j[9]:byte = c;
  j[8]:byte = 0;
  j[0]:long@4 = 6L;
  j[15]:long@1 = b[4]:long@2;
  j[7]:int = d;
  (j + 20)[0]:long@1 = (b + 13)[0]:long@1;
  goto B_xaa;
  label B_yaa:
  e = a + 28;
  j = e + (j << 5);
  j[0]:long@4 = 6L;
  j[7]:int = d;
  j[14]:byte = 39;
  j[5]:int@2 = 1544169216;
  j[9]:byte = c;
  j[8]:byte = 0;
  j[15]:long@1 = b[4]:long@2;
  (j + 20)[0]:long@1 = (b + 8 + 5)[0]:long@1;
  a[6]:int = e + (a[39]:int << 5);
  label B_xaa:
  g[0]:int = 149;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_h:
  j = a[0]:int;
  if (eqz(j & 128)) goto B_zaa;
  a[45]:int = 9;
  a[0]:int = 8;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_zaa:
  if (eqz(j & 256)) goto B_aba;
  a[45]:int = 9;
  a[0]:int = select_if(32, 16, h & 255);
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_aba:
  a[86]:int = 0;
  a[39]:int = (j = a[39]:int + 1);
  c = a[6]:int;
  if (j < 4) goto B_cba;
  a[6]:int = (j = malloc(32));
  if (eqz(j)) goto B_bba;
  j[4]:long@4 = 0L;
  j[2]:long@4 = 2549138588721741825L;
  j[0]:long@4 = 6L;
  j[7]:int = c;
  (j + 24)[0]:int = 0;
  goto B_bba;
  label B_cba:
  d = a + 28;
  j = d + (j << 5);
  j[0]:long@4 = 6L;
  j[7]:int = c;
  j[4]:long@4 = 0L;
  j[2]:long@4 = 2549138588721741825L;
  (j + 24)[0]:int = 0;
  a[6]:int = d + (a[39]:int << 5);
  label B_bba:
  g[0]:int = 9;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_g:
  j = a[0]:int;
  if (h & 255) goto B_eba;
  c = 1;
  if (j & 1032) goto B_dba;
  label B_eba:
  c = (j & 48) != 0;
  label B_dba:
  a[86]:int = 0;
  a[39]:int = (j = a[39]:int + 1);
  d = a[6]:int;
  if (j < 4) goto B_gba;
  a[6]:int = (j = malloc(32));
  if (eqz(j)) goto B_fba;
  j[4]:long@4 = 0L;
  j[7]:short = 8994;
  j[5]:int@2 = 1544167936;
  j[9]:byte = c;
  j[8]:byte = 1;
  j[0]:long@4 = 6L;
  j[7]:int = d;
  (j + 24)[0]:int = 0;
  goto B_fba;
  label B_gba:
  e = a + 28;
  j = e + (j << 5);
  j[0]:long@4 = 6L;
  j[7]:int = d;
  j[4]:long@4 = 0L;
  j[7]:short = 8994;
  j[5]:int@2 = 1544167936;
  j[9]:byte = c;
  j[8]:byte = 1;
  (j + 24)[0]:int = 0;
  a[6]:int = e + (a[39]:int << 5);
  label B_fba:
  g[0]:int = 149;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_f:
  if (e <= d) goto B_jba;
  if (d[0]:ubyte != 62) goto B_iba;
  a[47]:int = (d = j + 2);
  a[0]:int = select_if(16, 1, a[0]:int & 384);
  f = 51;
  if (e <= d) goto B_kba;
  if (d[0]:ubyte != 61) goto B_kba;
  c[0]:int = j + 3;
  f = 52;
  label B_kba:
  g[0]:int = f;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_jba:
  a[0]:int = select_if(16, 1, a[0]:int & 384);
  e = 49;
  goto B_hba;
  label B_iba:
  a[0]:int = select_if(16, 1, a[0]:int & 384);
  e = 49;
  if (d[0]:ubyte != 61) goto B_hba;
  c[0]:int = j + 2;
  e = 50;
  label B_hba:
  g[0]:int = e;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_e:
  f = 16;
  q = a[0]:int;
  if (q & 384) goto B_lba;
  f = 1;
  if (eqz(q & 512)) goto B_lba;
  f = 1;
  a[356]:byte = 1;
  label B_lba:
  a[0]:int = f;
  if (r) goto B_mba;
  if (d[0]:ubyte != 61) goto B_mba;
  c[0]:int = (d = j + 2);
  if (e <= d) goto B_nba;
  if (d[0]:ubyte != 62) goto B_nba;
  g[0]:int = 114;
  c[0]:int = j + 3;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_nba:
  g[0]:int = 113;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_mba:
  g[0]:int = 112;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_d:
  j = 16;
  c = a[0]:int;
  if (c & 384) goto B_oba;
  j = 1;
  if (eqz(c & 512)) goto B_oba;
  j = 1;
  a[356]:byte = 1;
  label B_oba:
  a[45]:int = 115;
  a[0]:int = j;
  j = a[69]:int;
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_c:
  g[0]:int = 39;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  goto B_a;
  label B_b:
  g[0]:int = 1;
  j = m[0];
  if (eqz(j)) goto B_a;
  call_indirect(j[0]:int, a, g, j[1]:int);
  label B_a:
  stack_pointer = b + 32;
}

function parse_statements(a:int, b:int):int {
  var e:int;
  var g:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  var d:int_ptr = a + 180;
  loop L_b {
    e = d[0];
    if (e == 142) goto B_c;
    if (e != 121) goto B_a;
    label B_c:
    parser_lex(a);
    continue L_b;
  }
  label B_a:
  var f:{ a:short, b:int, c:int } = 0;
  if (context_terminator(b, d)) goto B_d;
  f = calloc(1, 24);
  if (eqz(f)) goto B_e;
  f.a = 137;
  f.c = (e = a[40]:int);
  f.b = e;
  e = malloc(8);
  if (eqz(e)) goto B_f;
  e[0]:int = b;
  g = a[65]:int;
  a[65]:int = e;
  e[1]:int = g;
  label B_f:
  var h:int = a + 244;
  var i:int_ptr = f + 12;
  loop L_g {
    e = parse_expression(a, 2, 1, 34);
    g = e[1]:int;
    if (eqz(i[0])) goto B_i;
    if (g >= f.b) goto B_h;
    label B_i:
    f.b = g;
    label B_h:
    g = (e + 8)[0]:int;
    if (g <= f.c) goto B_j;
    f.c = g;
    label B_j:
    pm_node_list_append(i, e);
    e[1]:short = e[1]:ushort | 32768;
    if (eqz(a[357]:ubyte)) goto B_m;
    if (eqz(context_terminator(b, d))) goto B_l;
    a[357]:byte = 0;
    goto B_l;
    label B_m:
    g = d[0];
    if (g == 142) goto B_o;
    if (g != 121) goto B_n;
    label B_o:
    loop L_p {
      parser_lex(a);
      e = a[45]:int;
      if (e == 121) continue L_p;
      if (e == 142) continue L_p;
    }
    if (eqz(context_terminator(b, d))) continue L_g;
    goto B_l;
    label B_n:
    if (context_terminator(b, d)) goto B_l;
    if (e[0]:ushort != 101) goto B_k;
    loop L_q {
      parser_lex(a);
      e = a[45]:int;
      if (e == 121) continue L_q;
      if (e == 142) continue L_q;
    }
    if (eqz(context_terminator(b, d))) continue L_g;
    label B_l:
    e = a[65]:int;
    d = e[1]:int;
    free(e);
    a[65]:int = d;
    goto B_d;
    label B_k:
    pm_diagnostic_list_append(h, e = a[44]:int, e, 81);
    a[42]:int = 2;
    a[43]:int = e;
    continue L_g;
  }
  label B_e:
  c[0] = 24;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_d:
  stack_pointer = c + 16;
  return f;
}

export function pm_serialize(a:int, b:int, c:int) {
  pm_buffer_append_string(c, 17020, 5);
  pm_buffer_append_byte(c, 0);
  pm_buffer_append_byte(c, 19);
  pm_buffer_append_byte(c, 0);
  pm_buffer_append_byte(c, 0);
  pm_serialize_content(a, b, c);
  pm_buffer_append_byte(c, 0);
}

export function pm_serialize_parse(a:int, b:int, c:int, d:int) {
  var e:long_ptr = stack_pointer - 416;
  stack_pointer = e;
  (e + 408)[0]:int = 0;
  (e + 400)[0]:long = 0L;
  (e + 392)[0]:long = 0L;
  (e + 384)[0]:long = 0L;
  (e + 376)[0]:long = 0L;
  e[46] = 0L;
  pm_options_read(e + 368, d);
  pm_parser_init(e, b, c, e + 368);
  d = pm_parse(e);
  pm_buffer_append_string(a, 17020, 5);
  pm_buffer_append_byte(a, 0);
  pm_buffer_append_byte(a, 19);
  pm_buffer_append_byte(a, 0);
  pm_buffer_append_byte(a, 0);
  pm_serialize_content(e, d, a);
  pm_buffer_append_byte(a, 0);
  pm_node_destroy(e, d);
  pm_parser_free(e);
  pm_options_free(e + 368);
  stack_pointer = e + 416;
}

export function pm_serialize_parse_comments(a:int, b:int, c:int, d:int) {
  var e:int = stack_pointer - 416;
  stack_pointer = e;
  (e + 408)[0]:int = 0;
  (e + 400)[0]:long = 0L;
  (e + 392)[0]:long = 0L;
  (e + 384)[0]:long = 0L;
  (e + 376)[0]:long = 0L;
  e[46]:long = 0L;
  pm_options_read(e + 368, d);
  pm_parser_init(e, b, c, e + 368);
  d = pm_parse(e);
  pm_buffer_append_string(a, 17020, 5);
  pm_buffer_append_byte(a, 0);
  pm_buffer_append_byte(a, 19);
  pm_buffer_append_byte(a, 0);
  pm_buffer_append_byte(a, 0);
  pm_serialize_encoding(e[66]:int, a);
  pm_buffer_append_varsint(a, e[85]:int);
  pm_serialize_comment_list(e, e + 200, a);
  pm_node_destroy(e, d);
  pm_parser_free(e);
  pm_options_free(e + 368);
  stack_pointer = e + 416;
}

export function pm_parser_errors_format(a:int_ptr, b:int, c:int) {
  var l:{ a:int, b:int, c:int, d:int }
  var m:int;
  var o:int;
  var n:int;
  var h:int;
  var k:int;
  var j:int_ptr;
  var i:int;
  var p:int;
  var s:{ a:int, b:int, c:int, d:int }
  var g:{ a:int, b:int }
  var d:int_ptr = stack_pointer - 96;
  stack_pointer = d;
  var e:int = a[61];
  if (eqz(e)) goto B_a;
  var f:int = calloc(e, 16);
  g = (a + 248)[0]:int;
  if (eqz(g)) goto B_b;
  h = a + 308;
  loop L_c {
    pm_newline_list_line_column(d + 88, h, g.b);
    pm_newline_list_line_column(d + 80, h, (g + 8)[0]:int);
    i = d[22];
    j = 0;
    e = a[61];
    if (eqz(e)) goto B_d;
    k = d[23];
    l = f;
    loop L_e {
      if (eqz(l.a)) goto B_d;
      m = (l + 4)[0]:int;
      if (m < i) goto B_f;
      if (m != i) goto B_d;
      if ((l + 8)[0]:int >= k) goto B_d;
      label B_f:
      l = l + 16;
      if (e != (j = j + 1)) continue L_e;
    }
    j = e;
    label B_d:
    l = f + (j << 4);
    memcpy(l + 16, l, e + (j ^ -1) << 4);
    if (i != d[20]) goto B_h;
    j = d[21];
    goto B_g;
    label B_h:
    j = a[80] + (i << 2);
    j = (j + 4)[0]:int + (j[0] ^ -1);
    label B_g:
    l.c = (m = d[23]);
    l.b = i;
    l.a = g;
    l.d = j + (m == j);
    g = g.a;
    if (g) continue L_c;
  }
  label B_b:
  l = ((e << 4) + f + -12)[0]:int + 1;
  if (l > 9) goto B_j;
  n = select_if(31984, 31867, c);
  o = select_if(8100, 27100, c);
  p = select_if(8077, 27088, c);
  goto B_i;
  label B_j:
  if (l > 99) goto B_k;
  n = select_if(31959, 31857, c);
  o = select_if(8120, 27099, c);
  p = select_if(8054, 27080, c);
  goto B_i;
  label B_k:
  if (l > 999) goto B_l;
  n = select_if(31933, 31846, c);
  o = select_if(8141, 27098, c);
  p = select_if(8031, 27072, c);
  goto B_i;
  label B_l:
  n = select_if(31906, 31834, c);
  if (l > 9999) goto B_m;
  o = select_if(8163, 27097, c);
  p = select_if(8008, 27064, c);
  goto B_i;
  label B_m:
  o = select_if(8186, 27096, c);
  p = select_if(7985, 27056, c);
  label B_i:
  var q:int = strlen(o);
  var r:int = strlen(n);
  if (eqz(e)) goto B_n;
  g = a[66];
  h = 0;
  l = -1;
  loop L_o {
    s = f + (h << 4);
    k = s.b;
    j = k - l;
    if (j < 2) goto B_p;
    if (j != 2) goto B_r;
    j = k + -1;
    goto B_q;
    label B_r:
    if (eqz(h)) goto B_s;
    if (j < 4) goto B_s;
    pm_buffer_append_string(b, n, r);
    label B_s:
    pm_buffer_append_string(b, 31825, 2);
    m = ((k << 2) + (e = a[80]) + -8)[0]:int;
    i = a[40];
    j = k + -1;
    if (j <= a[78]) goto B_u;
    e = a[41];
    goto B_t;
    label B_u:
    e = i + e[j]:int;
    label B_t:
    d[16] = j;
    pm_buffer_append_format(b, p, d + 64);
    pm_buffer_append_string(b, i = i + m, e - i);
    label B_q:
    pm_buffer_append_string(b, 31825, 2);
    m = a[80];
    i = m[j]:int;
    j = a[40];
    if (k <= a[78]) goto B_w;
    m = a[41];
    goto B_v;
    label B_w:
    m = j + m[k]:int;
    label B_v:
    d[12] = k;
    pm_buffer_append_format(b, p, d + 48);
    pm_buffer_append_string(b, j = j + i, m - j);
    label B_p:
    if (eqz(h)) goto B_y;
    if (k == l) goto B_x;
    label B_y:
    if (eqz(c)) goto B_aa;
    pm_buffer_append_string(b, 8210, 13);
    goto B_z;
    label B_aa:
    pm_buffer_append_string(b, 27105, 2);
    label B_z:
    m = a[80];
    i = m[k]:int;
    l = a[40];
    j = k + 1;
    if (j <= a[78]) goto B_ca;
    m = a[41];
    goto B_ba;
    label B_ca:
    m = l + m[j]:int;
    label B_ba:
    d[8] = j;
    pm_buffer_append_format(b, p, d + 32);
    pm_buffer_append_string(b, l = l + i, m - l);
    label B_x:
    pm_buffer_append_string(b, 31825, 2);
    pm_buffer_append_string(b, o, q);
    i = s.d;
    if (eqz(i)) goto B_da;
    m = a[40] + (a[80])[k]:int;
    e = s.c;
    l = 0;
    loop L_ea {
      if (l >= e) goto B_ga;
      pm_buffer_append_byte(b, 32);
      goto B_fa;
      label B_ga:
      if (eqz(c)) goto B_ha;
      pm_buffer_append_string(b, 7972, 12);
      goto B_fa;
      label B_ha:
      pm_buffer_append_byte(b, 94);
      label B_fa:
      j = m + l;
      j = call_indirect(j, a[41] - j, g.a);
      l = select_if(j, 1, j) + l;
      if (l < i) continue L_ea;
    }
    label B_da:
    pm_buffer_append_byte(b, 32);
    l = s.a[3]:int;
    pm_buffer_append_string(b, l, strlen(l));
    pm_buffer_append_byte(b, 10);
    if (h != a[61] + -1) goto B_ja;
    j = a[78] + -1;
    goto B_ia;
    label B_ja:
    j = (s + 20)[0]:int;
    label B_ia:
    if (j - k >= 2) goto B_la;
    l = k;
    goto B_ka;
    label B_la:
    pm_buffer_append_string(b, 31825, 2);
    s = a[80];
    e = s[l = k + 1]:int;
    m = a[40];
    i = k + 2;
    if (i <= a[78]) goto B_na;
    s = a[41];
    goto B_ma;
    label B_na:
    s = m + s[i]:int;
    label B_ma:
    d[4] = i;
    pm_buffer_append_format(b, p, d + 16);
    pm_buffer_append_string(b, m = m + e, s - m);
    if (j - l < 2) goto B_ka;
    pm_buffer_append_string(b, 31825, 2);
    e = a[80];
    m = e[i]:int;
    l = a[40];
    j = k + 3;
    if (j <= a[78]) goto B_pa;
    e = a[41];
    goto B_oa;
    label B_pa:
    e = l + e[j]:int;
    label B_oa:
    d[0] = j;
    pm_buffer_append_format(b, p, d);
    pm_buffer_append_string(b, l = l + m, e - l);
    l = i;
    label B_ka:
    h = h + 1;
    if (h < a[61]) continue L_o;
  }
  label B_n:
  free(f);
  stack_pointer = d + 96;
  return ;
  label B_a:
  assert_fail(26288, 13402, 17912, 4158);
  unreachable;
}

function parser_lex_magic_comment_encoding(a:int_ptr) {
  var c:ubyte_ptr;
  var f:int;
  var b:int = (a + 188)[0]:int;
  if (b - (c = (a + 184)[0]:int + 1) < 7) goto B_a;
  loop L_b {
    var d:ubyte_ptr = c + 6;
    var e:int = 1;
    f = c[6];
    br_table[B_d, B_e, B_e, B_d, B_e, B_e, B_e, B_e, B_e, B_c, B_i, B_e, B_e, B_f, B_e, B_h, B_e, B_e, B_e, B_e, B_g, B_j, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_c, B_i, B_e, B_e, B_f, B_e, B_h, B_e, B_e, B_e, B_e, B_g, B_j, ..B_e](
      f + -58);
    label B_j:
    d = c + 5;
    goto B_c;
    label B_i:
    d = c + 4;
    goto B_c;
    label B_h:
    d = c + 3;
    goto B_c;
    label B_g:
    d = c + 2;
    goto B_c;
    label B_f:
    d = c + 1;
    goto B_c;
    label B_e:
    e = 0;
    if (eqz(pm_is_whitespace(f))) goto B_c;
    label B_d:
    if (pm_strncasecmp(c, 9485, 6)) goto B_c;
    loop L_k {
      d = d + 1;
      if (d >= b) goto B_a;
      if (pm_is_whitespace(d[0])) continue L_k;
      if (eqz(e & 1)) goto B_l;
      c = d;
      loop L_n {
        e = c[0];
        if (e == 45) goto B_o;
        if (e == 95) goto B_o;
        if (eqz(call_indirect(c, 1, (a[66])[2]:int))) goto B_m;
        label B_o:
        c = c + 1;
        if (c < b) continue L_n;
      }
      label B_m:
      if (parser_lex_magic_comment_encoding_value(a, d, c)) goto B_a;
      pm_diagnostic_list_append(a + 244, d, c, 115);
      return ;
      label B_l:
      br_table[B_p, B_a, B_a, B_p, ..B_a](d[0] + -58)
      label B_p:
      e = 1;
      d = d + 1;
      continue L_k;
    }
    label B_c:
    c = d;
    if (b - d >= 7) continue L_b;
  }
  label B_a:
}

function lex_embdoc(a:int_ptr):int {
  var c:{ a:int, b:int }
  var h:int;
  var b:int = a[41];
  var d:ubyte_ptr = b - (c = (a + 188)[0]:int);
  if (d <= -1) goto B_c;
  c = memchr(c, 10, d);
  if (eqz(c)) goto B_d;
  pm_newline_list_append(a + 308, c);
  b = c + 1;
  label B_d:
  var e:int = a + 180;
  a[45] = 33;
  a[47] = b;
  b = a[69];
  if (eqz(b)) goto B_e;
  call_indirect(b[0]:int, a, e, b[1]:int);
  label B_e:
  var f:int = 1;
  var g:int_ptr = calloc(16, 1);
  if (eqz(g)) goto B_f;
  f = 1;
  g[3] = 1;
  g[2] = (b = a[47]);
  g[1] = (h = (a + 184)[0]:int);
  d = b + 4;
  if (d > (c = a[41])) goto B_i;
  h = a + 308;
  loop L_j {
    a[46] = b;
    if (b[0]:int@1 != 1684956477) goto B_k;
    if (d == c) goto B_l;
    d = pm_is_whitespace(d[0]);
    c = a[41];
    b = a[47];
    if (eqz(d)) goto B_k;
    label B_l:
    d = c - b;
    if (d <= -1) goto B_b;
    b = memchr(b, 10, d);
    if (eqz(b)) goto B_m;
    pm_newline_list_append(h, b);
    c = b + 1;
    label B_m:
    f = 34;
    a[45] = 34;
    a[47] = c;
    b = a[69];
    if (eqz(b)) goto B_g;
    call_indirect(b[0]:int, a, e, b[1]:int);
    f = 34;
    goto B_h;
    label B_k:
    d = c - b;
    if (d <= -1) goto B_a;
    d = memchr(b, 10, d);
    b = c;
    if (eqz(d)) goto B_n;
    pm_newline_list_append(h, d);
    b = d + 1;
    label B_n:
    a[45] = 35;
    a[47] = b;
    c = a[69];
    if (eqz(c)) goto B_o;
    call_indirect(c.a, a, e, c.b);
    b = a[47];
    label B_o:
    d = b + 4;
    if (d <= (c = a[41])) continue L_j;
  }
  h = a[46];
  label B_i:
  pm_diagnostic_list_append(a + 244, h, b, 65);
  label B_h:
  c = a[47];
  label B_g:
  g[2] = c;
  pm_list_append(a + 200, g);
  label B_f:
  return f;
  label B_c:
  assert_fail(26245, 13402, 6354, 11805);
  unreachable;
  label B_b:
  assert_fail(26245, 13402, 6354, 11805);
  unreachable;
  label B_a:
  assert_fail(26245, 13402, 6354, 11805);
  return unreachable;
}

function is_identifier(a:int, b:int):int {
  var d:int;
  var c:int;
  if (eqz(a[358]:ubyte)) goto B_b;
  c = call_indirect(b, a[41]:int - b, (a[66]:int)[2]:int);
  if (c) goto B_a;
  c = 1;
  d = b[0]:byte;
  if (d == 95) goto B_a;
  c = 0;
  if (d > -1) goto B_a;
  return call_indirect(b, a[41]:int - b, (a[66]:int)[0]:int);
  label B_b:
  var e:int = b[0]:ubyte;
  d = i32_extend8_s(e);
  if (d < 0) goto B_c;
  c = 1;
  if (d == 95) goto B_a;
  return (32208 + e)[0]:ubyte >> 1 & 1;
  label B_c:
  pm_encoding_utf_8_alnum(b, a[41]:int - b);
  c = 1;
  label B_a:
  return c;
}

function match_eol(a:int_ptr):int {
  var c:ubyte_ptr;
  var b:int = a[41];
  if (b <= (c = (a + 188)[0]:int)) goto B_b;
  a = 1;
  br_table[B_a, B_b, B_b, B_c, ..B_b](c[0] + -10)
  label B_c:
  if (b <= (c = c + 1)) goto B_b;
  a = 2;
  if (c[0] == 10) goto B_a;
  label B_b:
  a = 0;
  label B_a:
  return a;
}

function pm_lex_percent_delimiter(a:int_ptr):int {
  var c:ubyte_ptr;
  var e:ubyte_ptr;
  var b:int;
  b = a[41];
  if (b <= (c = (a + 188)[0]:int)) goto B_c;
  var d:int = 1;
  br_table[B_d, B_c, B_c, B_e, ..B_c](c[0] + -10)
  label B_e:
  if (b <= (e = c + 1)) goto B_c;
  d = 2;
  if (e[0] != 10) goto B_c;
  label B_d:
  e = a[49];
  if (eqz(e)) goto B_g;
  if (e > b) goto B_a;
  a[49] = 0;
  a[48] = e;
  goto B_f;
  label B_g:
  pm_newline_list_append(a + 308, c + d + -1);
  c = a[47];
  label B_f:
  b = c[0];
  a[47] = c + d;
  goto B_b;
  label B_c:
  a[47] = c + 1;
  b = c[0];
  label B_b:
  return b & 255;
  label B_a:
  assert_fail(12716, 13402, 8064, 12691);
  return unreachable;
}

function lex_mode_push_list(a:int_ptr, b:int, c:int) {
  var e:int;
  var d:int = stack_pointer - 32;
  stack_pointer = d;
  if (c > 90) goto B_c;
  e = c;
  if (c == 40) goto B_a;
  e = c;
  if (c != 60) goto B_b;
  goto B_a;
  label B_c:
  e = c;
  if (c == 91) goto B_a;
  e = c;
  if (c == 123) goto B_a;
  label B_b:
  e = 0;
  label B_a:
  if (c > 90) goto B_f;
  if (c != 40) goto B_e;
  c = 41;
  goto B_d;
  label B_f:
  if (c == 123) goto B_g;
  if (c != 91) goto B_d;
  c = 93;
  goto B_d;
  label B_g:
  c = 125;
  goto B_d;
  label B_e:
  if (c != 60) goto B_d;
  c = 62;
  label B_d:
  (d + 20)[0]:long@4 = 0L;
  (d + 12)[0]:long@4 = 0L;
  var f:int = d + 18;
  f[0]:int@1 = rodata[56511]:int@1;
  (d + 28)[0]:int = 0;
  d[1]:long@4 = 0L;
  var g:int = 8;
  (d + 8)[0]:byte = b;
  d[11]:long@1 = rodata[56504]:long@1;
  f[0]:byte = c;
  d[0]:int = 4;
  d[10]:byte = c;
  d[9]:byte = e;
  if (eqz(b)) goto B_h;
  d[19]:byte = 35;
  g = 9;
  label B_h:
  if (eqz(e)) goto B_i;
  (d + 11 + g)[0]:byte = e;
  label B_i:
  a[86] = 0;
  c = a + 156;
  c[0]:int = (c = c[0]:int + 1);
  e = a[6];
  if (c < 4) goto B_k;
  a[6] = (c = malloc(32));
  if (eqz(c)) goto B_j;
  c[0]:long@4 = d[0]:long;
  c[7]:int = e;
  (c + 24)[0]:int = (d + 24)[0]:int;
  (c + 16)[0]:long@4 = (d + 16)[0]:long;
  (c + 8)[0]:long@4 = (d + 8)[0]:long;
  goto B_j;
  label B_k:
  b = a + 28;
  c = b + (c << 5);
  c[0]:long@4 = d[0]:long;
  (c + 24)[0]:int = (d + 24)[0]:int;
  (c + 16)[0]:long@4 = (d + 16)[0]:long;
  (c + 8)[0]:long@4 = (d + 8)[0]:long;
  c[7]:int = e;
  a[6] = b + (a[39] << 5);
  label B_j:
  stack_pointer = d + 32;
}

function lex_mode_push_list_eof(a:int_ptr) {
  var b:int = stack_pointer - 16;
  stack_pointer = b;
  a[86] = 0;
  (b + 13)[0]:short@1 = 0;
  (b + 4)[0]:byte = rodata[56514]:ubyte;
  var c:int = a + 156;
  c[0]:int = (c = c[0]:int + 1);
  b[5]:long@1 = 0L;
  b[1]:short = rodata[56512]:ushort@1;
  var d:int = a[6];
  if (c < 4) goto B_b;
  a[6] = (c = malloc(32));
  if (eqz(c)) goto B_a;
  c[0]:long@4 = 4L;
  c[18]:byte = 0;
  c[19]:long@1 = b[1]:long@2;
  c[7]:int = d;
  (c + 7)[0]:int@1 = 0;
  c[11]:int@1 = rodata[56504]:int@1;
  (c + 14)[0]:int@1 = rodata[56507]:int@1;
  (c + 27)[0]:byte = (b + 10)[0]:ubyte;
  goto B_a;
  label B_b:
  var e:int = a + 28;
  c = e + (c << 5);
  c[0]:long@4 = 4L;
  c[7]:int = d;
  c[11]:int@1 = rodata[56504]:int@1;
  c[18]:byte = 0;
  c[19]:long@1 = b[1]:long@2;
  (c + 7)[0]:int@1 = 0;
  (c + 14)[0]:int@1 = rodata[56507]:int@1;
  (c + 27)[0]:byte = (b + 10)[0]:ubyte;
  a[6] = e + (a[39] << 5);
  label B_a:
  stack_pointer = b + 16;
}

function lex_mode_push_regexp(a:int_ptr, b:int, c:int) {
  var d:int = a + 156;
  d[0]:int = (d = d[0]:int + 1);
  var e:int = a[6];
  if (d < 4) goto B_b;
  a[6] = (d = malloc(32));
  if (eqz(d)) goto B_a;
  d[9]:byte = c;
  d[8]:byte = b;
  d[0]:long@4 = 5L;
  d[15]:long@1 = 0L;
  d[14]:byte = b;
  d[13]:byte = c;
  d[7]:int = e;
  d[10]:short@1 = rodata[56498]:ushort@1;
  (d + 12)[0]:byte = rodata[56500]:ubyte;
  (d + 20)[0]:long@1 = 0L;
  return ;
  label B_b:
  var f:int = a + 28;
  d = f + (d << 5);
  d[0]:long@4 = 5L;
  d[7]:int = e;
  d[9]:byte = c;
  d[8]:byte = b;
  d[10]:short@1 = rodata[56498]:ushort@1;
  d[15]:long@1 = 0L;
  d[14]:byte = b;
  d[13]:byte = c;
  (d + 12)[0]:byte = rodata[56500]:ubyte;
  (d + 20)[0]:long@1 = 0L;
  a[6] = f + (a[39] << 5);
  label B_a:
}

function lex_mode_push_string_eof(a:int_ptr) {
  var b:int = stack_pointer - 32;
  stack_pointer = b;
  a[86] = 0;
  (b + 23)[0]:long@1 = 0L;
  (b + 16)[0]:byte = rodata[56497]:ubyte;
  var c:int = a + 156;
  c[0]:int = (c = c[0]:int + 1);
  b[17]:long@1 = 0L;
  b[7]:short = rodata[56495]:ushort@1;
  var d:int = a[6];
  if (c < 4) goto B_b;
  a[6] = (c = malloc(32));
  if (eqz(c)) goto B_a;
  c[14]:byte = 0;
  c[6]:short = 23562;
  c[1]:long@4 = 0L;
  c[0]:int = 6;
  c[15]:long@1 = b[7]:long@2;
  c[7]:int = d;
  (c + 20)[0]:long@1 = (b + 19)[0]:long@1;
  goto B_a;
  label B_b:
  var e:int = a + 28;
  c = e + (c << 5);
  c[0]:int = 6;
  c[7]:int = d;
  c[14]:byte = 0;
  c[6]:short = 23562;
  c[1]:long@4 = 0L;
  c[15]:long@1 = b[7]:long@2;
  (c + 20)[0]:long@1 = (b + 14 + 5)[0]:long@1;
  a[6] = e + (a[39] << 5);
  label B_a:
  stack_pointer = b + 32;
}

function lex_mode_push_string(a:int_ptr, b:int, c:int, d:int, e:int) {
  var f:int = stack_pointer - 32;
  stack_pointer = f;
  var g:int = f + 12;
  g[0]:long@4 = 0L;
  g[0]:int = rodata[56492]:int@1;
  (f + 28)[0]:int = 0;
  (f + 20)[0]:long@4 = 0L;
  f[1]:long@4 = 0L;
  (f + 8)[0]:byte = b;
  (f + 16)[0]:short@1 = rodata[56496]:ushort@1;
  f[0]:int = 6;
  f[11]:byte = e;
  f[10]:byte = d;
  f[9]:byte = c;
  f[14]:byte = e;
  e = 3;
  if (eqz(b)) goto B_a;
  f[15]:byte = 35;
  e = 4;
  label B_a:
  if (eqz(d)) goto B_b;
  (g + e)[0]:byte = d;
  label B_b:
  a[86] = 0;
  d = a + 156;
  d[0]:int = (d = d[0]:int + 1);
  b = a[6];
  if (d < 4) goto B_d;
  a[6] = (d = malloc(32));
  if (eqz(d)) goto B_c;
  d[0]:long@4 = f[0]:long;
  d[7]:int = b;
  (d + 24)[0]:int = (f + 24)[0]:int;
  (d + 16)[0]:long@4 = (f + 16)[0]:long;
  (d + 8)[0]:long@4 = (f + 8)[0]:long;
  goto B_c;
  label B_d:
  e = a + 28;
  d = e + (d << 5);
  d[0]:long@4 = f[0]:long;
  (d + 24)[0]:int = (f + 24)[0]:int;
  (d + 16)[0]:long@4 = (f + 16)[0]:long;
  (d + 8)[0]:long@4 = (f + 8)[0]:long;
  d[7]:int = b;
  a[6] = e + (a[39] << 5);
  label B_c:
  stack_pointer = f + 32;
}

function parser_flush_heredoc_end(a:int_ptr) {
  var b:int;
  b = a[49];
  if (b <= a[41]) goto B_a;
  assert_fail(12716, 13402, 8064, 12691);
  unreachable;
  label B_a:
  a[49] = 0;
  a[48] = b;
}

function pm_token_buffer_flush(a:int, b:int_ptr) {
  var c:int;
  c = b[3];
  if (c) goto B_a;
  pm_string_shared_init(a + 328, (a + 184)[0]:int, (a + 188)[0]:int);
  return ;
  label B_a:
  pm_buffer_append_bytes(b, c, (a + 188)[0]:int - c);
  pm_string_owned_init(a + 328, b[2], b[0]);
}

function escape_read(a:int_ptr, b:int, c:int_ptr) {
  var f:int_ptr;
  var g:int;
  var h:ubyte_ptr;
  var i:ubyte_ptr;
  var l:ubyte_ptr;
  var j:int;
  var k:int;
  var m:int;
  var d:int_ptr = stack_pointer - 208;
  stack_pointer = d;
  var e:int = a[41];
  if (e <= (g = (f = a + 188)[0])) goto B_a;
  loop L_h {
    h = g[0]:ubyte;
    br_table[B_n, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_aa, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_q, B_q, B_q, B_q, B_q, B_q, B_q, B_q, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_k, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_l, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_ba, B_m, B_m, B_m, B_m, B_z, B_y, B_j, B_m, B_x, B_w, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_v, B_m, B_m, B_m, B_u, B_t, B_s, B_o, B_r, B_m, B_p, ..B_m](
      h + -13);
    label B_ba:
    f[0] = (e = g + 1);
    g = i32_extend8_s(select_if(28, 92, c & 1) | (c << 6 & 128));
    if (g > -1) goto B_ca;
    if (a[86] != 49568) goto B_da;
    c = a[66];
    if (c == 49568) goto B_da;
    f = (a + 184)[0]:int;
    d[4] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 16);
    label B_da:
    a[86] = a[66];
    label B_ca:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_aa:
    f[0] = (e = g + 1);
    g = i32_extend8_s(select_if(7, 39, c & 1) | (c << 6 & 128));
    if (g > -1) goto B_ea;
    if (a[86] != 49568) goto B_fa;
    c = a[66];
    if (c == 49568) goto B_fa;
    f = (a + 184)[0]:int;
    d[8] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 32);
    label B_fa:
    a[86] = a[66];
    label B_ea:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_z:
    f[0] = (e = g + 1);
    g = i32_extend8_s((c << 6 & 128) | 7);
    if (g > -1) goto B_ga;
    if (a[86] != 49568) goto B_ha;
    c = a[66];
    if (c == 49568) goto B_ha;
    f = (a + 184)[0]:int;
    d[12] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 48);
    label B_ha:
    a[86] = a[66];
    label B_ga:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_y:
    f[0] = (e = g + 1);
    g = i32_extend8_s((c << 6 & 128) | 8);
    if (g > -1) goto B_ia;
    if (a[86] != 49568) goto B_ja;
    c = a[66];
    if (c == 49568) goto B_ja;
    f = (a + 184)[0]:int;
    d[16] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 64);
    label B_ja:
    a[86] = a[66];
    label B_ia:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_x:
    f[0] = (e = g + 1);
    g = i32_extend8_s((c << 6 & 128) | 27);
    if (g > -1) goto B_ka;
    if (a[86] != 49568) goto B_la;
    c = a[66];
    if (c == 49568) goto B_la;
    f = (a + 184)[0]:int;
    d[20] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 80);
    label B_la:
    a[86] = a[66];
    label B_ka:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_w:
    f[0] = (e = g + 1);
    g = i32_extend8_s((c << 6 & 128) | 12);
    if (g > -1) goto B_ma;
    if (a[86] != 49568) goto B_na;
    c = a[66];
    if (c == 49568) goto B_na;
    f = (a + 184)[0]:int;
    d[24] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 96);
    label B_na:
    a[86] = a[66];
    label B_ma:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_v:
    f[0] = (e = g + 1);
    g = i32_extend8_s((c << 6 & 128) | 10);
    if (g > -1) goto B_oa;
    if (a[86] != 49568) goto B_pa;
    c = a[66];
    if (c == 49568) goto B_pa;
    f = (a + 184)[0]:int;
    d[28] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 112);
    label B_pa:
    a[86] = a[66];
    label B_oa:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_u:
    f[0] = (e = g + 1);
    g = i32_extend8_s((c << 6 & 128) | 13);
    if (g > -1) goto B_qa;
    if (a[86] != 49568) goto B_ra;
    c = a[66];
    if (c == 49568) goto B_ra;
    f = (a + 184)[0]:int;
    d[32] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 128);
    label B_ra:
    a[86] = a[66];
    label B_qa:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_t:
    f[0] = (h = g + 1);
    g = (c << 5 & 32) | (c << 6 & -128);
    e = g ^ 32;
    if (i32_extend8_s(g) > -1) goto B_sa;
    if (a[86] != 49568) goto B_ta;
    g = a[66];
    if (g == 49568) goto B_ta;
    c = (a + 184)[0]:int;
    d[36] = g[4]:int;
    pm_diagnostic_list_append_format(a + 244, c, h, 138, d + 144);
    label B_ta:
    a[86] = a[66];
    label B_sa:
    pm_buffer_append_byte(b, e & 255);
    goto B_a;
    label B_s:
    f[0] = (e = g + 1);
    g = i32_extend8_s((c << 6 & 128) | 9);
    if (g > -1) goto B_ua;
    if (a[86] != 49568) goto B_va;
    c = a[66];
    if (c == 49568) goto B_va;
    f = (a + 184)[0]:int;
    d[40] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 160);
    label B_va:
    a[86] = a[66];
    label B_ua:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_r:
    f[0] = (e = g + 1);
    g = i32_extend8_s((c << 6 & 128) | 11);
    if (g > -1) goto B_wa;
    if (a[86] != 49568) goto B_xa;
    c = a[66];
    if (c == 49568) goto B_xa;
    f = (a + 184)[0]:int;
    d[44] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d + 176);
    label B_xa:
    a[86] = a[66];
    label B_wa:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_q:
    f[0] = (g = g + 1);
    c = 0;
    if (e <= g) goto B_ya;
    c = g[0]:ubyte;
    label B_ya:
    g = h + -48;
    if (eqz(pm_is_octal_digit(c & 255))) goto B_za;
    e = a[47];
    c = e[0]:ubyte;
    a[47] = (e = e + 1);
    g = g << 3;
    h = c + -48;
    c = 0;
    if (a[41] <= e) goto B_ab;
    c = e[0]:ubyte;
    label B_ab:
    g = h | g;
    if (eqz(pm_is_octal_digit(c & 255))) goto B_bb;
    e = f[0];
    c = e[0]:ubyte;
    f[0] = e + 1;
    g = c + -48 | g << 3;
    label B_bb:
    if (i32_extend8_s(g) > -1) goto B_za;
    if (a[86] != 49568) goto B_cb;
    e = a[66];
    if (e == 49568) goto B_cb;
    c = (a + 184)[0]:int;
    f = a[47];
    d[48] = e[4]:int;
    pm_diagnostic_list_append_format(a + 244, c, f, 138, d + 192);
    label B_cb:
    a[86] = a[66];
    label B_za:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_p:
    f[0] = (i = g + 1);
    h = 0;
    if (e <= i) goto B_db;
    h = i[0];
    label B_db:
    e = h & 255;
    if (eqz(pm_is_hexadecimal_digit(e))) goto B_eb;
    a[47] = (i = a[47] + 1);
    j = h + -48;
    k = e < 58;
    h = (h & 7) + 9;
    e = 0;
    if (a[41] <= i) goto B_fb;
    e = i[0];
    label B_fb:
    h = select_if(j, h, k);
    i = e & 255;
    if (eqz(pm_is_hexadecimal_digit(i))) goto B_gb;
    f[0] = f[0] + 1;
    h = select_if(e + -48, (e & 7) + 9, i < 58) | h << 4;
    label B_gb:
    if (eqz(c & 8)) goto B_hb;
    pm_buffer_append_bytes(b, g = g + -1, f[0] - g);
    goto B_a;
    label B_hb:
    escape_write_byte_encoded(a, b, h & 255);
    goto B_a;
    label B_eb:
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, a[47], 72);
    goto B_a;
    label B_o:
    f[0] = (h = g + 1);
    if (g + 5 > e) goto B_ib;
    if (eqz(pm_is_hexadecimal_digit(h[0]))) goto B_ib;
    if (eqz(pm_is_hexadecimal_digit((f[0])[1]:ubyte))) goto B_ib;
    if (eqz(pm_is_hexadecimal_digit((f[0])[2]:ubyte))) goto B_ib;
    if (eqz(pm_is_hexadecimal_digit((f[0])[3]:ubyte))) goto B_ib;
    e = g + -1;
    g = f[0];
    if (eqz(c & 8)) goto B_kb;
    pm_buffer_append_bytes(b, e, g - e + 4);
    goto B_jb;
    label B_kb:
    escape_write_unicode(
      a,
      b,
      c & 255,
      e,
      g + 4,
      (((select_if((c = g[0]:ubyte) + -48, (c & 7) + 9, c < 58) & 255) << 8 |
        (select_if((c = g[1]:ubyte) + -48, (c & 7) + 9, c < 58) & 255) << 4) |
       (select_if((c = g[2]:ubyte) + -48, (c & 7) + 9, c < 58) & 255)) <<
      4 |
      (select_if((g = g[3]:ubyte) + -48, (g & 7) + 9, g < 58) & 255));
    label B_jb:
    f[0] = f[0] + 4;
    goto B_a;
    label B_ib:
    g = a[41];
    if (g <= (l = a[47])) goto B_c;
    if (l[0] != 123) goto B_c;
    a[47] = (e = l + 1);
    a[47] = (h = pm_strspn_whitespace(e, g - e) + a[47]);
    if (h < (g = a[41])) goto B_lb;
    m = c & 255;
    goto B_b;
    label B_lb:
    var n:int = c & 8;
    var o:int = c & 4;
    m = c & 255;
    var p:int = a + 244;
    var q:int = 0;
    var r:int = 0;
    loop L_nb {
      if (h[0] == 125) goto B_mb;
      i = pm_strspn_hexadecimal_digit(h, g - h);
      if (i < 7) goto B_pb;
      pm_diagnostic_list_append(p, h, h + i, 78);
      goto B_ob;
      label B_pb:
      if (i) goto B_ob;
      pm_diagnostic_list_append(p, h, h, 75);
      goto B_a;
      label B_ob:
      f[0] = (k = f[0] + i);
      var s:int = select_if(h, q, (r = r + 1) == 2);
      if (n) goto B_qb;
      var t:int = i & 1;
      g = 0;
      e = 0;
      if (i == 1) goto B_rb;
      j = i & -2;
      g = 0;
      e = 0;
      loop L_sb {
        e = 
          (select_if(e << 4, e, g) |
           (select_if((e = (i = h + g)[0]) + -48, (e & 7) + 9, e < 58) & 255)) <<
          4 |
          (select_if((e = (i + 1)[0]:ubyte) + -48, (e & 7) + 9, e < 58) & 255);
        if (j != (g = g + 2)) continue L_sb;
      }
      label B_rb:
      if (eqz(t)) goto B_tb;
      e = 
        select_if(e << 4, e, g) |
        (select_if((g = (h + g)[0]:ubyte) + -48, (g & 7) + 9, g < 58) & 255);
      label B_tb:
      escape_write_unicode(a, b, c & 255, h, k, e);
      k = a[47];
      label B_qb:
      q = select_if(s, q, o);
      a[47] = (h = pm_strspn_whitespace(k, a[41] - k) + a[47]);
      if (h < (g = a[41])) continue L_nb;
    }
    label B_mb:
    if (eqz(o)) goto B_b;
    if (r < 2) goto B_b;
    pm_diagnostic_list_append(a + 244, q, h + -1, 77);
    g = a[41];
    h = a[47];
    goto B_b;
    label B_n:
    if (e <= (h = g + 1)) goto B_m;
    if (h[0] != 10) goto B_m;
    a[47] = g + 2;
    escape_write_byte_encoded(a, b, (c << 6 | 10) & 138);
    goto B_a;
    label B_m:
    f[0] = (e = g + 1);
    g = g[0]:byte;
    if (g > -1) goto B_ub;
    if (a[86] != 49568) goto B_vb;
    c = a[66];
    if (c == 49568) goto B_vb;
    f = (a + 184)[0]:int;
    d[0] = c[4];
    pm_diagnostic_list_append_format(a + 244, f, e, 138, d);
    label B_vb:
    a[86] = a[66];
    label B_ub:
    pm_buffer_append_byte(b, g & 255);
    goto B_a;
    label B_l:
    f[0] = (h = g + 1);
    if (e <= h) goto B_xb;
    if (h[0] == 45) goto B_wb;
    label B_xb:
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, h, 73);
    goto B_a;
    label B_wb:
    f[0] = (j = g + 2);
    if (j != e) goto B_yb;
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, e, 73);
    goto B_a;
    label B_yb:
    if (e > j) goto B_cc;
    h = 0;
    goto B_bc;
    label B_cc:
    h = j[0]:byte;
    if (h != 92) goto B_dc;
    h = 2;
    i = 3;
    if (eqz(c & 2)) goto B_i;
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, j, 74);
    goto B_a;
    label B_dc:
    if (h < 0) goto B_ac;
    label B_bc:
    if (((h & 255) + 57552)[0]:ubyte) goto B_zb;
    label B_ac:
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, j, 73);
    goto B_a;
    label B_zb:
    a[47] = g + 3;
    escape_write_byte(a, b, c & 255, (select_if(h & 31, h, c & 1) | 128) & 255);
    goto B_a;
    label B_k:
    f[0] = (h = g + 1);
    if (e <= h) goto B_fc;
    if (h[0] == 45) goto B_ec;
    label B_fc:
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, h, 70);
    goto B_a;
    label B_ec:
    f[0] = (j = g + 2);
    if (j != e) goto B_gc;
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, e, 70);
    goto B_a;
    label B_gc:
    if (e > j) goto B_kc;
    e = 0;
    goto B_jc;
    label B_kc:
    h = j[0]:ubyte;
    if (h == 92) goto B_mc;
    if (h != 63) goto B_lc;
    a[47] = g + 3;
    escape_write_byte(a,
                      b,
                      c & 255,
                      select_if(31, 127, c & 1) | (c << 6 & 128));
    goto B_a;
    label B_mc:
    h = 1;
    i = 3;
    if (eqz(c & 1)) goto B_i;
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, j, 71);
    goto B_a;
    label B_lc:
    e = i32_extend8_s(h);
    if (e < 0) goto B_ic;
    label B_jc:
    if (((e & 255) + 57552)[0]:ubyte) goto B_hc;
    label B_ic:
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, j, 70);
    goto B_a;
    label B_hc:
    a[47] = g + 3;
    escape_write_byte(a, b, c & 255, ((e & 31) | c << 6) & 159);
    goto B_a;
    label B_j:
    f[0] = (j = g + 1);
    if (j != e) goto B_nc;
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, e, 70);
    goto B_a;
    label B_nc:
    if (e > j) goto B_oc;
    e = 0;
    goto B_f;
    label B_oc:
    h = j[0]:ubyte;
    if (h == 92) goto B_pc;
    if (h != 63) goto B_g;
    a[47] = g + 2;
    escape_write_byte(a,
                      b,
                      c & 255,
                      select_if(31, 127, c & 1) | (c << 6 & 128));
    goto B_a;
    label B_pc:
    h = 1;
    i = 2;
    if (eqz(c & 1)) goto B_i;
    pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, j, 71);
    goto B_a;
    label B_i:
    f[0] = (g = g + i);
    c = c | h;
    if (e > g) continue L_h;
    goto B_a;
  }
  label B_g:
  e = i32_extend8_s(h);
  if (e < 0) goto B_e;
  label B_f:
  if (((e & 255) + 57552)[0]:ubyte) goto B_d;
  label B_e:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, j, 70);
  goto B_a;
  label B_d:
  a[47] = g + 2;
  escape_write_byte(a, b, c & 255, ((e & 31) | c << 6) & 159);
  goto B_a;
  label B_c:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, l, 75);
  goto B_a;
  label B_b:
  e = l + -2;
  if (g <= h) goto B_rc;
  if (h[0] != 125) goto B_rc;
  f[0] = h + 1;
  goto B_qc;
  label B_rc:
  pm_diagnostic_list_append(a + 244, e, h, 79);
  label B_qc:
  if (eqz(m & 8)) goto B_a;
  pm_buffer_append_bytes(b, e, f[0] - e);
  label B_a:
  stack_pointer = d + 208;
}

function lex_interpolation(a:int, b:int):int {
  var d:int;
  var c:int;
  var e:int;
  var f:int;
  var g:int;
  c = b + 1;
  if (c < (d = a[41]:int)) goto B_a;
  (a + 188)[0]:int = c;
  return 150;
  label B_a:
  e = c[0]:ubyte;
  if (e == 36) goto B_h;
  if (e == 123) goto B_g;
  if (e != 64) goto B_f;
  e = b + 2;
  if (e < d) goto B_i;
  (a + 188)[0]:int = c;
  return 150;
  label B_i:
  f = b + 3;
  e = select_if(select_if(f, e, f < d), e, b[2]:ubyte == 64);
  if (eqz(a[358]:ubyte)) goto B_l;
  if (call_indirect(e, d - e, (a[66]:int)[1]:int)) goto B_b;
  d = e[0]:byte;
  if (d == 95) goto B_b;
  if (d > -1) goto B_j;
  d = call_indirect(e, a[41]:int - e, (a[66]:int)[0]:int);
  goto B_k;
  label B_l:
  f = e[0]:ubyte;
  g = i32_extend8_s(f);
  if (g < 0) goto B_e;
  d = ((32208 + f)[0]:ubyte | g == 95) & 1;
  label B_k:
  if (d) goto B_b;
  label B_j:
  (a + 188)[0]:int = c;
  return 3;
  label B_h:
  e = b + 2;
  if (e < d) goto B_m;
  (a + 188)[0]:int = c;
  return 150;
  label B_m:
  f = e;
  if (e[0]:ubyte != 45) goto B_n;
  f = b + 3;
  if (f < d) goto B_n;
  (a + 188)[0]:int = e;
  return 150;
  label B_n:
  if (eqz(a[358]:ubyte)) goto B_q;
  if (call_indirect(f, d - f, (a[66]:int)[1]:int)) goto B_c;
  d = f[0]:byte;
  if (d == 95) goto B_c;
  if (d > -1) goto B_o;
  d = call_indirect(f, a[41]:int - f, (a[66]:int)[0]:int);
  goto B_p;
  label B_q:
  g = f[0]:ubyte;
  var h:int = i32_extend8_s(g);
  if (h < 0) goto B_d;
  d = ((32208 + g)[0]:ubyte | h == 95) & 1;
  label B_p:
  if (d) goto B_c;
  label B_o:
  d = e[0]:ubyte;
  if (d == 45) goto B_r;
  if (pm_is_decimal_digit(d)) goto B_c;
  d = e[0]:ubyte;
  if ((d + -127 & 255) < 162) goto B_r;
  if (((d + -32 >> 3 & 536870908) + 57504)[0]:int >> d & 1) goto B_c;
  label B_r:
  (a + 188)[0]:int = c;
  return 3;
  label B_g:
  if ((a + 184)[0]:int >= b) goto B_s;
  (a + 188)[0]:int = b;
  return 150;
  label B_s:
  a[1]:int = a[1]:int + 1;
  c = a + 156;
  c[0]:int = (c = c[0]:int + 1);
  d = a[6]:int;
  if (c < 4) goto B_u;
  a[6]:int = (c = malloc(32));
  if (eqz(c)) goto B_t;
  c[1]:long@4 = 0L;
  c[0]:int = 1;
  c[7]:int = d;
  (c + 12)[0]:long@4 = 0L;
  (c + 20)[0]:long@4 = 0L;
  goto B_t;
  label B_u:
  e = a + 28;
  c = e + (c << 5);
  c[0]:int = 1;
  c[7]:int = d;
  c[1]:long@4 = 0L;
  (c + 12)[0]:long@4 = 0L;
  (c + 20)[0]:long@4 = 0L;
  a[6]:int = e + (a[39]:int << 5);
  label B_t:
  a[356]:byte = 1;
  (a + 188)[0]:int = b + 2;
  pm_state_stack_push(a + 16, 0);
  return 36;
  label B_f:
  (a + 188)[0]:int = c;
  return 3;
  label B_e:
  pm_encoding_utf_8_alpha(e, d - e);
  goto B_b;
  label B_d:
  pm_encoding_utf_8_alpha(f, d - f);
  label B_c:
  if ((a + 184)[0]:int >= b) goto B_v;
  (a + 188)[0]:int = b;
  return 150;
  label B_v:
  b = a + 156;
  b[0]:int = (b = b[0]:int + 1);
  d = a[6]:int;
  if (b < 4) goto B_x;
  a[6]:int = (b = malloc(32));
  if (eqz(b)) goto B_w;
  b[1]:long@4 = 0L;
  b[0]:int = 2;
  b[7]:int = d;
  (b + 12)[0]:long@4 = 0L;
  (b + 20)[0]:long@4 = 0L;
  goto B_w;
  label B_x:
  e = a + 28;
  b = e + (b << 5);
  b[0]:int = 2;
  b[7]:int = d;
  b[1]:long@4 = 0L;
  (b + 12)[0]:long@4 = 0L;
  (b + 20)[0]:long@4 = 0L;
  a[6]:int = e + (a[39]:int << 5);
  label B_w:
  (a + 188)[0]:int = c;
  return 38;
  label B_b:
  if ((a + 184)[0]:int >= b) goto B_y;
  (a + 188)[0]:int = b;
  return 150;
  label B_y:
  b = a + 156;
  b[0]:int = (b = b[0]:int + 1);
  d = a[6]:int;
  if (b < 4) goto B_aa;
  a[6]:int = (b = malloc(32));
  if (eqz(b)) goto B_z;
  b[1]:long@4 = 0L;
  b[0]:int = 2;
  b[7]:int = d;
  (b + 12)[0]:long@4 = 0L;
  (b + 20)[0]:long@4 = 0L;
  goto B_z;
  label B_aa:
  e = a + 28;
  b = e + (b << 5);
  b[0]:int = 2;
  b[7]:int = d;
  b[1]:long@4 = 0L;
  (b + 12)[0]:long@4 = 0L;
  (b + 20)[0]:long@4 = 0L;
  a[6]:int = e + (a[39]:int << 5);
  label B_z:
  (a + 188)[0]:int = c;
  return 38;
}

function match_eol_at(a:int_ptr, b:ubyte_ptr):int {
  var c:int = a[41];
  if (c <= b) goto B_b;
  a = 1;
  br_table[B_a, B_b, B_b, B_c, ..B_b](b[0] + -10)
  label B_c:
  if (c <= (b = b + 1)) goto B_b;
  a = 2;
  if (b[0] == 10) goto B_a;
  label B_b:
  a = 0;
  label B_a:
  return a;
}

function lex_numeric(a:int):int {
  var e:int;
  var g:int;
  var f:int;
  var b:int = stack_pointer - 16;
  stack_pointer = b;
  a[162]:short = 2;
  var c:ubyte_ptr = 58;
  var d:ubyte_ptr = (a + 188)[0]:int;
  if (d >= (e = a[41]:int)) goto B_a;
  b[11]:byte = 0;
  if (e <= (c = d + -1)) goto B_k;
  if (c[0] != 48) goto B_k;
  br_table[B_j, B_h, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_o, B_h, B_p, B_j, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_n, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_l, B_h, B_h, B_h, B_h, B_h, B_h, B_m, B_h, B_h, B_o, B_h, B_p, B_j, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_n, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_l, ..B_h](
    d[0] + -46)
  label B_p:
  a[47]:int = (c = d + 1);
  d = 0;
  if (e <= c) goto B_q;
  d = c[0];
  label B_q:
  if (eqz(pm_is_decimal_digit(d & 255))) goto B_i;
  c = a[47]:int;
  b[3]:int = 0;
  d = pm_strspn_decimal_number(c, a[41]:int - c, b + 12);
  c = b[3]:int;
  if (eqz(c)) goto B_r;
  pm_diagnostic_list_append(a + 244, c, c + 1, 121);
  label B_r:
  a[47]:int = a[47]:int + d;
  goto B_h;
  label B_o:
  a[47]:int = (c = d + 1);
  d = 0;
  if (e <= c) goto B_s;
  d = c[0];
  label B_s:
  if (eqz(pm_is_binary_digit(d & 255))) goto B_u;
  c = a[47]:int;
  b[3]:int = 0;
  d = pm_strspn_binary_number(c, a[41]:int - c, b + 12);
  c = b[3]:int;
  if (eqz(c)) goto B_v;
  pm_diagnostic_list_append(a + 244, c, c + 1, 121);
  label B_v:
  a[47]:int = a[47]:int + d;
  goto B_t;
  label B_u:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, a[47]:int, 117);
  label B_t:
  a[162]:short = 1;
  goto B_h;
  label B_n:
  a[47]:int = (c = d + 1);
  d = 0;
  if (e <= c) goto B_w;
  d = c[0];
  label B_w:
  if (eqz(pm_is_octal_digit(d & 255))) goto B_y;
  c = a[47]:int;
  b[3]:int = 0;
  d = pm_strspn_octal_number(c, a[41]:int - c, b + 12);
  c = b[3]:int;
  if (eqz(c)) goto B_z;
  pm_diagnostic_list_append(a + 244, c, c + 1, 121);
  label B_z:
  a[47]:int = a[47]:int + d;
  goto B_x;
  label B_y:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, a[47]:int, 120);
  label B_x:
  a[162]:short = 4;
  goto B_h;
  label B_m:
  b[3]:int = 0;
  d = pm_strspn_octal_number(d, e - d, b + 12);
  c = b[3]:int;
  if (eqz(c)) goto B_aa;
  pm_diagnostic_list_append(a + 244, c, c + 1, 121);
  label B_aa:
  a[162]:short = 4;
  a[47]:int = a[47]:int + d;
  goto B_h;
  label B_l:
  a[47]:int = (c = d + 1);
  d = 0;
  if (e <= c) goto B_ba;
  d = c[0];
  label B_ba:
  if (eqz(pm_is_hexadecimal_digit(d & 255))) goto B_da;
  c = a[47]:int;
  b[3]:int = 0;
  d = pm_strspn_hexadecimal_number(c, a[41]:int - c, b + 12);
  c = b[3]:int;
  if (eqz(c)) goto B_ea;
  pm_diagnostic_list_append(a + 244, c, c + 1, 121);
  label B_ea:
  a[47]:int = a[47]:int + d;
  goto B_ca;
  label B_da:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, a[47]:int, 119);
  label B_ca:
  a[162]:short = 8;
  goto B_h;
  label B_k:
  b[3]:int = 0;
  d = pm_strspn_decimal_number(d, e - d, b + 12);
  c = b[3]:int;
  if (eqz(c)) goto B_fa;
  pm_diagnostic_list_append(a + 244, c, c + 1, 121);
  label B_fa:
  a[47]:int = a[47]:int + d;
  label B_j:
  f = lex_optional_float_suffix(a, b + 11);
  d = a[47]:int;
  if (f == 58) goto B_g;
  g = a[41]:int;
  if (b[11]:ubyte) goto B_f;
  if (g <= d) goto B_f;
  if (d[0] != 114) goto B_f;
  a[47]:int = (e = d + 1);
  c = 46;
  if (g <= e) goto B_b;
  if (e[0]:ubyte != 105) goto B_b;
  e = d + 2;
  c = 47;
  goto B_e;
  label B_i:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, a[47]:int, 118);
  label B_h:
  d = a[47]:int;
  label B_g:
  f = 58;
  g = a[41]:int;
  if (g <= d) goto B_c;
  if (d[0] != 114) goto B_ga;
  a[47]:int = (e = d + 1);
  c = 60;
  if (g <= e) goto B_b;
  if (e[0]:ubyte != 105) goto B_b;
  e = d + 2;
  c = 61;
  f = 58;
  goto B_e;
  label B_ga:
  if (d[0] != 105) goto B_c;
  e = d + 1;
  c = 59;
  f = 58;
  goto B_e;
  label B_f:
  if (g <= d) goto B_d;
  if (d[0] != 105) goto B_d;
  e = d + 1;
  c = 45;
  label B_e:
  a[47]:int = e;
  goto B_b;
  label B_d:
  e = d;
  c = f;
  goto B_b;
  label B_c:
  e = d;
  c = 58;
  label B_b:
  if (g <= e) goto B_a;
  e = e[0]:byte;
  if (eqz(e)) goto B_a;
  if (e < 0) goto B_ha;
  if ((e + -97 & 255) < 26) goto B_ha;
  if (e == 95) goto B_ha;
  if ((e + -65 & 255) > 25) goto B_a;
  label B_ha:
  a[47]:int = d;
  c = f;
  label B_a:
  stack_pointer = b + 16;
  return c;
}

function lex_state_spcarg_p(a:int, b:int):int {
  var c:int = 0;
  var d:ubyte_ptr = (a + 188)[0]:int;
  if (d >= a[41]:int) goto B_a;
  if (eqz(a[0]:ubyte & 48)) goto B_a;
  if (eqz(b)) goto B_a;
  c = pm_is_whitespace(d[0]) ^ 1;
  label B_a:
  return c;
}

function context_terminator(a:int, b:int_ptr):int {
  var c:int = 0;
  br_table[B_c, B_j, B_f, B_e, B_d, B_f, B_f, B_r, B_q, B_o, B_m, B_k, B_o, B_o, B_o, B_n, B_m, B_g, B_f, B_r, B_f, B_i, B_p, B_b, B_p, B_h, B_h, B_c, B_c, B_f, B_l, B_o, B_o, ..B_a](
    a)
  label B_r:
  return b[0] == 1;
  label B_q:
  a = b[0];
  return a == 27 | a == 125;
  label B_p:
  return b[0] == 15;
  label B_o:
  return b[0] == 75;
  label B_n:
  return b[0] == 82;
  label B_m:
  return b[0] + -73 < 3;
  label B_l:
  return (b[0] & -3) == 73;
  label B_k:
  return b[0] == 37;
  label B_j:
  return b[0] == 15;
  label B_i:
  return b[0] == 125;
  label B_h:
  a = b[0];
  return a == 77 | a == 75;
  label B_g:
  return b[0] == 15;
  label B_f:
  a = b[0] + -75;
  if (a >= 15) goto B_a;
  return 16389 >> (a & 32767) & 1;
  label B_e:
  a = b[0] + -73;
  if (a >= 30) goto B_a;
  return 536870917 >> (a & 1073741823) & 1;
  label B_d:
  a = b[0] + -73;
  if (a >= 10) goto B_a;
  return 517 >> (a & 1023) & 1;
  label B_c:
  a = b[0] + -73 << 31;
  if (a >= 9) goto B_a;
  return 263 >> (a & 511) & 1;
  label B_b:
  a = b[0] + -95;
  if (a >= 48) goto B_a;
  c = i32_wrap_i64(140737555464193L >> i64_extend_i32_u(a)) & 1;
  label B_a:
  return c;
}

function parse_expression(a:int_ptr, b:int, c:int, d:int):int {
  var f:int;
  var g:int;
  var e:int = (a + 176)[0]:int;
  f = parse_expression_prefix(a, b, c);
  g = f[0]:ushort;
  br_table[B_f, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_c, B_c, B_b, B_e, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_c, ..B_d](
    g + -101);
  label B_f:
  pm_diagnostic_list_append(a + 244, e, e, d);
  return f;
  label B_e:
  if (f[3]:int) goto B_b;
  if ((a[45] * 12 + 63600)[0]:int <= 21) goto B_b;
  goto B_a;
  label B_d:
  if (g + -1 >= 2) goto B_b;
  label B_c:
  if ((a[45] * 12 + 63600)[0]:int > 6) goto B_a;
  label B_b:
  g = a[45] * 12;
  e = g + 63600;
  d = e[0]:int;
  if (d < b) goto B_a;
  if (eqz((g + 63608)[0]:ubyte & 1)) goto B_a;
  loop L_g {
    g = e[9]:ubyte;
    f = parse_expression_infix(a, f, b, e[1]:int, e = c & 1);
    if (eqz(g & 1)) goto B_h;
    if (f[0]:ushort != 120) goto B_i;
    if (
      select_if(d, 38, c = f[4]:int) <= ((g = a[45]) * 12 + 63600)[0]:int) goto B_a;
    if (eqz(eqz(c) & g == 4)) goto B_h;
    goto B_a;
    label B_i:
    if (d <= (a[45] * 12 + 63600)[0]:int) goto B_a;
    label B_h:
    c = 0;
    if (eqz(e)) goto B_j;
    c = 1;
    br_table[B_l, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_k, B_j, ..B_k](
      f[0]:ushort + -19)
    label B_l:
    if (f[4]:int) goto B_n;
    e = f[7]:int;
    if (eqz(e)) goto B_m;
    if (e[0]:ubyte != 91) goto B_m;
    if (((f + 32)[0]:int + -1)[0]:ubyte != 93) goto B_m;
    goto B_j;
    label B_n:
    if (f[11]:int) goto B_o;
    if (f[14]:int) goto B_o;
    if (eqz(f[9]:int)) goto B_j;
    label B_o:
    if (f[9]:int) goto B_j;
    label B_m:
    e = f[14]:int;
    if (eqz(e)) goto B_k;
    if (e[0]:ushort == 14) goto B_j;
    label B_k:
    c = 0;
    label B_j:
    g = a[45] * 12;
    e = g + 63600;
    d = e[0]:int;
    if (d < b) goto B_a;
    if ((g + 63608)[0]:ubyte & 1) continue L_g;
  }
  label B_a:
  return f;
}

function pm_statements_node_create(a:int_ptr):int {
  var c:{ a:short, b:int, c:int }
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  c = calloc(1, 24);
  if (c) goto B_a;
  b[0] = 24;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_a:
  c.a = 137;
  c.c = (a = a[40]);
  c.b = a;
  stack_pointer = b + 16;
  return c;
}

function lex_optional_float_suffix(a:int_ptr, b:byte_ptr):int {
  var f:ubyte_ptr;
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  var d:ubyte_ptr = 58;
  e = a[41];
  if (e <= (f = (a + 188)[0]:int)) goto B_b;
  if (f[0] != 46) goto B_b;
  var g:int = 0;
  if (e <= (f = f + 1)) goto B_c;
  g = f[0];
  label B_c:
  d = 58;
  if (eqz(pm_is_decimal_digit(g & 255))) goto B_a;
  a[47] = (f = a[47] + 2);
  c[2] = 0;
  e = pm_strspn_decimal_number(f, a[41] - f, c + 8);
  f = c[2];
  if (eqz(f)) goto B_d;
  pm_diagnostic_list_append(a + 244, f, f + 1, 121);
  label B_d:
  a[47] = (f = a[47] + e);
  e = a[41];
  d = 44;
  label B_b:
  if (e <= f) goto B_a;
  if (f[0] == 101) goto B_e;
  if (f[0] != 69) goto B_a;
  label B_e:
  a[47] = (d = f + 1);
  if (e <= d) goto B_f;
  if (d[0] == 43) goto B_g;
  if (d[0] != 45) goto B_f;
  label B_g:
  a[47] = (d = f + 2);
  label B_f:
  b[0] = 1;
  f = 0;
  if (e <= d) goto B_h;
  f = d[0];
  label B_h:
  if (eqz(pm_is_decimal_digit(f & 255))) goto B_j;
  a[47] = (f = a[47] + 1);
  c[3] = 0;
  e = pm_strspn_decimal_number(f, a[41] - f, c + 12);
  f = c[3];
  if (eqz(f)) goto B_k;
  pm_diagnostic_list_append(a + 244, f, f + 1, 121);
  label B_k:
  a[47] = a[47] + e;
  goto B_i;
  label B_j:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, a[47], 116);
  label B_i:
  d = 44;
  label B_a:
  stack_pointer = c + 16;
  return d;
}

function escape_write_byte_encoded(a:int_ptr, b:int, c:int) {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (i32_extend8_s(c) > -1) goto B_a;
  if (a[86] != 49568) goto B_b;
  var e:int_ptr = a[66];
  if (e == 49568) goto B_b;
  var f:int = (a + 188)[0]:int;
  var g:int = (a + 184)[0]:int;
  d[0] = e[4];
  pm_diagnostic_list_append_format(a + 244, g, f, 138, d);
  label B_b:
  a[86] = a[66];
  label B_a:
  pm_buffer_append_byte(b, c);
  stack_pointer = d + 16;
}

function escape_write_unicode(a:int_ptr, b:int, c:int_ptr, d:int, e:int, f:int) {
  var g:int_ptr = stack_pointer - 16;
  stack_pointer = g;
  if (c & 4) goto B_b;
  if (f < 128) goto B_a;
  label B_b:
  c = a[86];
  if (eqz(c)) goto B_c;
  if (c == 49568) goto B_c;
  g[0] = c[4];
  pm_diagnostic_list_append_format(a + 244, d, e, 138, g);
  label B_c:
  a[86] = 49568;
  if (f <= 127) goto B_a;
  if (f > 2047) goto B_d;
  pm_buffer_append_byte(b, (f >> 6 | 192) & 255);
  f = (f & 63) | -128;
  goto B_a;
  label B_d:
  if (f > 65535) goto B_e;
  pm_buffer_append_byte(b, (f >> 12 | 224) & 255);
  pm_buffer_append_byte(b, (f >> 6 | 128) & 191);
  f = (f & 63) | -128;
  goto B_a;
  label B_e:
  if (f > 1114111) goto B_f;
  pm_buffer_append_byte(b, (f >> 18 | 240) & 255);
  pm_buffer_append_byte(b, (f >> 12 | 128) & 191);
  pm_buffer_append_byte(b, (f >> 6 | 128) & 191);
  f = (f & 63) | -128;
  goto B_a;
  label B_f:
  pm_diagnostic_list_append(a + 244, d, e, 75);
  pm_buffer_append_byte(b, 239);
  pm_buffer_append_byte(b, 191);
  f = 189;
  label B_a:
  pm_buffer_append_byte(b, f & 255);
  stack_pointer = g + 16;
}

function escape_write_byte(a:int_ptr, b:int, c:int_ptr, d:int) {
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  if (eqz(c & 8)) goto B_b;
  pm_buffer_append_bytes(b, 1518, 2);
  pm_buffer_append_byte(b, select_if((c = d >> 4) + 55, c | 48, d > 159));
  d = d & 15;
  if (d < 10) goto B_c;
  d = d + 55;
  goto B_a;
  label B_c:
  d = d | 48;
  goto B_a;
  label B_b:
  if (i32_extend8_s(d) > -1) goto B_a;
  if (a[86] != 49568) goto B_d;
  c = a[66];
  if (c == 49568) goto B_d;
  var f:int = (a + 188)[0]:int;
  var g:int = (a + 184)[0]:int;
  e[0] = c[4];
  pm_diagnostic_list_append_format(a + 244, g, f, 138, e);
  label B_d:
  a[86] = a[66];
  label B_a:
  pm_buffer_append_byte(b, d);
  stack_pointer = e + 16;
}

function parse_expression_prefix(a:int, b:int, c:int):int {
  var l:int;
  var n:int;
  var m:int;
  var k:int_ptr;
  var i:{ a:ushort, b:int }
  var j:int;
  var p:long;
  var r:long;
  var q:long;
  var o:long_ptr@4;
  var f:int;
  var h:int;
  var u:int;
  var g:int;
  var d:int = stack_pointer - 480;
  stack_pointer = d;
  var e:int = a + 180;
  br_table[B_db, B_o, B_fb, B_nb, B_nb, B_c, B_nb, B_nb, B_ob, B_nb, B_nb, B_nb, B_nb, B_nb, B_d, B_e, B_nb, B_nb, B_nb, B_nb, B_f, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_i, B_j, B_k, B_l, B_n, B_nb, B_nb, B_nb, B_nb, B_nb, B_q, B_p, B_nb, B_r, B_s, B_t, B_u, B_v, B_z, B_nb, B_ba, B_ca, B_da, B_aa, B_ga, B_ha, B_ia, B_nb, B_nb, B_nb, B_nb, B_nb, B_ja, B_nb, B_ka, B_la, B_ma, B_nb, B_nb, B_qa, B_da, B_ra, B_oa, B_nb, B_sa, B_nb, B_nb, B_ta, B_da, B_ua, B_ea, B_nb, B_va, B_na, B_pa, B_nb, B_wa, B_nb, B_nb, B_xa, B_nb, B_fa, B_w, B_x, B_y, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_p, B_nb, B_nb, B_jb, B_nb, B_m, B_b, B_b, B_nb, B_nb, B_nb, B_ya, B_ab, B_db, B_za, B_bb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_cb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_lb, B_nb, B_nb, B_mb, B_gb, B_nb, B_g, B_h, B_h, B_hb, B_ib, B_kb, B_eb, ..B_nb](
    a[45]:int + -9)
  label B_ob:
  parser_lex(a);
  f = a + 168;
  c = pm_array_node_create(f);
  g = a + 20;
  pm_state_stack_push(g, 0);
  h = a + 292;
  i = a + 244;
  j = c + 12;
  k = 0;
  loop L_pb {
    b = e[0]:int;
    if (b == 121) goto B_tb;
    br_table[B_rb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_sb, B_rb, ..B_sb](
      b + -1);
    label B_tb:
    parser_lex(a);
    b = a[45]:int;
    if (b == 20) goto B_rb;
    label B_sb:
    if (eqz(j[0]:int)) goto B_ub;
    if (b != 27) goto B_vb;
    parser_lex(a);
    goto B_ub;
    label B_vb:
    pm_diagnostic_list_append(i, b = a[44]:int, b, 23);
    a[42]:int = 2;
    a[43]:int = b;
    label B_ub:
    b = e[0]:int;
    br_table[B_gc, B_fc, ..B_hc](b + -161);
    label B_hc:
    if (b == 109) goto B_fc;
    if (b == 20) goto B_rb;
    l = parse_expression(a, 14, 0, 21);
    b = pm_check_value_expression(l);
    if (eqz(b)) goto B_ic;
    pm_diagnostic_list_append(i, b[1]:int, (b + 8)[0]:int, 208);
    label B_ic:
    b = l[0]:ushort;
    if (b == 86) goto B_ec;
    if (b != 140) goto B_cc;
    b = l + 32;
    goto B_dc;
    label B_gc:
    parser_lex(a);
    m = a[44]:int;
    n = a[43]:int;
    b = a[45]:int;
    if (b > 27) goto B_kc;
    if (eqz(1 << b & 135266306)) goto B_kc;
    l = pm_constant_pool_insert_shared(h, n, m - n);
    b = a[64]:int;
    if (eqz(b)) goto B_lc;
    loop L_mc {
      if (eqz(pm_constant_id_list_includes(b, l))) goto B_nc;
      l = 0;
      goto B_jc;
      label B_nc:
      if (b[16]:ubyte) goto B_lc;
      b = b[3]:int;
      if (b) continue L_mc;
    }
    label B_lc:
    pm_diagnostic_list_append(i, n, m, 15);
    l = 0;
    goto B_jc;
    label B_kc:
    l = parse_expression(a, 14, 0, 22);
    b = pm_check_value_expression(l);
    if (eqz(b)) goto B_jc;
    pm_diagnostic_list_append(i, b[1]:int, (b + 8)[0]:int, 208);
    label B_jc:
    b = calloc(1, 24);
    if (eqz(b)) goto B_ac;
    o = m;
    if (eqz(l)) goto B_oc;
    o = (l + 8)[0]:int;
    label B_oc:
    b[5]:int = l;
    b[4]:int = m;
    b[3]:int = n;
    b[2]:int = o;
    b[1]:int = n;
    b[0]:short = 136;
    goto B_wb;
    label B_fc:
    if (eqz(k & 1)) goto B_pc;
    pm_diagnostic_list_append(i, a[46]:int, a[47]:int, 101);
    label B_pc:
    b = calloc(1, 24);
    if (eqz(b)) goto B_zb;
    b[0]:int = 65624;
    k = 1;
    l = e[0]:int;
    if (l > 20) goto B_xb;
    if (eqz(1 << l & 1081346)) goto B_xb;
    goto B_wb;
    label B_ec:
    b = l + 36;
    label B_dc:
    b = b[0]:int;
    if (eqz(b)) goto B_cc;
    if ((b + -1)[0]:ubyte == 58) goto B_bc;
    label B_cc:
    if (e[0]:int == 42) goto B_qc;
    b = l;
    goto B_wb;
    label B_qc:
    parser_lex(a);
    label B_bc:
    if (eqz(k & 1)) goto B_rc;
    pm_diagnostic_list_append(i, a[43]:int, a[44]:int, 101);
    label B_rc:
    b = calloc(1, 24);
    if (eqz(b)) goto B_yb;
    b[0]:int = 65624;
    if (f[0]:int != 42) goto B_tc;
    (d + 288 + 8)[0]:int = (f + 8)[0]:int;
    d[36]:long = f[0]:long@4;
    goto B_sc;
    label B_tc:
    d[72]:int = 3;
    d[74]:int = (n = a[40]:int);
    d[73]:int = n;
    label B_sc:
    m = parse_expression(a, 14, 0, 110);
    n = pm_check_value_expression(m);
    if (eqz(n)) goto B_uc;
    pm_diagnostic_list_append(i, n[1]:int, (n + 8)[0]:int, 208);
    label B_uc:
    l = pm_assoc_node_create(l, d + 288, m);
    if (l[0]:ushort != 8) goto B_wc;
    if ((l[3]:int)[0]:ushort == 140) goto B_vc;
    label B_wc:
    b[1]:short = b[1]:ushort & 65534;
    label B_vc:
    pm_node_list_append(b + 12, l);
    if (b[1]:int) goto B_xc;
    b[1]:int = l[1]:int;
    label B_xc:
    (b + 8)[0]:int = (l + 8)[0]:int;
    if (e[0]:int != 27) goto B_yc;
    parser_lex(a);
    if (a[45]:int == 20) goto B_yc;
    parse_assocs(a, b);
    label B_yc:
    k = 1;
    goto B_wb;
    label B_ac:
    d[4]:int = 24;
    fprintf(rodata[15455]:int, 31876, d + 16);
    abort();
    unreachable;
    label B_zb:
    d[8]:int = 24;
    fprintf(rodata[15455]:int, 31876, d + 32);
    abort();
    unreachable;
    label B_yb:
    d[0]:int = 24;
    fprintf(rodata[15455]:int, 31876, d);
    abort();
    unreachable;
    label B_xb:
    n = l + -121;
    if (n > 21) goto B_zc;
    if (1 << n & 2097169) goto B_wb;
    label B_zc:
    if (l == 71) goto B_wb;
    parse_assocs(a, b);
    label B_wb:
    if (j[0]:int) goto B_ad;
    if (c[6]:int) goto B_ad;
    c[1]:int = b[1]:int;
    label B_ad:
    pm_node_list_append(j, b);
    c[2]:int = (b + 8)[0]:int;
    l = b[0]:ushort;
    if (l == 6) goto B_cd;
    if (l == 65) goto B_cd;
    if (l == 120) goto B_cd;
    if ((b + 3)[0]:ubyte & 64) goto B_bd;
    label B_cd:
    c[1]:short = c[1]:ushort & 49151;
    label B_bd:
    if (l == 136) goto B_qb;
    if (l != 101) continue L_pb;
    if (e[0]:int != 121) goto B_rb;
    parser_lex(a);
    label B_rb:
    expect1(a, 20, 24);
    pm_array_node_close_set(c, f);
    pm_state_stack_pop(g);
    goto B_a;
    label B_qb:
    c[1]:short = c[1]:ushort | 1;
    continue L_pb;
  }
  label B_nb:
  c = a[65]:int;
  if (eqz(c)) goto B_dd;
  loop L_fd {
    if (context_terminator(c[0]:int, e)) goto B_ed;
    c = c[1]:int;
    if (eqz(c)) goto B_dd;
    continue L_fd;
  }
  label B_ed:
  a[357]:byte = 1;
  label B_dd:
  c = pm_missing_node_create((a + 172)[0]:int, (a + 176)[0]:int);
  goto B_a;
  label B_mb:
  (d + 288 + 8)[0]:long = ((e = a[6]:int) + 8)[0]:long@4;
  (d + 288 + 16)[0]:long = (e + 16)[0]:long@4;
  (d + 288 + 24)[0]:long = (e + 24)[0]:long@4;
  d[36]:long = e[0]:long@4;
  parser_lex(a);
  c = parse_symbol(a, d + 288, 2);
  goto B_a;
  label B_lb:
  c = parse_strings(a, 0);
  goto B_a;
  label B_kb:
  parser_lex(a);
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = pm_call_node_unary_create(
        a,
        d + 288,
        parse_expression(a, (a[42]:int * 12 + 63604)[0]:int, 0, 204),
        22978);
  goto B_a;
  label B_jb:
  k = a[2]:int;
  a[2]:int = a[1]:int;
  c = 0;
  l = a + 20;
  pm_state_stack_push(l, 0);
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  i = a[87]:int;
  a[87]:int = 0;
  d[36]:long = a[42]:long@4;
  pm_parser_scope_push(a, 0);
  b = a + 168;
  m = 1;
  j = 0;
  n = a[45]:int;
  br_table[B_id, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_jd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_id, B_gd, B_id, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_id, B_gd, B_gd, B_id, B_gd, B_gd, B_gd, B_id, B_id, ..B_kd](
    n + -109);
  label B_kd:
  j = 0;
  br_table[B_id, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_id, B_gd, B_gd, B_gd, B_gd, B_id, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_id, B_gd, B_gd, B_gd, B_gd, B_gd, B_gd, B_id, B_gd, B_id, ..B_gd](
    n + -4);
  label B_jd:
  (a[64]:int)[17]:byte = 1;
  (d + 464 + 8)[0]:int = (e + 8)[0]:int;
  d[58]:long = e[0]:long@4;
  parser_lex(a);
  if (a[45]:int != 125) goto B_md;
  c = pm_block_parameters_node_create(0, d + 464);
  goto B_ld;
  label B_md:
  c = parse_block_parameters(a, 0, d + 464, 1);
  label B_ld:
  if (e[0]:int != 121) goto B_nd;
  parser_lex(a);
  label B_nd:
  expect1(a, 125, 96);
  pm_block_parameters_node_closing_set(c, b);
  goto B_hd;
  label B_id:
  (a[64]:int)[17]:byte = 1;
  pm_state_stack_push(l, 1);
  d[116]:int = 3;
  d[118]:int = (c = a[40]:int);
  d[117]:int = c;
  c = parse_block_parameters(a, 0, d + 464, 1);
  pm_state_stack_pop(l);
  label B_hd:
  if (c) goto B_pd;
  j = 0;
  goto B_od;
  label B_pd:
  j = (a[64]:int)[0]:int;
  label B_od:
  m = eqz(c);
  n = e[0]:int;
  label B_gd:
  a[2]:int = k;
  if (n != 111) goto B_sd;
  parser_lex(a);
  (d + 464 + 8)[0]:int = (b + 8)[0]:int;
  d[58]:long = b[0]:long@4;
  if (a[45]:int != 15) goto B_td;
  parser_lex(a);
  n = 0;
  goto B_rd;
  label B_td:
  n = parse_statements(a, 17);
  expect1(a, 15, 127);
  goto B_rd;
  label B_sd:
  expect1(a, 71, 126);
  (d + 464 + 8)[0]:int = (b + 8)[0]:int;
  d[58]:long = b[0]:long@4;
  e = 0;
  n = 0;
  br_table[B_ud, B_wd, B_vd, B_wd, B_wd, B_wd, B_wd, B_wd, B_wd, B_wd, B_wd, B_wd, B_wd, B_wd, B_vd, ..B_wd](
    a[45]:int + -75)
  label B_wd:
  e = 0;
  pm_state_stack_push(l, 0);
  n = parse_statements(a, 18);
  pm_state_stack_pop(l);
  br_table[B_xd, B_ud, B_ud, B_ud, B_ud, B_ud, B_ud, B_ud, B_ud, B_ud, B_ud, B_ud, B_xd, ..B_ud](
    a[45]:int + -77)
  label B_xd:
  if (eqz(n)) goto B_vd;
  e = n;
  if (n[0]:ushort != 137) goto B_qd;
  label B_vd:
  n = parse_rescues_as_begin(a, e, 0);
  label B_ud:
  expect1(a, 75, 128);
  label B_rd:
  if ((m & (k = (e = a[64]:int)[18]:ubyte) != 0) != 1) goto B_yd;
  d[80]:int = d[73]:int;
  d[81]:int = (a + 176)[0]:int;
  c = pm_numbered_parameters_node_create(d + 320, k);
  e = a[64]:int;
  j = k;
  label B_yd:
  (d + 448 + 8)[0]:int = (e + 8)[0]:int;
  p = e[0]:long@4;
  a[64]:int = e[3]:int;
  d[56]:long = p;
  free(e);
  pm_state_stack_pop(l);
  a[87]:int = i;
  c = pm_lambda_node_create(d + 448, j, d + 288, d + 464, b, c, n);
  goto B_a;
  label B_qd:
  assert_fail(26419, 13402, 16368, 1426);
  unreachable;
  label B_ib:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = parse_expression(a, (a[42]:int * 12 + 63604)[0]:int, 0, 203);
  if (a[45]:int != 147) goto B_zd;
  parser_lex(a);
  (d + 464 + 8)[0]:int = ((e = a + 168) + 8)[0]:int;
  d[58]:long = (p = e[0]:long@4);
  c = 
    pm_call_node_unary_create(
      a,
      d + 288,
      pm_call_node_binary_create(
        a,
        c,
        d + 464,
        parse_expression(a, (i32_wrap_i64(p) * 12 + 63604)[0]:int, 0, 80)),
      22975);
  goto B_a;
  label B_zd:
  b = c[0]:ushort;
  e = b + -54;
  if (e > 28) goto B_be;
  if (1 << e & 268451841) goto B_ae;
  label B_be:
  if (b == 121) goto B_ae;
  c = pm_call_node_unary_create(a, d + 288, c, 22975);
  goto B_a;
  label B_ae:
  parse_negative_numeric(c);
  goto B_a;
  label B_hb:
  parser_lex(a);
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = pm_call_node_unary_create(
        a,
        d + 288,
        parse_expression(a, (a[42]:int * 12 + 63604)[0]:int, 0, 203),
        22975);
  goto B_a;
  label B_gb:
  parser_lex(a);
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = pm_call_node_unary_create(
        a,
        d + 288,
        parse_expression(a, (a[42]:int * 12 + 63604)[0]:int, 0, 205),
        1085);
  goto B_a;
  label B_fb:
  parser_lex(a);
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = 
    pm_call_node_unary_create(
      a,
      d + 288,
      e = parse_expression(a, (a[42]:int * 12 + 63604)[0]:int, b < 12, 202),
      27032);
  pm_conditional_predicate(e);
  goto B_a;
  label B_eb:
  parser_lex(a);
  if (b == 2) goto B_ce;
  c = pm_missing_node_create((a + 172)[0]:int, (a + 176)[0]:int);
  goto B_a;
  label B_ce:
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = 0;
  if (eqz(token_begins_expression_p(a[45]:int))) goto B_de;
  c = parse_expression(a, 48, 0, 92);
  label B_de:
  c = pm_splat_node_create(d + 288, c);
  if (e[0]:int != 27) goto B_ee;
  c = parse_targets_validate(a, c);
  goto B_a;
  label B_ee:
  c = parse_target_validate(a, c);
  goto B_a;
  label B_db:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (c = a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  b = a + 168;
  br_table[B_he, B_ie, ..B_ge](a[45]:int + -150)
  label B_ie:
  d[116]:int = 150;
  d[118]:int = (e = c[0]:int);
  d[117]:int = e;
  parser_lex(a);
  c = pm_xstring_node_create(d + 288, d + 464, b);
  goto B_a;
  label B_he:
  (d + 464 + 8)[0]:int = (a + 336)[0]:int;
  d[58]:long = a[82]:long@4;
  (d + 448 + 8)[0]:int = (e + 8)[0]:int;
  d[56]:long = e[0]:long@4;
  parser_lex(a);
  if (a[45]:int != 151) goto B_je;
  c = pm_xstring_node_create_unescaped(d + 288, d + 448, e, d + 464);
  e = a[86]:int;
  if (eqz(e)) goto B_le;
  if (e != 49568) goto B_me;
  e = 1;
  goto B_ke;
  label B_me:
  if (a[66]:int != 49568 + 1776) goto B_le;
  e = 2;
  goto B_ke;
  label B_le:
  e = 0;
  label B_ke:
  c[1]:short = c[1]:ushort | e;
  parser_lex(a);
  goto B_a;
  label B_je:
  c = pm_interpolated_xstring_node_create(d + 288, d + 288);
  d[100]:int = 3;
  d[102]:int = (l = a[40]:int);
  d[101]:int = l;
  d[98]:int = l;
  d[97]:int = l;
  d[96]:int = 3;
  b = pm_string_node_create_unescaped(a, d + 400, b, d + 384, d + 464);
  l = a[86]:int;
  if (eqz(l)) goto B_oe;
  if (l != 49568) goto B_pe;
  l = 1;
  goto B_ne;
  label B_pe:
  if (a[66]:int != 49568 + 1776) goto B_oe;
  l = 2;
  goto B_ne;
  label B_oe:
  l = 0;
  label B_ne:
  b[1]:short = b[1]:ushort | l;
  pm_node_list_append(c + 20, b);
  (c + 8)[0]:int = (b + 8)[0]:int;
  goto B_fe;
  label B_ge:
  c = pm_interpolated_xstring_node_create(d + 288, d + 288);
  label B_fe:
  l = c + 20;
  loop L_te {
    b = e[0]:int;
    if (b == 1) goto B_se;
    if (b == 151) goto B_re;
    b = parse_string_part(a);
    if (eqz(b)) continue L_te;
    pm_node_list_append(l, b);
    c[2]:int = (b + 8)[0]:int;
    continue L_te;
  }
  label B_se:
  pm_diagnostic_list_append(a + 244, d[73]:int, d[74]:int, 213);
  b = (a + 176)[0]:int;
  e = b;
  goto B_qe;
  label B_re:
  b = (a + 184)[0]:int;
  e = (a + 188)[0]:int;
  expect1(a, 151, 213);
  label B_qe:
  c[8]:int = b;
  c[2]:int = e;
  (c + 36)[0]:int = e;
  goto B_a;
  label B_cb:
  (d + 464 + 8)[0]:int = (c = e + 8)[0]:int;
  d[58]:long = e[0]:long@4;
  parser_lex(a);
  br_table[B_xe, B_ve, B_ve, B_ve, B_ve, B_ve, B_ve, B_ve, B_ve, B_we, ..B_ve](
    a[45]:int + -141)
  label B_xe:
  d[112]:int = 150;
  d[114]:int = (e = (a + 176)[0]:int);
  d[113]:int = e;
  parser_lex(a);
  d[74]:int = 0;
  d[36]:long = 0L;
  c = pm_regular_expression_node_create_unescaped(d + 464,
                                                  d + 448,
                                                  a + 168,
                                                  d + 288);
  goto B_a;
  label B_we:
  (d + 288 + 8)[0]:int = (a + 336)[0]:int;
  d[36]:long = a[82]:long@4;
  (d + 448 + 8)[0]:int = c[0]:int;
  d[56]:long = e[0]:long@4;
  parser_lex(a);
  if (a[45]:int != 141) goto B_ye;
  parser_lex(a);
  c = pm_regular_expression_node_create_unescaped(d + 464,
                                                  d + 448,
                                                  a + 168,
                                                  d + 288);
  goto B_a;
  label B_ye:
  c = pm_interpolated_regular_expression_node_create(d + 464);
  d[100]:int = 3;
  d[102]:int = (b = a[40]:int);
  d[101]:int = b;
  d[98]:int = b;
  d[97]:int = b;
  d[96]:int = 3;
  pm_interpolated_regular_expression_node_append(
    c,
    pm_string_node_create_unescaped(a, d + 400, a + 168, d + 384, d + 288));
  goto B_ue;
  label B_ve:
  c = pm_interpolated_regular_expression_node_create(d + 464);
  label B_ue:
  j = c + 20;
  loop L_af {
    b = e[0]:int;
    if (b == 1) goto B_ze;
    if (b == 141) goto B_ze;
    b = parse_string_part(a);
    if (eqz(b)) continue L_af;
    if (c[1]:int <= (l = b[1]:int)) goto B_bf;
    c[1]:int = l;
    label B_bf:
    if (c[2]:int >= (l = (b + 8)[0]:int)) goto B_cf;
    c[2]:int = l;
    label B_cf:
    pm_node_list_append(j, b);
    continue L_af;
  }
  label B_ze:
  (d + 288 + 8)[0]:int = (e + 8)[0]:int;
  d[36]:long = e[0]:long@4;
  if (b != 1) goto B_ef;
  pm_diagnostic_list_append(a + 244, d[117]:int, d[118]:int, 183);
  d[72]:int = 2;
  d[74]:int = (a = (a + 176)[0]:int);
  d[73]:int = a;
  goto B_df;
  label B_ef:
  expect1(a, 141, 183);
  label B_df:
  pm_interpolated_regular_expression_node_closing_set(c, d + 288);
  goto B_a;
  label B_bb:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  l = a + 244;
  c = pm_array_node_create(d + 288);
  k = c + 12;
  i = 49568 + 1776;
  loop L_ff {
    j = 0;
    loop L_gf {
      b = e[0]:int;
      br_table[B_tf, B_pf, B_hf, B_hf, B_hf, B_hf, B_hf, B_hf, B_hf, B_hf, B_hf, B_hf, B_hf, B_uf, ..B_vf](
        b + -150);
      label B_vf:
      br_table[B_rf, B_hf, B_sf, ..B_qf](b + -36);
      label B_uf:
      a[86]:int = 0;
      if (eqz(j)) goto B_wf;
      if (k[0]) goto B_xf;
      if (c[6]:int) goto B_xf;
      c[1]:int = j[1]:int;
      label B_xf:
      pm_node_list_append(k, j);
      c[2]:int = (j + 8)[0]:int;
      b = j[0]:ushort;
      if (b == 6) goto B_zf;
      if (b == 65) goto B_zf;
      if (b == 120) goto B_zf;
      if ((j + 3)[0]:ubyte & 64) goto B_yf;
      label B_zf:
      c[1]:short = c[1]:ushort & 49151;
      label B_yf:
      if (b != 136) goto B_wf;
      c[1]:short = c[1]:ushort | 1;
      label B_wf:
      parser_lex(a);
      continue L_ff;
      label B_tf:
      d[116]:int = 3;
      d[118]:int = (n = a[40]:int);
      d[117]:int = n;
      d[114]:int = n;
      d[113]:int = n;
      d[112]:int = 3;
      b = pm_string_node_create_current_string(a, d + 464, e, d + 448);
      m = a[86]:int;
      if (eqz(m)) goto B_bg;
      if (m != 49568) goto B_cg;
      m = 1;
      goto B_ag;
      label B_cg:
      if (a[66]:int != i) goto B_bg;
      m = 2;
      goto B_ag;
      label B_bg:
      m = 0;
      label B_ag:
      b[1]:short = b[1]:ushort | m;
      parser_lex(a);
      if (j) goto B_dg;
      j = b;
      continue L_gf;
      label B_dg:
      m = j[0]:ushort;
      if (m == 138) goto B_eg;
      if (m != 85) goto B_nf;
      n = j + 20;
      if (j[5]:int) goto B_fg;
      if (j[3]:int) goto B_fg;
      j[1]:int = b[1]:int;
      label B_fg:
      pm_node_list_append(n, b);
      (j + 8)[0]:int = (b + 8)[0]:int;
      continue L_gf;
      label B_eg:
      m = calloc(1, 40);
      if (eqz(m)) goto B_of;
      m[8]:long@4 = 0L;
      m[3]:long@4 = 0L;
      m[2]:int = n;
      m[1]:int = n;
      m[0]:short = 85;
      m[1]:int = j[1]:int;
      n = m + 20;
      pm_node_list_append(n, j);
      m[2]:int = (j + 8)[0]:int;
      if (m[5]:int) goto B_gg;
      if (m[3]:int) goto B_gg;
      m[1]:int = b[1]:int;
      label B_gg:
      pm_node_list_append(n, b);
      m[2]:int = (b + 8)[0]:int;
      j = m;
      continue L_gf;
      label B_sf:
      if (j) goto B_ig;
      b = a[40]:int;
      j = calloc(1, 40);
      if (eqz(j)) goto B_mf;
      j[8]:long@4 = 0L;
      j[3]:long@4 = 0L;
      j[2]:int = b;
      j[1]:int = b;
      j[0]:short = 85;
      goto B_hg;
      label B_ig:
      if (j[0]:ushort != 138) goto B_hg;
      n = a[40]:int;
      b = calloc(1, 40);
      if (eqz(b)) goto B_lf;
      b[8]:long@4 = 0L;
      b[3]:long@4 = 0L;
      b[2]:int = n;
      b[1]:int = n;
      b[0]:short = 85;
      b[1]:int = j[1]:int;
      pm_node_list_append(b + 20, j);
      b[2]:int = (j + 8)[0]:int;
      j = b;
      label B_hg:
      n = j + 20;
      b = parse_string_part(a);
      if (j[5]:int) goto B_jg;
      if (j[3]:int) goto B_jg;
      j[1]:int = b[1]:int;
      label B_jg:
      pm_node_list_append(n, b);
      (j + 8)[0]:int = (b + 8)[0]:int;
      continue L_gf;
      label B_rf:
      if (j) goto B_lg;
      b = a[40]:int;
      j = calloc(1, 40);
      if (eqz(j)) goto B_kf;
      j[8]:long@4 = 0L;
      j[3]:long@4 = 0L;
      j[2]:int = b;
      j[1]:int = b;
      j[0]:short = 85;
      goto B_kg;
      label B_lg:
      b = j[0]:ushort;
      if (b == 85) goto B_kg;
      if (b != 138) goto B_if;
      n = a[40]:int;
      b = calloc(1, 40);
      if (eqz(b)) goto B_jf;
      b[8]:long@4 = 0L;
      b[3]:long@4 = 0L;
      b[2]:int = n;
      b[1]:int = n;
      b[0]:short = 85;
      b[1]:int = j[1]:int;
      pm_node_list_append(b + 20, j);
      b[2]:int = (j + 8)[0]:int;
      j = b;
      label B_kg:
      n = j + 20;
      b = parse_string_part(a);
      if (j[5]:int) goto B_mg;
      if (j[3]:int) goto B_mg;
      j[1]:int = b[1]:int;
      label B_mg:
      pm_node_list_append(n, b);
      (j + 8)[0]:int = (b + 8)[0]:int;
      continue L_gf;
      label B_qf:
      if (b != 1) goto B_hf;
      label B_pf:
      if (eqz(j)) goto B_ng;
      pm_array_node_elements_append(c, j);
      b = e[0]:int;
      label B_ng:
      (d + 464 + 8)[0]:int = (e + 8)[0]:int;
      d[58]:long = e[0]:long@4;
      if (b != 1) goto B_pg;
      pm_diagnostic_list_append(l, d[73]:int, d[74]:int, 136);
      d[116]:int = 2;
      d[118]:int = (a = a[44]:int);
      d[117]:int = a;
      goto B_og;
      label B_pg:
      expect1(a, 151, 136);
      label B_og:
      pm_array_node_close_set(c, d + 464);
      goto B_a;
      label B_of:
      d[52]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 208);
      abort();
      unreachable;
      label B_nf:
      assert_fail(26957, 13402, 15979, 1426);
      unreachable;
      label B_mf:
      d[56]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 224);
      abort();
      unreachable;
      label B_lf:
      d[60]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 240);
      abort();
      unreachable;
      label B_kf:
      d[64]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 256);
      abort();
      unreachable;
      label B_jf:
      d[68]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 272);
      abort();
      unreachable;
      label B_if:
      assert_fail(26957, 13402, 16037, 1426);
      unreachable;
      label B_hf:
      pm_diagnostic_list_append(l, b = a[44]:int, b, 135);
      a[42]:int = 2;
      a[43]:int = b;
      parser_lex(a);
      continue L_gf;
    }
  }
  label B_ab:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = pm_array_node_create(d + 288);
  if (a[45]:int != 163) goto B_qg;
  parser_lex(a);
  label B_qg:
  n = a + 244;
  j = c + 12;
  loop L_tg {
    b = e[0]:int;
    br_table[B_wg, B_ug, B_ug, B_ug, B_ug, B_ug, B_ug, B_ug, B_ug, B_ug, B_ug, B_ug, B_vg, ..B_xg](
      b + -151);
    label B_xg:
    if (b != 1) goto B_ug;
    label B_wg:
    (d + 464 + 8)[0]:int = (e + 8)[0]:int;
    d[58]:long = e[0]:long@4;
    if (b != 1) goto B_sg;
    pm_diagnostic_list_append(n, d[73]:int, d[74]:int, 134);
    d[116]:int = 2;
    d[118]:int = (a = a[44]:int);
    d[117]:int = a;
    goto B_rg;
    label B_vg:
    parser_lex(a);
    b = a[45]:int;
    label B_ug:
    br_table[B_ah, B_yg, ..B_zg](b + -150)
    label B_ah:
    d[116]:int = 3;
    d[118]:int = (b = a[40]:int);
    d[117]:int = b;
    d[114]:int = b;
    d[113]:int = b;
    d[112]:int = 3;
    b = pm_string_node_create_current_string(a, d + 464, e, d + 448);
    if (j[0]:int) goto B_bh;
    if (c[6]:int) goto B_bh;
    c[1]:int = b[1]:int;
    label B_bh:
    pm_node_list_append(j, b);
    c[2]:int = (b + 8)[0]:int;
    l = b[0]:ushort;
    if (l == 6) goto B_dh;
    if (l == 65) goto B_dh;
    if (l == 120) goto B_dh;
    if ((b + 3)[0]:ubyte & 64) goto B_ch;
    label B_dh:
    c[1]:short = c[1]:ushort & 49151;
    label B_ch:
    if (l != 136) goto B_eh;
    c[1]:short = c[1]:ushort | 1;
    label B_eh:
    if (e[0]:int != 150) goto B_zg;
    parser_lex(a);
    continue L_tg;
    label B_zg:
    pm_diagnostic_list_append(n, b = a[44]:int, b, 133);
    a[42]:int = 2;
    a[43]:int = b;
    continue L_tg;
    label B_yg:
  }
  (d + 464 + 8)[0]:int = (e + 8)[0]:int;
  d[58]:long = e[0]:long@4;
  label B_sg:
  expect1(a, 151, 134);
  label B_rg:
  pm_array_node_close_set(c, d + 464);
  goto B_a;
  label B_za:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  l = a + 244;
  k = a + 168;
  c = pm_array_node_create(d + 288);
  m = c + 12;
  loop L_fh {
    j = 0;
    loop L_gh {
      b = e[0]:int;
      br_table[B_uh, B_qh, B_hh, B_hh, B_hh, B_hh, B_hh, B_hh, B_hh, B_hh, B_hh, B_hh, B_hh, B_vh, ..B_wh](
        b + -150);
      label B_wh:
      br_table[B_sh, B_hh, B_th, ..B_rh](b + -36);
      label B_vh:
      if (eqz(j)) goto B_xh;
      if (m[0]:int) goto B_yh;
      if (c[6]:int) goto B_yh;
      c[1]:int = j[1]:int;
      label B_yh:
      pm_node_list_append(m, j);
      c[2]:int = (j + 8)[0]:int;
      b = j[0]:ushort;
      if (b == 6) goto B_ai;
      if (b == 65) goto B_ai;
      if (b == 120) goto B_ai;
      if ((j + 3)[0]:ubyte & 64) goto B_zh;
      label B_ai:
      c[1]:short = c[1]:ushort & 49151;
      label B_zh:
      if (b != 136) goto B_xh;
      c[1]:short = c[1]:ushort | 1;
      label B_xh:
      parser_lex(a);
      continue L_fh;
      label B_uh:
      d[116]:int = 3;
      d[118]:int = (b = a[40]:int);
      d[117]:int = b;
      d[114]:int = b;
      d[113]:int = b;
      d[112]:int = 3;
      if (j) goto B_bi;
      j = pm_symbol_node_create_current_string(a, d + 464, e, d + 448);
      parser_lex(a);
      continue L_gh;
      label B_bi:
      n = j[0]:ushort;
      if (n == 140) goto B_di;
      if (n != 86) goto B_ci;
      b = pm_string_node_create_current_string(a, d + 464, e, d + 448);
      parser_lex(a);
      n = j + 20;
      if (j[5]:int) goto B_ei;
      if (j[3]:int) goto B_ei;
      j[1]:int = b[1]:int;
      label B_ei:
      pm_node_list_append(n, b);
      (j + 8)[0]:int = (b + 8)[0]:int;
      continue L_gh;
      label B_di:
      i = pm_string_node_create_current_string(a, d + 464, k, d + 448);
      parser_lex(a);
      n = calloc(1, 40);
      if (eqz(n)) goto B_ph;
      n[8]:long@4 = 0L;
      n[3]:long@4 = 0L;
      n[2]:int = b;
      n[1]:int = b;
      n[0]:short = 86;
      n[1]:int = j[1]:int;
      b = n + 20;
      pm_node_list_append(b, j);
      n[2]:int = (j + 8)[0]:int;
      if (n[5]:int) goto B_fi;
      if (n[3]:int) goto B_fi;
      n[1]:int = i.b;
      label B_fi:
      pm_node_list_append(b, i);
      n[2]:int = (i + 8)[0]:int;
      j = n;
      continue L_gh;
      label B_ci:
      assert_fail(26957, 13402, 15787, 1426);
      unreachable;
      label B_th:
      if (j) goto B_hi;
      b = a[40]:int;
      j = calloc(1, 40);
      if (eqz(j)) goto B_oh;
      j[8]:long@4 = 0L;
      j[3]:long@4 = 0L;
      j[2]:int = b;
      j[1]:int = b;
      j[0]:short = 86;
      i = 0;
      goto B_gi;
      label B_hi:
      i = 0;
      if (j[0]:ushort != 140) goto B_gi;
      b = a[40]:int;
      n = calloc(1, 40);
      if (eqz(n)) goto B_nh;
      n[8]:long@4 = 0L;
      n[3]:long@4 = 0L;
      n[2]:int = b;
      n[1]:int = b;
      n[0]:short = 86;
      b = calloc(1, 48);
      if (eqz(b)) goto B_mh;
      p = j[1]:long@4;
      q = j[3]:long@4;
      r = j[5]:long@4;
      b[7]:long@4 = j[7]:long@4;
      b[5]:long@4 = r;
      b[3]:long@4 = q;
      b[1]:long@4 = p;
      b[0]:short = 138;
      b[1]:short = select_if(16388, 0, a[362]:ubyte);
      b[9]:long@4 = j[9]:long@4;
      (b + 44)[0]:int = (j + 44)[0]:int;
      free(j);
      j = n + 20;
      if (n[5]:int) goto B_ii;
      if (n[3]:int) goto B_ii;
      n[1]:int = b[1]:int;
      label B_ii:
      pm_node_list_append(j, b);
      n[1]:long@4 = b[1]:long@4;
      i = 1;
      j = n;
      label B_gi:
      n = j + 20;
      b = parse_string_part(a);
      if (j[5]:int) goto B_ji;
      if (j[3]:int) goto B_ji;
      j[1]:int = b[1]:int;
      label B_ji:
      pm_node_list_append(n, b);
      (j + 8)[0]:int = (b + 8)[0]:int;
      if (i) continue L_gh;
      j[1]:int = b[1]:int;
      continue L_gh;
      label B_sh:
      if (j) goto B_li;
      b = a[40]:int;
      j = calloc(1, 40);
      if (eqz(j)) goto B_lh;
      j[8]:long@4 = 0L;
      j[3]:long@4 = 0L;
      j[2]:int = b;
      j[1]:int = b;
      j[0]:short = 86;
      i = 0;
      goto B_ki;
      label B_li:
      i = 0;
      b = j[0]:ushort;
      if (b == 86) goto B_ki;
      if (b != 140) goto B_ih;
      b = a[40]:int;
      n = calloc(1, 40);
      if (eqz(n)) goto B_kh;
      n[8]:long@4 = 0L;
      n[3]:long@4 = 0L;
      n[2]:int = b;
      n[1]:int = b;
      n[0]:short = 86;
      b = calloc(1, 48);
      if (eqz(b)) goto B_jh;
      p = j[1]:long@4;
      q = j[3]:long@4;
      r = j[5]:long@4;
      b[7]:long@4 = j[7]:long@4;
      b[5]:long@4 = r;
      b[3]:long@4 = q;
      b[1]:long@4 = p;
      b[0]:short = 138;
      b[1]:short = select_if(16388, 0, a[362]:ubyte);
      b[9]:long@4 = j[9]:long@4;
      (b + 44)[0]:int = (j + 44)[0]:int;
      free(j);
      j = n + 20;
      if (n[5]:int) goto B_mi;
      if (n[3]:int) goto B_mi;
      n[1]:int = b[1]:int;
      label B_mi:
      pm_node_list_append(j, b);
      n[1]:long@4 = b[1]:long@4;
      i = 1;
      j = n;
      label B_ki:
      n = j + 20;
      b = parse_string_part(a);
      if (j[5]:int) goto B_ni;
      if (j[3]:int) goto B_ni;
      j[1]:int = b[1]:int;
      label B_ni:
      pm_node_list_append(n, b);
      (j + 8)[0]:int = (b + 8)[0]:int;
      if (i) continue L_gh;
      j[1]:int = b[1]:int;
      continue L_gh;
      label B_rh:
      if (b != 1) goto B_hh;
      label B_qh:
      if (eqz(j)) goto B_oi;
      pm_array_node_elements_append(c, j);
      b = e[0]:int;
      label B_oi:
      (d + 464 + 8)[0]:int = (e + 8)[0]:int;
      d[58]:long = e[0]:long@4;
      if (b != 1) goto B_qi;
      pm_diagnostic_list_append(l, d[73]:int, d[74]:int, 132);
      d[116]:int = 2;
      d[118]:int = (a = a[44]:int);
      d[117]:int = a;
      goto B_pi;
      label B_qi:
      expect1(a, 151, 132);
      label B_pi:
      pm_array_node_close_set(c, d + 464);
      goto B_a;
      label B_ph:
      d[24]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 96);
      abort();
      unreachable;
      label B_oh:
      d[28]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 112);
      abort();
      unreachable;
      label B_nh:
      d[32]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 128);
      abort();
      unreachable;
      label B_mh:
      d[36]:int = 48;
      fprintf(rodata[15455]:int, 31876, d + 144);
      abort();
      unreachable;
      label B_lh:
      d[40]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 160);
      abort();
      unreachable;
      label B_kh:
      d[44]:int = 40;
      fprintf(rodata[15455]:int, 31876, d + 176);
      abort();
      unreachable;
      label B_jh:
      d[48]:int = 48;
      fprintf(rodata[15455]:int, 31876, d + 192);
      abort();
      unreachable;
      label B_ih:
      assert_fail(26957, 13402, 15853, 1426);
      unreachable;
      label B_hh:
      pm_diagnostic_list_append(l, b = a[44]:int, b, 131);
      a[42]:int = 2;
      a[43]:int = b;
      parser_lex(a);
      continue L_gh;
    }
  }
  label B_ya:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  n = a + 244;
  c = pm_array_node_create(d + 288);
  j = c + 12;
  loop L_ti {
    b = e[0]:int;
    br_table[B_wi, B_ui, B_ui, B_ui, B_ui, B_ui, B_ui, B_ui, B_ui, B_ui, B_ui, B_ui, B_vi, ..B_xi](
      b + -151);
    label B_xi:
    if (b != 1) goto B_ui;
    label B_wi:
    (d + 464 + 8)[0]:int = (e + 8)[0]:int;
    d[58]:long = e[0]:long@4;
    if (b != 1) goto B_si;
    pm_diagnostic_list_append(n, d[73]:int, d[74]:int, 130);
    d[116]:int = 2;
    d[118]:int = (a = a[44]:int);
    d[117]:int = a;
    goto B_ri;
    label B_vi:
    parser_lex(a);
    b = a[45]:int;
    label B_ui:
    br_table[B_aj, B_yi, ..B_zi](b + -150)
    label B_aj:
    d[116]:int = 3;
    d[118]:int = (b = a[40]:int);
    d[117]:int = b;
    d[114]:int = b;
    d[113]:int = b;
    d[112]:int = 3;
    b = pm_symbol_node_create_current_string(a, d + 464, e, d + 448);
    if (j[0]:int) goto B_bj;
    if (c[6]:int) goto B_bj;
    c[1]:int = b[1]:int;
    label B_bj:
    pm_node_list_append(j, b);
    c[2]:int = (b + 8)[0]:int;
    l = b[0]:ushort;
    if (l == 6) goto B_dj;
    if (l == 65) goto B_dj;
    if (l == 120) goto B_dj;
    if ((b + 3)[0]:ubyte & 64) goto B_cj;
    label B_dj:
    c[1]:short = c[1]:ushort & 49151;
    label B_cj:
    if (l != 136) goto B_ej;
    c[1]:short = c[1]:ushort | 1;
    label B_ej:
    if (e[0]:int != 150) goto B_zi;
    parser_lex(a);
    continue L_ti;
    label B_zi:
    pm_diagnostic_list_append(n, b = a[44]:int, b, 129);
    a[42]:int = 2;
    a[43]:int = b;
    continue L_ti;
    label B_yi:
  }
  (d + 464 + 8)[0]:int = (e + 8)[0]:int;
  d[58]:long = e[0]:long@4;
  label B_si:
  expect1(a, 151, 130);
  label B_ri:
  pm_array_node_close_set(c, d + 464);
  goto B_a;
  label B_xa:
  e = a + 16;
  pm_state_stack_push(e, 1);
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  pm_assert_value_expression(a, c = parse_expression(a, 8, 1, 53));
  pm_state_stack_pop(e);
  expect3(a, 53);
  e = a + 168;
  if (a[45]:int != 75) goto B_gj;
  parser_lex(a);
  b = 0;
  goto B_fj;
  label B_gj:
  l = a + 20;
  pm_state_stack_push(l, 0);
  b = parse_statements(a, 32);
  pm_state_stack_pop(l);
  l = a[45]:int;
  if (l == 142) goto B_ij;
  if (l != 121) goto B_hj;
  label B_ij:
  parser_lex(a);
  label B_hj:
  expect1(a, 75, 209);
  label B_fj:
  c = pm_while_node_create(d + 288, e, c, b);
  goto B_a;
  label B_wa:
  e = a + 16;
  pm_state_stack_push(e, 1);
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  pm_assert_value_expression(a, c = parse_expression(a, 8, 1, 52));
  pm_state_stack_pop(e);
  expect3(a, 52);
  e = a + 168;
  if (a[45]:int != 75) goto B_kj;
  parser_lex(a);
  b = 0;
  goto B_jj;
  label B_kj:
  l = a + 20;
  pm_state_stack_push(l, 0);
  b = parse_statements(a, 31);
  pm_state_stack_pop(l);
  l = a[45]:int;
  if (l == 142) goto B_mj;
  if (l != 121) goto B_lj;
  label B_mj:
  parser_lex(a);
  label B_lj:
  expect1(a, 75, 207);
  label B_jj:
  c = pm_until_node_create(d + 288, e, c, b);
  goto B_a;
  label B_va:
  parser_lex(a);
  c = pm_true_node_create(a + 168);
  goto B_a;
  label B_ua:
  parser_lex(a);
  c = pm_self_node_create(a + 168);
  goto B_a;
  label B_ta:
  parser_lex(a);
  c = pm_retry_node_create(a + 168);
  goto B_a;
  label B_sa:
  parser_lex(a);
  c = pm_redo_node_create(a + 168);
  goto B_a;
  label B_ra:
  parser_lex(a);
  c = pm_nil_node_create(a + 168);
  goto B_a;
  label B_qa:
  parser_lex(a);
  (d + 296)[0]:int = (c = a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  b = parse_expression(a, 48, 0, 140);
  if (b[0]:ushort == 101) goto B_oj;
  c = a + 168;
  if (e[0]:int != 26) goto B_pj;
  l = a + 244;
  loop L_qj {
    parser_lex(a);
    (d + 448 + 8)[0]:int = (c + 8)[0]:int;
    d[56]:long = c[0]:long@4;
    if (a[45]:int != 29) goto B_sj;
    parser_lex(a);
    goto B_rj;
    label B_sj:
    pm_diagnostic_list_append(l, e = a[44]:int, e, 54);
    a[42]:int = 2;
    a[43]:int = e;
    label B_rj:
    b = pm_constant_path_node_create(a,
                                     b,
                                     d + 448,
                                     pm_constant_read_node_create(a, c));
    if (a[45]:int == 26) continue L_qj;
  }
  label B_pj:
  (d + 464 + 8)[0]:int = (c + 8)[0]:int;
  d[58]:long = (p = c[0]:long@4);
  if (i32_wrap_i64(p) == 29) goto B_tj;
  pm_diagnostic_list_append(a + 244, d[117]:int, d[118]:int, 140);
  label B_tj:
  l = a[87]:int;
  a[87]:int = 0;
  pm_parser_scope_push(a, 1);
  e = a[45]:int;
  if (e == 142) goto B_vj;
  if (e != 121) goto B_uj;
  label B_vj:
  parser_lex(a);
  e = a[45]:int;
  label B_uj:
  n = 0;
  j = 0;
  br_table[B_wj, B_yj, B_xj, B_yj, B_yj, B_yj, B_yj, B_yj, B_yj, B_yj, B_yj, B_yj, B_yj, B_yj, B_xj, ..B_yj](
    e + -75)
  label B_yj:
  n = 0;
  e = a + 20;
  pm_state_stack_push(e, 0);
  j = parse_statements(a, 20);
  pm_state_stack_pop(e);
  br_table[B_zj, B_wj, B_wj, B_wj, B_wj, B_wj, B_wj, B_wj, B_wj, B_wj, B_wj, B_wj, B_zj, ..B_wj](
    a[45]:int + -77)
  label B_zj:
  if (eqz(j)) goto B_xj;
  n = j;
  if (j[0]:ushort != 137) goto B_nj;
  label B_xj:
  j = parse_rescues_as_begin(a, n, 0);
  label B_wj:
  (d + 448 + 8)[0]:int = ((e = a[64]:int) + 8)[0]:int;
  p = e[0]:long@4;
  a[64]:int = e[3]:int;
  d[56]:long = p;
  free(e);
  a[87]:int = l;
  expect1(a, 75, 141);
  e = a[65]:int;
  if (eqz(e)) goto B_ak;
  loop L_ck {
    l = e[0]:int;
    if (l > 29) goto B_dk;
    l = 1 << l;
    if (l & 335552704) goto B_bk;
    if (l & 537919520) goto B_ak;
    label B_dk:
    e = e[1]:int;
    if (e) continue L_ck;
    goto B_ak;
  }
  label B_bk:
  pm_diagnostic_list_append(a + 244, d[73]:int, d[74]:int, 139);
  label B_ak:
  c = pm_module_node_create(a, d + 448, d + 288, b, d + 464, j, c);
  goto B_a;
  label B_oj:
  d[112]:int = 2;
  d[114]:int = (e = c[0]:int);
  d[113]:int = e;
  c = pm_module_node_create(a, 0, d + 288, b, d + 448, 0, d + 448);
  goto B_a;
  label B_nj:
  assert_fail(26476, 13402, 15630, 1426);
  unreachable;
  label B_pa:
  parser_lex(a);
  c = parse_conditional(a, 30);
  goto B_a;
  label B_oa:
  parser_lex(a);
  (d + 464 + 8)[0]:int = (a + 176)[0]:int;
  d[58]:long = a[42]:long@4;
  (d + 312)[0]:int = 0;
  (d + 304)[0]:long = 0L;
  (d + 288 + 8)[0]:long = 0L;
  d[36]:long = 0L;
  c = a[45]:int;
  if (c != 121) goto B_ek;
  parser_lex(a);
  c = a[45]:int;
  label B_ek:
  if (c != 123) goto B_gk;
  parser_lex(a);
  d[36]:long = (a + 172)[0]:long@4;
  if (a[45]:int != 125) goto B_hk;
  parser_lex(a);
  d[75]:long@4 = a[43]:long@4;
  c = 0;
  goto B_fk;
  label B_hk:
  c = parse_expression(a, 8, 1, 143);
  pm_conditional_predicate(c);
  if (a[357]:ubyte) goto B_fk;
  if (e[0]:int != 121) goto B_ik;
  parser_lex(a);
  label B_ik:
  expect1(a, 125, 96);
  d[75]:long@4 = a[43]:long@4;
  goto B_fk;
  label B_gk:
  c = parse_expression(a, 10, 1, 143);
  pm_conditional_predicate(c);
  label B_fk:
  c = pm_call_node_not_create(a, c, d + 464, d + 288);
  goto B_a;
  label B_na:
  if (b == 2) goto B_jk;
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, (a + 188)[0]:int, 192);
  label B_jk:
  parser_lex(a);
  c = pm_undef_node_create(a + 168);
  b = parse_undef_argument(a);
  if (b[0]:ushort != 101) goto B_kk;
  pm_node_destroy(a, b);
  goto B_a;
  label B_kk:
  (c + 8)[0]:int = (b + 8)[0]:int;
  l = c + 12;
  pm_node_list_append(l, b);
  if (e[0]:int != 27) goto B_a;
  loop L_lk {
    a[0]:int = 4224;
    parser_lex(a);
    b = parse_undef_argument(a);
    if (b[0]:ushort != 101) goto B_mk;
    pm_node_destroy(a, b);
    goto B_a;
    label B_mk:
    c[2]:int = (b + 8)[0]:int;
    pm_node_list_append(l, b);
    if (e[0]:int == 27) continue L_lk;
    goto B_a;
  }
  label B_ma:
  parser_lex(a);
  c = parse_conditional(a, 16);
  goto B_a;
  label B_la:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = malloc(8);
  if (eqz(c)) goto B_nk;
  c[0]:int = 15;
  b = a[65]:int;
  a[65]:int = c;
  c[1]:int = b;
  label B_nk:
  c = a + 168;
  b = e[0]:int;
  if (b != 161) goto B_pk;
  parser_lex(a);
  (d + 464 + 8)[0]:int = (c + 8)[0]:int;
  d[58]:long = c[0]:long@4;
  b = 0;
  if (eqz(token_begins_expression_p(a[45]:int))) goto B_qk;
  b = parse_expression(a, 48, 0, 92);
  label B_qk:
  b = pm_splat_node_create(d + 464, b);
  goto B_ok;
  label B_pk:
  if (eqz(token_begins_expression_p(b))) goto B_rk;
  b = parse_expression(a, 48, 0, 84);
  goto B_ok;
  label B_rk:
  pm_diagnostic_list_append(a + 244, b = d[73]:int, l = d[74]:int, 104);
  b = pm_missing_node_create(b, l);
  label B_ok:
  if (e[0]:int != 27) goto B_tk;
  b = parse_targets(a, b);
  goto B_sk;
  label B_tk:
  b = parse_target(a, b);
  label B_sk:
  e = a[65]:int;
  l = e[1]:int;
  free(e);
  a[65]:int = l;
  e = a + 16;
  pm_state_stack_push(e, 1);
  expect1(a, 82, 103);
  (d + 464 + 8)[0]:int = (j = c + 8)[0]:int;
  d[58]:long = c[0]:long@4;
  pm_assert_value_expression(a, l = parse_expression(a, 8, 1, 102));
  pm_state_stack_pop(e);
  e = a[45]:int;
  if (e != 72) goto B_vk;
  parser_lex(a);
  (d + 448 + 8)[0]:int = j[0]:int;
  d[56]:long = c[0]:long@4;
  e = a[45]:int;
  goto B_uk;
  label B_vk:
  d[112]:int = 3;
  d[114]:int = (j = a[40]:int);
  d[113]:int = j;
  label B_uk:
  if (e == 142) goto B_xk;
  if (e != 121) goto B_wk;
  label B_xk:
  parser_lex(a);
  e = a[45]:int;
  label B_wk:
  if (e != 75) goto B_zk;
  parser_lex(a);
  e = 0;
  goto B_yk;
  label B_zk:
  e = parse_statements(a, 14);
  expect1(a, 75, 105);
  label B_yk:
  c = pm_for_node_create(b, l, e, d + 288, d + 464, d + 448, c);
  goto B_a;
  label B_ka:
  parser_lex(a);
  c = pm_false_node_create(a + 168);
  goto B_a;
  label B_ja:
  if (b == 2) goto B_al;
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, (a + 188)[0]:int, 190);
  label B_al:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  b = a + 168;
  e = a[65]:int;
  if (eqz(e)) goto B_bl;
  loop L_dl {
    c = e[0]:int;
    if (c > 29) goto B_el;
    c = 1 << c;
    if (c & 335552704) goto B_cl;
    if (c & 537919520) goto B_bl;
    label B_el:
    e = e[1]:int;
    if (e) continue L_dl;
    goto B_bl;
  }
  label B_cl:
  if (a[363]:ubyte) goto B_bl;
  pm_diagnostic_list_append(a + 232, d[73]:int, d[74]:int, 218);
  label B_bl:
  expect1(a, 14, 68);
  (d + 464 + 8)[0]:int = (b + 8)[0]:int;
  d[58]:long = b[0]:long@4;
  e = parse_statements(a, 22);
  expect1(a, 15, 69);
  c = pm_post_execution_node_create(d + 288, d + 464, e, b);
  goto B_a;
  label B_ia:
  parser_lex(a);
  c = (a + 176)[0]:int;
  b = (a + 172)[0]:int;
  if (a[45]:int != 123) goto B_gl;
  parser_lex(a);
  (d + 288 + 8)[0]:int = ((j = a + 168) + 8)[0]:int;
  d[36]:long = j[0]:long@4;
  l = parse_expression(a, 8, 1, 64);
  if (eqz(a[357]:ubyte)) goto B_hl;
  d[116]:int = 3;
  d[118]:int = (a = a[40]:int);
  d[117]:int = a;
  goto B_fl;
  label B_hl:
  if (e[0]:int != 121) goto B_il;
  parser_lex(a);
  label B_il:
  expect1(a, 125, 96);
  (d + 464 + 8)[0]:int = (j + 8)[0]:int;
  d[58]:long = j[0]:long@4;
  goto B_fl;
  label B_gl:
  d[72]:int = 3;
  d[116]:int = 3;
  d[74]:int = (e = a[40]:int);
  d[73]:int = e;
  d[118]:int = e;
  d[117]:int = e;
  l = parse_expression(a, 14, 0, 64);
  label B_fl:
  d[83]:int = c;
  d[82]:int = b;
  c = pm_defined_node_create(d + 288, l, d + 464, d + 328);
  goto B_a;
  label B_ha:
  (d + 288 + 8)[0]:int = (c = (e + 8)[0]:int);
  d[36]:long = e[0]:long@4;
  d[116]:int = 3;
  d[118]:int = (l = a[40]:int);
  d[117]:int = l;
  d[112]:int = 2;
  d[114]:int = c;
  d[113]:int = c;
  c = malloc(8);
  if (eqz(c)) goto B_jl;
  c[0]:int = 7;
  l = a[65]:int;
  a[65]:int = c;
  c[1]:int = l;
  label B_jl:
  parser_lex(a);
  br_table[B_pl, B_ll, B_ll, B_ll, B_ll, B_pl, B_ll, B_pl, B_pl, B_pl, B_ll, B_ll, B_ll, B_ll, B_pl, B_pl, B_ll, B_pl, B_ll, B_ll, B_nl, B_ll, B_ll, B_ll, B_ll, B_nl, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_pl, B_pl, B_ll, B_pl, B_ll, B_ll, B_ll, B_ll, B_nl, B_pl, B_pl, B_pl, B_ll, B_ll, B_ll, B_ol, B_ll, B_nl, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_nl, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_nl, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_nl, B_ll, B_ll, B_nl, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_nl, B_nl, B_nl, B_ll, B_ll, B_ll, B_pl, B_pl, B_pl, B_pl, B_ll, B_ll, B_pl, B_ll, B_ll, B_ll, B_ll, B_ml, B_ll, B_ll, B_pl, B_ll, B_ll, B_ll, B_ll, B_ll, B_ll, B_pl, B_ll, B_ll, B_ll, B_pl, B_ll, B_ll, B_ll, B_ll, B_ll, B_pl, B_ll, B_pl, B_ll, B_pl, B_ll, B_ll, B_ll, B_ll, B_ll, B_pl, B_pl, B_ll, B_ll, B_ll, B_pl, B_pl, B_pl, B_pl, B_pl, ..B_ll](
    a[45]:int + -4)
  label B_pl:
  m = a[87]:int;
  j = 0;
  a[87]:int = 0;
  pm_parser_scope_push(a, 1);
  a[0]:int = 8;
  parser_lex(a);
  (d + 448 + 8)[0]:int = (a + 176)[0]:int;
  d[56]:long = a[42]:long@4;
  goto B_kl;
  label B_ol:
  parser_lex(a);
  br_table[B_rl, B_ql, B_ql, B_ql, B_rl, ..B_ql](a[45]:int + -26)
  label B_rl:
  j = pm_node_check_it(a, parse_variable_call(a));
  m = a[87]:int;
  a[87]:int = 0;
  pm_parser_scope_push(a, 1);
  a[0]:int = 128;
  parser_lex(a);
  (d + 472)[0]:int = (a + 176)[0]:int;
  d[58]:long = a[42]:long@4;
  parse_method_definition_name(d + 448, a);
  goto B_kl;
  label B_ql:
  m = a[87]:int;
  j = 0;
  a[87]:int = 0;
  pm_refute_numbered_parameter(a, (a + 172)[0]:int, (c = a + 176)[0]:int);
  pm_parser_scope_push(a, 1);
  (d + 456)[0]:int = c[0]:int;
  d[56]:long = a[42]:long@4;
  goto B_kl;
  label B_nl:
  m = a[87]:int;
  j = 0;
  a[87]:int = 0;
  pm_parser_scope_push(a, 1);
  parser_lex(a);
  (d + 400 + 8)[0]:int = (a + 176)[0]:int;
  d[50]:long = a[42]:long@4;
  c = a + 168;
  br_table[B_tl, B_sl, B_sl, B_sl, B_tl, ..B_sl](a[45]:int + -26)
  label B_tl:
  a[0]:int = 128;
  parser_lex(a);
  (d + 464 + 8)[0]:int = (c + 8)[0]:int;
  d[58]:long = c[0]:long@4;
  j = 0;
  br_table[B_dm, B_ul, B_ul, B_ul, B_ul, B_fm, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_cm, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_em, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_yl, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_bm, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_am, B_ul, B_ul, B_zl, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_ul, B_vl, B_xl, B_wl, ..B_ul](
    d[100]:int + -24)
  label B_fm:
  j = pm_constant_read_node_create(a, d + 400);
  goto B_ul;
  label B_em:
  j = pm_instance_variable_read_node_create(a, d + 400);
  goto B_ul;
  label B_dm:
  j = pm_class_variable_read_node_create(a, d + 400);
  goto B_ul;
  label B_cm:
  j = pm_global_variable_read_node_create(a, d + 400);
  goto B_ul;
  label B_bm:
  j = pm_nil_node_create(d + 400);
  goto B_ul;
  label B_am:
  j = pm_self_node_create(d + 400);
  goto B_ul;
  label B_zl:
  j = pm_true_node_create(d + 400);
  goto B_ul;
  label B_yl:
  j = pm_false_node_create(d + 400);
  goto B_ul;
  label B_xl:
  j = pm_source_file_node_create(a, d + 400);
  goto B_ul;
  label B_wl:
  j = pm_source_line_node_create(d + 400);
  goto B_ul;
  label B_vl:
  j = pm_source_encoding_node_create(d + 400);
  label B_ul:
  parse_method_definition_name(d + 448, a);
  goto B_kl;
  label B_sl:
  (d + 448 + 8)[0]:int = (c + 8)[0]:int;
  d[56]:long = c[0]:long@4;
  goto B_kl;
  label B_ml:
  c = a[65]:int;
  l = c[1]:int;
  free(c);
  a[65]:int = l;
  parser_lex(a);
  (d + 400 + 8)[0]:int = (a + 176)[0]:int;
  d[50]:long = a[42]:long@4;
  pm_assert_value_expression(a, l = parse_expression(a, 2, 1, 61));
  c = a + 168;
  if (a[45]:int != 121) goto B_gm;
  parser_lex(a);
  label B_gm:
  expect1(a, 125, 96);
  a[0]:int = 128;
  (d + 384 + 8)[0]:int = (j = c + 8)[0]:int;
  d[48]:long = c[0]:long@4;
  expect2(a, 30, 26, 62);
  (d + 464 + 8)[0]:int = j[0]:int;
  d[58]:long = c[0]:long@4;
  j = pm_parentheses_node_create(d + 400, l, d + 384);
  m = a[87]:int;
  a[87]:int = 0;
  pm_parser_scope_push(a, 1);
  c = malloc(8);
  if (eqz(c)) goto B_hm;
  c[0]:int = 7;
  l = a[65]:int;
  a[65]:int = c;
  c[1]:int = l;
  label B_hm:
  parse_method_definition_name(d + 448, a);
  goto B_kl;
  label B_ll:
  m = a[87]:int;
  j = 0;
  a[87]:int = 0;
  pm_parser_scope_push(a, 1);
  parse_method_definition_name(d + 448, a);
  label B_kl:
  l = d[112]:int;
  if (l != 2) goto B_im;
  pm_diagnostic_list_append(a + 244, (a + 172)[0]:int, (a + 176)[0]:int, 57);
  label B_im:
  e = e[0]:int;
  br_table[B_mm, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_nm, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_lm, B_km, B_lm, B_km, B_km, B_km, B_km, B_km, B_km, B_lm, B_km, B_km, B_lm, B_km, B_km, B_km, B_lm, B_lm, ..B_om](
    e + -109);
  label B_om:
  br_table[B_lm, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_lm, B_km, B_km, B_km, B_km, B_lm, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_km, B_lm, B_km, B_km, B_km, B_km, B_km, B_km, B_lm, B_km, B_lm, ..B_km](
    e + -4);
  label B_nm:
  parser_lex(a);
  (d + 400 + 8)[0]:int = (a + 176)[0]:int;
  d[50]:long = a[42]:long@4;
  e = a + 168;
  n = 0;
  if (a[45]:int == 125) goto B_pm;
  n = parse_parameters(a, 14, 1, 0, 1);
  label B_pm:
  a[356]:byte = 1;
  a[0]:int = 1;
  expect1(a, 125, 60);
  (d + 384 + 8)[0]:int = (e + 8)[0]:int;
  d[48]:long = e[0]:long@4;
  goto B_jm;
  label B_mm:
  a[0]:int = a[0]:int | 1024;
  label B_lm:
  d[100]:int = 3;
  d[96]:int = 3;
  d[102]:int = (e = a[40]:int);
  d[101]:int = e;
  d[98]:int = e;
  d[97]:int = e;
  n = parse_parameters(a, 14, 0, 0, 1);
  goto B_jm;
  label B_km:
  d[100]:int = 3;
  d[96]:int = 3;
  d[102]:int = (e = a[40]:int);
  d[101]:int = e;
  d[98]:int = e;
  d[97]:int = e;
  n = 0;
  label B_jm:
  k = (a[64]:int)[0]:int;
  e = a[65]:int;
  c = e[1]:int;
  free(e);
  a[65]:int = c;
  e = a[45]:int;
  if (e != 39) goto B_sm;
  parser_lex(a);
  if (l != 55) goto B_tm;
  e = d[114]:int;
  if (e - (c = d[113]:int) < 2) goto B_tm;
  if ((e + -1)[0]:ubyte != 61) goto B_tm;
  pm_diagnostic_list_append(a + 244, c, e, 56);
  label B_tm:
  (d + 368 + 8)[0]:int = (a + 176)[0]:int;
  d[46]:long = a[42]:long@4;
  e = malloc(8);
  if (eqz(e)) goto B_um;
  e[0]:int = 6;
  c = a[65]:int;
  a[65]:int = e;
  e[1]:int = c;
  label B_um:
  i = a + 16;
  pm_state_stack_push(i, 0);
  c = pm_statements_node_create(a);
  e = parse_expression(a, 15, b < 8, 55);
  if (a[45]:int != 90) goto B_vm;
  parser_lex(a);
  (d + 352 + 8)[0]:int = ((o = a + 168) + 8)[0]:int;
  d[44]:long = o[0];
  e = pm_rescue_modifier_node_create(e,
                                     d + 352,
                                     parse_expression(a, b, 0, 185));
  label B_vm:
  pm_statements_node_body_append(c, e);
  pm_state_stack_pop(i);
  e = a[65]:int;
  b = e[1]:int;
  free(e);
  a[65]:int = b;
  d[88]:int = 3;
  d[90]:int = (e = a[40]:int);
  d[89]:int = e;
  goto B_rm;
  label B_sm:
  d[94]:int = (c = a[40]:int);
  d[93]:int = c;
  d[92]:int = 3;
  if (d[100]:int != 3) goto B_xm;
  a[356]:byte = 1;
  a[0]:int = 1;
  expect2(a, 121, 142, 59);
  goto B_wm;
  label B_xm:
  if (e == 142) goto B_ym;
  if (e != 121) goto B_wm;
  label B_ym:
  parser_lex(a);
  label B_wm:
  c = 0;
  e = a + 20;
  pm_state_stack_push(e, 0);
  b = a + 16;
  pm_state_stack_push(b, 0);
  br_table[B_zm, B_bn, B_an, B_bn, B_bn, B_bn, B_bn, B_bn, B_bn, B_bn, B_bn, B_bn, B_bn, B_bn, B_an, ..B_bn](
    a[45]:int + -75)
  label B_bn:
  pm_state_stack_push(e, 0);
  i = parse_statements(a, 6);
  pm_state_stack_pop(e);
  c = i;
  br_table[B_cn, B_zm, B_zm, B_zm, B_zm, B_zm, B_zm, B_zm, B_zm, B_zm, B_zm, B_zm, B_cn, ..B_zm](
    a[45]:int + -77)
  label B_cn:
  c = 0;
  if (eqz(i)) goto B_an;
  c = i;
  if (i.a != 137) goto B_qm;
  label B_an:
  c = parse_rescues_as_begin(a, c, 1);
  label B_zm:
  pm_state_stack_pop(e);
  pm_state_stack_pop(b);
  expect1(a, 75, 63);
  (d + 360)[0]:int = (a + 176)[0]:int;
  d[44]:long = a[42]:long@4;
  label B_rm:
  (d + 336 + 8)[0]:int = ((e = a[64]:int) + 8)[0]:int;
  p = e[0]:long@4;
  a[64]:int = e[3]:int;
  d[42]:long = p;
  free(e);
  a[87]:int = m;
  if (l != 11) goto B_dn;
  d[114]:int =
    select_if(b = (e = d[114]:int) + -1, e, b[0]:ubyte == 64);
  label B_dn:
  c = pm_def_node_create(a,
                         d + 448,
                         j,
                         n,
                         c,
                         d + 336,
                         k,
                         d + 288,
                         d + 464,
                         d + 400,
                         d + 384,
                         d + 368,
                         d + 352);
  goto B_a;
  label B_qm:
  assert_fail(26476, 13402, 15367, 1426);
  unreachable;
  label B_ga:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  l = a + 16;
  pm_state_stack_push(l, 0);
  c = a + 168;
  if (a[45]:int != 115) goto B_in;
  parser_lex(a);
  (d + 464 + 8)[0]:int = (c + 8)[0]:int;
  d[58]:long = c[0]:long@4;
  pm_assert_value_expression(a, j = parse_expression(a, 10, 1, 86));
  n = a[87]:int;
  a[87]:int = 0;
  pm_parser_scope_push(a, 1);
  e = a[45]:int;
  if (e == 142) goto B_kn;
  if (e != 121) goto B_jn;
  label B_kn:
  parser_lex(a);
  e = a[45]:int;
  label B_jn:
  m = 0;
  b = 0;
  br_table[B_ln, B_nn, B_mn, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_nn, B_mn, ..B_nn](
    e + -75)
  label B_nn:
  m = 0;
  e = a + 20;
  pm_state_stack_push(e, 0);
  b = parse_statements(a, 29);
  pm_state_stack_pop(e);
  br_table[B_on, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_ln, B_on, ..B_ln](
    a[45]:int + -77)
  label B_on:
  if (eqz(b)) goto B_mn;
  m = b;
  if (b[0]:ushort != 137) goto B_hn;
  label B_mn:
  b = parse_rescues_as_begin(a, m, 0);
  label B_ln:
  expect1(a, 75, 44);
  (d + 448 + 8)[0]:int = ((e = a[64]:int) + 8)[0]:int;
  p = e[0]:long@4;
  a[64]:int = e[3]:int;
  d[56]:long = p;
  free(e);
  pm_state_stack_pop(l);
  a[87]:int = n;
  c = 
    pm_singleton_class_node_create(d + 448, d + 288, d + 464, j, b, c);
  goto B_a;
  label B_in:
  j = parse_expression(a, 48, 0, 42);
  (d + 464 + 8)[0]:int = (c + 8)[0]:int;
  d[58]:long = (p = c[0]:long@4);
  if (i32_wrap_i64(p) == 29) goto B_pn;
  pm_diagnostic_list_append(a + 244, d[117]:int, d[118]:int, 42);
  label B_pn:
  if (e[0]:int == 112) goto B_qn;
  m = a[87]:int;
  k = 0;
  a[87]:int = 0;
  d[112]:int = 3;
  d[114]:int = (b = a[40]:int);
  d[113]:int = b;
  pm_parser_scope_push(a, 1);
  goto B_gn;
  label B_qn:
  a[356]:byte = 1;
  a[0]:int = 1;
  (d + 448 + 8)[0]:int = (e + 8)[0]:int;
  d[56]:long = e[0]:long@4;
  parser_lex(a);
  pm_assert_value_expression(a, k = parse_expression(a, 8, 1, 43));
  m = a[87]:int;
  a[87]:int = 0;
  b = d[112]:int;
  pm_parser_scope_push(a, 1);
  if (b == 3) goto B_gn;
  expect2(a, 121, 142, 45);
  goto B_fn;
  label B_hn:
  assert_fail(26476, 13402, 15043, 1426);
  unreachable;
  label B_gn:
  b = e[0]:int;
  if (b == 142) goto B_rn;
  if (b != 121) goto B_en;
  label B_rn:
  parser_lex(a);
  label B_fn:
  b = e[0]:int;
  label B_en:
  e = 0;
  n = 0;
  br_table[B_tn, B_vn, B_un, B_vn, B_vn, B_vn, B_vn, B_vn, B_vn, B_vn, B_vn, B_vn, B_vn, B_vn, B_un, ..B_vn](
    b + -75)
  label B_vn:
  e = 0;
  b = a + 20;
  pm_state_stack_push(b, 0);
  n = parse_statements(a, 5);
  pm_state_stack_pop(b);
  br_table[B_wn, B_tn, B_tn, B_tn, B_tn, B_tn, B_tn, B_tn, B_tn, B_tn, B_tn, B_tn, B_wn, ..B_tn](
    a[45]:int + -77)
  label B_wn:
  if (eqz(n)) goto B_un;
  e = n;
  if (n[0]:ushort != 137) goto B_sn;
  label B_un:
  n = parse_rescues_as_begin(a, e, 0);
  label B_tn:
  expect1(a, 75, 44);
  e = a[65]:int;
  if (eqz(e)) goto B_xn;
  loop L_zn {
    b = e[0]:int;
    if (b > 29) goto B_ao;
    b = 1 << b;
    if (b & 335552704) goto B_yn;
    if (b & 537919520) goto B_xn;
    label B_ao:
    e = e[1]:int;
    if (e) continue L_zn;
    goto B_xn;
  }
  label B_yn:
  pm_diagnostic_list_append(a + 244, d[73]:int, d[74]:int, 41);
  label B_xn:
  (d + 400 + 8)[0]:int = ((e = a[64]:int) + 8)[0]:int;
  p = e[0]:long@4;
  a[64]:int = e[3]:int;
  d[50]:long = p;
  free(e);
  pm_state_stack_pop(l);
  a[87]:int = m;
  br_table[B_bo, B_co, B_co, B_co, B_co, B_bo, ..B_co](
    j[0]:ushort + -37)
  label B_co:
  pm_diagnostic_list_append(a + 244, j[1]:int, (j + 8)[0]:int, 42);
  label B_bo:
  c = 
    pm_class_node_create(a, d + 400, d + 288, j, d + 464, d + 448, k, n, c);
  goto B_a;
  label B_sn:
  assert_fail(26476, 13402, 15096, 1426);
  unreachable;
  label B_fa:
  parser_lex(a);
  (d + 464 + 8)[0]:int = (a + 176)[0]:int;
  d[58]:long = a[42]:long@4;
  (d + 312)[0]:int = 0;
  (d + 304)[0]:long = 0L;
  e = d + 288 + 8;
  e[0]:long = 0L;
  d[36]:long = 0L;
  parse_arguments_list(a, d + 288, 0, c);
  c = pm_yield_node_create(d + 464, d + 288, e[0]:int, d + 300);
  goto B_a;
  label B_ea:
  parser_lex(a);
  (d + 464 + 8)[0]:int = (a + 176)[0]:int;
  d[58]:long = a[42]:long@4;
  (d + 312)[0]:int = 0;
  (d + 304)[0]:long = 0L;
  e = d + 288 + 8;
  e[0]:long = 0L;
  d[36]:long = 0L;
  parse_arguments_list(a, d + 288, 1, c);
  if (d[72]:int | e[0]:int) goto B_do;
  a = d[77]:int;
  if (eqz(a)) goto B_eo;
  if (a[0]:ushort != 14) goto B_do;
  label B_eo:
  c = pm_forwarding_super_node_create(d + 464, d + 288);
  goto B_a;
  label B_do:
  c = pm_super_node_create(d + 464, d + 288);
  goto B_a;
  label B_da:
  parser_lex(a);
  (d + 464 + 8)[0]:int = (a + 176)[0]:int;
  d[58]:long = a[42]:long@4;
  (d + 312)[0]:int = 0;
  (d + 304)[0]:long = 0L;
  (d + 288 + 8)[0]:long = 0L;
  d[36]:long = 0L;
  c = token_begins_expression_p(a[45]:int);
  e = a[45]:int;
  if (c) goto B_go;
  if (e + -161 > 1) goto B_fo;
  label B_go:
  if ((e * 12 + 63600)[0]:int + -22 > -22) goto B_fo;
  parse_arguments(a, d + 288, 0, 1);
  label B_fo:
  br_table[B_ko, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_jo, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_ho, B_io, ..B_ho](
    d[116]:int + -66)
  label B_ko:
  c = pm_break_node_create(d + 464, d[74]:int);
  goto B_a;
  label B_jo:
  c = pm_next_node_create(d + 464, d[74]:int);
  goto B_a;
  label B_io:
  br_table[B_mo, B_lo, B_lo, B_lo, B_lo, B_lo, B_lo, B_lo, B_lo, B_lo, B_lo, B_lo, B_lo, B_lo, B_lo, B_mo, ..B_lo](
    (a[65]:int)[0]:int + -5)
  label B_mo:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, (a + 188)[0]:int, 188);
  label B_lo:
  c = pm_return_node_create(d + 464, d[74]:int);
  goto B_a;
  label B_ho:
  assert_fail(26957, 13402, 14992, 1426);
  unreachable;
  label B_ca:
  if (b == 2) goto B_no;
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, (a + 188)[0]:int, 191);
  label B_no:
  parser_lex(a);
  (d + 288 + 8)[0]:int = (e = a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  expect1(a, 14, 27);
  (d + 464 + 8)[0]:int = e[0]:int;
  d[58]:long = a[42]:long@4;
  e = parse_statements(a, 24);
  expect1(a, 15, 28);
  c = a + 168;
  br_table[B_oo, B_po, B_po, B_po, B_po, B_oo, ..B_po](
    (a[65]:int)[0]:int + -19)
  label B_po:
  pm_diagnostic_list_append(a + 244, d[73]:int, d[74]:int, 29);
  label B_oo:
  c = pm_pre_execution_node_create(d + 288, d + 464, e, c);
  goto B_a;
  label B_ba:
  parser_lex(a);
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  e = a[45]:int;
  if (e == 142) goto B_ro;
  if (e != 121) goto B_qo;
  label B_ro:
  parser_lex(a);
  e = a[45]:int;
  label B_qo:
  b = a + 168;
  c = e + -75;
  if (c > 14) goto B_to;
  e = 0;
  if (1 << c & 16389) goto B_so;
  label B_to:
  c = a + 20;
  pm_state_stack_push(c, 0);
  e = parse_statements(a, 0);
  pm_state_stack_pop(c);
  c = a[45]:int;
  if (c == 142) goto B_uo;
  if (c != 121) goto B_so;
  label B_uo:
  parser_lex(a);
  label B_so:
  parse_rescues(a, c = pm_begin_node_create(d + 288, e), 0);
  expect1(a, 75, 26);
  (c + 8)[0]:int = (a + 176)[0]:int;
  pm_begin_node_end_keyword_set(c, b);
  e = c[7]:int;
  if (eqz(e)) goto B_a;
  if (c[6]:int) goto B_a;
  pm_diagnostic_list_append(a + 244, e[1]:int, (e + 8)[0]:int, 25);
  goto B_a;
  label B_aa:
  parser_lex(a);
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  b = 0;
  c = a[45]:int;
  l = c + -75;
  if (l > 27) goto B_wo;
  if (1 << l & 134217857) goto B_vo;
  label B_wo:
  if (c == 142) goto B_yo;
  if (c != 121) goto B_xo;
  label B_yo:
  loop L_zo {
    parser_lex(a);
    c = a[45]:int;
    if (c == 121) continue L_zo;
    if (c == 142) continue L_zo;
    goto B_vo;
  }
  label B_xo:
  if (token_begins_expression_p(c)) goto B_ap;
  c = e[0]:int;
  goto B_vo;
  label B_ap:
  pm_assert_value_expression(a, b = parse_expression(a, 8, 1, 36));
  loop L_bp {
    c = e[0]:int;
    if (c == 142) goto B_cp;
    if (c != 121) goto B_vo;
    label B_cp:
    parser_lex(a);
    continue L_bp;
  }
  label B_vo:
  f = a + 168;
  if (c != 75) goto B_dp;
  parser_lex(a);
  pm_diagnostic_list_append(a + 244, d[73]:int, d[74]:int, 39);
  c = pm_case_node_create(d + 288, b, f);
  goto B_a;
  label B_dp:
  d[116]:int = 3;
  d[118]:int = (l = a[40]:int);
  d[117]:int = l;
  if (c != 102) goto B_gp;
  c = pm_case_node_create(d + 288, b, d + 464);
  b = e[0]:int;
  if (b != 102) goto B_ip;
  h = c + 16;
  o = a + 244;
  loop L_jp {
    parser_lex(a);
    l = a[44]:int;
    b = a[43]:int;
    n = calloc(1, 36);
    if (eqz(n)) goto B_np;
    n[4]:int = l;
    n[3]:int = b;
    n[1]:int = b;
    n[0]:short = 145;
    i = n + 20;
    loop L_op {
      if (e[0]:int != 161) goto B_qp;
      parser_lex(a);
      m = a[44]:int;
      k = a[43]:int;
      l = parse_expression(a, 14, 0, 92);
      b = pm_check_value_expression(l);
      if (eqz(b)) goto B_rp;
      pm_diagnostic_list_append(o, b[1]:int, (b + 8)[0]:int, 208);
      label B_rp:
      b = calloc(1, 24);
      if (eqz(b)) goto B_mp;
      j = m;
      if (eqz(l)) goto B_sp;
      j = (l + 8)[0]:int;
      label B_sp:
      b[5]:int = l;
      b[4]:int = m;
      b[3]:int = k;
      b[2]:int = j;
      b[1]:int = k;
      b[0]:short = 136;
      n[2]:int = j;
      pm_node_list_append(i, b);
      if (l[0]:ushort != 101) goto B_pp;
      goto B_lp;
      label B_qp:
      b = parse_expression(a, 14, 0, 37);
      l = pm_check_value_expression(b);
      if (eqz(l)) goto B_tp;
      pm_diagnostic_list_append(o, l[1]:int, (l + 8)[0]:int, 208);
      label B_tp:
      n[2]:int = (b + 8)[0]:int;
      pm_node_list_append(i, b);
      if (b[0]:ushort == 101) goto B_lp;
      label B_pp:
      b = e[0]:int;
      if (b != 27) goto B_kp;
      parser_lex(a);
      continue L_op;
    }
    label B_np:
    d[12]:int = 36;
    fprintf(rodata[15455]:int, 31876, d + 48);
    abort();
    unreachable;
    label B_mp:
    d[16]:int = 24;
    fprintf(rodata[15455]:int, 31876, d + 64);
    abort();
    unreachable;
    label B_lp:
    b = e[0]:int;
    label B_kp:
    if (b == 95) goto B_xp;
    if (b == 142) goto B_yp;
    if (b != 121) goto B_wp;
    label B_yp:
    parser_lex(a);
    b = a[45]:int;
    if (b != 95) goto B_up;
    label B_xp:
    parser_lex(a);
    goto B_vp;
    label B_wp:
    pm_diagnostic_list_append(o, b = a[44]:int, b, 100);
    a[42]:int = 2;
    a[43]:int = b;
    label B_vp:
    b = e[0]:int;
    label B_up:
    b = b + -73;
    if (b > 29) goto B_aq;
    if (1 << b & 536870917) goto B_zp;
    label B_aq:
    b = parse_statements(a, 3);
    if (eqz(b)) goto B_zp;
    l = (b + 8)[0]:int;
    if (l <= n[2]:int) goto B_bq;
    n[2]:int = l;
    label B_bq:
    n[8]:int = b;
    label B_zp:
    if (n[0]:ushort != 145) goto B_hp;
    pm_node_list_append(h, n);
    c[2]:int = n[2]:int;
    b = e[0]:int;
    if (b == 102) continue L_jp;
  }
  label B_ip:
  if (eqz(c[4]:int)) goto B_fp;
  goto B_ep;
  label B_hp:
  assert_fail(26545, 13402, 2280, 12648);
  unreachable;
  label B_gp:
  c = pm_case_match_node_create(d + 288, b, d + 464);
  if (b) goto B_cq;
  pm_diagnostic_list_append(a + 244, d[73]:int, d[74]:int, 38);
  label B_cq:
  b = e[0]:int;
  if (b != 82) goto B_dq;
  var s:int = c + 16;
  var t:int = a + 244;
  loop L_eq {
    a[356]:byte = 0;
    a[0]:int = 1025;
    b = a[359]:ubyte;
    a[359]:byte = 1;
    parser_lex(a);
    o = a[44]:int;
    j = a[43]:int;
    l = parse_pattern(a, 1, 167);
    a[359]:byte = b;
    b = a[45]:int;
    br_table[B_iq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_fq, B_hq, ..B_fq](
      b + -81);
    label B_iq:
    parser_lex(a);
    (d + 448 + 8)[0]:int = (f + 8)[0]:int;
    d[56]:long = f[0]:long@4;
    n = parse_expression(a, 14, 1, 47);
    b = pm_check_value_expression(n);
    if (eqz(b)) goto B_jq;
    pm_diagnostic_list_append(t, b[1]:int, (b + 8)[0]:int, 208);
    label B_jq:
    l = pm_if_node_modifier_create(a, l, d + 448, n);
    goto B_gq;
    label B_hq:
    parser_lex(a);
    (d + 448 + 8)[0]:int = (f + 8)[0]:int;
    d[56]:long = f[0]:long@4;
    n = parse_expression(a, 14, 1, 51);
    b = pm_check_value_expression(n);
    if (eqz(b)) goto B_kq;
    pm_diagnostic_list_append(t, b[1]:int, (b + 8)[0]:int, 208);
    label B_kq:
    l = pm_unless_node_modifier_create(a, l, d + 448, n);
    label B_gq:
    b = e[0]:int;
    label B_fq:
    if (b == 95) goto B_pq;
    if (b == 142) goto B_qq;
    if (b != 121) goto B_nq;
    label B_qq:
    parser_lex(a);
    b = a[45]:int;
    if (b != 95) goto B_oq;
    label B_pq:
    parser_lex(a);
    i = a[43]:int;
    h = a[42]:int;
    goto B_mq;
    label B_oq:
    h = 3;
    i = a[40]:int;
    u = i;
    goto B_lq;
    label B_nq:
    pm_diagnostic_list_append(t, i = a[44]:int, i, 100);
    h = 2;
    a[42]:int = 2;
    a[43]:int = i;
    label B_mq:
    b = a[45]:int;
    u = a[44]:int;
    label B_lq:
    b = b + -73;
    if (b > 9) goto B_xq;
    if (1 << b & 517) goto B_wq;
    label B_xq:
    n = parse_statements(a, 4);
    b = calloc(1, 36);
    if (eqz(b)) goto B_vq;
    if (n) goto B_uq;
    goto B_tq;
    label B_wq:
    b = calloc(1, 36);
    if (b) goto B_tq;
    label B_vq:
    d[20]:int = 36;
    fprintf(rodata[15455]:int, 31876, d + 80);
    abort();
    unreachable;
    label B_uq:
    g = (n + 8)[0]:int;
    m = 0;
    k = 0;
    if (h == 3) goto B_rq;
    goto B_sq;
    label B_tq:
    n = 0;
    if (h == 3) goto B_yq;
    g = u;
    goto B_sq;
    label B_yq:
    g = (l + 8)[0]:int;
    n = 0;
    m = 0;
    k = 0;
    goto B_rq;
    label B_sq:
    m = i;
    k = u;
    label B_rq:
    b[8]:int = k;
    b[7]:int = m;
    b[6]:int = o;
    b[5]:int = j;
    b[4]:int = n;
    b[3]:int = l;
    b[2]:int = g;
    b[1]:int = j;
    b[0]:short = 71;
    pm_node_list_append(s, b);
    c[2]:int = b[2]:int;
    b = e[0]:int;
    if (b == 82) continue L_eq;
  }
  label B_dq:
  if (c[4]:int) goto B_ep;
  label B_fp:
  pm_diagnostic_list_append(a + 244, d[73]:int, d[74]:int, 39);
  b = a[45]:int;
  label B_ep:
  if (b == 142) goto B_ar;
  if (b != 121) goto B_zq;
  label B_ar:
  parser_lex(a);
  b = a[45]:int;
  label B_zq:
  if (b != 73) goto B_br;
  parser_lex(a);
  (d + 448 + 8)[0]:int = (f + 8)[0]:int;
  d[56]:long = f[0]:long@4;
  b = 0;
  if (a[45]:int == 75) goto B_cr;
  b = parse_statements(a, 9);
  label B_cr:
  c[7]:int = (e = pm_else_node_create(d + 448, b, e));
  (c + 8)[0]:int = (e + 8)[0]:int;
  label B_br:
  expect1(a, 75, 40);
  (c + 8)[0]:int = (e = (a + 176)[0]:int);
  c[0]:ushort != 25;
  c[10]:int = (a + 172)[0]:int;
  c[11]:int = e;
  goto B_a;
  label B_z:
  if (b == 2) goto B_dr;
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, (a + 188)[0]:int, 189);
  label B_dr:
  parser_lex(a);
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = parse_alias_argument(a, 1);
  e = parse_alias_argument(a, 0);
  b = c[0]:ushort;
  if (b > 85) goto B_hr;
  if (b == 10) goto B_gr;
  if (b == 62) goto B_gr;
  goto B_er;
  label B_hr:
  if (b == 86) goto B_fr;
  if (b == 140) goto B_fr;
  if (b != 109) goto B_er;
  label B_gr:
  b = e[0]:ushort;
  if (b == 10) goto B_ir;
  if (b == 62) goto B_ir;
  pm_diagnostic_list_append(a + 244, e[1]:int, (e + 8)[0]:int, 0);
  label B_ir:
  c = pm_alias_global_variable_node_create(d + 288, c, e);
  goto B_a;
  label B_fr:
  b = e[0]:ushort;
  if (b == 86) goto B_er;
  if (b == 140) goto B_er;
  pm_diagnostic_list_append(a + 244, e[1]:int, (e + 8)[0]:int, 0);
  label B_er:
  c = pm_alias_method_node_create(d + 288, c, e);
  goto B_a;
  label B_y:
  parser_lex(a);
  c = pm_source_line_node_create(a + 168);
  goto B_a;
  label B_x:
  parser_lex(a);
  c = pm_source_file_node_create(a, a + 168);
  goto B_a;
  label B_w:
  parser_lex(a);
  c = pm_source_encoding_node_create(a + 168);
  goto B_a;
  label B_v:
  e = a[162]:ushort;
  parser_lex(a);
  c = pm_integer_node_rational_imaginary_create(e, a + 168);
  goto B_a;
  label B_u:
  e = a[162]:ushort;
  parser_lex(a);
  c = pm_integer_node_rational_create(e, a + 168);
  goto B_a;
  label B_t:
  e = a[162]:ushort;
  parser_lex(a);
  c = pm_integer_node_imaginary_create(e, a + 168);
  goto B_a;
  label B_s:
  e = a[162]:ushort;
  parser_lex(a);
  c = pm_integer_node_create(e, a + 168);
  goto B_a;
  label B_r:
  parser_lex(a);
  c = pm_instance_variable_read_node_create(a, a + 168);
  if (b == 2) goto B_jr;
  c = c;
  goto B_a;
  label B_jr:
  if (e[0]:int == 27) goto B_kr;
  c = c;
  goto B_a;
  label B_kr:
  c = parse_targets_validate(a, c);
  goto B_a;
  label B_q:
  b = a[6]:int;
  if (b[0]:int != 3) goto B_lr;
  l = (b + 12)[0]:int;
  j = (b + 16)[0]:int;
  parser_lex(a);
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  c = a[45]:int;
  if (c == 53) goto B_or;
  if (c != 1) goto B_nr;
  label B_or:
  c = a + 168;
  lex_mode_pop(a);
  expect1(a, 53, 111);
  d[116]:int = 150;
  d[118]:int = (b = (a + 172)[0]:int);
  d[117]:int = b;
  if (l != 96) goto B_qr;
  d[110]:int = 0;
  d[54]:long = 0L;
  c = pm_xstring_node_create_unescaped(d + 288, d + 464, c, d + 432);
  goto B_pr;
  label B_qr:
  d[106]:int = 0;
  d[52]:long = 0L;
  c = pm_string_node_create_unescaped(a, d + 288, d + 464, c, d + 416);
  label B_pr:
  (c + 8)[0]:int = d[74]:int;
  goto B_mr;
  label B_nr:
  c = parse_string_part(a);
  if (c) goto B_rr;
  c = pm_missing_node_create((a + 172)[0]:int, (a + 176)[0]:int);
  goto B_mr;
  label B_rr:
  if (c[0]:ushort != 138) goto B_sr;
  n = e[0]:int;
  if (n == 53) goto B_tr;
  if (n != 1) goto B_sr;
  label B_tr:
  n = a[86]:int;
  if (eqz(n)) goto B_vr;
  if (n != 49568) goto B_wr;
  n = 1;
  goto B_ur;
  label B_wr:
  if (a[66]:int != 49568 + 1776) goto B_vr;
  n = 2;
  goto B_ur;
  label B_vr:
  n = 0;
  label B_ur:
  c[3]:long@4 = (p = d[73]:long@4);
  c[1]:short = c[1]:ushort | n;
  c[7]:long@4 = (a + 184)[0]:long@4;
  c[1]:long@4 = p;
  if (l != 96) goto B_xr;
  c[0]:short = 147;
  label B_xr:
  if (j != 2) goto B_yr;
  b = (b + 24)[0]:int;
  if (b + 1 < 2) goto B_yr;
  parse_heredoc_dedent_string(c + 36, b);
  label B_yr:
  lex_mode_pop(a);
  expect1(a, 53, 111);
  goto B_mr;
  label B_sr:
  (d + 472)[0]:int = 0;
  d[58]:long = 0L;
  loop L_zr {
    pm_node_list_append(d + 464, c);
    loop L_bs {
      c = e[0]:int;
      if (c == 1) goto B_as;
      if (c == 53) goto B_as;
      c = parse_string_part(a);
      if (c) continue L_zr;
      continue L_bs;
    }
    label B_as:
  }
  b = (b + 24)[0]:int;
  if (l != 96) goto B_ds;
  c = pm_interpolated_xstring_node_create(d + 288, d + 288);
  c[5]:long@4 = d[58]:long;
  (c + 28)[0]:int = (d + 472)[0]:int;
  lex_mode_pop(a);
  expect1(a, 53, 111);
  l = 0;
  n = 0;
  if (a[42]:int == 3) goto B_es;
  n = (a + 176)[0]:int;
  l = (a + 172)[0]:int;
  label B_es:
  c[8]:int = l;
  (c + 36)[0]:int = n;
  goto B_cs;
  label B_ds:
  c = pm_interpolated_string_node_create(d + 288, d + 464, d + 288);
  lex_mode_pop(a);
  expect1(a, 53, 111);
  l = 0;
  n = 0;
  if (a[42]:int == 3) goto B_fs;
  n = (a + 176)[0]:int;
  l = (a + 172)[0]:int;
  label B_fs:
  c[8]:int = l;
  (c + 36)[0]:int = n;
  label B_cs:
  c[1]:long@4 = c[3]:long@4;
  if (j != 2) goto B_mr;
  if (b + 1 < 2) goto B_mr;
  parse_heredoc_dedent(a, c + 20, b);
  label B_mr:
  if (e[0]:int != 149) goto B_a;
  c = parse_strings(a, c);
  goto B_a;
  label B_lr:
  assert_fail(22903, 13402, 14547, 1426);
  unreachable;
  label B_p:
  parser_lex(a);
  (d + 464 + 8)[0]:int = (a + 176)[0]:int;
  d[58]:long = a[42]:long@4;
  l = parse_variable_call(a);
  if (l[0]:ushort != 19) goto B_hs;
  (d + 312)[0]:int = 0;
  (d + 304)[0]:long = 0L;
  (d + 288 + 8)[0]:long = 0L;
  d[36]:long = 0L;
  if (eqz(parse_arguments_list(a, d + 288, 1, c))) goto B_is;
  l[9]:long@4 = d[36]:long;
  l[11]:int = (j = d[74]:int);
  l[12]:long@4 = (p = d[75]:long@4);
  l[14]:int = (c = d[77]:int);
  l[1]:short = l[1]:ushort & 65533;
  if (eqz(c)) goto B_js;
  (l + 8)[0]:int = (c + 8)[0]:int;
  goto B_is;
  label B_js:
  if (i32_wrap_i64(p)) goto B_ks;
  if (eqz(j)) goto B_ls;
  l[2]:int = (j + 8)[0]:int;
  goto B_is;
  label B_ls:
  l[2]:int = (l + 32)[0]:int;
  goto B_is;
  label B_ks:
  (l + 8)[0]:int = i32_wrap_i64(p >> 32L);
  label B_is:
  e = e[0]:int;
  goto B_gs;
  label B_hs:
  if (eqz(c)) goto B_ns;
  if (token_begins_expression_p(e[0]:int)) goto B_ms;
  e = e[0]:int + -154;
  if (e > 8) goto B_ns;
  if (1 << e & 385) goto B_ms;
  label B_ns:
  if (
    (pm_state_stack_p(a + 20) ^ -1) & (e = a[45]:int) == 71) goto B_ms;
  if (e != 14) goto B_gs;
  label B_ms:
  (d + 312)[0]:int = 0;
  (d + 304)[0]:long = 0L;
  (d + 296)[0]:long = 0L;
  d[36]:long = 0L;
  parse_arguments_list(a, d + 288, 1, c);
  c = pm_call_node_fcall_create(a, d + 464, d + 288);
  pm_node_destroy(a, l);
  goto B_a;
  label B_gs:
  if (b != 2) goto B_os;
  if (e != 27) goto B_os;
  c = parse_targets_validate(a, l);
  goto B_a;
  label B_os:
  c = l;
  br_table[B_a, B_ps, B_a, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_a, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_a, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_a, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_a, B_ps, B_ps, B_a, B_ps, B_ps, B_ps, B_ps, B_ps, B_a, B_ps, B_a, B_ps, B_ps, B_ps, B_ps, B_ps, B_ps, B_a, B_ps, B_a, B_ps, B_a, B_ps, B_ps, B_ps, B_ps, B_ps, B_a, B_ps, B_a, B_ps, B_a, ..B_ps](
    e + -6)
  label B_ps:
  c = pm_node_check_it(a, l);
  goto B_a;
  label B_o:
  parser_lex(a);
  c = pm_back_reference_read_node_create(a, a + 168);
  if (b == 2) goto B_qs;
  c = c;
  goto B_a;
  label B_qs:
  if (e[0]:int == 27) goto B_rs;
  c = c;
  goto B_a;
  label B_rs:
  c = parse_targets_validate(a, c);
  goto B_a;
  label B_n:
  parser_lex(a);
  c = pm_global_variable_read_node_create(a, a + 168);
  if (b == 2) goto B_ss;
  c = c;
  goto B_a;
  label B_ss:
  if (e[0]:int == 27) goto B_ts;
  c = c;
  goto B_a;
  label B_ts:
  c = parse_targets_validate(a, c);
  goto B_a;
  label B_m:
  parser_lex(a);
  c = pm_numbered_reference_read_node_create(a, a + 168);
  if (b == 2) goto B_us;
  c = c;
  goto B_a;
  label B_us:
  if (e[0]:int == 27) goto B_vs;
  c = c;
  goto B_a;
  label B_vs:
  c = parse_targets_validate(a, c);
  goto B_a;
  label B_l:
  parser_lex(a);
  c = pm_float_node_rational_imaginary_create(a + 168);
  goto B_a;
  label B_k:
  parser_lex(a);
  c = pm_float_node_rational_create(a + 168);
  goto B_a;
  label B_j:
  parser_lex(a);
  c = pm_float_node_imaginary_create(a + 168);
  goto B_a;
  label B_i:
  parser_lex(a);
  c = pm_float_node_create(a + 168);
  goto B_a;
  label B_h:
  (d + 288 + 8)[0]:int = (e + 8)[0]:int;
  d[36]:long = e[0]:long@4;
  parser_lex(a);
  c = pm_range_node_create(
        a,
        0,
        d + 288,
        parse_expression(a, (d[72]:int * 12 + 63600)[0]:int, 0, 89));
  goto B_a;
  label B_g:
  parser_lex(a);
  (d + 296)[0]:int = (a + 176)[0]:int;
  d[36]:long = a[42]:long@4;
  expect1(a, 29, 54);
  c = 
    pm_constant_path_node_create(a,
                                 0,
                                 d + 288,
                                 pm_constant_read_node_create(a, a + 168));
  if (b != 2) goto B_a;
  if (e[0]:int != 27) goto B_a;
  c = parse_targets_validate(a, c);
  goto B_a;
  label B_f:
  parser_lex(a);
  (d + 464 + 8)[0]:int = (a + 176)[0]:int;
  d[58]:long = a[42]:long@4;
  l = a[45]:int;
  if (l == 123) goto B_xs;
  if (eqz(c)) goto B_ys;
  if (token_begins_expression_p(l)) goto B_xs;
  l = e[0]:int + -154;
  if (l > 8) goto B_ys;
  if (1 << l & 385) goto B_xs;
  label B_ys:
  if (
    (pm_state_stack_p(a + 20) ^ -1) & (l = a[45]:int) == 71) goto B_xs;
  if (l != 14) goto B_ws;
  label B_xs:
  (d + 312)[0]:int = 0;
  (d + 304)[0]:long = 0L;
  (d + 288 + 8)[0]:long = 0L;
  d[36]:long = 0L;
  parse_arguments_list(a, d + 288, 1, c);
  c = pm_call_node_fcall_create(a, d + 464, d + 288);
  goto B_a;
  label B_ws:
  c = pm_constant_read_node_create(a, a + 168);
  if (b != 2) goto B_a;
  if (e[0]:int != 27) goto B_a;
  c = parse_targets_validate(a, c);
  goto B_a;
  label B_e:
  parser_lex(a);
  c = pm_class_variable_read_node_create(a, a + 168);
  if (b == 2) goto B_zs;
  c = c;
  goto B_a;
  label B_zs:
  if (e[0]:int == 27) goto B_at;
  c = c;
  goto B_a;
  label B_at:
  c = parse_targets_validate(a, c);
  goto B_a;
  label B_d:
  parser_lex(a);
  d[36]:long = a[42]:long@4;
  b = 1;
  (d + 288 + 8)[0]:int = d[73]:int + 1;
  d[72]:int = 149;
  (d + 464 + 8)[0]:int = (a + 176)[0]:int;
  d[58]:long = a[42]:long@4;
  d[116]:int = 150;
  d[117]:int = d[117]:int + 1;
  d[112]:int = 3;
  d[114]:int = (c = a[40]:int);
  d[113]:int = c;
  c = 
    pm_string_node_create_current_string(a, d + 288, d + 464, d + 448);
  l = a[86]:int;
  if (eqz(l)) goto B_ct;
  if (l == 49568) goto B_bt;
  if (a[66]:int != 49568 + 1776) goto B_ct;
  b = 2;
  goto B_bt;
  label B_ct:
  b = 0;
  label B_bt:
  c[1]:short = c[1]:ushort | b;
  if (e[0]:int != 149) goto B_a;
  c = parse_strings(a, c);
  goto B_a;
  label B_c:
  e = a + 20;
  pm_state_stack_push(e, 0);
  parser_lex(a);
  c = pm_hash_node_create(a, a + 168);
  br_table[B_dt, B_et, B_et, B_et, B_et, B_et, B_et, B_et, B_et, B_et, B_et, B_et, B_et, B_et, B_dt, ..B_et](
    a[45]:int + -1)
  label B_et:
  parse_assocs(a, c);
  if (a[45]:int != 121) goto B_dt;
  parser_lex(a);
  label B_dt:
  pm_state_stack_pop(e);
  expect1(a, 15, 109);
  (c + 8)[0]:int = (e = (a + 176)[0]:int);
  (c + 36)[0]:int = e;
  c[8]:int = (a + 172)[0]:int;
  goto B_a;
  label B_b:
  (d + 288 + 8)[0]:int = (e + 8)[0]:int;
  d[36]:long = e[0]:long@4;
  loop L_it {
    parser_lex(a);
    c = a[45]:int;
    br_table[L_it, B_ft, B_ft, B_ft, B_gt, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, B_ft, L_it, ..B_ht](
      c + -121);
  }
  label B_ht:
  if (c != 1) goto B_ft;
  label B_gt:
  expect1(a, 125, 96);
  c = pm_parentheses_node_create(d + 288, 0, a + 168);
  goto B_a;
  label B_ft:
  n = a + 20;
  pm_state_stack_push(n, 0);
  c = malloc(8);
  if (eqz(c)) goto B_jt;
  c[0]:int = 21;
  l = a[65]:int;
  a[65]:int = c;
  c[1]:int = l;
  label B_jt:
  j = parse_expression(a, 2, 1, 34);
  c = a[65]:int;
  l = c[1]:int;
  free(c);
  a[65]:int = l;
  l = a[45]:int;
  if (l == 142) goto B_lt;
  c = l;
  if (l != 121) goto B_kt;
  label B_lt:
  loop L_mt {
    parser_lex(a);
    c = a[45]:int;
    if (c == 121) continue L_mt;
    if (c == 142) continue L_mt;
  }
  label B_kt:
  if (c != 125) goto B_nt;
  if (d[72]:int != 124) goto B_ot;
  a[0]:int = 4;
  label B_ot:
  parser_lex(a);
  pm_state_stack_pop(n);
  e = j[0]:ushort;
  if (e == 136) goto B_rt;
  if (e != 103) goto B_pt;
  if (j[10]:int) goto B_rt;
  c = j;
  goto B_qt;
  label B_rt:
  pm_multi_target_node_targets_append(a,
                                      c = pm_multi_target_node_create(),
                                      j);
  label B_qt:
  e = (a + 172)[0]:int;
  (c + 52)[0]:int = (l = (a + 176)[0]:int);
  c[12]:int = e;
  (c + 44)[0]:int = d[74]:int;
  c[10]:int = (e = d[73]:int);
  c[1]:int = e;
  (c + 8)[0]:int = l;
  if (a[45]:int != 27) goto B_st;
  if (b != 2) goto B_a;
  c = parse_targets_validate(a, c);
  goto B_a;
  label B_st:
  c = parse_target_validate(a, c);
  goto B_a;
  label B_pt:
  e = pm_statements_node_create(a);
  pm_statements_node_body_append(e, j);
  c = pm_parentheses_node_create(d + 288, e, a + 168);
  goto B_a;
  label B_nt:
  c = malloc(8);
  if (eqz(c)) goto B_tt;
  c[0]:int = 21;
  b = a[65]:int;
  a[65]:int = c;
  c[1]:int = b;
  label B_tt:
  b = pm_statements_node_create(a);
  pm_statements_node_body_append(b, j);
  if (l == 121) goto B_ut;
  if (l == 142) goto B_ut;
  pm_diagnostic_list_append(a + 244, c = (a + 184)[0]:int, c, 81);
  label B_ut:
  m = a + 244;
  l = b + 12;
  loop L_vt {
    c = parse_expression(a, 2, 1, 34);
    if (eqz(b)) goto B_xt;
    if (eqz(l[0]:int)) goto B_xt;
    if (c[1]:int >= b[1]:int) goto B_wt;
    label B_xt:
    b[1]:int = c[1]:int;
    label B_wt:
    j = (c + 8)[0]:int;
    if (j <= b[2]:int) goto B_yt;
    b[2]:int = j;
    label B_yt:
    pm_node_list_append(l, c);
    c[1]:short = c[1]:ushort | 32768;
    if (eqz(a[357]:ubyte)) goto B_au;
    if (e[0]:int != 125) goto B_zt;
    a[357]:byte = 0;
    goto B_zt;
    label B_au:
    if (c[0]:ushort == 101) goto B_zt;
    br_table[B_cu, B_bu, B_bu, B_bu, B_zt, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_bu, B_cu, ..B_bu](
      e[0]:int + -121)
    label B_cu:
    loop L_du {
      parser_lex(a);
      br_table[L_du, L_vt, L_vt, L_vt, B_zt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_vt, L_du, ..L_vt](
        a[45]:int + -121);
    }
    label B_bu:
    pm_diagnostic_list_append(m, c = a[46]:int, c, 81);
    continue L_vt;
    label B_zt:
  }
  e = a[65]:int;
  c = e[1]:int;
  free(e);
  a[65]:int = c;
  pm_state_stack_pop(n);
  expect1(a, 125, 96);
  c = pm_parentheses_node_create(d + 288, b, a + 168);
  label B_a:
  stack_pointer = d + 480;
  return c;
}

function parse_expression_infix(a:int, b:int, c:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int }, d:int, e:int_ptr):int {
  var g:long;
  var j:int;
  var k:int;
  var i:ushort_ptr;
  var f:int = stack_pointer - 144;
  stack_pointer = f;
  (f + 128 + 8)[0]:int = (a + 188)[0]:int;
  f[16]:long = (g = a[45]:long@4);
  var h:int = a + 180;
  br_table[B_t, B_w, B_z, B_s, B_x, B_g, B_g, B_g, B_t, B_t, B_g, B_g, B_j, B_g, B_g, B_g, B_g, B_t, B_x, B_g, B_g, B_g, B_l, B_g, B_g, B_g, B_s, B_r, B_r, B_g, B_g, B_g, B_g, B_g, B_g, B_aa, B_t, B_t, B_h, B_u, B_g, B_g, B_g, B_g, B_g, B_t, B_t, B_t, B_x, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_w, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_q, B_i, B_g, B_g, B_g, B_g, B_v, B_g, B_g, B_k, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_p, B_g, B_o, B_g, B_g, B_n, B_g, B_g, B_g, B_g, B_g, B_g, B_g, B_t, B_t, B_t, B_t, B_x, B_g, B_t, B_x, B_g, B_g, B_g, B_g, B_g, B_g, B_t, B_x, B_g, B_g, B_g, B_g, B_g, B_t, B_x, B_v, B_y, B_t, B_x, B_m, B_g, B_g, B_g, B_t, B_x, B_t, B_x, B_t, B_x, B_g, B_g, B_g, B_g, B_g, B_t, B_g, B_g, B_g, B_g, B_g, B_g, B_t, B_t, ..B_g](
    i32_wrap_i64(g) + -4)
  label B_aa:
  h = b[0]:ushort;
  br_table[B_da, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ea, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_da, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_da, B_ba, B_ba, B_ba, B_ba, B_da, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_da, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_da, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_da, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_ba, B_da, B_ba, B_ba, B_ba, B_ba, B_ba, B_da, ..B_ca](
    h + -10);
  label B_ea:
  if (eqz(b[2]:ubyte & 2)) goto B_da;
  pm_parser_local_add_location(a, b[7]:int, (b + 32)[0]:int);
  label B_da:
  parser_lex(a);
  d = 
    parse_write(
      a,
      b,
      f + 128,
      parse_assignment_values(a, c, select_if(17, d, b[0]:ushort == 103), e));
  goto B_e;
  label B_ca:
  if (h == 136) goto B_f;
  label B_ba:
  parser_lex(a);
  pm_diagnostic_list_append(a + 244, f[33]:int, f[34]:int, 85);
  d = b;
  goto B_e;
  label B_z:
  br_table[B_oa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_ha, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_ma, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_la, B_fa, B_fa, B_fa, B_fa, B_ka, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_na, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_ja, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_ia, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_fa, B_ga, B_fa, B_fa, B_fa, B_fa, B_oa, ..B_fa](
    b[0]:ushort + -10)
  label B_oa:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 211);
  label B_na:
  parser_lex(a);
  d = pm_global_variable_and_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 82));
  pm_node_destroy(a, b);
  goto B_e;
  label B_ma:
  parser_lex(a);
  d = pm_class_variable_and_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 82));
  pm_node_destroy(a, b);
  goto B_e;
  label B_la:
  parser_lex(a);
  d = pm_constant_path_and_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 82));
  goto B_e;
  label B_ka:
  parser_lex(a);
  d = pm_constant_and_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 82));
  pm_node_destroy(a, b);
  goto B_e;
  label B_ja:
  parser_lex(a);
  d = pm_instance_variable_and_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 82));
  pm_node_destroy(a, b);
  goto B_e;
  label B_ia:
  parser_lex(a);
  d = pm_local_variable_and_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 82),
        b[3]:int,
        b[4]:int);
  pm_node_destroy(a, b);
  goto B_e;
  label B_ha:
  parser_lex(a);
  if (eqz(b[2]:ubyte & 2)) goto B_pa;
  pm_refute_numbered_parameter(a, b[7]:int, (h = b + 32)[0]:int);
  h = pm_parser_local_add_location(a, b[7]:int, h[0]:int);
  d = pm_local_variable_and_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 82),
        h,
        0);
  pm_node_destroy(a, b);
  goto B_e;
  label B_pa:
  if (eqz(pm_call_node_index_p(b))) goto B_qa;
  d = 
    pm_index_and_write_node_create(b,
                                   f + 128,
                                   parse_assignment_value(a, c, d, e, 82));
  goto B_e;
  label B_qa:
  if (eqz(pm_call_node_writable_p(b))) goto B_sa;
  parse_write_name(a, b + 24);
  goto B_ra;
  label B_sa:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 212);
  label B_ra:
  parse_call_operator_write(a, b, f + 128);
  d = 
    pm_call_and_write_node_create(a,
                                  b,
                                  f + 128,
                                  parse_assignment_value(a, c, d, e, 82));
  goto B_e;
  label B_ga:
  parser_lex(a);
  pm_diagnostic_list_append(a + 244, f[33]:int, f[34]:int, 1);
  d = b;
  goto B_e;
  label B_fa:
  parser_lex(a);
  pm_diagnostic_list_append(a + 244, f[33]:int, f[34]:int, 82);
  d = b;
  goto B_e;
  label B_y:
  br_table[B_cb, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_va, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ab, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_za, B_ta, B_ta, B_ta, B_ta, B_ya, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_bb, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_xa, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_wa, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ua, B_ta, B_ta, B_ta, B_ta, B_cb, ..B_ta](
    b[0]:ushort + -10)
  label B_cb:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 211);
  label B_bb:
  parser_lex(a);
  d = pm_global_variable_or_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 83));
  pm_node_destroy(a, b);
  goto B_e;
  label B_ab:
  parser_lex(a);
  d = pm_class_variable_or_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 83));
  pm_node_destroy(a, b);
  goto B_e;
  label B_za:
  parser_lex(a);
  d = pm_constant_path_or_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 83));
  goto B_e;
  label B_ya:
  parser_lex(a);
  d = pm_constant_or_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 83));
  pm_node_destroy(a, b);
  goto B_e;
  label B_xa:
  parser_lex(a);
  d = pm_instance_variable_or_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 83));
  pm_node_destroy(a, b);
  goto B_e;
  label B_wa:
  parser_lex(a);
  d = pm_local_variable_or_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 83),
        b[3]:int,
        b[4]:int);
  pm_node_destroy(a, b);
  goto B_e;
  label B_va:
  parser_lex(a);
  if (eqz(b[2]:ubyte & 2)) goto B_db;
  pm_refute_numbered_parameter(a, b[7]:int, (h = b + 32)[0]:int);
  h = pm_parser_local_add_location(a, b[7]:int, h[0]:int);
  d = pm_local_variable_or_write_node_create(
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 83),
        h,
        0);
  pm_node_destroy(a, b);
  goto B_e;
  label B_db:
  if (eqz(pm_call_node_index_p(b))) goto B_eb;
  d = 
    pm_index_or_write_node_create(b,
                                  f + 128,
                                  parse_assignment_value(a, c, d, e, 83));
  goto B_e;
  label B_eb:
  if (eqz(pm_call_node_writable_p(b))) goto B_gb;
  parse_write_name(a, b + 24);
  goto B_fb;
  label B_gb:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 212);
  label B_fb:
  parse_call_operator_write(a, b, f + 128);
  d = 
    pm_call_or_write_node_create(a,
                                 b,
                                 f + 128,
                                 parse_assignment_value(a, c, d, e, 83));
  goto B_e;
  label B_ua:
  parser_lex(a);
  pm_diagnostic_list_append(a + 244, f[33]:int, f[34]:int, 182);
  d = b;
  goto B_e;
  label B_ta:
  parser_lex(a);
  pm_diagnostic_list_append(a + 244, f[33]:int, f[34]:int, 83);
  d = b;
  goto B_e;
  label B_x:
  br_table[B_qb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_jb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_ob, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_nb, B_hb, B_hb, B_hb, B_hb, B_mb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_pb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_lb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_kb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_hb, B_ib, B_hb, B_hb, B_hb, B_hb, B_qb, ..B_hb](
    b[0]:ushort + -10)
  label B_qb:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 211);
  label B_pb:
  parser_lex(a);
  e = parse_expression(a, d, select_if(e, c < 12, c == 18), 89);
  c = pm_check_value_expression(e);
  if (eqz(c)) goto B_rb;
  pm_diagnostic_list_append(a + 244, c.b, (c + 8)[0]:int, 208);
  label B_rb:
  if (h[0]:int == 90) goto B_tb;
  c = e;
  goto B_sb;
  label B_tb:
  h = (a + 188)[0]:int;
  i = (a + 184)[0]:int;
  parser_lex(a);
  d = parse_expression(a, d, 0, 185);
  c = calloc(1, 28);
  if (eqz(c)) goto B_d;
  j = (d + 8)[0]:int;
  k = e[1];
  c.g = d;
  c.f = h;
  c.e = i;
  c.d = e;
  c.c = j;
  c.b = k;
  c.a = 126;
  label B_sb:
  d = calloc(1, 40);
  if (eqz(d)) goto B_c;
  i = (c + 8)[0]:int;
  e = b[1]:int;
  h = b[0]:ushort;
  if (h == 10) goto B_xb;
  if (h == 109) goto B_vb;
  if (h != 62) goto B_wb;
  label B_xb:
  k = b[3]:int;
  goto B_ub;
  label B_wb:
  assert_fail(26957, 13402, 3235, 11841);
  unreachable;
  label B_vb:
  k = pm_constant_pool_insert_shared(a + 292, e, (b + 8)[0]:int - e);
  label B_ub:
  g = b[1]:long@4;
  d[9]:int =
    pm_constant_pool_insert_shared(a + 292,
                                   h = f[33]:int,
                                   (h ^ -1) + (j = f[34]:int));
  d[8]:int = c;
  d[7]:int = j;
  d[6]:int = h;
  d[4]:long@4 = g;
  d[3]:int = k;
  d[2]:int = i;
  d[1]:int = e;
  d[0]:short = 60;
  pm_node_destroy(a, b);
  goto B_e;
  label B_ob:
  parser_lex(a);
  d = pm_class_variable_operator_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 89));
  pm_node_destroy(a, b);
  goto B_e;
  label B_nb:
  parser_lex(a);
  d = pm_constant_path_operator_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 89));
  goto B_e;
  label B_mb:
  parser_lex(a);
  d = pm_constant_operator_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 89));
  pm_node_destroy(a, b);
  goto B_e;
  label B_lb:
  parser_lex(a);
  d = pm_instance_variable_operator_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 89));
  pm_node_destroy(a, b);
  goto B_e;
  label B_kb:
  parser_lex(a);
  d = pm_local_variable_operator_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 89),
        b[3]:int,
        b[4]:int);
  pm_node_destroy(a, b);
  goto B_e;
  label B_jb:
  parser_lex(a);
  if (eqz(b[2]:ubyte & 2)) goto B_yb;
  pm_refute_numbered_parameter(a, b[7]:int, (h = b + 32)[0]:int);
  h = pm_parser_local_add_location(a, b[7]:int, h[0]:int);
  d = pm_local_variable_operator_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 89),
        h,
        0);
  pm_node_destroy(a, b);
  goto B_e;
  label B_yb:
  if (eqz(pm_call_node_index_p(b))) goto B_zb;
  d = pm_index_operator_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 89));
  goto B_e;
  label B_zb:
  if (eqz(pm_call_node_writable_p(b))) goto B_bc;
  parse_write_name(a, b + 24);
  goto B_ac;
  label B_bc:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 212);
  label B_ac:
  parse_call_operator_write(a, b, f + 128);
  d = pm_call_operator_write_node_create(
        a,
        b,
        f + 128,
        parse_assignment_value(a, c, d, e, 89));
  goto B_e;
  label B_ib:
  parser_lex(a);
  pm_diagnostic_list_append(a + 244, f[33]:int, f[34]:int, 148);
  d = b;
  goto B_e;
  label B_hb:
  parser_lex(a);
  pm_diagnostic_list_append(a + 244, (a + 172)[0]:int, (a + 176)[0]:int, 89);
  d = b;
  goto B_e;
  label B_w:
  parser_lex(a);
  c = parse_expression(a, d, a[42]:int == 63, 89);
  d = pm_check_value_expression(b);
  if (eqz(d)) goto B_cc;
  pm_diagnostic_list_append(a + 244, d[1]:int, (d + 8)[0]:int, 208);
  label B_cc:
  d = calloc(1, 28);
  if (eqz(d)) goto B_b;
  d[5]:long@4 = f[33]:long@4;
  d[4]:int = c;
  d[3]:int = b;
  d[0]:short = 4;
  d[1]:int = b[1]:int;
  d[2]:int = (c + 8)[0]:int;
  goto B_e;
  label B_v:
  parser_lex(a);
  c = parse_expression(a, d, a[42]:int == 87, 89);
  d = pm_check_value_expression(b);
  if (eqz(d)) goto B_dc;
  pm_diagnostic_list_append(a + 244, d[1]:int, (d + 8)[0]:int, 208);
  label B_dc:
  d = calloc(1, 28);
  if (eqz(d)) goto B_a;
  d[5]:long@4 = f[33]:long@4;
  d[4]:int = c;
  d[3]:int = b;
  d[0]:short = 112;
  d[1]:int = b[1]:int;
  d[2]:int = (c + 8)[0]:int;
  goto B_e;
  label B_u:
  parser_lex(a);
  d = 
    pm_call_node_binary_create(a, b, f + 128, parse_expression(a, d, 0, 89));
  c = b[0]:ushort;
  if (c == 123) goto B_ec;
  if (c != 84) goto B_e;
  if (eqz(b[5]:int)) goto B_e;
  c = 0;
  h = 0;
  e = 0;
  loop L_fc {
    i = (b[7]:int + c)[0]:int;
    if (i[0] != 138) goto B_e;
    c = c + 4;
    h = pm_string_length(i + 36) + h;
    e = e + 1;
    if (e < (i = b[5]:int)) continue L_fc;
  }
  if (eqz(h)) goto B_e;
  var l:int = malloc(h);
  if (eqz(l)) goto B_gc;
  if (eqz(i)) goto B_hc;
  c = 0;
  i = l;
  j = 0;
  loop L_ic {
    k = (b[7]:int + c)[0]:int + 36;
    e = pm_string_length(k);
    c = c + 4;
    i = e + memcpy(i, pm_string_source(k), e);
    j = j + 1;
    if (j < b[5]:int) continue L_ic;
  }
  label B_hc:
  pm_string_owned_init(f + 80, l, h);
  d = parse_regular_expression_named_captures(a, f + 80, d);
  pm_string_free(f + 80);
  goto B_e;
  label B_gc:
  abort();
  unreachable;
  label B_ec:
  d = parse_regular_expression_named_captures(a, b + 36, d);
  goto B_e;
  label B_t:
  parser_lex(a);
  d = 
    pm_call_node_binary_create(a, b, f + 128, parse_expression(a, d, 0, 89));
  goto B_e;
  label B_s:
  parser_lex(a);
  (f + 112 + 8)[0]:int = (a + 176)[0]:int;
  f[14]:long = a[42]:long@4;
  (f + 104)[0]:int = 0;
  (f + 96)[0]:long = 0L;
  (f + 80 + 8)[0]:long = 0L;
  f[10]:long = 0L;
  d = a[45]:int;
  if (d != 123) goto B_jc;
  parse_arguments_list(a, f + 80, 1, 0);
  d = pm_call_node_shorthand_create(a, b, f + 112, f + 80);
  goto B_e;
  label B_jc:
  br_table[B_mc, B_lc, B_lc, B_lc, B_lc, B_mc, B_lc, B_mc, B_mc, B_mc, B_lc, B_lc, B_lc, B_lc, B_mc, B_mc, B_lc, B_mc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_mc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_mc, B_mc, B_lc, B_mc, B_lc, B_lc, B_lc, B_lc, B_lc, B_mc, B_mc, B_mc, B_lc, B_lc, B_lc, B_mc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_lc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_lc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_mc, B_lc, B_mc, B_lc, B_mc, B_mc, B_lc, B_mc, B_mc, B_mc, B_mc, B_lc, B_lc, B_lc, B_mc, B_mc, B_mc, B_mc, B_lc, B_mc, B_mc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_mc, B_lc, B_lc, B_lc, B_lc, B_lc, B_lc, B_mc, B_lc, B_lc, B_lc, B_mc, B_lc, B_lc, B_lc, B_lc, B_lc, B_mc, B_lc, B_mc, B_lc, B_mc, B_lc, B_lc, B_lc, B_lc, B_lc, B_mc, B_mc, B_lc, B_lc, B_lc, B_mc, B_mc, B_mc, B_mc, B_mc, ..B_lc](
    d + -4)
  label B_mc:
  parser_lex(a);
  (f + 64 + 8)[0]:int = ((d = a + 168) + 8)[0]:int;
  f[8]:long = d[0]:long@4;
  goto B_kc;
  label B_lc:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, (a + 188)[0]:int, 57);
  f[16]:int = 2;
  f[18]:int = (d = (a + 176)[0]:int);
  f[17]:int = d;
  label B_kc:
  parse_arguments_list(a, f + 80, 1, e);
  d = pm_call_node_call_create(a, b, f + 112, f + 64, f + 80);
  if (c != 2) goto B_e;
  if (f[22]:int) goto B_e;
  if (f[20]:int) goto B_e;
  if (h[0]:int != 27) goto B_e;
  d = parse_targets_validate(a, d);
  goto B_e;
  label B_r:
  parser_lex(a);
  c = 0;
  if (eqz(token_begins_expression_p(a[45]:int))) goto B_nc;
  c = parse_expression(a, d, 0, 89);
  label B_nc:
  d = pm_range_node_create(a, b, f + 128, c);
  goto B_e;
  label B_q:
  (f + 80 + 8)[0]:int = (h + 8)[0]:int;
  f[10]:long = h[0]:long@4;
  parser_lex(a);
  pm_assert_value_expression(a, d = parse_expression(a, d, 1, 47));
  d = pm_if_node_modifier_create(a, b, f + 80, d);
  goto B_e;
  label B_p:
  (f + 80 + 8)[0]:int = (h + 8)[0]:int;
  f[10]:long = h[0]:long@4;
  parser_lex(a);
  pm_assert_value_expression(a, d = parse_expression(a, d, 1, 51));
  d = pm_unless_node_modifier_create(a, b, f + 80, d);
  goto B_e;
  label B_o:
  parser_lex(a);
  c = pm_statements_node_create(a);
  pm_statements_node_body_append(c, b);
  pm_assert_value_expression(a, d = parse_expression(a, d, 1, 52));
  d = pm_until_node_modifier_create(f + 128, d, c, b[0]:ushort == 11);
  goto B_e;
  label B_n:
  parser_lex(a);
  c = pm_statements_node_create(a);
  pm_statements_node_body_append(c, b);
  pm_assert_value_expression(a, d = parse_expression(a, d, 1, 53));
  d = pm_while_node_modifier_create(f + 128, d, c, b[0]:ushort == 11);
  goto B_e;
  label B_m:
  (f + 80 + 8)[0]:int = (h + 8)[0]:int;
  f[10]:long = h[0]:long@4;
  parser_lex(a);
  c = parse_expression(a, 14, 0, 201);
  if (eqz(a[357]:ubyte)) goto B_oc;
  f[28]:int = 2;
  f[30]:int = (d = (a + 176)[0]:int);
  f[29]:int = d;
  d = pm_if_node_ternary_create(a,
                                b,
                                f + 80,
                                c,
                                f + 112,
                                pm_missing_node_create(d, d));
  goto B_e;
  label B_oc:
  if (h[0]:int != 121) goto B_pc;
  parser_lex(a);
  label B_pc:
  expect1(a, 25, 199);
  (f + 120)[0]:int = (a + 176)[0]:int;
  f[14]:long = a[42]:long@4;
  d = pm_if_node_ternary_create(a,
                                b,
                                f + 80,
                                c,
                                f + 112,
                                parse_expression(a, 14, 0, 200));
  goto B_e;
  label B_l:
  parser_lex(a);
  (f + 112 + 8)[0]:int = (a + 176)[0]:int;
  f[14]:long = a[42]:long@4;
  d = a + 168;
  br_table[B_sc, B_qc, B_qc, B_qc, B_qc, B_sc, B_qc, B_sc, B_sc, B_sc, B_qc, B_qc, B_qc, B_qc, B_sc, B_sc, B_qc, B_sc, B_qc, B_qc, B_qc, B_qc, B_qc, B_qc, B_qc, B_tc, B_qc, B_qc, B_qc, B_qc, B_qc, B_qc, B_qc, B_qc, B_qc, B_qc, B_sc, B_sc, B_qc, B_sc, B_qc, B_qc, B_qc, B_qc, B_qc, B_sc, B_sc, B_sc, B_qc, B_qc, B_qc, B_sc, B_qc, B_qc, B_qc, B_qc, B_qc, B_qc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_qc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_qc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_sc, B_qc, B_sc, B_qc, B_sc, B_sc, B_qc, B_sc, B_sc, B_sc, B_sc, B_qc, B_qc, B_qc, B_sc, B_sc, B_sc, B_sc, B_qc, B_sc, B_sc, B_qc, B_qc, B_qc, B_qc, B_rc, B_qc, B_qc, B_sc, B_qc, B_qc, B_qc, B_qc, B_qc, B_qc, B_sc, B_qc, B_qc, B_qc, B_sc, B_qc, B_qc, B_qc, B_qc, B_qc, B_sc, B_qc, B_sc, B_qc, B_sc, B_qc, B_qc, B_qc, B_qc, B_qc, B_sc, B_sc, B_qc, B_qc, B_qc, B_sc, B_sc, B_sc, B_sc, B_sc, ..B_qc](
    a[45]:int + -4)
  label B_tc:
  parser_lex(a);
  i = a[45]:int;
  if (i == 123) goto B_wc;
  if (token_begins_expression_p(i)) goto B_wc;
  i = h[0]:int + -154;
  if (i > 8) goto B_vc;
  if (eqz(1 << i & 385)) goto B_vc;
  label B_wc:
  (f + 64 + 8)[0]:int = (d + 8)[0]:int;
  f[8]:long = d[0]:long@4;
  (f + 104)[0]:int = 0;
  (f + 96)[0]:long = 0L;
  (f + 80 + 8)[0]:long = 0L;
  f[10]:long = 0L;
  parse_arguments_list(a, f + 80, 1, e);
  d = pm_call_node_call_create(a, b, f + 112, f + 64, f + 80);
  goto B_uc;
  label B_vc:
  d = pm_constant_path_node_create(a,
                                   b,
                                   f + 112,
                                   pm_constant_read_node_create(a, d));
  label B_uc:
  if (c != 2) goto B_e;
  if (h[0]:int != 27) goto B_e;
  d = parse_targets_validate(a, d);
  goto B_e;
  label B_sc:
  parser_lex(a);
  (f + 64 + 8)[0]:int = (d + 8)[0]:int;
  f[8]:long = d[0]:long@4;
  (f + 104)[0]:int = 0;
  (f + 96)[0]:long = 0L;
  (f + 80 + 8)[0]:long = 0L;
  f[10]:long = 0L;
  parse_arguments_list(a, f + 80, 1, e);
  d = pm_call_node_call_create(a, b, f + 112, f + 64, f + 80);
  if (c != 2) goto B_e;
  if (h[0]:int != 27) goto B_e;
  d = parse_targets_validate(a, d);
  goto B_e;
  label B_rc:
  (f + 104)[0]:int = 0;
  (f + 96)[0]:long = 0L;
  (f + 88)[0]:long = 0L;
  f[10]:long = 0L;
  parse_arguments_list(a, f + 80, 1, 0);
  d = pm_call_node_shorthand_create(a, b, f + 112, f + 80);
  goto B_e;
  label B_qc:
  pm_diagnostic_list_append(a + 244, d = f[29]:int, c = f[30]:int, 54);
  d = 
    pm_constant_path_node_create(a, b, f + 112, pm_missing_node_create(d, c));
  goto B_e;
  label B_k:
  parser_lex(a);
  if (a[45]:int != 121) goto B_xc;
  parser_lex(a);
  label B_xc:
  d = pm_rescue_modifier_node_create(b,
                                     f + 128,
                                     parse_expression(a, d, 1, 185));
  goto B_e;
  label B_j:
  parser_lex(a);
  (f + 104)[0]:int = 0;
  (f + 96)[0]:long = 0L;
  f[11]:long = 0L;
  f[10]:long = (a + 172)[0]:long@4;
  if (a[45]:int != 20) goto B_zc;
  parser_lex(a);
  goto B_yc;
  label B_zc:
  d = a + 20;
  pm_state_stack_push(d, 0);
  parse_arguments(a, f + 80, 0, 20);
  pm_state_stack_pop(d);
  expect1(a, 20, 95);
  label B_yc:
  f[23]:long@4 = a[43]:long@4;
  d = a[45]:int;
  if (c != 2) goto B_ad;
  if (d != 27) goto B_ad;
  d = parse_targets_validate(a, pm_call_node_aref_create(a, b, f + 80));
  goto B_e;
  label B_ad:
  if (d != 14) goto B_dd;
  parser_lex(a);
  pm_arguments_validate_block(a, f + 80, d = parse_block(a));
  goto B_cd;
  label B_dd:
  if (pm_state_stack_p(a + 20)) goto B_bd;
  if (h[0]:int != 71) goto B_bd;
  parser_lex(a);
  d = parse_block(a);
  label B_cd:
  if (eqz(d)) goto B_bd;
  h = f[25]:int;
  if (eqz(h)) goto B_ed;
  pm_diagnostic_list_append(a + 244, d[1]:int, (d + 8)[0]:int, 2);
  c = f[22]:int;
  if (c) goto B_fd;
  f[22]:int = (c = pm_arguments_node_create(a));
  label B_fd:
  e = c + 12;
  if (c.d) goto B_gd;
  c.b = h[1]:int;
  label B_gd:
  (c + 8)[0]:int = (h + 8)[0]:int;
  pm_node_list_append(e, h);
  label B_ed:
  f[25]:int = d;
  label B_bd:
  d = pm_call_node_aref_create(a, b, f + 80);
  goto B_e;
  label B_i:
  d = a[359]:ubyte;
  a[359]:byte = 1;
  a[356]:byte = 0;
  a[0]:int = 1025;
  (f + 80 + 8)[0]:int = (h + 8)[0]:int;
  f[10]:long = h[0]:long@4;
  parser_lex(a);
  c = parse_pattern(a, 1, 167);
  a[359]:byte = d;
  d = pm_match_predicate_node_create(a, b, c, f + 80);
  goto B_e;
  label B_h:
  d = a[359]:ubyte;
  a[359]:byte = 1;
  a[356]:byte = 0;
  a[0]:int = 1025;
  (f + 80 + 8)[0]:int = (h + 8)[0]:int;
  f[10]:long = h[0]:long@4;
  parser_lex(a);
  c = parse_pattern(a, 1, 165);
  a[359]:byte = d;
  d = pm_match_required_node_create(a, b, c, f + 80);
  goto B_e;
  label B_g:
  assert_fail(26957, 13402, 17361, 1403);
  unreachable;
  label B_f:
  pm_multi_target_node_targets_append(a,
                                      d = pm_multi_target_node_create(),
                                      b);
  parser_lex(a);
  d = parse_write(a, d, f + 128, parse_assignment_values(a, c, 17, e));
  label B_e:
  stack_pointer = f + 144;
  return d;
  label B_d:
  f[0]:int = 28;
  fprintf(rodata[15455]:int, 31876, f);
  abort();
  unreachable;
  label B_c:
  f[4]:int = 40;
  fprintf(rodata[15455]:int, 31876, f + 16);
  abort();
  unreachable;
  label B_b:
  f[8]:int = 28;
  fprintf(rodata[15455]:int, 31876, f + 32);
  abort();
  unreachable;
  label B_a:
  f[12]:int = 28;
  fprintf(rodata[15455]:int, 31876, f + 48);
  abort();
  return unreachable;
}

function pm_statements_node_body_append(a:int_ptr, b:int) {
  if (eqz(a)) goto B_b;
  if (eqz(a[3])) goto B_b;
  if (b[1]:int >= a[1]) goto B_a;
  label B_b:
  a[1] = b[1]:int;
  label B_a:
  var c:int = (b + 8)[0]:int;
  if (c <= (a + 8)[0]:int) goto B_c;
  a[2] = c;
  label B_c:
  pm_node_list_append(a + 12, b);
  b[1]:short = b[1]:ushort | 32768;
}

function expect1(a:int_ptr, b:int, c:int) {
  if (a[45] != b) goto B_a;
  parser_lex(a);
  return ;
  label B_a:
  pm_diagnostic_list_append(a + 244, b = (a + 176)[0]:int, b, c);
  a[42] = 2;
  (a + 172)[0]:int = b;
}

function pm_array_node_create(a:{ a:int, b:int, c:int }):int {
  var c:int_ptr;
  var d:int;
  var e:int;
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  c = calloc(1, 40);
  if (c) goto B_a;
  b[0] = 40;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_a:
  c[0] = 1073741830;
  c[2] = (d = a.c);
  c[1] = (e = a.b);
  c[9] = (d = select_if(0, d, a = a.a == 3));
  c[8] = (a = select_if(0, e, a));
  c[7] = d;
  c[6] = a;
  stack_pointer = b + 16;
  return c;
}

function pm_check_value_expression(a:int):int {
  var c:int;
  if (a) goto B_a;
  return 0;
  label B_a:
  var b:int = 0;
  loop L_c {
    br_table[B_e, B_b, B_b, B_b, B_b, B_b, B_b, B_j, B_b, B_b, B_b, B_b, B_b, B_k, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_f, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_h, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_k, B_b, B_b, B_b, B_b, B_b, B_k, B_b, B_b, B_b, B_b, B_b, B_b, B_e, B_b, B_e, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_k, B_b, B_b, B_b, B_b, B_b, B_b, B_k, B_k, B_b, B_b, B_b, B_b, B_b, B_b, B_i, B_b, B_b, B_b, B_b, B_b, B_g, ..B_b](
      a[0]:ushort + -4)
    label B_k:
    return select_if(b, a, b);
    label B_j:
    a = a[5]:int;
    goto B_d;
    label B_i:
    a = ((a[3]:int << 2) + (a + 20)[0]:int + -4)[0]:int;
    goto B_d;
    label B_h:
    c = a[8]:int;
    if (eqz(c)) goto B_b;
    a = a[9]:int;
    if (eqz(a)) goto B_b;
    c = pm_check_value_expression(c);
    if (eqz(c)) goto B_b;
    b = select_if(b, c, b);
    goto B_d;
    label B_g:
    c = a[8]:int;
    if (eqz(c)) goto B_b;
    a = a[9]:int;
    if (eqz(a)) goto B_b;
    c = pm_check_value_expression(c);
    if (eqz(c)) goto B_b;
    b = select_if(b, c, b);
    goto B_d;
    label B_f:
    a = a[5]:int;
    goto B_d;
    label B_e:
    a = a[3]:int;
    label B_d:
    if (a) continue L_c;
  }
  label B_b:
  return 0;
}

function pm_assoc_node_create(a:int, b:{ a:int, b:int, c:int }, c:{ a:ushort, b:ushort }):int {
  var h:int;
  var f:int;
  var g:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  var e:{ a:short, b:short, c:int, d:int, e:int, f:int, g:int, h:int } = 
    calloc(1, 28);
  if (eqz(e)) goto B_a;
  if (c) goto B_c;
  f = select_if(a, b, b.a == 3)[2]:int;
  g = 0;
  goto B_b;
  label B_c:
  f = (c + 8)[0]:int;
  g = 0;
  h = c.a;
  if (h == 6) goto B_b;
  if (h == 65) goto B_b;
  if (h == 120) goto B_b;
  g = (a[1]:ushort & c.b) & 16384;
  label B_b:
  if (a[0]:ushort != 138) goto B_d;
  a[1]:short = a[1]:ushort | 4;
  label B_d:
  var i:int = a[1]:int;
  h = 0;
  var j:int = 0;
  if (b.a == 3) goto B_e;
  j = b.c;
  h = b.b;
  label B_e:
  e.h = j;
  e.g = h;
  e.f = c;
  e.e = a;
  e.d = f;
  e.c = i;
  e.b = g;
  e.a = 8;
  stack_pointer = d + 16;
  return e;
  label B_a:
  d[0] = 28;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function parse_assocs(a:int_ptr, b:int):int {
  var d:int;
  var o:ushort_ptr;
  var m:int;
  var p:int;
  var q:int;
  var n:int;
  var l:int;
  var c:int = stack_pointer - 96;
  stack_pointer = c;
  d = b[0]:ushort;
  if (d == 65) goto B_f;
  if (d != 88) goto B_e;
  label B_f:
  var e:int = b + 20;
  var f:int = b + 12;
  var g:long_ptr@4 = a + 168;
  var h:int = a + 244;
  var i:int = a + 292;
  var j:int = a + 180;
  var k:int = 0;
  loop L_g {
    d = j[0]:int;
    if (d == 109) goto B_j;
    if (d != 162) goto B_i;
    parser_lex(a);
    l = a[44];
    m = a[43];
    n = a[42];
    if (eqz(token_begins_expression_p(a[45]))) goto B_l;
    o = parse_expression(a, 14, 0, 91);
    d = pm_check_value_expression(o);
    if (eqz(d)) goto B_k;
    pm_diagnostic_list_append(h, d[1]:int, (d + 8)[0]:int, 208);
    goto B_k;
    label B_l:
    o = pm_constant_pool_insert_shared(i, m, l - m);
    d = a[64];
    if (eqz(d)) goto B_n;
    loop L_o {
      if (pm_constant_id_list_includes(d, o)) goto B_m;
      if (d[16]:ubyte) goto B_n;
      d = d[3]:int;
      if (d) continue L_o;
    }
    label B_n:
    pm_diagnostic_list_append(h, m, l, 91);
    label B_m:
    o = 0;
    label B_k:
    if (n != 162) goto B_d;
    d = calloc(1, 24);
    if (eqz(d)) goto B_c;
    n = l;
    if (eqz(o)) goto B_p;
    n = (o + 8)[0]:int;
    label B_p:
    d[5]:int = l;
    d[4]:int = m;
    d[3]:int = o;
    d[2]:int = n;
    d[1]:int = m;
    d[0]:short = 9;
    k = 1;
    goto B_h;
    label B_j:
    (c + 80 + 8)[0]:int = (j + 8)[0]:int;
    c[10]:long = j[0]:long@4;
    parser_lex(a);
    l = pm_symbol_node_label_create(c + 80);
    c[16]:int = 3;
    c[18]:int = (d = a[40]);
    c[17]:int = d;
    if (eqz(token_begins_expression_p(a[45]))) goto B_r;
    d = parse_expression(a, 14, 0, 106);
    m = pm_check_value_expression(d);
    if (eqz(m)) goto B_q;
    pm_diagnostic_list_append(h, m[1]:int, (m + 8)[0]:int, 208);
    goto B_q;
    label B_r:
    o = c[21]:int;
    if (
      eqz(call_indirect(o, q = (p = c[22]:int + -1) - o, (a[66])[3]:int))) goto B_t;
    c[14]:int = p;
    c[13]:int = o;
    c[12]:int = 29;
    m = pm_constant_read_node_create(a, c + 48);
    goto B_s;
    label B_t:
    n = pm_constant_pool_insert_shared(i, o, q);
    d = a[64];
    if (eqz(d)) goto B_v;
    m = 0;
    loop L_w {
      if (pm_constant_id_list_includes(d, n)) goto B_u;
      if (d[16]:ubyte) goto B_v;
      m = m + 1;
      d = d[3]:int;
      if (d) continue L_w;
    }
    label B_v:
    m = calloc(1, 60);
    if (eqz(m)) goto B_b;
    m[7]:int = o;
    m[2]:int = p;
    m[1]:int = o;
    m[0]:int = 524307;
    (m + 32)[0]:int = p;
    m[6]:int = pm_constant_pool_insert_shared(i, o, q);
    goto B_s;
    label B_u:
    c[14]:int = p;
    c[13]:int = o;
    c[12]:int = 55;
    m = pm_local_variable_read_node_create(a, c + 48, m);
    label B_s:
    d = m + 8;
    d[0]:int = d[0]:int + 1;
    d = calloc(1, 16);
    if (eqz(d)) goto B_a;
    var r:long = m[1]:long@4;
    d[3]:int = m;
    d[1]:long@4 = r;
    d[0]:short = 69;
    label B_q:
    d = pm_assoc_node_create(l, c + 64, d);
    goto B_h;
    label B_i:
    d = parse_expression(a, 14, 0, 107);
    m = pm_check_value_expression(d);
    if (eqz(m)) goto B_x;
    pm_diagnostic_list_append(h, m[1]:int, (m + 8)[0]:int, 208);
    label B_x:
    m = d[0]:ushort;
    if (m == 86) goto B_ba;
    if (m != 140) goto B_z;
    m = d + 32;
    goto B_aa;
    label B_ba:
    m = d + 36;
    label B_aa:
    m = m[0]:int;
    if (eqz(m)) goto B_z;
    if ((m + -1)[0]:ubyte != 58) goto B_z;
    c[20]:int = 3;
    c[22]:int = (m = a[40]);
    c[21]:int = m;
    goto B_y;
    label B_z:
    if (j[0]:int != 42) goto B_da;
    parser_lex(a);
    goto B_ca;
    label B_da:
    pm_diagnostic_list_append(h, m = a[44], m, 108);
    a[42] = 2;
    a[43] = m;
    label B_ca:
    (c + 80 + 8)[0]:int = (g + 8)[0]:int;
    c[10]:long = g[0];
    label B_y:
    o = parse_expression(a, 14, 0, 110);
    m = pm_check_value_expression(o);
    if (eqz(m)) goto B_ea;
    pm_diagnostic_list_append(h, m[1]:int, (m + 8)[0]:int, 208);
    label B_ea:
    d = pm_assoc_node_create(d, c + 80, o);
    label B_h:
    if (b[0]:ushort != 65) goto B_ga;
    pm_node_list_append(e, d);
    if (d[0]:ushort != 8) goto B_ha;
    o = d[3]:int;
    m = o[0];
    if (m == 6) goto B_ha;
    if (m == 65) goto B_ha;
    if (m == 120) goto B_ha;
    if (eqz((o + 3)[0]:ubyte & 64)) goto B_ha;
    if ((d + 3)[0]:ubyte & 64) goto B_fa;
    label B_ha:
    b[1]:short = b[1]:ushort & 49151;
    goto B_fa;
    label B_ga:
    if (d[0]:ushort != 8) goto B_ja;
    if ((d[3]:int)[0]:ushort == 140) goto B_ia;
    label B_ja:
    b[1]:short = b[1]:ushort & 65534;
    label B_ia:
    pm_node_list_append(f, d);
    if (b[1]:int) goto B_ka;
    b[1]:int = d[1]:int;
    label B_ka:
    b[2]:int = (d + 8)[0]:int;
    label B_fa:
    if (j[0]:int != 27) goto B_la;
    parser_lex(a);
    d = a[45];
    if (d == 109) continue L_g;
    if (d == 162) continue L_g;
    if (token_begins_expression_p(d)) continue L_g;
    label B_la:
  }
  stack_pointer = c + 96;
  return k & 1;
  label B_e:
  assert_fail(26753, 13402, 11226, 4980);
  unreachable;
  label B_d:
  assert_fail(16505, 13402, 1389, 10118);
  unreachable;
  label B_c:
  c[0]:int = 24;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_b:
  c[8]:int = 60;
  fprintf(rodata[15455]:int, 31876, c + 32);
  abort();
  unreachable;
  label B_a:
  c[4]:int = 16;
  fprintf(rodata[15455]:int, 31876, c + 16);
  abort();
  return unreachable;
}

function pm_array_node_close_set(a:int_ptr, b:{ a:int, b:int, c:int }) {
  var c:int;
  c = b.a;
  if (c > 20) goto B_b;
  if (1 << c & 1048588) goto B_a;
  label B_b:
  if (c == 151) goto B_a;
  assert_fail(22744, 13402, 1209, 4037);
  unreachable;
  label B_a:
  (a + 8)[0]:int = (c = b.c);
  a[8] = b.b;
  (a + 36)[0]:int = c;
}

function pm_missing_node_create(a:int, b:int):int {
  var d:{ a:short, b:int, c:int }
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = calloc(1, 12);
  if (d) goto B_a;
  c[0] = 12;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  d.c = b;
  d.b = a;
  d.a = 101;
  stack_pointer = c + 16;
  return d;
}

function parse_symbol(a:int, b:int, c:int):int {
  var e:int;
  var f:int;
  var g:int;
  var i:int;
  var h:int;
  var j:int;
  var d:int = stack_pointer - 176;
  stack_pointer = d;
  (d + 160 + 8)[0]:int = (a + 176)[0]:int;
  d[20]:long = a[42]:long@4;
  if (b[0]:int == 6) goto B_j;
  if (eqz(c)) goto B_k;
  a[0]:int = c;
  label B_k:
  br_table[B_o, B_m, B_m, B_m, B_m, B_o, B_n, B_o, B_o, B_o, B_m, B_m, B_m, B_m, B_o, B_o, B_m, B_o, B_m, B_m, B_n, B_m, B_m, B_m, B_m, B_n, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_m, B_o, B_o, B_m, B_o, B_m, B_m, B_m, B_m, B_n, B_o, B_o, B_o, B_m, B_m, B_m, B_n, B_m, B_n, B_m, B_m, B_m, B_m, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_m, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_m, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_m, B_n, B_m, B_n, B_n, B_m, B_n, B_n, B_n, B_n, B_m, B_m, B_m, B_o, B_o, B_o, B_o, B_m, B_n, B_o, B_m, B_m, B_m, B_n, B_m, B_m, B_m, B_o, B_m, B_m, B_m, B_m, B_m, B_m, B_o, B_m, B_m, B_m, B_o, B_m, B_m, B_m, B_m, B_m, B_o, B_m, B_o, B_m, B_o, B_m, B_m, B_m, B_m, B_m, B_o, B_o, B_m, B_m, B_m, B_o, B_o, B_o, B_o, B_o, ..B_m](
    a[45]:int + -4)
  label B_o:
  b = parse_operator_symbol(a, d + 160, select_if(c, 8, c));
  goto B_i;
  label B_n:
  parser_lex(a);
  goto B_l;
  label B_m:
  expect2(a, 55, 117, 196);
  label B_l:
  b = calloc(1, 48);
  if (eqz(b)) goto B_h;
  b[0]:int = 1073741964;
  b[6]:int = (c = (a + 176)[0]:int);
  b[5]:int = (f = (e = a + 172)[0]:int);
  b[4]:int = select_if(0, d[42]:int, a = d[40]:int == 3);
  b[3]:int = select_if(0, d[41]:int, a);
  b[2]:int = c;
  b[1]:int = select_if(e, d + 160 | 4, a)[0]:int;
  pm_string_shared_init(b + 36, f, c);
  goto B_i;
  label B_j:
  if (eqz((b + 8)[0]:ubyte)) goto B_p;
  if (a[45]:int != 151) goto B_q;
  if (eqz(c)) goto B_r;
  a[0]:int = c;
  label B_r:
  parser_lex(a);
  c = (a + 176)[0]:int;
  f = (a + 172)[0]:int;
  e = a[42]:int;
  a = a[40]:int;
  b = calloc(1, 48);
  if (eqz(b)) goto B_g;
  b[6]:int = a;
  b[5]:int = a;
  b[0]:int = 1073741964;
  b[8]:int = select_if(0, c, e = e == 3);
  b[7]:int = select_if(0, f, e);
  b[4]:int = select_if(0, d[42]:int, f = d[40]:int == 3);
  b[3]:int = select_if(0, g = d[41]:int, f);
  b[2]:int = select_if(a, c, e);
  b[1]:int = select_if(a, g, f);
  goto B_i;
  label B_q:
  e = parse_string_part(a);
  if (eqz(e)) goto B_t;
  if (e[0]:ushort != 138) goto B_u;
  b = a[45]:int;
  if (b == 151) goto B_v;
  if (b != 1) goto B_u;
  label B_v:
  if (eqz(c)) goto B_w;
  a[0]:int = c;
  label B_w:
  if (b != 151) goto B_y;
  parser_lex(a);
  goto B_x;
  label B_y:
  pm_diagnostic_list_append(a + 244, b = (a + 176)[0]:int, b, 198);
  a[42]:int = 2;
  (a + 172)[0]:int = b;
  label B_x:
  b = calloc(1, 48);
  if (eqz(b)) goto B_f;
  c = 0;
  h = select_if(0, d[42]:int, f = d[40]:int == 3);
  j = select_if(0, i = d[41]:int, f);
  f = (a + 176)[0]:int;
  var k:long = e[5]:long@4;
  g = 0;
  if (a[42]:int == 3) goto B_z;
  c = (a + 172)[0]:int;
  g = f;
  label B_z:
  b[8]:int = g;
  b[7]:int = c;
  b[5]:long@4 = k;
  b[4]:int = h;
  b[3]:int = j;
  b[2]:int = f;
  b[1]:int = i;
  b[0]:int = 1073741964;
  b[9]:long@4 = e[9]:long@4;
  (b + 44)[0]:int = (e + 44)[0]:int;
  free(e);
  goto B_i;
  label B_u:
  (d + 152)[0]:int = 0;
  d[18]:long = 0L;
  pm_node_list_append(d + 144, e);
  goto B_s;
  label B_t:
  (d + 152)[0]:int = 0;
  d[18]:long = 0L;
  label B_s:
  loop L_ba {
    b = a[45]:int;
    if (b == 1) goto B_aa;
    if (b == 151) goto B_aa;
    b = parse_string_part(a);
    if (eqz(b)) continue L_ba;
    pm_node_list_append(d + 144, b);
    continue L_ba;
  }
  label B_aa:
  if (eqz(c)) goto B_ca;
  a[0]:int = c;
  label B_ca:
  if (b == 151) goto B_fa;
  if (b != 1) goto B_ea;
  pm_diagnostic_list_append(a + 244, d[41]:int, d[42]:int, 198);
  goto B_da;
  label B_fa:
  parser_lex(a);
  goto B_da;
  label B_ea:
  pm_diagnostic_list_append(a + 244, b = (a + 176)[0]:int, b, 198);
  a[42]:int = 2;
  (a + 172)[0]:int = b;
  label B_da:
  b = calloc(1, 40);
  if (eqz(b)) goto B_e;
  c = 0;
  g = select_if(0, d[42]:int, e = d[40]:int == 3);
  i = select_if(0, h = d[41]:int, e);
  e = (a + 176)[0]:int;
  f = 0;
  if (a[42]:int == 3) goto B_ga;
  c = (a + 172)[0]:int;
  f = e;
  label B_ga:
  b[9]:int = f;
  b[8]:int = c;
  b[4]:int = g;
  b[3]:int = i;
  b[2]:int = e;
  b[1]:int = h;
  b[0]:short = 86;
  b[5]:long@4 = d[18]:long;
  (b + 28)[0]:int = (d + 152)[0]:int;
  goto B_i;
  label B_p:
  if (a[45]:int != 150) goto B_ia;
  (d + 144 + 8)[0]:int = (a + 336)[0]:int;
  d[18]:long = a[82]:long@4;
  e = (a + 188)[0]:int;
  f = (a + 184)[0]:int;
  parser_lex(a);
  if (a[45]:int != 150) goto B_ha;
  (d + 128 + 8)[0]:int = 0;
  d[16]:long = 0L;
  b = calloc(1, 48);
  if (eqz(b)) goto B_d;
  b[6]:int = e;
  b[5]:int = f;
  b[2]:int = e;
  b[1]:int = f;
  b[0]:short = 138;
  b[9]:long@4 = d[18]:long;
  b[1]:short = select_if(16388, 0, a[362]:ubyte);
  (b + 44)[0]:int = (d + 144 + 8)[0]:int;
  pm_node_list_append(d + 128, b);
  b = calloc(1, 48);
  if (eqz(b)) goto B_c;
  b[0]:short = 138;
  b[6]:int = (e = a[47]:int);
  b[5]:int = (f = a[46]:int);
  b[2]:int = e;
  b[1]:int = f;
  b[9]:long@4 = (e = a + 328)[0]:long@4;
  b[1]:short = select_if(16388, 0, a[362]:ubyte);
  (b + 44)[0]:int = (e + 8)[0]:int;
  pm_node_list_append(d + 128, b);
  if (eqz(c)) goto B_ja;
  a[0]:int = c;
  label B_ja:
  parser_lex(a);
  if (a[45]:int != 151) goto B_la;
  parser_lex(a);
  goto B_ka;
  label B_la:
  pm_diagnostic_list_append(a + 244, b = (a + 176)[0]:int, b, 197);
  a[42]:int = 2;
  (a + 172)[0]:int = b;
  label B_ka:
  b = calloc(1, 40);
  if (eqz(b)) goto B_b;
  c = 0;
  g = select_if(0, d[42]:int, e = d[40]:int == 3);
  i = select_if(0, h = d[41]:int, e);
  e = (a + 176)[0]:int;
  f = 0;
  if (a[42]:int == 3) goto B_ma;
  c = (a + 172)[0]:int;
  f = e;
  label B_ma:
  b[9]:int = f;
  b[8]:int = c;
  b[4]:int = g;
  b[3]:int = i;
  b[2]:int = e;
  b[1]:int = h;
  b[0]:short = 86;
  b[5]:long@4 = d[16]:long;
  (b + 28)[0]:int = (d + 136)[0]:int;
  goto B_i;
  label B_ia:
  pm_string_shared_init(d + 144, e = (a + 176)[0]:int, e);
  f = e;
  label B_ha:
  if (eqz(c)) goto B_na;
  a[0]:int = c;
  label B_na:
  b = a[45]:int;
  if (b == 151) goto B_qa;
  if (b != 1) goto B_pa;
  pm_diagnostic_list_append(a + 244, d[41]:int, d[42]:int, 197);
  goto B_oa;
  label B_qa:
  parser_lex(a);
  goto B_oa;
  label B_pa:
  pm_diagnostic_list_append(a + 244, b = (a + 176)[0]:int, b, 197);
  a[42]:int = 2;
  (a + 172)[0]:int = b;
  label B_oa:
  b = calloc(1, 48);
  if (eqz(b)) goto B_a;
  h = select_if(f, g = d[41]:int, c = d[40]:int == 3);
  if ((a + 168)[0]:int != 3) goto B_sa;
  i = 0;
  j = select_if(0, d[42]:int, c);
  c = select_if(0, g, c);
  a = e;
  g = 0;
  goto B_ra;
  label B_sa:
  j = select_if(0, d[42]:int, c);
  c = select_if(0, g, c);
  i = (a + 172)[0]:int;
  a = (a + 176)[0]:int;
  g = a;
  label B_ra:
  b[8]:int = g;
  b[7]:int = i;
  b[6]:int = e;
  b[5]:int = f;
  b[4]:int = j;
  b[3]:int = c;
  b[2]:int = a;
  b[1]:int = h;
  b[0]:int = 1073741964;
  b[9]:long@4 = d[18]:long;
  (b + 44)[0]:int = (d + 152)[0]:int;
  label B_i:
  stack_pointer = d + 176;
  return b;
  label B_h:
  d[28]:int = 48;
  fprintf(rodata[15455]:int, 31876, d + 112);
  abort();
  unreachable;
  label B_g:
  d[16]:int = 48;
  fprintf(rodata[15455]:int, 31876, d + 64);
  abort();
  unreachable;
  label B_f:
  d[24]:int = 48;
  fprintf(rodata[15455]:int, 31876, d + 96);
  abort();
  unreachable;
  label B_e:
  d[20]:int = 40;
  fprintf(rodata[15455]:int, 31876, d + 80);
  abort();
  unreachable;
  label B_d:
  d[0]:int = 48;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_c:
  d[4]:int = 48;
  fprintf(rodata[15455]:int, 31876, d + 16);
  abort();
  unreachable;
  label B_b:
  d[8]:int = 40;
  fprintf(rodata[15455]:int, 31876, d + 32);
  abort();
  unreachable;
  label B_a:
  d[12]:int = 48;
  fprintf(rodata[15455]:int, 31876, d + 48);
  abort();
  return unreachable;
}

function parse_strings(a:int, b:int_ptr):int {
  var o:int;
  var n:int;
  var q:int_ptr;
  var p:int_ptr;
  var r:int_ptr;
  var s:int;
  var t:int;
  var u:int;
  var c:int = stack_pointer - 304;
  stack_pointer = c;
  if (a[45]:int != 149) goto B_s;
  var d:int_ptr = a + 180;
  var e:long_ptr@4 = a + 328;
  var f:int = a + 244;
  var g:int = a[0]:int & 2064;
  var h:int = 49568 + 1776;
  var i:int = 0;
  loop L_t {
    var j:int = a[6]:int;
    if (j[0]:int != 6) goto B_r;
    var k:int = (j + 8)[0]:ubyte;
    var l:int = a[47]:int;
    var m:int = a[46]:int;
    parser_lex(a);
    j = a[45]:int;
    if (j == 1) goto B_y;
    if (j == 110) goto B_w;
    if (j != 151) goto B_v;
    parser_lex(a);
    k = a[43]:int;
    goto B_x;
    label B_y:
    pm_diagnostic_list_append(f, k = a[44]:int, k, 195);
    a[42]:int = 2;
    a[43]:int = k;
    label B_x:
    j = calloc(1, 48);
    if (eqz(j)) goto B_q;
    n = a[362]:ubyte;
    o = 0;
    p = k;
    q = 0;
    if (a[42]:int == 3) goto B_z;
    o = k;
    p = a[44]:int;
    q = p;
    label B_z:
    j[8]:int = q;
    j[7]:int = o;
    j[6]:int = k;
    j[5]:int = k;
    j[4]:int = l;
    j[3]:int = m;
    j[2]:int = p;
    j[1]:int = m;
    j[0]:short = 138;
    j[1]:short = select_if(16388, 0, n & 255);
    pm_string_shared_init(j + 36, k, k);
    goto B_u;
    label B_w:
    parser_lex(a);
    k = a[43]:int;
    j = calloc(1, 48);
    if (eqz(j)) goto B_p;
    m = 0;
    l = k;
    o = 0;
    if (a[42]:int == 3) goto B_aa;
    m = k;
    l = a[44]:int;
    o = l;
    label B_aa:
    j[8]:int = o;
    j[7]:int = m;
    j[6]:int = k;
    j[5]:int = k;
    j[3]:long@4 = 0L;
    j[2]:int = l;
    j[1]:int = k;
    j[0]:int = 1073741964;
    pm_string_shared_init(j + 36, k, k);
    goto B_u;
    label B_v:
    if (k & 255) goto B_ba;
    if (j != 1) goto B_ga;
    p = 0;
    k = a[40]:int;
    o = k;
    q = 0;
    n = 0;
    goto B_fa;
    label B_ga:
    n = a[84]:int;
    q = a[83]:int;
    p = a[82]:int;
    if (j != 150) goto B_ia;
    parser_lex(a);
    o = a[43]:int;
    goto B_ha;
    label B_ia:
    pm_diagnostic_list_append(f, o = a[44]:int, o, 99);
    a[42]:int = 2;
    a[43]:int = o;
    label B_ha:
    k = a[44]:int;
    j = a[45]:int;
    if (j == 110) goto B_ka;
    if (j != 150) goto B_ja;
    r = c + 288 + 8;
    r[0] = 0;
    c[36]:long = 0L;
    c[68]:int = 3;
    c[70]:int = (j = a[40]:int);
    c[69]:int = j;
    j = calloc(1, 48);
    if (eqz(j)) goto B_o;
    j[11]:int = n;
    j[10]:int = q;
    j[9]:int = p;
    j[7]:long@4 = 0L;
    j[6]:int = k;
    j[5]:int = o;
    j[3]:long@4 = 0L;
    j[2]:int = k;
    j[1]:int = o;
    j[0]:short = 138;
    j[1]:short = select_if(16388, 0, a[362]:ubyte);
    pm_node_list_append(c + 288, j);
    loop L_la {
      pm_node_list_append(
        c + 288,
        pm_string_node_create_current_string(a, c + 272, d, c + 272));
      parser_lex(a);
      j = a[45]:int;
      if (j == 150) continue L_la;
    }
    if (j != 151) goto B_na;
    parser_lex(a);
    goto B_ma;
    label B_na:
    pm_diagnostic_list_append(f, j = a[44]:int, j, 195);
    a[42]:int = 2;
    a[43]:int = j;
    label B_ma:
    j = calloc(1, 40);
    if (eqz(j)) goto B_n;
    k = a[44]:int;
    o = 0;
    p = 0;
    if (a[42]:int == 3) goto B_oa;
    o = a[43]:int;
    p = k;
    label B_oa:
    j[9]:int = p;
    j[8]:int = o;
    j[4]:int = l;
    j[3]:int = m;
    j[2]:int = k;
    j[1]:int = m;
    j[0]:short = 85;
    j[5]:long@4 = c[36]:long;
    (j + 28)[0]:int = r[0];
    goto B_u;
    label B_ka:
    parser_lex(a);
    if (g) goto B_pa;
    j = calloc(1, 48);
    if (eqz(j)) goto B_m;
    r = 0;
    s = k;
    t = 0;
    if (a[42]:int == 3) goto B_qa;
    r = a[43]:int;
    s = a[44]:int;
    t = s;
    label B_qa:
    j[11]:int = n;
    j[10]:int = q;
    j[9]:int = p;
    j[8]:int = t;
    j[7]:int = r;
    j[6]:int = k;
    j[5]:int = o;
    j[4]:int = l;
    j[3]:int = m;
    j[2]:int = s;
    j[1]:int = m;
    j[0]:int = 1073741964;
    goto B_u;
    label B_pa:
    j = d[0];
    label B_ja:
    if (j == 151) goto B_ea;
    if (j != 1) goto B_da;
    label B_fa:
    pm_diagnostic_list_append(f, m, l, 195);
    j = calloc(1, 48);
    if (eqz(j)) goto B_l;
    u = a[362]:ubyte;
    r = 0;
    s = k;
    t = 0;
    if (a[45]:int == 3) goto B_ra;
    r = a[46]:int;
    s = a[47]:int;
    t = s;
    label B_ra:
    j[11]:int = n;
    j[10]:int = q;
    j[9]:int = p;
    j[8]:int = t;
    j[7]:int = r;
    j[6]:int = k;
    j[5]:int = o;
    j[4]:int = l;
    j[3]:int = m;
    j[2]:int = s;
    j[1]:int = m;
    j[0]:short = 138;
    j[1]:short = select_if(16388, 0, u & 255);
    goto B_u;
    label B_ea:
    parser_lex(a);
    goto B_ca;
    label B_da:
    pm_diagnostic_list_append(f, j = a[44]:int, j, 195);
    a[42]:int = 2;
    a[43]:int = j;
    label B_ca:
    j = calloc(1, 48);
    if (eqz(j)) goto B_k;
    u = a[362]:ubyte;
    r = 0;
    s = k;
    t = 0;
    if (a[42]:int == 3) goto B_sa;
    r = a[43]:int;
    s = a[44]:int;
    t = s;
    label B_sa:
    j[11]:int = n;
    j[10]:int = q;
    j[9]:int = p;
    j[8]:int = t;
    j[7]:int = r;
    j[6]:int = k;
    j[5]:int = o;
    j[4]:int = l;
    j[3]:int = m;
    j[2]:int = s;
    j[1]:int = m;
    j[0]:short = 138;
    j[1]:short = select_if(16388, 0, u & 255);
    goto B_u;
    label B_ba:
    if (j != 150) goto B_ta;
    o = a[47]:int;
    q = a[46]:int;
    p = c + 288 + 8;
    p[0] = (e + 8)[0]:int;
    c[36]:long = e[0];
    parser_lex(a);
    k = a[45]:int;
    if (k == 151) goto B_wa;
    if (k == 110) goto B_va;
    if (k != 1) goto B_ua;
    label B_wa:
    j = calloc(1, 48);
    if (eqz(j)) goto B_j;
    t = a[362]:ubyte;
    n = 0;
    r = o;
    s = 0;
    if (k == 3) goto B_xa;
    n = a[46]:int;
    r = a[47]:int;
    s = r;
    label B_xa:
    j[8]:int = s;
    j[7]:int = n;
    j[6]:int = o;
    j[5]:int = q;
    j[4]:int = l;
    j[3]:int = m;
    j[2]:int = r;
    j[1]:int = m;
    j[0]:short = 138;
    j[9]:long@4 = c[36]:long;
    (j + 44)[0]:int = p[0];
    m = select_if(16388, 0, t & 255);
    l = a[86]:int;
    if (eqz(l)) goto B_za;
    if (l != 49568) goto B_ab;
    l = 1;
    goto B_ya;
    label B_ab:
    if (a[66]:int != h) goto B_za;
    l = 2;
    goto B_ya;
    label B_za:
    l = 0;
    label B_ya:
    j[1]:short = m | l;
    if (k != 151) goto B_bb;
    parser_lex(a);
    goto B_u;
    label B_bb:
    pm_diagnostic_list_append(f, k = a[44]:int, k, 195);
    a[42]:int = 2;
    a[43]:int = k;
    goto B_u;
    label B_va:
    parser_lex(a);
    j = calloc(1, 48);
    if (eqz(j)) goto B_i;
    k = 0;
    n = o;
    r = 0;
    if (a[42]:int == 3) goto B_cb;
    k = a[43]:int;
    n = a[44]:int;
    r = n;
    label B_cb:
    j[8]:int = r;
    j[7]:int = k;
    j[6]:int = o;
    j[5]:int = q;
    j[4]:int = l;
    j[3]:int = m;
    j[2]:int = n;
    j[1]:int = m;
    j[0]:int = 1073741964;
    j[9]:long@4 = c[36]:long;
    (j + 44)[0]:int = p[0];
    goto B_u;
    label B_ua:
    q = c + 272 + 8;
    q[0] = 0;
    c[34]:long = 0L;
    j = calloc(1, 48);
    if (eqz(j)) goto B_h;
    j[7]:long@4 = 0L;
    j[3]:long@4 = 0L;
    j[0]:short = 138;
    j[9]:long@4 = c[36]:long;
    j[6]:int = (k = a[44]:int);
    j[5]:int = (o = a[43]:int);
    j[2]:int = k;
    j[1]:int = o;
    (j + 44)[0]:int = p[0];
    k = select_if(16388, 0, a[362]:ubyte);
    o = a[86]:int;
    if (eqz(o)) goto B_eb;
    if (o != 49568) goto B_fb;
    o = 1;
    goto B_db;
    label B_fb:
    if (a[66]:int != h) goto B_eb;
    o = 2;
    goto B_db;
    label B_eb:
    o = 0;
    label B_db:
    j[1]:short = k | o;
    loop L_ob {
      pm_node_list_append(c + 272, j);
      loop L_pb {
        j = d[0];
        if (j == 1) goto B_nb;
        if (j == 110) goto B_qb;
        if (j == 151) goto B_nb;
        j = parse_string_part(a);
        if (j) continue L_ob;
        continue L_pb;
        label B_qb:
      }
    }
    parser_lex(a);
    if (eqz(g)) goto B_mb;
    j = d[0];
    label B_nb:
    if (j == 151) goto B_lb;
    if (j != 1) goto B_kb;
    pm_diagnostic_list_append(f, m, l, 194);
    j = calloc(1, 40);
    if (eqz(j)) goto B_f;
    k = a[47]:int;
    o = 0;
    p = 0;
    if (a[45]:int == 3) goto B_hb;
    o = a[46]:int;
    goto B_ib;
    label B_mb:
    j = calloc(1, 40);
    if (eqz(j)) goto B_g;
    k = a[44]:int;
    o = 0;
    p = 0;
    if (a[42]:int == 3) goto B_rb;
    o = a[43]:int;
    p = k;
    label B_rb:
    j[0]:short = 86;
    goto B_gb;
    label B_lb:
    parser_lex(a);
    goto B_jb;
    label B_kb:
    pm_diagnostic_list_append(f, j = a[44]:int, j, 194);
    a[42]:int = 2;
    a[43]:int = j;
    label B_jb:
    j = calloc(1, 40);
    if (eqz(j)) goto B_e;
    k = a[44]:int;
    o = 0;
    p = 0;
    if (a[42]:int == 3) goto B_hb;
    o = a[43]:int;
    label B_ib:
    p = k;
    label B_hb:
    j[0]:short = 85;
    label B_gb:
    j[9]:int = p;
    j[8]:int = o;
    j[4]:int = l;
    j[3]:int = m;
    j[2]:int = k;
    j[1]:int = m;
    j[5]:long@4 = c[34]:long;
    (j + 28)[0]:int = q[0];
    goto B_u;
    label B_ta:
    q = c + 288 + 8;
    q[0] = 0;
    c[36]:long = 0L;
    loop L_xb {
      if (j == 1) goto B_wb;
      if (j == 110) goto B_yb;
      if (j == 151) goto B_vb;
      j = parse_string_part(a);
      if (eqz(j)) goto B_zb;
      pm_node_list_append(c + 288, j);
      label B_zb:
      j = d[0];
      continue L_xb;
      label B_yb:
    }
    parser_lex(a);
    j = calloc(1, 40);
    if (eqz(j)) goto B_d;
    p = a[44]:int;
    k = 0;
    o = 0;
    if (a[42]:int == 3) goto B_ac;
    k = a[43]:int;
    o = p;
    label B_ac:
    j[0]:short = 86;
    goto B_sb;
    label B_wb:
    pm_diagnostic_list_append(f, m, l, 194);
    j = calloc(1, 40);
    if (eqz(j)) goto B_c;
    p = a[47]:int;
    k = 0;
    o = 0;
    if (a[45]:int == 3) goto B_tb;
    k = a[46]:int;
    goto B_ub;
    label B_vb:
    parser_lex(a);
    j = calloc(1, 40);
    if (eqz(j)) goto B_b;
    p = a[44]:int;
    k = 0;
    o = 0;
    if (a[42]:int == 3) goto B_tb;
    k = a[43]:int;
    label B_ub:
    o = p;
    label B_tb:
    j[0]:short = 85;
    label B_sb:
    j[9]:int = o;
    j[8]:int = k;
    j[4]:int = l;
    j[3]:int = m;
    j[2]:int = p;
    j[1]:int = m;
    j[5]:long@4 = c[36]:long;
    (j + 28)[0]:int = q[0];
    label B_u:
    k = j[0]:ushort;
    if (b) goto B_dc;
    if (k != 86) goto B_ec;
    b = j;
    goto B_bc;
    label B_ec:
    b = j;
    if (k != 140) goto B_cc;
    goto B_bc;
    label B_dc:
    if (k == 85) goto B_fc;
    if (k == 138) goto B_fc;
    pm_diagnostic_list_append(f, j[1]:int, (j + 8)[0]:int, 193);
    label B_fc:
    if (i & 1) goto B_gc;
    m = a[40]:int;
    k = calloc(1, 40);
    if (eqz(k)) goto B_a;
    k[8]:long@4 = 0L;
    k[3]:long@4 = 0L;
    k[2]:int = m;
    k[1]:int = m;
    k[0]:short = 85;
    k[1]:int = b[1];
    pm_node_list_append(k + 20, b);
    k[2]:int = (b + 8)[0]:int;
    b = k;
    label B_gc:
    k = b + 20;
    if (b[5]) goto B_hc;
    if (b[3]) goto B_hc;
    b[1] = j[1]:int;
    label B_hc:
    pm_node_list_append(k, j);
    (b + 8)[0]:int = (j + 8)[0]:int;
    i = 1;
    label B_cc:
    if (d[0] == 149) continue L_t;
    label B_bc:
  }
  stack_pointer = c + 304;
  return b;
  label B_s:
  assert_fail(16841, 13402, 13903, 4879);
  unreachable;
  label B_r:
  assert_fail(18071, 13402, 13914, 4879);
  unreachable;
  label B_q:
  c[60]:int = 48;
  fprintf(rodata[15455]:int, 31876, c + 240);
  abort();
  unreachable;
  label B_p:
  c[64]:int = 48;
  fprintf(rodata[15455]:int, 31876, c + 256);
  abort();
  unreachable;
  label B_o:
  c[12]:int = 48;
  fprintf(rodata[15455]:int, 31876, c + 48);
  abort();
  unreachable;
  label B_n:
  c[16]:int = 40;
  fprintf(rodata[15455]:int, 31876, c + 64);
  abort();
  unreachable;
  label B_m:
  c[20]:int = 48;
  fprintf(rodata[15455]:int, 31876, c + 80);
  abort();
  unreachable;
  label B_l:
  c[0]:int = 48;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_k:
  c[8]:int = 48;
  fprintf(rodata[15455]:int, 31876, c + 32);
  abort();
  unreachable;
  label B_j:
  c[40]:int = 48;
  fprintf(rodata[15455]:int, 31876, c + 160);
  abort();
  unreachable;
  label B_i:
  c[44]:int = 48;
  fprintf(rodata[15455]:int, 31876, c + 176);
  abort();
  unreachable;
  label B_h:
  c[24]:int = 48;
  fprintf(rodata[15455]:int, 31876, c + 96);
  abort();
  unreachable;
  label B_g:
  c[28]:int = 40;
  fprintf(rodata[15455]:int, 31876, c + 112);
  abort();
  unreachable;
  label B_f:
  c[36]:int = 40;
  fprintf(rodata[15455]:int, 31876, c + 144);
  abort();
  unreachable;
  label B_e:
  c[32]:int = 40;
  fprintf(rodata[15455]:int, 31876, c + 128);
  abort();
  unreachable;
  label B_d:
  c[48]:int = 40;
  fprintf(rodata[15455]:int, 31876, c + 192);
  abort();
  unreachable;
  label B_c:
  c[52]:int = 40;
  fprintf(rodata[15455]:int, 31876, c + 208);
  abort();
  unreachable;
  label B_b:
  c[56]:int = 40;
  fprintf(rodata[15455]:int, 31876, c + 224);
  abort();
  unreachable;
  label B_a:
  c[4]:int = 40;
  fprintf(rodata[15455]:int, 31876, c + 16);
  abort();
  return unreachable;
}

function pm_call_node_unary_create(a:int, b:{ a:int, b:int, c:int }, c:ushort_ptr, d:int):int {
  var f:int;
  var h:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = pm_check_value_expression(c);
  if (eqz(f)) goto B_a;
  pm_diagnostic_list_append(a + 244, f[1]:int, (f + 8)[0]:int, 208);
  label B_a:
  var g:int = c[0];
  f = calloc(1, 60);
  if (eqz(f)) goto B_b;
  f[0]:short = 19;
  f[3]:int = c;
  f[1]:int = (h = b.b);
  f[2]:int = (c + 8)[0]:int;
  f[1]:short = ((g & 65535) == 131) << 3;
  c = 0;
  g = 0;
  if (b.a == 3) goto B_c;
  g = b.c;
  c = h;
  label B_c:
  f[7]:int = c;
  (f + 32)[0]:int = g;
  f[6]:int = pm_constant_pool_insert_constant(a + 292, d, strlen(d));
  stack_pointer = e + 16;
  return f;
  label B_b:
  e[0] = 60;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_block_parameters_node_create(a:int_ptr, b:{ a:int, b:int, c:int }):int {
  var f:int;
  var g:int;
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  var d:int = calloc(1, 44);
  if (eqz(d)) goto B_a;
  if (b.a != 3) goto B_c;
  b = 0;
  if (a) goto B_d;
  e = 0;
  f = 0;
  g = 0;
  goto B_b;
  label B_d:
  e = (a + 8)[0]:int;
  f = a[1];
  g = 0;
  goto B_b;
  label B_c:
  e = select_if(a, b, a)[2]:int;
  g = b.c;
  f = b.b;
  b = f;
  label B_b:
  d[8]:int = g;
  d[7]:int = b;
  d[3]:int = a;
  d[2]:int = e;
  d[1]:int = f;
  d[0]:short = 16;
  stack_pointer = c + 16;
  return d;
  label B_a:
  c[0] = 44;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function parse_block_parameters(a:int_ptr, b:int_ptr, c:{ a:int, b:int, c:int }, d:int):int {
  var k:int;
  var e:int_ptr = stack_pointer - 32;
  stack_pointer = e;
  var f:int = 0;
  if (a[45] == 142) goto B_a;
  f = parse_parameters(a, select_if(14, 48, d), 0, b, 0);
  label B_a:
  d = calloc(1, 44);
  if (eqz(d)) goto B_e;
  if (c.a != 3) goto B_f;
  if (f) goto B_h;
  a = 0;
  c = 0;
  goto B_g;
  label B_h:
  a = (f + 8)[0]:int;
  c = f[1]:int;
  label B_g:
  d[3]:int = f;
  d[2]:int = a;
  d[1]:int = c;
  d[0]:short = 16;
  goto B_b;
  label B_f:
  b = select_if(f, c, f)[2]:int;
  d[8]:int = c.c;
  d[7]:int = (c = c.b);
  d[3]:int = f;
  d[2]:int = b;
  d[1]:int = c;
  d[0]:short = 16;
  if (a[45] != 142) goto B_b;
  var g:int = d + 16;
  parser_lex(a);
  var h:int = a + 292;
  var i:int = a + 244;
  b = a + 168;
  loop L_i {
    if (a[45] != 55) goto B_k;
    parser_lex(a);
    goto B_j;
    label B_k:
    pm_diagnostic_list_append(i, f = a[44], f, 30);
    a[42] = 2;
    a[43] = f;
    label B_j:
    var j:int = pm_parser_parameter_name_check(a, b);
    f = pm_constant_pool_insert_shared(h, f = a[43], a[44] - f);
    if (eqz(f)) goto B_l;
    if (pm_constant_id_list_includes(a[64], f)) goto B_l;
    pm_constant_id_list_append(a[64], f);
    label B_l:
    f = b[0];
    if (f == 2) goto B_m;
    if (f != 55) goto B_d;
    label B_m:
    f = calloc(1, 16);
    if (eqz(f)) goto B_c;
    f[3]:int =
      pm_constant_pool_insert_shared(h, c = a[43], (k = a[44]) - c);
    f[2]:int = k;
    f[1]:int = c;
    f[0]:short = 13;
    if (eqz(j)) goto B_n;
    f[1]:short = f[1]:ushort | 1;
    label B_n:
    pm_node_list_append(g, f);
    if (d[1]:int) goto B_o;
    d[1]:int = f[1]:int;
    label B_o:
    d[2]:int = f[2]:int;
    if (a[45] != 27) goto B_b;
    parser_lex(a);
    continue L_i;
  }
  label B_e:
  e[0] = 44;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_d:
  assert_fail(17920, 13402, 1618, 11231);
  unreachable;
  label B_c:
  e[4] = 16;
  fprintf(rodata[15455]:int, 31876, e + 16);
  abort();
  unreachable;
  label B_b:
  stack_pointer = e + 32;
  return d;
}

function pm_block_parameters_node_closing_set(a:int_ptr, b:{ a:int, b:int, c:int }) {
  var c:int;
  c = b.a;
  br_table[B_a, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_a, ..B_c](
    c + -125);
  label B_c:
  if (c == 2) goto B_a;
  label B_b:
  assert_fail(17739, 13402, 1607, 4000);
  unreachable;
  label B_a:
  (a + 8)[0]:int = (c = b.c);
  a[9] = b.b;
  (a + 40)[0]:int = c;
}

function parse_rescues_as_begin(a:int_ptr, b:int_ptr, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  var e:int = a[40];
  var f:int = calloc(1, 44);
  if (eqz(f)) goto B_a;
  var g:int = e;
  if (eqz(b)) goto B_b;
  g = (b + 8)[0]:int;
  label B_b:
  f[5]:int = b;
  f[2]:int = g;
  f[1]:int = e;
  f[0]:short = 11;
  parse_rescues(a, f, c);
  b = f[5]:int;
  if (b) goto B_d;
  b = f[6]:int;
  if (b) goto B_d;
  b = f[7]:int;
  if (b) goto B_d;
  b = f[8]:int;
  if (b) goto B_d;
  b = f[1]:int;
  goto B_c;
  label B_d:
  b = b[1];
  label B_c:
  f[1]:int = b;
  stack_pointer = d + 16;
  return f;
  label B_a:
  d[0] = 44;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_numbered_parameters_node_create(a:long_ptr@4, b:int):int {
  var d:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = calloc(1, 16);
  if (d) goto B_a;
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  d[12]:byte = b;
  d[0]:short = 108;
  d[1]:long@4 = a[0];
  stack_pointer = c + 16;
  return d;
}

function pm_lambda_node_create(a:long_ptr@4, b:int, c:int_ptr, d:long_ptr@4, e:int_ptr, f:int, g:int):int {
  var i:int;
  var h:int_ptr = stack_pointer - 16;
  stack_pointer = h;
  i = calloc(1, 60);
  if (i) goto B_a;
  h[0] = 60;
  fprintf(rodata[15455]:int, 31876, h);
  abort();
  unreachable;
  label B_a:
  i[0]:short = 90;
  i[14]:int = g;
  i[13]:int = f;
  i[6]:int = b;
  i[2]:int = (g = e[2]);
  i[1]:int = (f = c[1]);
  i[3]:long@4 = a[0];
  i[12]:int = g;
  i[11]:int = e[1];
  i[9]:long@4 = d[1];
  i[8]:int = c[2];
  i[7]:int = f;
  (i + 20)[0]:int = (a + 8)[0]:int;
  stack_pointer = h + 16;
  return i;
}

function pm_call_node_binary_create(a:int, b:int, c:{ a:int, b:int, c:int }, d:int_ptr):int {
  var f:int;
  var h:int;
  var e:int_ptr = stack_pointer - 32;
  stack_pointer = e;
  f = pm_check_value_expression(b);
  if (eqz(f)) goto B_a;
  pm_diagnostic_list_append(a + 244, f[1]:int, (f + 8)[0]:int, 208);
  label B_a:
  f = pm_check_value_expression(d);
  if (eqz(f)) goto B_b;
  pm_diagnostic_list_append(a + 244, f[1]:int, (f + 8)[0]:int, 208);
  label B_b:
  var g:int = b[0]:ushort;
  f = calloc(1, 60);
  if (eqz(f)) goto B_d;
  f[0]:short = 19;
  f[3]:int = b;
  f[1]:short = ((g & 65535) == 131) << 3;
  f[1]:int = select_if(h = b[1]:int, g = d[1], h < g);
  f[2]:int = select_if(b = (b + 8)[0]:int, h = (d + 8)[0]:int, b > h);
  b = 0;
  var i:int = 0;
  if (c.a == 3) goto B_e;
  i = c.c;
  b = c.b;
  label B_e:
  f[7]:int = b;
  (f + 32)[0]:int = i;
  b = calloc(1, 24);
  if (eqz(b)) goto B_c;
  b[2]:int = h;
  b[1]:int = g;
  b[0]:short = 5;
  pm_node_list_append(b + 12, d);
  f[11]:int = b;
  f[6]:int = pm_constant_pool_insert_shared(a + 292, b = c.b, c.c - b);
  stack_pointer = e + 32;
  return f;
  label B_d:
  e[0] = 60;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_c:
  e[4] = 24;
  fprintf(rodata[15455]:int, 31876, e + 16);
  abort();
  return unreachable;
}

function parse_negative_numeric(a:int) {
  var b:int;
  loop L_a {
    b = a[0]:ushort;
    br_table[B_f, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_e, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_f, ..B_d](
      b + -54);
    label B_f:
    a[1]:int = a[1]:int + -1;
    return ;
    label B_e:
    a[1]:int = a[1]:int + -1;
    a = a[3]:int;
    continue L_a;
    label B_d:
    if (b == 121) goto B_b;
    label B_c:
    assert_fail(26957, 13402, 13885, 13340);
    unreachable;
    label B_b:
    a[1]:int = a[1]:int + -1;
    a = a[3]:int;
    continue L_a;
  }
}

function pm_conditional_predicate(a:int) {
  var b:int;
  loop L_f {
    b = a[0]:ushort;
    br_table[B_c, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_h, B_a, B_g, B_a, B_a, B_a, B_a, B_a, B_e, B_a, B_a, B_d, ..B_i](
      b + -84);
    label B_i:
    if (b != 4) goto B_a;
    pm_conditional_predicate(a[3]:int);
    a = (a + 16)[0]:int;
    continue L_f;
    label B_h:
    pm_conditional_predicate(a[3]:int);
    a = (a + 16)[0]:int;
    continue L_f;
    label B_g:
    a = a[3]:int;
    if (eqz(a)) goto B_a;
    if (a[0]:ushort != 137) goto B_a;
    if (a[3]:int != 1) goto B_a;
    a = ((a + 20)[0]:int)[0]:int;
    continue L_f;
  }
  label B_e:
  b = a[3]:int;
  if (eqz(b)) goto B_j;
  pm_conditional_predicate(b);
  label B_j:
  b = 53;
  var c:int = a[4]:int;
  if (eqz(c)) goto B_b;
  pm_conditional_predicate(c);
  goto B_b;
  label B_d:
  b = 97;
  goto B_b;
  label B_c:
  b = 83;
  label B_b:
  a[0]:short = b;
  label B_a:
}

function token_begins_expression_p(a:int):int {
  var b:int = 0;
  br_table[B_d, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_c, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_b, B_d, B_b, B_d, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_b, B_a, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_d, B_d, B_d, B_d, B_d, B_b, B_d, B_b, B_b, B_b, B_b, B_a, B_b, B_b, B_b, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_d, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_c, B_a, B_c, B_c, B_c, B_c, B_c, B_c, ..B_b](
    a + -1)
  label B_d:
  if (eqz((a * 12 + 63600)[0]:int)) goto B_a;
  assert_fail(15852, 13402, 10725, 6629);
  unreachable;
  label B_c:
  return 1;
  label B_b:
  b = eqz((a * 12 + 63600)[0]:int);
  label B_a:
  return b;
}

function pm_splat_node_create(a:int_ptr, b:int):int {
  var d:{ a:short, b:int, c:int, d:int, e:int, f:int }
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = calloc(1, 24);
  if (d) goto B_a;
  c[0] = 24;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  d.f = b;
  d.a = 136;
  d.e = a[2];
  d.d = (e = a[1]);
  d.b = e;
  d.c = select_if(b, a, b)[2]:int;
  stack_pointer = c + 16;
  return d;
}

function parse_targets_validate(a:int_ptr, b:int_ptr):int {
  b = parse_targets(a, b);
  var c:int = a[45];
  if (c == 39) goto B_a;
  if (c == 125) goto B_a;
  pm_diagnostic_list_append(a + 244, b[1], (b + 8)[0]:int, 212);
  label B_a:
  return b;
}

function parse_target_validate(a:int_ptr, b:{ a:int, b:int }):int {
  var c:int_ptr = parse_target(a, b);
  var d:int = a[45];
  if (d == 39) goto B_a;
  var e:{ a:int, b:int } = a[65];
  if (eqz(e)) goto B_b;
  b = e;
  loop L_e {
    if (b.a == 15) goto B_d;
    b = b.b;
    if (eqz(b)) goto B_c;
    continue L_e;
  }
  label B_d:
  if (d == 82) goto B_a;
  label B_c:
  loop L_g {
    if (e.a == 21) goto B_f;
    e = e.b;
    if (eqz(e)) goto B_b;
    continue L_g;
  }
  label B_f:
  if (d == 125) goto B_a;
  label B_b:
  pm_diagnostic_list_append(a + 244, c[1], (c + 8)[0]:int, 212);
  label B_a:
  return c;
}

function pm_xstring_node_create(a:int_ptr, b:long_ptr@4, c:int_ptr):int {
  var e:int;
  var f:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  e = calloc(1, 48);
  if (e) goto B_a;
  d[0] = 48;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_a:
  e[0]:int = 262291;
  e[8]:int = (f = c[2]);
  e[7]:int = c[1];
  e[5]:long@4 = b[1];
  e[4]:int = a[2];
  e[3]:int = (c = a[1]);
  e[2]:int = f;
  e[1]:int = c;
  stack_pointer = d + 16;
  return e;
}

function pm_xstring_node_create_unescaped(a:int_ptr, b:long_ptr@4, c:int_ptr, d:long_ptr@4):int {
  var f:int;
  var g:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 48);
  if (f) goto B_a;
  e[0] = 48;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  f[0]:int = 262291;
  f[8]:int = (g = c[2]);
  f[7]:int = c[1];
  f[5]:long@4 = b[1];
  f[4]:int = a[2];
  f[3]:int = (c = a[1]);
  f[2]:int = g;
  f[1]:int = c;
  f[9]:long@4 = d[0];
  (f + 44)[0]:int = (d + 8)[0]:int;
  stack_pointer = e + 16;
  return f;
}

function pm_interpolated_xstring_node_create(a:{ a:int, b:int, c:int }, b:{ a:int, b:int, c:int }):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  var d:int = calloc(1, 40);
  if (eqz(d)) goto B_a;
  var e:int = a.b;
  var f:int = 0;
  var g:int = 0;
  var h:int = 0;
  if (a.a == 3) goto B_b;
  h = a.c;
  g = e;
  label B_b:
  a = b.c;
  var i:int = 0;
  if (b.a == 3) goto B_c;
  f = b.b;
  i = a;
  label B_c:
  d[9]:int = i;
  d[8]:int = f;
  d[4]:int = h;
  d[3]:int = g;
  d[2]:int = a;
  d[1]:int = e;
  d[0]:short = 87;
  stack_pointer = c + 16;
  return d;
  label B_a:
  c[0] = 40;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_string_node_create_unescaped(a:ubyte_ptr, b:{ a:int, b:int, c:int }, c:int_ptr, d:{ a:int, b:int, c:int }, e:long_ptr@4):int {
  var h:int;
  var j:int;
  var f:int_ptr = stack_pointer - 16;
  stack_pointer = f;
  var g:int = calloc(1, 48);
  if (eqz(g)) goto B_a;
  var i:int_ptr = select_if(c, d, h = d.a == 3);
  var k:int_ptr = select_if(c, b, j = b.a == 3);
  var l:int = 0;
  var m:int = 0;
  var n:int = 0;
  if (j) goto B_b;
  n = b.c;
  m = b.b;
  label B_b:
  b = i[2];
  i = k[1];
  a = a[362];
  j = c[2];
  k = c[1];
  c = 0;
  if (h) goto B_c;
  c = d.c;
  l = d.b;
  label B_c:
  g[8]:int = c;
  g[7]:int = l;
  g[6]:int = j;
  g[5]:int = k;
  g[4]:int = n;
  g[3]:int = m;
  g[2]:int = b;
  g[1]:int = i;
  g[0]:short = 138;
  g[9]:long@4 = e[0];
  g[1]:short = select_if(16388, 0, a & 255);
  (g + 44)[0]:int = (e + 8)[0]:int;
  stack_pointer = f + 16;
  return g;
  label B_a:
  f[0] = 48;
  fprintf(rodata[15455]:int, 31876, f);
  abort();
  return unreachable;
}

function parse_string_part(a:int_ptr):int {
  var c:int;
  var d:{ a:short, b:int, c:int, d:int }
  var f:int;
  var e:int;
  var b:int_ptr = stack_pointer - 96;
  stack_pointer = b;
  c = a[45];
  br_table[B_j, B_h, B_i, ..B_k](c + -36);
  label B_k:
  if (c != 150) goto B_h;
  b[20] = 3;
  b[22] = (c = a[40]);
  b[21] = c;
  b[18] = c;
  b[17] = c;
  b[16] = 3;
  c = pm_string_node_create_current_string(a, b + 80, a + 180, b + 64);
  d = a[86];
  if (eqz(d)) goto B_m;
  if (d != 49568) goto B_n;
  d = 1;
  goto B_l;
  label B_n:
  if (a[66] != 49568 + 1776) goto B_m;
  d = 2;
  goto B_l;
  label B_m:
  d = 0;
  label B_l:
  c[1]:short = c[1]:ushort | d;
  parser_lex(a);
  goto B_b;
  label B_j:
  c = a[3];
  e = 0;
  a[3] = 0;
  f = a[0];
  a[0] = 1;
  parser_lex(a);
  var g:int = (a + 176)[0]:int;
  d = (a + 172)[0]:int;
  if (a[45] != 37) goto B_r;
  a[0] = f;
  a[3] = c;
  goto B_q;
  label B_r:
  var h:int = a + 20;
  pm_state_stack_push(h, 0);
  e = parse_statements(a, 11);
  pm_state_stack_pop(h);
  a[3] = c;
  a[0] = f;
  if (a[45] != 37) goto B_p;
  label B_q:
  parser_lex(a);
  f = a[43];
  goto B_o;
  label B_p:
  pm_diagnostic_list_append(a + 244, f = a[44], f, 66);
  a[42] = 2;
  a[43] = f;
  label B_o:
  a = a[44];
  c = calloc(1, 32);
  if (eqz(c)) goto B_g;
  c[7]:int = a;
  c[6]:int = f;
  c[5]:int = e;
  c[4]:int = g;
  c[3]:int = d;
  c[2]:int = a;
  c[1]:int = d;
  c[0]:short = 48;
  goto B_b;
  label B_i:
  a[0] = 1;
  parser_lex(a);
  c = a + 168;
  f = (a + 176)[0]:int;
  e = (a + 172)[0]:int;
  d = a[45];
  br_table[B_z, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_w, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_y, B_t, B_t, B_t, B_t, B_t, B_t, B_v, B_t, B_x, ..B_u](
    d + -10);
  label B_z:
  parser_lex(a);
  d = pm_back_reference_read_node_create(a, c);
  goto B_c;
  label B_y:
  parser_lex(a);
  d = calloc(1, 16);
  if (eqz(d)) goto B_f;
  d.d =
    pm_constant_pool_insert_shared(a + 292, c = a[43], (a = a[44]) - c);
  d.c = a;
  d.b = c;
  d.a = 62;
  goto B_c;
  label B_x:
  parser_lex(a);
  d = pm_instance_variable_read_node_create(a, c);
  goto B_c;
  label B_w:
  parser_lex(a);
  d = pm_class_variable_read_node_create(a, c);
  goto B_c;
  label B_v:
  parser_lex(a);
  goto B_s;
  label B_u:
  if (d == 122) goto B_d;
  label B_t:
  pm_diagnostic_list_append(a + 244, f, f, 67);
  a[42] = 2;
  a[43] = f;
  label B_s:
  c = (a + 188)[0]:int;
  a = (a + 184)[0]:int;
  d = calloc(1, 12);
  if (eqz(d)) goto B_e;
  d.c = c;
  d.b = a;
  d.a = 101;
  goto B_c;
  label B_h:
  parser_lex(a);
  pm_diagnostic_list_append(a + 244, (a + 172)[0]:int, (a + 176)[0]:int, 35);
  c = 0;
  goto B_b;
  label B_g:
  b[0] = 32;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_f:
  b[12] = 16;
  fprintf(rodata[15455]:int, 31876, b + 48);
  abort();
  unreachable;
  label B_e:
  b[4] = 12;
  fprintf(rodata[15455]:int, 31876, b + 16);
  abort();
  unreachable;
  label B_d:
  parser_lex(a);
  d = pm_numbered_reference_read_node_create(a, c);
  label B_c:
  c = calloc(1, 24);
  if (eqz(c)) goto B_a;
  c[5]:int = d;
  c[4]:int = f;
  c[3]:int = e;
  c[1]:int = e;
  c[0]:short = 49;
  c[2]:int = (d + 8)[0]:int;
  label B_b:
  stack_pointer = b + 96;
  return c;
  label B_a:
  b[8] = 24;
  fprintf(rodata[15455]:int, 31876, b + 32);
  abort();
  return unreachable;
}

function pm_regular_expression_node_create_unescaped(a:int_ptr, b:long_ptr@4, c:int, d:long_ptr@4):int {
  var j:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  var f:int = calloc(1, 48);
  if (eqz(f)) goto B_a;
  var g:int = c[2]:int;
  var h:int = c[1]:int;
  var i:int = 0;
  if (c[0]:int != 141) goto B_b;
  c = h + 1;
  if (c >= g) goto B_b;
  j = (h ^ -1) + g;
  i = 0;
  loop L_c {
    br_table[B_j, B_f, B_f, B_f, B_e, B_f, B_f, B_f, B_m, B_i, B_k, B_f, B_f, B_f, B_h, B_f, B_g, B_f, B_f, B_l, ..B_f](
      c[0]:ubyte + -101)
    label B_m:
    i = i | 4;
    goto B_d;
    label B_l:
    i = i | 2;
    goto B_d;
    label B_k:
    i = i | 8;
    goto B_d;
    label B_j:
    i = (i & -241) | 16;
    goto B_d;
    label B_i:
    i = (i & -241) | 32;
    goto B_d;
    label B_h:
    i = (i & -241) | 64;
    goto B_d;
    label B_g:
    i = (i & -241) | 128;
    goto B_d;
    label B_f:
    assert_fail(26957, 13402, 972, 9902);
    unreachable;
    label B_e:
    i = i | 1;
    label B_d:
    c = c + 1;
    j = j + -1;
    if (j) continue L_c;
  }
  label B_b:
  f[8]:int = g;
  f[7]:int = h;
  f[0]:short = 123;
  f[5]:long@4 = b[1];
  f[4]:int = (c = a[2]);
  f[3]:int = (j = a[1]);
  f[1]:short = i | 16384;
  f[9]:long@4 = d[0];
  (f + 44)[0]:int = (d + 8)[0]:int;
  f[2]:int = select_if(c, g, c > g);
  f[1]:int = select_if(j, h, j < h);
  stack_pointer = e + 16;
  return f;
  label B_a:
  e[0] = 48;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_interpolated_regular_expression_node_create(a:int_ptr):int {
  var c:int;
  var d:int;
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  c = calloc(1, 40);
  if (c) goto B_a;
  b[0] = 40;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_a:
  c[0]:short = 84;
  c[9]:int = (d = a[2]);
  c[8]:int = (a = a[1]);
  c[4]:int = d;
  c[3]:int = a;
  c[1]:int = a;
  stack_pointer = b + 16;
  return c;
}

function pm_interpolated_regular_expression_node_append(a:int_ptr, b:int_ptr) {
  var c:int;
  if (a[1] <= (c = b[1])) goto B_a;
  a[1] = c;
  label B_a:
  if ((a + 8)[0]:int >= (c = (b + 8)[0]:int)) goto B_b;
  a[2] = c;
  label B_b:
  pm_node_list_append(a + 20, b);
}

function pm_interpolated_regular_expression_node_closing_set(a:int, b:int) {
  var c:int;
  a[8]:long@4 = b[1]:long@4;
  (a + 8)[0]:int = (c = b[2]:int);
  var d:int = 0;
  if (b[0]:int != 141) goto B_a;
  var e:int = b[1]:int;
  b = e + 1;
  if (b >= c) goto B_a;
  c = (e ^ -1) + c;
  d = 0;
  loop L_b {
    br_table[B_i, B_e, B_e, B_e, B_d, B_e, B_e, B_e, B_l, B_h, B_j, B_e, B_e, B_e, B_g, B_e, B_f, B_e, B_e, B_k, ..B_e](
      b[0]:ubyte + -101)
    label B_l:
    d = d | 4;
    goto B_c;
    label B_k:
    d = d | 2;
    goto B_c;
    label B_j:
    d = d | 8;
    goto B_c;
    label B_i:
    d = (d & -241) | 16;
    goto B_c;
    label B_h:
    d = (d & -241) | 32;
    goto B_c;
    label B_g:
    d = (d & -241) | 64;
    goto B_c;
    label B_f:
    d = (d & -241) | 128;
    goto B_c;
    label B_e:
    assert_fail(26957, 13402, 972, 9902);
    unreachable;
    label B_d:
    d = d | 1;
    label B_c:
    b = b + 1;
    c = c + -1;
    if (c) continue L_b;
  }
  label B_a:
  a[1]:short = a[1]:ushort | d;
}

function pm_string_node_create_current_string(a:int, b:{ a:int, b:int, c:int }, c:{ a:int, b:int, c:int }, d:{ a:int, b:int, c:int }):int {
  var g:int;
  var i:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  var f:int = calloc(1, 48);
  if (eqz(f)) goto B_a;
  var h:int_ptr = select_if(c, d, g = d.a == 3);
  var j:int_ptr = select_if(c, b, i = b.a == 3);
  var k:int = 0;
  var l:int = 0;
  var m:int = 0;
  if (i) goto B_b;
  m = b.c;
  l = b.b;
  label B_b:
  b = h[2];
  h = j[1];
  i = a[362]:ubyte;
  j = c.c;
  var n:int = c.b;
  c = 0;
  if (g) goto B_c;
  c = d.c;
  k = d.b;
  label B_c:
  f[8]:int = c;
  f[7]:int = k;
  f[6]:int = j;
  f[5]:int = n;
  f[4]:int = m;
  f[3]:int = l;
  f[2]:int = b;
  f[1]:int = h;
  f[0]:short = 138;
  var o:long = a[82]:long@4;
  a[82]:long@4 = 0L;
  f[9]:long@4 = o;
  f[1]:short = select_if(16388, 0, i & 255);
  c = a + 336;
  a = c.a;
  c.a = 0;
  (f + 44)[0]:int = a;
  stack_pointer = e + 16;
  return f;
  label B_a:
  e[0] = 48;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_array_node_elements_append(a:int, b:{ a:ushort, b:int }) {
  var c:int = a + 12;
  if (a[3]:int) goto B_a;
  if (a[6]:int) goto B_a;
  a[1]:int = b.b;
  label B_a:
  pm_node_list_append(c, b);
  (a + 8)[0]:int = (b + 8)[0]:int;
  c = b.a;
  if (c == 6) goto B_c;
  if (c == 65) goto B_c;
  if (c == 120) goto B_c;
  if ((b + 3)[0]:ubyte & 64) goto B_b;
  label B_c:
  a[1]:short = a[1]:ushort & 49151;
  label B_b:
  if (c != 136) goto B_d;
  a[1]:short = a[1]:ushort | 1;
  label B_d:
}

function pm_symbol_node_create_current_string(a:long_ptr@4, b:{ a:int, b:int, c:int }, c:{ a:int, b:int, c:int }, d:{ a:int, b:int, c:int }):int {
  var g:int;
  var i:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  var f:int = calloc(1, 48);
  if (eqz(f)) goto B_a;
  var h:int_ptr = select_if(c, d, g = d.a == 3);
  var j:int_ptr = select_if(c, b, i = b.a == 3);
  var k:int = 0;
  var l:int = 0;
  var m:int = 0;
  if (i) goto B_b;
  m = b.c;
  l = b.b;
  label B_b:
  b = h[2];
  h = j[1];
  i = c.c;
  j = c.b;
  c = 0;
  if (g) goto B_c;
  c = d.c;
  k = d.b;
  label B_c:
  f[8]:int = c;
  f[7]:int = k;
  f[6]:int = i;
  f[5]:int = j;
  f[4]:int = m;
  f[3]:int = l;
  f[2]:int = b;
  f[1]:int = h;
  f[0]:int = 1073741964;
  var n:long = a[82];
  a[82] = 0L;
  f[9]:long@4 = n;
  c = a + 336;
  d = c.a;
  c.a = 0;
  (f + 44)[0]:int = d;
  stack_pointer = e + 16;
  return f;
  label B_a:
  e[0] = 48;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_assert_value_expression(a:int, b:int_ptr) {
  b = pm_check_value_expression(b);
  if (eqz(b)) goto B_a;
  pm_diagnostic_list_append(a + 244, b[1], (b + 8)[0]:int, 208);
  label B_a:
}

function expect3(a:int_ptr, b:int) {
  var d:int;
  var c:int;
  c = a[45];
  d = c == 72;
  if (d) goto B_c;
  if (c == 142) goto B_c;
  if (c != 121) goto B_b;
  label B_c:
  parser_lex(a);
  if (d) goto B_a;
  if (c == 121) goto B_a;
  if (c == 142) goto B_a;
  label B_b:
  pm_diagnostic_list_append(a + 244, c = (a + 176)[0]:int, c, b);
  a[42] = 2;
  (a + 172)[0]:int = c;
  label B_a:
}

function pm_while_node_create(a:int_ptr, b:{ a:int, b:int, c:int }, c:int, d:int):int {
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  var f:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int } = 
    calloc(1, 36);
  if (eqz(f)) goto B_a;
  var g:int = a[2];
  var h:int = b.c;
  a = a[1];
  var i:int = 0;
  var j:int = 0;
  if (b.a == 3) goto B_b;
  i = b.b;
  j = h;
  label B_b:
  f.i = d;
  f.h = c;
  f.g = j;
  f.f = i;
  f.e = g;
  f.d = a;
  f.c = h;
  f.b = a;
  f.a = 146;
  stack_pointer = e + 16;
  return f;
  label B_a:
  e[0] = 36;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_until_node_create(a:int_ptr, b:{ a:int, b:int, c:int }, c:int, d:int):int {
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  var f:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int } = 
    calloc(1, 36);
  if (eqz(f)) goto B_a;
  var g:int = a[2];
  var h:int = b.c;
  a = a[1];
  var i:int = 0;
  var j:int = 0;
  if (b.a == 3) goto B_b;
  i = b.b;
  j = h;
  label B_b:
  f.i = d;
  f.h = c;
  f.g = j;
  f.f = i;
  f.e = g;
  f.d = a;
  f.c = h;
  f.b = a;
  f.a = 144;
  stack_pointer = e + 16;
  return f;
  label B_a:
  e[0] = 36;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_true_node_create(a:int):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a[0]:int != 96) goto B_b;
  var c:int = calloc(1, 12);
  if (eqz(c)) goto B_a;
  c[0]:int = 1073741965;
  c[1]:long@4 = a[1]:long@4;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(18228, 13402, 5636, 10513);
  unreachable;
  label B_a:
  b[0] = 12;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_self_node_create(a:int):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a[0]:int != 93) goto B_b;
  var c:int = calloc(1, 12);
  if (eqz(c)) goto B_a;
  c[0]:short = 131;
  c[1]:long@4 = a[1]:long@4;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(18116, 13402, 5223, 10472);
  unreachable;
  label B_a:
  b[0] = 12;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_retry_node_create(a:int):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a[0]:int != 91) goto B_b;
  var c:int = calloc(1, 12);
  if (eqz(c)) goto B_a;
  c[0]:short = 129;
  c[1]:long@4 = a[1]:long@4;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(15181, 13402, 5189, 10027);
  unreachable;
  label B_a:
  b[0] = 12;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_redo_node_create(a:int):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a[0]:int != 88) goto B_b;
  var c:int = calloc(1, 12);
  if (eqz(c)) goto B_a;
  c[0]:short = 122;
  c[1]:long@4 = a[1]:long@4;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(16706, 13402, 5013, 10361);
  unreachable;
  label B_a:
  b[0] = 12;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_nil_node_create(a:int):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a[0]:int != 85) goto B_b;
  var c:int = calloc(1, 12);
  if (eqz(c)) goto B_a;
  c[0]:int = 1073741930;
  c[1]:long@4 = a[1]:long@4;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(17106, 13402, 4597, 10381);
  unreachable;
  label B_a:
  b[0] = 12;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_constant_read_node_create(a:int, b:{ a:int, b:int, c:int }):int {
  var d:{ a:short, b:int, c:int, d:int }
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = b.a;
  if (d == 2) goto B_c;
  if (d != 29) goto B_b;
  label B_c:
  d = calloc(1, 16);
  if (eqz(d)) goto B_a;
  d.d = pm_constant_pool_insert_shared(a + 292, a = b.b, (b = b.c) - a);
  d.c = b;
  d.b = a;
  d.a = 42;
  stack_pointer = c + 16;
  return d;
  label B_b:
  assert_fail(17854, 13402, 2701, 11332);
  unreachable;
  label B_a:
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_constant_path_node_create(a:int, b:int, c:long_ptr@4, d:int):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = pm_check_value_expression(b);
  if (eqz(f)) goto B_a;
  pm_diagnostic_list_append(a + 244, f[1]:int, (f + 8)[0]:int, 208);
  label B_a:
  f = calloc(1, 28);
  if (f) goto B_b;
  e[0] = 28;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_b:
  f[4]:int = d;
  f[3]:int = b;
  f[0]:short = 37;
  f[5]:long@4 = c[1];
  f[2]:int = (d + 8)[0]:int;
  f[1]:int = select_if(b, c, b)[1]:int;
  stack_pointer = e + 16;
  return f;
}

function pm_module_node_create(a:int, b:{ a:int, b:int, c:int }, c:int_ptr, d:int, e:int_ptr, f:int, g:int_ptr):int {
  var n:int;
  var m:int;
  var l:int;
  var h:int_ptr = stack_pointer - 16;
  stack_pointer = h;
  var i:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int, k:int, l:int, m:int } = 
    calloc(1, 52);
  if (eqz(i)) goto B_a;
  var j:int = g[2];
  var k:int = c[1];
  if (b) goto B_c;
  l = 0;
  m = 0;
  n = 0;
  goto B_b;
  label B_c:
  n = b.c;
  m = b.b;
  l = b.a;
  label B_b:
  b = c[2];
  g = g[1];
  i.m = pm_constant_pool_insert_shared(a + 292, c = e[1], e[2] - c);
  i.l = j;
  i.k = g;
  i.j = f;
  i.i = d;
  i.h = b;
  i.g = k;
  i.f = n;
  i.e = m;
  i.d = l;
  i.c = j;
  i.b = k;
  i.a = 102;
  stack_pointer = h + 16;
  return i;
  label B_a:
  h[0] = 52;
  fprintf(rodata[15455]:int, 31876, h);
  abort();
  return unreachable;
}

function parse_conditional(a:int_ptr, b:int):int {
  var i:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var h:int;
  var k:int;
  var j:int;
  var m:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int, k:int }
  var q:int;
  var n:int;
  var p:int_ptr;
  var c:int_ptr = stack_pointer - 64;
  stack_pointer = c;
  var d:int_ptr = a + 176;
  var e:int = d[0];
  var f:int = (a + 172)[0]:int;
  var g:int = a[40];
  h = malloc(8);
  if (eqz(h)) goto B_a;
  h[0]:int = 23;
  i = a[65];
  a[65] = h;
  h[1]:int = i;
  label B_a:
  i = parse_expression(a, 4, 1, select_if(47, 51, b == 16));
  h = pm_check_value_expression(i);
  if (eqz(h)) goto B_b;
  pm_diagnostic_list_append(a + 244, h[1]:int, (h + 8)[0]:int, 208);
  label B_b:
  h = a[45];
  if (h == 95) goto B_e;
  if (h == 142) goto B_f;
  if (h != 121) goto B_d;
  label B_f:
  parser_lex(a);
  j = 3;
  k = g;
  if (a[45] != 95) goto B_c;
  label B_e:
  parser_lex(a);
  k = a[44];
  g = a[43];
  j = a[42];
  goto B_c;
  label B_d:
  pm_diagnostic_list_append(a + 244, (a + 184)[0]:int, (a + 188)[0]:int, 48);
  j = 3;
  k = g;
  label B_c:
  h = a[65];
  var l:int = h[1]:int;
  free(h);
  a[65] = l;
  h = 0;
  if (a[45] + -73 < 3) goto B_g;
  l = a + 20;
  pm_state_stack_push(l, 0);
  h = parse_statements(a, b);
  pm_state_stack_pop(l);
  l = a[45];
  if (l == 142) goto B_h;
  if (l != 121) goto B_g;
  label B_h:
  parser_lex(a);
  label B_g:
  br_table[B_u, B_s, B_s, B_s, B_s, B_s, B_s, B_s, B_s, B_s, B_s, B_s, B_s, B_s, B_t, ..B_s](
    b + -16)
  label B_u:
  pm_conditional_predicate(i);
  m = calloc(1, 48);
  if (eqz(m)) goto B_p;
  if (eqz(h)) goto B_w;
  l = h;
  if (h[3]:int) goto B_v;
  label B_w:
  l = i;
  label B_v:
  l = (l + 8)[0]:int;
  m.i = h;
  m.h = select_if(0, k, h = j == 3);
  m.g = select_if(0, g, h);
  m.f = i;
  m.e = e;
  m.d = f;
  m.c = l;
  m.b = f;
  m.a = -2147483581;
  i = a[45];
  if (i == 74) goto B_r;
  h = m;
  goto B_q;
  label B_t:
  pm_conditional_predicate(i);
  m = calloc(1, 48);
  if (eqz(m)) goto B_o;
  m.i = h;
  m.f = i;
  m.e = e;
  m.d = f;
  m.b = f;
  m.a = -2147483505;
  m.h = select_if(0, k, f = j == 3);
  m.g = select_if(0, g, f);
  m.c = (select_if(h, i, h) + 8)[0]:int;
  i = a[45];
  h = m;
  goto B_q;
  label B_s:
  assert_fail(26957, 13402, 12429, 8741);
  unreachable;
  label B_r:
  n = a + 20;
  var o:int = a + 244;
  p = m;
  loop L_x {
    parser_lex(a);
    q = a[44];
    l = a[43];
    h = malloc(8);
    if (eqz(h)) goto B_y;
    h[0]:int = 23;
    i = a[65];
    a[65] = h;
    h[1]:int = i;
    label B_y:
    f = parse_expression(a, 4, 1, 51);
    h = pm_check_value_expression(f);
    if (eqz(h)) goto B_z;
    pm_diagnostic_list_append(o, h[1]:int, (h + 8)[0]:int, 208);
    label B_z:
    h = a[45];
    if (h == 95) goto B_ca;
    if (h == 142) goto B_da;
    if (h != 121) goto B_ba;
    label B_da:
    parser_lex(a);
    if (a[45] != 95) goto B_aa;
    label B_ca:
    parser_lex(a);
    k = a[44];
    g = a[43];
    j = a[42];
    goto B_aa;
    label B_ba:
    pm_diagnostic_list_append(o, a[46], a[47], 48);
    label B_aa:
    h = a[65];
    i = h[1]:int;
    free(h);
    a[65] = i;
    pm_state_stack_push(n, 0);
    i = parse_statements(a, 10);
    pm_state_stack_pop(n);
    h = a[45];
    if (h == 142) goto B_fa;
    if (h != 121) goto B_ea;
    label B_fa:
    parser_lex(a);
    label B_ea:
    pm_conditional_predicate(f);
    h = calloc(1, 48);
    if (eqz(h)) goto B_n;
    if (eqz(i)) goto B_ha;
    e = i;
    if (i.d) goto B_ga;
    label B_ha:
    e = f;
    label B_ga:
    e = (e + 8)[0]:int;
    h[10]:long@4 = 0L;
    h[8]:int = i;
    h[7]:int = select_if(0, k, i = j == 3);
    h[6]:int = select_if(0, g, i);
    h[5]:int = f;
    h[4]:int = q;
    h[3]:int = l;
    h[2]:int = e;
    h[1]:int = l;
    h[0]:int = -2147483581;
    p[9] = h;
    p = h;
    i = a[45];
    if (i == 74) continue L_x;
  }
  label B_q:
  br_table[B_na, B_la, B_ma, ..B_la](i + -73)
  label B_na:
  parser_lex(a);
  p = a[44];
  l = a[43];
  i = a + 20;
  pm_state_stack_push(i, 0);
  f = parse_statements(a, 9);
  pm_state_stack_pop(i);
  i = a[45];
  if (i == 142) goto B_pa;
  if (i != 121) goto B_oa;
  label B_pa:
  parser_lex(a);
  i = a[45];
  label B_oa:
  if (i != 75) goto B_ra;
  parser_lex(a);
  goto B_qa;
  label B_ra:
  pm_diagnostic_list_append(a + 244, i = a[44], i, 50);
  a[42] = 2;
  a[43] = i;
  label B_qa:
  i = calloc(1, 32);
  if (eqz(i)) goto B_m;
  g = select_if(select_if(f + 8, d, q = a[42] == 3), d, f)[0]:int;
  e = 0;
  n = 0;
  if (q) goto B_sa;
  n = a[44];
  e = a[43];
  label B_sa:
  i.h = n;
  i.g = e;
  i.f = f;
  i.e = p;
  i.d = l;
  i.c = g;
  i.b = l;
  i.a = 47;
  br_table[B_ja, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_ta, B_k, ..B_ta](
    b + -16)
  label B_ta:
  assert_fail(26957, 13402, 12474, 8741);
  unreachable;
  label B_ma:
  parser_lex(a);
  goto B_ka;
  label B_la:
  pm_diagnostic_list_append(a + 244, h = a[44], h, 49);
  a[42] = 2;
  a[43] = h;
  label B_ka:
  br_table[B_ia, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_j, ..B_l](
    b + -16);
  label B_ja:
  h[9]:int = i;
  label B_ia:
  h = m;
  loop L_ua {
    i = h[0]:ushort;
    if (i == 67) goto B_va;
    if (i != 47) goto B_i;
    (h + 8)[0]:int = (i = a[44]);
    h[6]:int = a[43];
    (h + 28)[0]:int = i;
    goto B_i;
    label B_va:
    (h + 8)[0]:int = (i = a[44]);
    h[10]:int = a[43];
    (h + 44)[0]:int = i;
    h = h[9]:int;
    if (h) continue L_ua;
    goto B_i;
  }
  label B_p:
  c[0] = 48;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_o:
  c[12] = 48;
  fprintf(rodata[15455]:int, 31876, c + 48);
  abort();
  unreachable;
  label B_n:
  c[4] = 48;
  fprintf(rodata[15455]:int, 31876, c + 16);
  abort();
  unreachable;
  label B_m:
  c[8] = 32;
  fprintf(rodata[15455]:int, 31876, c + 32);
  abort();
  unreachable;
  label B_l:
  assert_fail(26957, 13402, 12511, 8741);
  unreachable;
  label B_k:
  m.j = i;
  label B_j:
  (m + 44)[0]:int = (h = a[44]);
  m.k = a[43];
  (m + 8)[0]:int = h;
  label B_i:
  stack_pointer = c + 64;
  return m;
}

function pm_call_node_not_create(a:int, b:ushort_ptr, c:{ a:int, b:int, c:int }, d:int):int {
  var f:int;
  var g:int;
  var h:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = pm_check_value_expression(b);
  if (eqz(f)) goto B_a;
  pm_diagnostic_list_append(a + 244, f[1]:int, (f + 8)[0]:int, 208);
  label B_a:
  if (b) goto B_c;
  g = 0;
  goto B_b;
  label B_c:
  g = (b[0] == 131) << 3;
  label B_b:
  f = calloc(1, 60);
  if (eqz(f)) goto B_d;
  f[1]:short = g;
  f[0]:short = 19;
  f[3]:int = b;
  f[1]:int = (h = c.b);
  f[2]:int = select_if(d + 12, b + 4, d[3]:int)[1]:int;
  b = 0;
  g = 0;
  if (c.a == 3) goto B_e;
  g = c.c;
  b = h;
  label B_e:
  f[7]:int = b;
  (f + 32)[0]:int = g;
  f[9]:long@4 = d[0]:long@4;
  f[11]:int = d[2]:int;
  f[12]:long@4 = d[3]:long@4;
  f[6]:int = pm_constant_pool_insert_constant(a + 292, 27032, 1);
  stack_pointer = e + 16;
  return f;
  label B_d:
  e[0] = 60;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_undef_node_create(a:{ a:int, b:int, c:int }):int {
  var d:int;
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a.a != 97) goto B_b;
  var c:int = calloc(1, 32);
  if (eqz(c)) goto B_a;
  c[0]:short = 142;
  c[7]:int = (d = a.c);
  c[6]:int = (a = a.b);
  c[2]:int = d;
  c[1]:int = a;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(18190, 13402, 5653, 10492);
  unreachable;
  label B_a:
  b[0] = 32;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function parse_undef_argument(a:int_ptr):int {
  var c:int;
  var d:int;
  var b:int = stack_pointer - 48;
  stack_pointer = b;
  br_table[B_f, B_c, B_c, B_c, B_c, B_f, B_c, B_f, B_f, B_f, B_c, B_c, B_c, B_c, B_f, B_f, B_c, B_f, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_e, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_f, B_f, B_c, B_f, B_c, B_c, B_c, B_c, B_c, B_f, B_f, B_f, B_c, B_c, B_c, B_e, B_c, B_c, B_c, B_c, B_c, B_c, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_c, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_c, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_e, B_c, B_e, B_c, B_e, B_e, B_c, B_e, B_e, B_e, B_e, B_c, B_c, B_c, B_f, B_f, B_f, B_f, B_c, B_e, B_f, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_f, B_c, B_c, B_c, B_c, B_c, B_c, B_f, B_c, B_c, B_c, B_f, B_c, B_c, B_c, B_c, B_c, B_f, B_c, B_f, B_c, B_f, B_c, B_c, B_c, B_c, B_d, B_f, B_f, B_c, B_c, B_c, B_f, B_f, B_f, B_f, B_f, ..B_c](
    a[45] + -4)
  label B_f:
  b[4]:int = 3;
  b[6]:int = (c = a[40]);
  b[5]:int = c;
  c = parse_operator_symbol(a, b + 16, 0);
  goto B_b;
  label B_e:
  parser_lex(a);
  c = calloc(1, 48);
  if (eqz(c)) goto B_a;
  c[0]:int = 1073741964;
  c[6]:int = (d = (a + 176)[0]:int);
  c[5]:int = (a = (a + 172)[0]:int);
  c[2]:int = d;
  c[1]:int = a;
  pm_string_shared_init(c + 36, a, d);
  goto B_b;
  label B_d:
  (b + 16 + 8)[0]:long = ((c = a[6]) + 8)[0]:long@4;
  (b + 16 + 16)[0]:long = (c + 16)[0]:long@4;
  (b + 16 + 24)[0]:long = (c + 24)[0]:long@4;
  b[2]:long = c[0]:long@4;
  parser_lex(a);
  c = parse_symbol(a, b + 16, 0);
  goto B_b;
  label B_c:
  pm_diagnostic_list_append(a + 244,
                            (c = a + 184)[0]:int,
                            (a = a + 188)[0],
                            206);
  c = pm_missing_node_create(c[0]:int, a[0]);
  label B_b:
  stack_pointer = b + 48;
  return c;
  label B_a:
  b[0]:int = 48;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function parse_targets(a:int, b:int):int {
  var h:int;
  var i:int;
  var c:int_ptr = stack_pointer - 48;
  stack_pointer = c;
  var d:int = b[0]:ushort;
  var e:short_ptr = calloc(1, 56);
  if (eqz(e)) goto B_c;
  e[0] = 103;
  pm_multi_target_node_targets_append(a, e, parse_target(a, b));
  if (a[45]:int != 27) goto B_d;
  var f:int = a + 244;
  d = (d & 65535) == 136;
  loop L_f {
    parser_lex(a);
    b = a[45]:int;
    if (b != 161) goto B_h;
    parser_lex(a);
    if (eqz(d & 1)) goto B_i;
    pm_diagnostic_list_append(f, a[43]:int, a[44]:int, 142);
    label B_i:
    var g:int = a[44]:int;
    d = a[43]:int;
    if (eqz(token_begins_expression_p(a[45]:int))) goto B_m;
    h = parse_target(a, parse_expression(a, 48, 0, 92));
    b = calloc(1, 24);
    if (eqz(b)) goto B_l;
    if (h) goto B_k;
    h = 0;
    i = g;
    goto B_j;
    label B_m:
    h = 0;
    i = g;
    b = calloc(1, 24);
    if (b) goto B_j;
    label B_l:
    c[4] = 24;
    fprintf(rodata[15455]:int, 31876, c + 16);
    abort();
    unreachable;
    label B_k:
    i = (h + 8)[0]:int;
    label B_j:
    b[5]:int = h;
    b[4]:int = g;
    b[3]:int = d;
    b[2]:int = i;
    b[1]:int = d;
    b[0]:short = 136;
    pm_multi_target_node_targets_append(a, e, b);
    d = 1;
    goto B_g;
    label B_h:
    if (eqz(token_begins_expression_p(b))) goto B_e;
    pm_multi_target_node_targets_append(
      a,
      e,
      parse_target(a, parse_expression(a, 48, 0, 84)));
    label B_g:
    if (a[45]:int == 27) continue L_f;
    goto B_d;
  }
  label B_e:
  if (a[45]:int == 1) goto B_d;
  if (a[42]:int != 27) goto B_b;
  b = calloc(1, 12);
  if (eqz(b)) goto B_a;
  b[0]:short = 70;
  b[1]:long@4 = a[43]:long@4;
  pm_multi_target_node_targets_append(a, e, b);
  label B_d:
  stack_pointer = c + 48;
  return e;
  label B_c:
  c[0] = 56;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_b:
  assert_fail(22945, 13402, 3557, 10068);
  unreachable;
  label B_a:
  c[8] = 12;
  fprintf(rodata[15455]:int, 31876, c + 32);
  abort();
  return unreachable;
}

function parse_target(a:int, b:int):int {
  var d:int;
  var e:ubyte_ptr;
  var c:int_ptr = stack_pointer - 48;
  stack_pointer = c;
  d = b[0]:ushort;
  br_table[B_j, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_f, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_m, B_d, B_d, B_d, B_d, B_d, B_d, B_l, B_d, B_d, B_d, B_d, B_k, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_i, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_g, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_a, B_d, B_a, B_d, B_d, B_d, B_d, B_d, B_j, ..B_e](
    d + -10);
  label B_m:
  b[0]:short = 31;
  goto B_a;
  label B_l:
  b[0]:short = 40;
  goto B_a;
  label B_k:
  b[0]:short = 43;
  goto B_a;
  label B_j:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 211);
  goto B_a;
  label B_i:
  b[0]:short = 63;
  goto B_a;
  label B_h:
  if ((b + 8)[0]:int - (d = b[1]:int) != 2) goto B_n;
  if (d[0]:ubyte != 95) goto B_n;
  d = d[1]:ubyte;
  if (d == 48) goto B_n;
  if (eqz(pm_is_decimal_digit(d))) goto B_n;
  d = b[2]:int;
  c[0] = (e = b[1]:int);
  pm_diagnostic_list_append_format(a + 244, e, d, 158, c);
  goto B_a;
  label B_n:
  b[0]:short = 95;
  goto B_a;
  label B_g:
  b[0]:short = 80;
  goto B_a;
  label B_f:
  e = b[7]:int;
  if (eqz(e)) goto B_o;
  var f:int = (b + 32)[0]:int;
  d = (f + -1)[0]:ubyte;
  if (d == 33) goto B_o;
  if (d == 63) goto B_o;
  if (b[9]:int) goto B_o;
  if (b[11]:int) goto B_o;
  if (b[14]:int) goto B_o;
  if (b[3]:int) goto B_p;
  pm_parser_local_add_location(a, e, f);
  pm_node_destroy(a, b);
  c[10] = f;
  c[9] = e;
  c[8] = 55;
  b = pm_local_variable_read_node_create(a, c + 32, 0);
  b[0]:short = 95;
  pm_refute_numbered_parameter(a, e, f);
  goto B_a;
  label B_p:
  if (e[0] == 95) goto B_q;
  if (eqz(call_indirect(e, f - e, (a[66]:int)[2]:int))) goto B_o;
  label B_q:
  parse_write_name(a, b + 24);
  b = pm_call_target_node_create(b);
  goto B_a;
  label B_o:
  if (b[4]:int) goto B_d;
  d = b[7]:int;
  if (eqz(d)) goto B_d;
  if (d[0]:ubyte != 91) goto B_d;
  if (((b + 32)[0]:int + -1)[0]:ubyte != 93) goto B_d;
  d = b[14]:int;
  if (eqz(d)) goto B_r;
  if (d[0]:ushort != 12) goto B_d;
  label B_r:
  a = calloc(1, 40);
  if (eqz(a)) goto B_c;
  a[9]:int = d;
  a[0]:short = 75;
  a[7]:long@4 = b[12]:long@4;
  a[6]:int = b[11]:int;
  a[4]:long@4 = b[9]:long@4;
  a[3]:int = b[3]:int;
  a[1]:long@4 = b[1]:long@4;
  a[1]:short = b[1]:ushort | 4;
  free(b);
  b = a;
  goto B_a;
  label B_e:
  if (d == 136) goto B_b;
  label B_d:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 212);
  goto B_a;
  label B_c:
  c[4] = 40;
  fprintf(rodata[15455]:int, 31876, c + 16);
  abort();
  unreachable;
  label B_b:
  d = b[5]:int;
  if (eqz(d)) goto B_a;
  b[5]:int = parse_target(a, d);
  label B_a:
  stack_pointer = c + 48;
  return b;
}

function pm_for_node_create(a:int, b:int, c:int, d:int_ptr, e:int_ptr, f:{ a:int, b:int, c:int }, g:int_ptr):int {
  var h:int_ptr = stack_pointer - 16;
  stack_pointer = h;
  var i:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int, h:int, i:int, j:int, k:int, l:int, m:int, n:int } = 
    calloc(1, 56);
  if (eqz(i)) goto B_a;
  var j:int = e[2];
  var k:int = e[1];
  var l:int = d[2];
  e = g[2];
  d = d[1];
  var m:int = 0;
  var n:int = 0;
  if (f.a == 3) goto B_b;
  n = f.c;
  m = f.b;
  label B_b:
  i.n = e;
  i.l = n;
  i.k = m;
  i.j = j;
  i.i = k;
  i.h = l;
  i.g = d;
  i.f = c;
  i.e = b;
  i.d = a;
  i.c = e;
  i.b = d;
  i.a = 55;
  i.m = g[1];
  stack_pointer = h + 16;
  return i;
  label B_a:
  h[0] = 56;
  fprintf(rodata[15455]:int, 31876, h);
  abort();
  return unreachable;
}

function pm_false_node_create(a:int):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a[0]:int != 78) goto B_b;
  var c:int = calloc(1, 12);
  if (eqz(c)) goto B_a;
  c[0]:int = 1073741875;
  c[1]:long@4 = a[1]:long@4;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(18293, 13402, 2916, 11156);
  unreachable;
  label B_a:
  b[0] = 12;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_post_execution_node_create(a:int_ptr, b:long_ptr@4, c:int, d:int_ptr):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 40);
  if (f) goto B_a;
  e[0] = 40;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  f[3]:int = c;
  f[0]:short = 117;
  f[9]:int = (c = d[2]);
  f[8]:int = d[1];
  f[6]:long@4 = b[1];
  f[5]:int = a[2];
  f[4]:int = (d = a[1]);
  f[2]:int = c;
  f[1]:int = d;
  stack_pointer = e + 16;
  return f;
}

function pm_defined_node_create(a:{ a:int, b:int, c:int }, b:int, c:{ a:int, b:int, c:int }, d:int):int {
  var g:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  var f:int = calloc(1, 40);
  if (eqz(f)) goto B_a;
  var h:int_ptr = select_if(b, c, g = c.a == 3);
  var i:int = 0;
  var j:int = 0;
  var k:int = 0;
  if (a.a == 3) goto B_b;
  k = a.c;
  j = a.b;
  label B_b:
  h = h[2];
  var l:int = d[0]:int;
  a = 0;
  if (g) goto B_c;
  a = c.c;
  i = c.b;
  label B_c:
  f[7]:int = a;
  f[6]:int = i;
  f[5]:int = b;
  f[4]:int = k;
  f[3]:int = j;
  f[2]:int = h;
  f[1]:int = l;
  f[0]:short = 46;
  f[8]:long@4 = d[0]:long@4;
  stack_pointer = e + 16;
  return f;
  label B_a:
  e[0] = 40;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function parse_variable_call(a:int_ptr):int {
  var d:int;
  var e:int;
  var f:int;
  var g:int;
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  var c:int = 8;
  if (a[45] == 123) goto B_c;
  d = ((a + 176)[0]:int + -1)[0]:ubyte;
  if (d == 33) goto B_c;
  if (d == 63) goto B_c;
  d = parse_variable(a);
  if (d) goto B_b;
  c = 10;
  label B_c:
  d = calloc(1, 60);
  if (eqz(d)) goto B_a;
  d[0]:short = 19;
  d[2]:int = (e = (a + 176)[0]:int);
  d[1]:int = (f = (a + 172)[0]:int);
  (d + 32)[0]:int = select_if(0, e, g = a[42] == 3);
  d[7]:int = select_if(0, f, g);
  a = pm_constant_pool_insert_shared(a + 292, f, e - f);
  d[1]:short = c;
  d[6]:int = a;
  label B_b:
  stack_pointer = b + 16;
  return d;
  label B_a:
  b[0] = 60;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_node_check_it(a:int_ptr, b:int):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (a[88] == 1) goto B_b;
  if ((a[64])[16]:ubyte) goto B_b;
  if (b[0]:ushort != 19) goto B_b;
  if (eqz(b[2]:ubyte & 2)) goto B_b;
  var d:int = a + 292;
  var e:int = pm_constant_pool_id_to_constant(d, b[6]:int);
  if (e[1]:int != 2) goto B_b;
  e = e[0]:int;
  if (e[0]:ubyte != 105) goto B_b;
  if (e[1]:ubyte != 116) goto B_b;
  if (eqz((a[64])[17]:ubyte)) goto B_c;
  pm_diagnostic_list_append(a + 244, (a + 172)[0]:int, (a + 176)[0]:int, 125);
  goto B_b;
  label B_c:
  pm_node_destroy(a, b);
  e = pm_constant_pool_insert_constant(d, 3996, 3);
  if (e != a[87]) goto B_d;
  pm_diagnostic_list_append(a + 244, (a + 172)[0]:int, (a + 176)[0]:int, 153);
  label B_d:
  b = calloc(1, 20);
  if (eqz(b)) goto B_a;
  b[3]:int = e;
  b[0]:short = 94;
  b[1]:long@4 = (a + 172)[0]:long@4;
  label B_b:
  stack_pointer = c + 16;
  return b;
  label B_a:
  c[0] = 20;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function parse_method_definition_name(a:int, b:int) {
  br_table[B_b, B_a, B_a, B_a, B_a, B_b, B_a, B_b, B_b, B_b, B_a, B_a, B_a, B_a, B_b, B_b, B_a, B_b, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_d, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_b, B_b, B_a, B_b, B_a, B_a, B_a, B_a, B_a, B_b, B_b, B_b, B_a, B_a, B_a, B_c, B_a, B_a, B_a, B_a, B_a, B_a, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_a, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_a, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_a, B_d, B_a, B_d, B_d, B_a, B_d, B_d, B_d, B_d, B_a, B_a, B_a, B_b, B_b, B_b, B_b, B_a, B_d, B_b, B_a, B_a, B_a, B_a, B_a, B_a, B_a, B_b, B_a, B_a, B_a, B_a, B_a, B_a, B_b, B_a, B_a, B_a, B_b, B_a, B_a, B_a, B_a, B_a, B_b, B_a, B_b, B_a, B_b, B_a, B_a, B_a, B_a, B_a, B_b, B_b, B_a, B_a, B_a, B_b, B_b, B_b, B_b, B_b, ..B_a](
    b[45]:int + -4)
  label B_d:
  parser_lex(b);
  a[0]:long@4 = b[42]:long@4;
  (a + 8)[0]:int = (b + 176)[0]:int;
  return ;
  label B_c:
  pm_refute_numbered_parameter(b, (b + 184)[0]:int, (b + 188)[0]:int);
  parser_lex(b);
  (a + 8)[0]:int = (b + 176)[0]:int;
  a[0]:long@4 = b[42]:long@4;
  return ;
  label B_b:
  b[0]:int = 8;
  parser_lex(b);
  (a + 8)[0]:int = (b + 176)[0]:int;
  a[0]:long@4 = b[42]:long@4;
  return ;
  label B_a:
  a[0]:int = 2;
  a[1]:long@4 = (b + 184)[0]:long@4;
}

function pm_refute_numbered_parameter(a:int, b:{ a:ubyte, b:ubyte }, c:int) {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (c - b != 2) goto B_a;
  if (b.a != 95) goto B_a;
  var e:int = b.b;
  if (e == 48) goto B_a;
  if (eqz(pm_is_decimal_digit(e))) goto B_a;
  d[0] = b;
  pm_diagnostic_list_append_format(a + 244, b, c, 158, d);
  label B_a:
  stack_pointer = d + 16;
}

function pm_instance_variable_read_node_create(a:int, b:{ a:int, b:int, c:int }):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (b.a != 57) goto B_b;
  var d:{ a:short, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(d)) goto B_a;
  d.d = pm_constant_pool_insert_shared(a + 292, a = b.b, (b = b.c) - a);
  d.c = b;
  d.b = a;
  d.a = 79;
  stack_pointer = c + 16;
  return d;
  label B_b:
  assert_fail(18533, 13402, 3776, 11396);
  unreachable;
  label B_a:
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_class_variable_read_node_create(a:int, b:{ a:int, b:int, c:int }):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (b.a != 24) goto B_b;
  var d:{ a:short, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(d)) goto B_a;
  d.d = pm_constant_pool_insert_shared(a + 292, a = b.b, (b = b.c) - a);
  d.c = b;
  d.b = a;
  d.a = 30;
  stack_pointer = c + 16;
  return d;
  label B_b:
  assert_fail(18478, 13402, 2463, 11361);
  unreachable;
  label B_a:
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_global_variable_read_node_create(a:int, b:int_ptr):int {
  var d:{ a:short, b:int, c:int, d:int }
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = calloc(1, 16);
  if (d) goto B_a;
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  d.d =
    pm_constant_pool_insert_shared(a + 292, a = b[1], (b = b[2]) - a);
  d.c = b;
  d.b = a;
  d.a = 62;
  stack_pointer = c + 16;
  return d;
}

function pm_source_file_node_create(a:long_ptr@4, b:int):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  var d:int = calloc(1, 24);
  if (eqz(d)) goto B_b;
  if (b[0]:int != 107) goto B_a;
  d[0]:int = 1073741958;
  d[1]:long@4 = b[1]:long@4;
  d[3]:long@4 = a[70];
  (d + 20)[0]:int = (a + 288)[0]:int;
  stack_pointer = c + 16;
  return d;
  label B_b:
  c[0] = 24;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  assert_fail(15050, 13402, 5283, 11204);
  return unreachable;
}

function pm_source_line_node_create(a:int):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a[0]:int != 108) goto B_b;
  var c:int = calloc(1, 12);
  if (eqz(c)) goto B_a;
  c[0]:int = 1073741959;
  c[1]:long@4 = a[1]:long@4;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(15009, 13402, 5302, 11177);
  unreachable;
  label B_a:
  b[0] = 12;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_source_encoding_node_create(a:int):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a[0]:int != 106) goto B_b;
  var c:int = calloc(1, 12);
  if (eqz(c)) goto B_a;
  c[0]:int = 1073741957;
  c[1]:long@4 = a[1]:long@4;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(14964, 13402, 5265, 10441);
  unreachable;
  label B_a:
  b[0] = 12;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function expect2(a:int_ptr, b:int, c:int, d:int) {
  var e:int = a[45];
  if (e == b) goto B_b;
  if (e != c) goto B_a;
  label B_b:
  parser_lex(a);
  return ;
  label B_a:
  pm_diagnostic_list_append(a + 244, b = (a + 176)[0]:int, b, d);
  a[42] = 2;
  (a + 172)[0]:int = b;
}

function pm_parentheses_node_create(a:int_ptr, b:int, c:int_ptr):int {
  var e:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  e = calloc(1, 32);
  if (e) goto B_a;
  d[0] = 32;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_a:
  e.d = b;
  e.a = 114;
  e.h = (b = c[2]);
  e.g = c[1];
  e.f = a[2];
  e.e = (c = a[1]);
  e.c = b;
  e.b = c;
  stack_pointer = d + 16;
  return e;
}

function parse_parameters(a:int, b:int, c:int, d:int, e:int):int {
  var h:int;
  var y:int_ptr;
  var w:int;
  var x:{ a:int, b:int }
  var z:int_ptr;
  var fa:int;
  var da:int;
  var aa:int;
  var ga:int;
  var ca:int;
  var ba:int;
  var ea:int;
  var f:int = stack_pointer - 240;
  stack_pointer = f;
  var g:int = calloc(1, 72);
  if (eqz(g)) goto B_a;
  g[0]:short = 113;
  g[1]:long@4 = (h = a + 184)[0]:long@4;
  var i:int = a + 16;
  pm_state_stack_push(i, 0);
  var j:int = g + 24;
  var k:int = g + 12;
  var l:int = g + 52;
  var m:int_ptr = a + 176;
  var n:int_ptr = a + 172;
  var o:int = g + 40;
  var p:int = a + 292;
  var q:int = a + 168;
  var r:int = a + 244;
  var s:int_ptr = g + 8;
  var t:int_ptr = g + 4;
  var u:int_ptr = a + 188;
  var v:int = 8;
  loop L_c {
    w = a[45]:int;
    br_table[B_ba, B_w, B_w, B_w, B_w, B_ba, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_ba, B_w, B_w, B_w, B_w, B_w, B_w, B_ba, B_w, B_ba, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_aa, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_ba, B_w, B_w, B_w, B_w, B_w, B_da, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_w, B_z, B_w, B_y, B_w, B_w, B_w, B_w, B_w, B_w, B_e, B_w, B_w, B_ca, B_w, B_w, B_w, B_z, B_y, ..B_x](
      w + -24);
    label B_da:
    x = 5;
    if (v + -5 < 2) goto B_ea;
    if (v > 6) goto B_v;
    pm_diagnostic_list_append(r, h[0]:int, u[0], 159);
    x = v;
    label B_ea:
    v = parse_required_destructured_parameter(a);
    t[0] = select_if(select_if(w = t[0], y = v[1]:int, w < y), y, w);
    s[0] =
      select_if(select_if(w = s[0], y = (v + 8)[0]:int, w > y), y, w);
    pm_node_list_append(o, v);
    w = 1;
    v = x;
    goto B_d;
    label B_ca:
    if (e) goto B_fa;
    pm_diagnostic_list_append(r, h[0]:int, u[0], 14);
    label B_fa:
    y = a[45]:int;
    w = ((y << 2) + 57680)[0]:int;
    if (v < 2) goto B_ga;
    if (eqz(w)) goto B_ia;
    x = y == 55 | y == 123;
    if (v != 6) goto B_ja;
    z = 5;
    if (x) goto B_ha;
    label B_ja:
    z = 5;
    if (v == 5 & x) goto B_ha;
    if (y != 161) goto B_ka;
    if (v != 5) goto B_ka;
    pm_diagnostic_list_append(r, h[0]:int, u[0], 161);
    label B_ka:
    z = w;
    if (w <= v) goto B_ha;
    pm_diagnostic_list_append(r, h[0]:int, u[0], 159);
    label B_ia:
    z = v;
    label B_ha:
    parser_lex(a);
    if (eqz(e)) goto B_la;
    v = pm_constant_pool_insert_shared(p, v = n[0], m[0] - v);
    if (eqz(v)) goto B_la;
    if (pm_constant_id_list_includes(a[64]:int, v)) goto B_la;
    pm_constant_id_list_append(a[64]:int, v);
    label B_la:
    if (q[0]:int != 157) goto B_t;
    v = calloc(1, 12);
    if (eqz(v)) goto B_s;
    v[0]:short = 57;
    v[2]:int = (w = m[0]);
    v[1]:int = (y = n[0]);
    x = g[16]:int;
    if (eqz(x)) goto B_ma;
    t[0] = select_if(select_if(w = t[0], y = x.b, w < y), y, w);
    s[0] =
      select_if(select_if(w = s[0], y = (x + 8)[0]:int, w > y), y, w);
    pm_node_list_append(o, x);
    pm_diagnostic_list_append(r, n[0], m[0], 162);
    w = v[2]:int;
    y = v[1]:int;
    label B_ma:
    g[16]:int = v;
    g[1]:int = select_if(select_if(v = g[1]:int, y, v < y), y, v);
    g[2]:int = select_if(select_if(v = g[2]:int, w, v > w), w, v);
    w = 1;
    v = z;
    goto B_d;
    label B_ga:
    if (eqz(w)) goto B_na;
    if (v == 1) goto B_oa;
    if (w <= v) goto B_na;
    label B_oa:
    pm_diagnostic_list_append(r, h[0]:int, u[0], 159);
    label B_na:
    parser_lex(a);
    w = 1;
    goto B_d;
    label B_ba:
    parser_lex(a);
    w = 8;
    y = a[42]:int;
    br_table[B_sa, B_pa, B_pa, B_pa, B_pa, B_qa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_ta, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_pa, B_ua, ..B_ra](
      y + -24);
    label B_ua:
    w = 10;
    goto B_qa;
    label B_ta:
    w = 9;
    goto B_qa;
    label B_sa:
    w = 7;
    goto B_qa;
    label B_ra:
    if (y != 117) goto B_pa;
    w = 154;
    label B_qa:
    pm_diagnostic_list_append(r, n[0], m[0], w);
    label B_pa:
    if (a[45]:int != 39) goto B_ya;
    x = 6;
    w = h;
    y = u;
    if (v < 6) goto B_xa;
    goto B_va;
    label B_ya:
    w = q[0]:int;
    z = ((w << 2) + 57680)[0]:int;
    if (eqz(z)) goto B_wa;
    y = w == 55 | w == 123;
    if (v != 6) goto B_za;
    x = 5;
    if (y) goto B_va;
    label B_za:
    x = 5;
    if (v == 5 & y) goto B_va;
    if (w != 161) goto B_ab;
    if (v != 5) goto B_ab;
    pm_diagnostic_list_append(r, n[0], m[0], 161);
    label B_ab:
    w = n;
    y = m;
    if (v == 1) goto B_xa;
    w = n;
    y = m;
    x = z;
    if (z <= v) goto B_va;
    label B_xa:
    pm_diagnostic_list_append(r, w[0]:int, y[0], 159);
    label B_wa:
    x = v;
    label B_va:
    w = f + 224 + 8;
    w[0]:int = (q + 8)[0]:int;
    f[28]:long = q[0]:long@4;
    aa = pm_parser_parameter_name_check(a, f + 224);
    w = 
      pm_constant_pool_insert_shared(p, v = f[57]:int, z = (y = w[0]:int) - v);
    if (eqz(w)) goto B_bb;
    if (pm_constant_id_list_includes(a[64]:int, w)) goto B_bb;
    pm_constant_id_list_append(a[64]:int, w);
    label B_bb:
    if (a[45]:int != 39) goto B_cb;
    parser_lex(a);
    ba = a[44]:int;
    ca = a[43]:int;
    w = malloc(8);
    if (eqz(w)) goto B_db;
    w[0]:int = 8;
    da = a[65]:int;
    a[65]:int = w;
    w[1]:int = da;
    label B_db:
    w = pm_constant_pool_insert_shared(p, v, z);
    ea = a[87]:int;
    a[87]:int = w;
    fa = parse_expression(a, b, 0, 156);
    w = pm_check_value_expression(fa);
    if (eqz(w)) goto B_eb;
    pm_diagnostic_list_append(r, w[1]:int, (w + 8)[0]:int, 208);
    label B_eb:
    w = calloc(1, 36);
    if (eqz(w)) goto B_r;
    da = (fa + 8)[0]:int;
    z = pm_constant_pool_insert_shared(p, v, z);
    w[8]:int = fa;
    w[7]:int = ba;
    w[6]:int = ca;
    w[5]:int = y;
    w[4]:int = v;
    w[3]:int = z;
    w[2]:int = da;
    w[1]:int = v;
    w[0]:short = 111;
    if (eqz(aa)) goto B_fb;
    w[1]:short = w[1]:ushort | 1;
    label B_fb:
    t[0] = select_if(select_if(y = t[0], v, y < v), v, y);
    s[0] = select_if(select_if(v = s[0], da, v > da), da, v);
    pm_node_list_append(j, w);
    a[87]:int = ea;
    v = a[65]:int;
    w = v[1]:int;
    free(v);
    a[65]:int = w;
    w = eqz(a[357]:ubyte);
    v = x;
    goto B_d;
    label B_cb:
    w = calloc(1, 16);
    if (x < 6) goto B_gb;
    if (eqz(w)) goto B_q;
    w[3]:int = pm_constant_pool_insert_shared(p, v, z);
    w[2]:int = y;
    w[1]:int = v;
    w[0]:short = 125;
    if (eqz(aa)) goto B_hb;
    w[1]:short = w[1]:ushort | 1;
    label B_hb:
    t[0] = select_if(select_if(z = t[0], v, z < v), v, z);
    s[0] = select_if(select_if(v = s[0], y, v > y), y, v);
    pm_node_list_append(k, w);
    goto B_f;
    label B_gb:
    if (eqz(w)) goto B_p;
    w[3]:int = pm_constant_pool_insert_shared(p, v, z);
    w[2]:int = y;
    w[1]:int = v;
    w[0]:short = 125;
    if (eqz(aa)) goto B_ib;
    w[1]:short = w[1]:ushort | 1;
    label B_ib:
    t[0] = select_if(select_if(z = t[0], v, z < v), v, z);
    s[0] = select_if(select_if(v = s[0], y, v > y), y, v);
    pm_node_list_append(o, w);
    goto B_f;
    label B_aa:
    if (c) goto B_jb;
    a[360]:byte = 1;
    label B_jb:
    w = 3;
    if (v > 2) goto B_kb;
    pm_diagnostic_list_append(r, h[0]:int, u[0], 159);
    w = v;
    label B_kb:
    v = w;
    parser_lex(a);
    x = a[44]:int;
    w = a[42]:int;
    f[57]:int = (y = a[43]:int);
    f[56]:int = w;
    f[58]:int = (w = x + -1);
    da = pm_parser_parameter_name_check(a, f + 224);
    w = pm_constant_pool_insert_shared(p, y, z = w - y);
    if (eqz(w)) goto B_lb;
    if (pm_constant_id_list_includes(a[64]:int, w)) goto B_lb;
    pm_constant_id_list_append(a[64]:int, w);
    label B_lb:
    w = a[45]:int;
    br_table[B_ob, B_nb, B_nb, B_nb, B_pb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_pb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_nb, B_ob, ..B_qb](
      w + -121);
    label B_qb:
    if (w != 27) goto B_nb;
    label B_pb:
    w = calloc(1, 24);
    if (eqz(w)) goto B_o;
    z = pm_constant_pool_insert_shared(p, y, z);
    w[5]:int = x;
    w[4]:int = y;
    w[3]:int = z;
    w[2]:int = x;
    w[1]:int = y;
    w[0]:short = 124;
    if (eqz(da)) goto B_rb;
    w[1]:short = w[1]:ushort | 1;
    label B_rb:
    t[0] = select_if(select_if(z = t[0], y, z < y), y, z);
    s[0] = select_if(select_if(y = s[0], x, y > x), x, y);
    pm_node_list_append(l, w);
    w = 1;
    a[360]:byte = 0;
    goto B_d;
    label B_ob:
    w = 0;
    if (c) goto B_mb;
    w = calloc(1, 24);
    if (eqz(w)) goto B_n;
    z = pm_constant_pool_insert_shared(p, y, z);
    w[5]:int = x;
    w[4]:int = y;
    w[3]:int = z;
    w[2]:int = x;
    w[1]:int = y;
    w[0]:short = 124;
    if (eqz(da)) goto B_sb;
    w[1]:short = w[1]:ushort | 1;
    label B_sb:
    t[0] = select_if(select_if(z = t[0], y, z < y), y, z);
    s[0] = select_if(select_if(y = s[0], x, y > x), x, y);
    pm_node_list_append(l, w);
    w = 1;
    a[360]:byte = 0;
    goto B_d;
    label B_nb:
    if (eqz(token_begins_expression_p(w))) goto B_ub;
    w = malloc(8);
    if (eqz(w)) goto B_vb;
    w[0]:int = 8;
    aa = a[65]:int;
    a[65]:int = w;
    w[1]:int = aa;
    label B_vb:
    w = pm_constant_pool_insert_shared(p, y, z);
    fa = a[87]:int;
    a[87]:int = w;
    aa = parse_expression(a, b, 0, 157);
    w = pm_check_value_expression(aa);
    if (eqz(w)) goto B_wb;
    pm_diagnostic_list_append(r, w[1]:int, (w + 8)[0]:int, 208);
    label B_wb:
    a[87]:int = fa;
    w = a[65]:int;
    fa = w[1]:int;
    free(w);
    a[65]:int = fa;
    w = calloc(1, 28);
    if (eqz(w)) goto B_m;
    fa = (aa + 8)[0]:int;
    z = pm_constant_pool_insert_shared(p, y, z);
    w[6]:int = aa;
    w[5]:int = x;
    w[4]:int = y;
    w[3]:int = z;
    w[2]:int = fa;
    w[1]:int = y;
    y = 110;
    goto B_tb;
    label B_ub:
    w = calloc(1, 24);
    if (eqz(w)) goto B_l;
    z = pm_constant_pool_insert_shared(p, y, z);
    w[5]:int = x;
    w[4]:int = y;
    w[3]:int = z;
    w[2]:int = x;
    w[1]:int = y;
    y = 124;
    label B_tb:
    w[0]:short = y;
    if (eqz(da)) goto B_xb;
    br_table[B_yb, B_zb, B_zb, B_zb, B_zb, B_zb, B_zb, B_zb, B_zb, B_zb, B_zb, B_zb, B_zb, B_zb, B_yb, ..B_zb](
      y + -110)
    label B_zb:
    assert_fail(19245, 13402, 902, 6009);
    unreachable;
    label B_yb:
    w[1]:short = w[1]:ushort | 1;
    label B_xb:
    t[0] = select_if(select_if(y = t[0], x = w[1]:int, y < x), x, y);
    s[0] =
      select_if(select_if(y = s[0], x = (w + 8)[0]:int, y > x), x, y);
    pm_node_list_append(l, w);
    w = eqz(a[357]:ubyte);
    label B_mb:
    a[360]:byte = 0;
    goto B_d;
    label B_z:
    da = ((w << 2) + 57680)[0]:int;
    if (eqz(da)) goto B_bc;
    if (w != 161) goto B_cc;
    if (v != 5) goto B_cc;
    pm_diagnostic_list_append(r, h[0]:int, u[0], 161);
    label B_cc:
    if (v == 1) goto B_dc;
    if (da <= v) goto B_ac;
    label B_dc:
    pm_diagnostic_list_append(r, h[0]:int, u[0], 159);
    label B_bc:
    da = v;
    label B_ac:
    parser_lex(a);
    z = a[44]:int;
    w = a[43]:int;
    if (a[45]:int != 55) goto B_gc;
    parser_lex(a);
    v = f + 224 + 8;
    v[0]:int = (q + 8)[0]:int;
    f[28]:long = q[0]:long@4;
    ea = pm_parser_parameter_name_check(a, f + 224);
    v = 
      pm_constant_pool_insert_shared(p, y = f[57]:int, (aa = v[0]:int) - y);
    if (eqz(v)) goto B_ec;
    if (eqz(pm_constant_id_list_includes(a[64]:int, v))) goto B_fc;
    goto B_ec;
    label B_gc:
    f[56]:int = 3;
    f[58]:int = (y = a[40]:int);
    f[57]:int = y;
    ea = 0;
    if (e) goto B_hc;
    aa = y;
    goto B_ec;
    label B_hc:
    v = pm_constant_pool_insert_shared(p, w, z - w);
    if (v) goto B_ic;
    aa = y;
    goto B_ec;
    label B_ic:
    ea = 0;
    aa = y;
    if (pm_constant_id_list_includes(a[64]:int, v)) goto B_ec;
    label B_fc:
    pm_constant_id_list_append(a[64]:int, v);
    label B_ec:
    v = calloc(1, 32);
    if (eqz(v)) goto B_k;
    x = select_if(z, aa, ga = f[56]:int == 3);
    fa = 0;
    ba = 0;
    ca = 0;
    if (ga) goto B_jc;
    fa = pm_constant_pool_insert_shared(p, y, aa - y);
    ba = y;
    ca = aa;
    label B_jc:
    v[7]:int = z;
    v[6]:int = w;
    v[5]:int = ca;
    v[4]:int = ba;
    v[3]:int = fa;
    v[2]:int = x;
    v[1]:int = w;
    v[0]:short = 128;
    if (eqz(ea)) goto B_kc;
    v[1]:short = v[1]:ushort | 1;
    label B_kc:
    if (g[9]:int) goto B_lc;
    g[9]:int = v;
    g[1]:int = select_if(select_if(v = g[1]:int, w, v < w), w, v);
    g[2]:int = select_if(select_if(v = g[2]:int, x, v > x), x, v);
    goto B_g;
    label B_lc:
    pm_diagnostic_list_append(r, w, x, 160);
    t[0] = select_if(select_if(w = t[0], y = v[1]:int, w < y), y, w);
    s[0] = select_if(select_if(w = s[0], y = v[2]:int, w > y), y, w);
    pm_node_list_append(o, v);
    goto B_g;
    label B_y:
    y = ((w << 2) + 57680)[0]:int;
    if (eqz(y)) goto B_nc;
    if (w != 161) goto B_oc;
    if (v != 5) goto B_oc;
    pm_diagnostic_list_append(r, h[0]:int, u[0], 161);
    label B_oc:
    if (v == 1) goto B_pc;
    if (y <= v) goto B_mc;
    label B_pc:
    pm_diagnostic_list_append(r, h[0]:int, u[0], 159);
    label B_nc:
    y = v;
    label B_mc:
    parser_lex(a);
    (f + 224 + 8)[0]:int = (w = q + 8)[0]:int;
    f[28]:long = q[0]:long@4;
    v = a[45]:int;
    if (v != 85) goto B_rc;
    parser_lex(a);
    v = pm_no_keywords_parameter_node_create(f + 224, q);
    goto B_qc;
    label B_rc:
    if (v != 55) goto B_uc;
    parser_lex(a);
    v = f + 208 + 8;
    v[0]:int = w[0]:int;
    f[26]:long = q[0]:long@4;
    ba = pm_parser_parameter_name_check(a, f + 208);
    v = 
      pm_constant_pool_insert_shared(p, w = f[53]:int, (x = v[0]:int) - w);
    if (eqz(v)) goto B_sc;
    if (eqz(pm_constant_id_list_includes(a[64]:int, v))) goto B_tc;
    goto B_sc;
    label B_uc:
    f[52]:int = 3;
    f[54]:int = (w = a[40]:int);
    f[53]:int = w;
    ba = 0;
    if (e) goto B_vc;
    x = w;
    goto B_sc;
    label B_vc:
    v = pm_constant_pool_insert_shared(p, v = f[57]:int, f[58]:int - v);
    if (v) goto B_wc;
    x = w;
    goto B_sc;
    label B_wc:
    ba = 0;
    x = w;
    if (pm_constant_id_list_includes(a[64]:int, v)) goto B_sc;
    label B_tc:
    pm_constant_id_list_append(a[64]:int, v);
    label B_sc:
    v = calloc(1, 32);
    if (eqz(v)) goto B_j;
    ca = f[58]:int;
    ga = select_if(ca, x, ea = f[52]:int == 3);
    da = 0;
    z = f[57]:int;
    aa = 0;
    fa = 0;
    if (ea) goto B_xc;
    da = pm_constant_pool_insert_shared(p, w, x - w);
    aa = w;
    fa = x;
    label B_xc:
    v[7]:int = ca;
    v[6]:int = z;
    v[5]:int = fa;
    v[4]:int = aa;
    v[3]:int = da;
    v[2]:int = ga;
    v[1]:int = z;
    v[0]:short = 89;
    if (eqz(ba)) goto B_qc;
    v[1]:short = v[1]:ushort | 1;
    label B_qc:
    if (g[16]:int) goto B_yc;
    g[16]:int = v;
    g[1]:int =
      select_if(select_if(w = g[1]:int, x = v[1]:int, w < x), x, w);
    g[2]:int =
      select_if(select_if(w = g[2]:int, v = (v + 8)[0]:int, w > v), v, w);
    goto B_h;
    label B_yc:
    pm_diagnostic_list_append(r, v[1]:int, (z = v + 8)[0], 151);
    t[0] = select_if(select_if(w = t[0], x = v[1]:int, w < x), x, w);
    s[0] = select_if(select_if(w = s[0], x = z[0], w > x), x, w);
    pm_node_list_append(o, v);
    goto B_h;
    label B_x:
    if (w == 4) goto B_e;
    label B_w:
    if (q[0]:int != 27) goto B_b;
    if (eqz(d)) goto B_zc;
    v = calloc(1, 12);
    if (eqz(v)) goto B_i;
    v[0]:short = 70;
    v[2]:int = (w = m[0]);
    v[1]:int = (q = n[0]);
    if (g[9]:int) goto B_u;
    g[9]:int = v;
    g[1]:int = select_if(select_if(v = g[1]:int, q, v < q), q, v);
    g[2]:int = select_if(select_if(v = g[2]:int, w, v > w), w, v);
    goto B_b;
    label B_zc:
    pm_diagnostic_list_append(r, n[0], m[0], 163);
    goto B_b;
    label B_v:
    v = parse_required_destructured_parameter(a);
    t[0] = select_if(select_if(w = t[0], y = v[1]:int, w < y), y, w);
    s[0] =
      select_if(select_if(w = s[0], y = (v + 8)[0]:int, w > y), y, w);
    pm_node_list_append(k, v);
    w = 1;
    v = 7;
    goto B_d;
    label B_u:
    pm_diagnostic_list_append(r, q, w, 160);
    t[0] = select_if(select_if(p = t[0], q, p < q), q, p);
    s[0] = select_if(select_if(q = s[0], w, q > w), w, q);
    pm_node_list_append(o, v);
    goto B_b;
    label B_t:
    assert_fail(15637, 13402, 3113, 10249);
    unreachable;
    label B_s:
    f[12]:int = 12;
    fprintf(rodata[15455]:int, 31876, f + 48);
    abort();
    unreachable;
    label B_r:
    f[16]:int = 36;
    fprintf(rodata[15455]:int, 31876, f + 64);
    abort();
    unreachable;
    label B_q:
    f[20]:int = 16;
    fprintf(rodata[15455]:int, 31876, f + 80);
    abort();
    unreachable;
    label B_p:
    f[24]:int = 16;
    fprintf(rodata[15455]:int, 31876, f + 96);
    abort();
    unreachable;
    label B_o:
    f[36]:int = 24;
    fprintf(rodata[15455]:int, 31876, f + 144);
    abort();
    unreachable;
    label B_n:
    f[40]:int = 24;
    fprintf(rodata[15455]:int, 31876, f + 160);
    abort();
    unreachable;
    label B_m:
    f[28]:int = 28;
    fprintf(rodata[15455]:int, 31876, f + 112);
    abort();
    unreachable;
    label B_l:
    f[32]:int = 24;
    fprintf(rodata[15455]:int, 31876, f + 128);
    abort();
    unreachable;
    label B_k:
    f[44]:int = 32;
    fprintf(rodata[15455]:int, 31876, f + 176);
    abort();
    unreachable;
    label B_j:
    f[48]:int = 32;
    fprintf(rodata[15455]:int, 31876, f + 192);
    abort();
    unreachable;
    label B_i:
    f[4]:int = 12;
    fprintf(rodata[15455]:int, 31876, f + 16);
    abort();
    unreachable;
    label B_h:
    w = 1;
    v = y;
    goto B_d;
    label B_g:
    w = 1;
    v = da;
    goto B_d;
    label B_f:
    w = 1;
    v = x;
    goto B_d;
    label B_e:
    y = ((w << 2) + 57680)[0]:int;
    if (eqz(y)) goto B_bd;
    if (v + -5 > 1) goto B_cd;
    ca = 5;
    if (w == 55 | w == 123) goto B_ad;
    label B_cd:
    if (v == 1) goto B_dd;
    ca = y;
    if (y <= v) goto B_ad;
    label B_dd:
    pm_diagnostic_list_append(r, h[0]:int, u[0], 159);
    label B_bd:
    ca = v;
    label B_ad:
    parser_lex(a);
    z = a[44]:int;
    w = a[43]:int;
    v = a[42]:int;
    if (a[45]:int != 55) goto B_gd;
    parser_lex(a);
    x = f + 224 + 8;
    x.a = (q + 8)[0]:int;
    f[28]:long = q[0]:long@4;
    ea = pm_parser_parameter_name_check(a, f + 224);
    x = pm_constant_pool_insert_shared(p, y = f[57]:int, (da = x.a) - y);
    if (eqz(x)) goto B_ed;
    if (eqz(pm_constant_id_list_includes(a[64]:int, x))) goto B_fd;
    goto B_ed;
    label B_gd:
    f[56]:int = 3;
    f[58]:int = (y = a[40]:int);
    f[57]:int = y;
    ea = 0;
    if (e) goto B_hd;
    da = y;
    goto B_ed;
    label B_hd:
    x = pm_constant_pool_insert_shared(p, w, z - w);
    if (x) goto B_id;
    da = y;
    goto B_ed;
    label B_id:
    ea = 0;
    da = y;
    if (pm_constant_id_list_includes(a[64]:int, x)) goto B_ed;
    label B_fd:
    pm_constant_id_list_append(a[64]:int, x);
    label B_ed:
    if (v + -3 < 2) goto B_md;
    if (v != 154) goto B_ld;
    label B_md:
    v = calloc(1, 32);
    if (eqz(v)) goto B_kd;
    x = select_if(z, da, ga = f[56]:int == 3);
    aa = 0;
    fa = 0;
    ba = 0;
    if (ga) goto B_nd;
    aa = pm_constant_pool_insert_shared(p, y, da - y);
    fa = y;
    ba = da;
    label B_nd:
    v[7]:int = z;
    v[6]:int = w;
    v[5]:int = ba;
    v[4]:int = fa;
    v[3]:int = aa;
    v[2]:int = x;
    v[1]:int = w;
    v[0]:short = 15;
    if (eqz(ea)) goto B_od;
    v[1]:short = v[1]:ushort | 1;
    label B_od:
    if (g[17]:int) goto B_pd;
    g[17]:int = v;
    g[1]:int = select_if(select_if(v = g[1]:int, w, v < w), w, v);
    g[2]:int = select_if(select_if(v = g[2]:int, x, v > x), x, v);
    goto B_jd;
    label B_pd:
    pm_diagnostic_list_append(r, w, x, 152);
    t[0] = select_if(select_if(w = t[0], y = v[1]:int, w < y), y, w);
    s[0] = select_if(select_if(w = s[0], y = v[2]:int, w > y), y, w);
    pm_node_list_append(o, v);
    goto B_jd;
    label B_ld:
    assert_fail(22562, 13402, 1541, 10218);
    unreachable;
    label B_kd:
    f[8]:int = 32;
    fprintf(rodata[15455]:int, 31876, f + 32);
    abort();
    unreachable;
    label B_jd:
    w = 1;
    v = ca;
    label B_d:
    if (eqz(w)) goto B_rd;
    if (eqz(c)) goto B_rd;
    if (a[45]:int != 121) goto B_rd;
    parser_lex(a);
    goto B_qd;
    label B_rd:
    if (eqz(w)) goto B_b;
    label B_qd:
    if (a[45]:int != 27) goto B_b;
    parser_lex(a);
    continue L_c;
  }
  label B_b:
  pm_state_stack_pop(i);
  if (t[0] != s[0]) goto B_sd;
  pm_node_destroy(a, g);
  g = 0;
  label B_sd:
  stack_pointer = f + 240;
  return g;
  label B_a:
  f[0]:int = 72;
  fprintf(rodata[15455]:int, 31876, f);
  abort();
  return unreachable;
}

function pm_rescue_modifier_node_create(a:int_ptr, b:long_ptr@4, c:int):int {
  var e:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  e = calloc(1, 28);
  if (e) goto B_a;
  d[0] = 28;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_a:
  e[6]:int = c;
  e[3]:int = a;
  e[0]:short = 126;
  e[4]:long@4 = b[1];
  e[1]:int = a[1];
  e[2]:int = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
}

function pm_def_node_create(a:int, b:int_ptr, c:int, d:int, e:int, f:long_ptr@4, g:int, h:int_ptr, i:{ a:int, b:int, c:int }, j:{ a:int, b:int, c:int }, k:{ a:int, b:int, c:int }, l:{ a:int, b:int, c:int }, m:{ a:int, b:int, c:int }):int {
  var n:int_ptr = stack_pointer - 16;
  stack_pointer = n;
  var o:int = calloc(1, 100);
  if (eqz(o)) goto B_a;
  var p:int = select_if(e, m, m.a == 3)[2]:int;
  var q:int = h[1];
  var r:int = 
    pm_constant_pool_insert_shared(a + 292, a = b[1], b[2] - a);
  a = 0;
  var s:int = 0;
  var t:int = 0;
  if (i.a == 3) goto B_b;
  t = i.c;
  s = i.b;
  label B_b:
  i = 0;
  if (j.a == 3) goto B_c;
  i = j.c;
  a = j.b;
  label B_c:
  j = 0;
  var u:int = 0;
  var v:int = 0;
  if (k.a == 3) goto B_d;
  v = k.c;
  u = k.b;
  label B_d:
  k = 0;
  if (l.a == 3) goto B_e;
  k = l.c;
  j = l.b;
  label B_e:
  l = h[2];
  var w:int = h[1];
  var x:int = b[2];
  var y:int = b[1];
  b = 0;
  h = 0;
  if (m.a == 3) goto B_f;
  h = m.c;
  b = m.b;
  label B_f:
  o[8]:int = e;
  o[7]:int = d;
  o[6]:int = c;
  o[5]:int = x;
  o[4]:int = y;
  o[3]:int = r;
  o[2]:int = p;
  o[1]:int = q;
  o[0]:short = 45;
  o[24]:int = h;
  o[23]:int = b;
  o[22]:int = k;
  o[21]:int = j;
  o[20]:int = v;
  o[19]:int = u;
  o[18]:int = i;
  o[17]:int = a;
  o[16]:int = t;
  o[15]:int = s;
  o[14]:int = l;
  o[13]:int = w;
  o[12]:int = g;
  o[9]:long@4 = f[0];
  (o + 44)[0]:int = (f + 8)[0]:int;
  stack_pointer = n + 16;
  return o;
  label B_a:
  n[0] = 100;
  fprintf(rodata[15455]:int, 31876, n);
  abort();
  return unreachable;
}

function pm_singleton_class_node_create(a:long_ptr@4, b:int_ptr, c:long_ptr@4, d:int, e:int, f:int_ptr):int {
  var h:int;
  var g:int_ptr = stack_pointer - 16;
  stack_pointer = g;
  h = calloc(1, 56);
  if (h) goto B_a;
  g[0] = 56;
  fprintf(rodata[15455]:int, 31876, g);
  abort();
  unreachable;
  label B_a:
  h[0]:short = 132;
  h[11]:int = e;
  h[10]:int = d;
  h[2]:int = (e = f[2]);
  h[1]:int = (d = b[1]);
  h[3]:long@4 = a[0];
  h[13]:int = e;
  h[12]:int = f[1];
  h[8]:long@4 = c[1];
  h[7]:int = b[2];
  h[6]:int = d;
  (h + 20)[0]:int = (a + 8)[0]:int;
  stack_pointer = g + 16;
  return h;
}

function pm_class_node_create(a:int, b:long_ptr@4, c:int_ptr, d:int, e:int_ptr, f:{ a:int, b:int, c:int }, g:int, h:int, i:int_ptr):int {
  var j:int = stack_pointer - 32;
  stack_pointer = j;
  var k:int = calloc(1, 64);
  if (eqz(k)) goto B_a;
  var l:int_ptr = j + 16 + 8;
  l[0] = (b + 8)[0]:int;
  j[2]:long = b[0];
  var m:int = c[2];
  b = i[2];
  c = c[1];
  var n:int = 0;
  var o:int = 0;
  if (f.a == 3) goto B_b;
  o = f.c;
  n = f.b;
  label B_b:
  i = i[1];
  f = pm_constant_pool_insert_shared(a + 292, f = e[1], e[2] - f);
  k[2]:int = b;
  k[1]:int = c;
  k[0]:short = 26;
  k[15]:int = f;
  k[14]:int = b;
  k[13]:int = i;
  k[12]:int = h;
  k[11]:int = g;
  k[10]:int = o;
  k[9]:int = n;
  k[8]:int = d;
  k[7]:int = m;
  k[6]:int = c;
  k[3]:long@4 = j[2]:long;
  (k + 20)[0]:int = l[0];
  stack_pointer = j + 32;
  return k;
  label B_a:
  j[0]:int = 64;
  fprintf(rodata[15455]:int, 31876, j);
  abort();
  return unreachable;
}

function parse_arguments_list(a:int, b:int, c:{ a:short, b:int, c:int, d:int }, d:int_ptr):int {
  var g:int_ptr;
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = a[45]:int;
  if (f != 123) goto B_b;
  parser_lex(a);
  b[0]:long@4 = (a + 172)[0]:long@4;
  if (a[45]:int != 125) goto B_c;
  parser_lex(a);
  b[3]:long@4 = a[43]:long@4;
  g = 1;
  goto B_a;
  label B_c:
  g = a + 20;
  pm_state_stack_push(g, 0);
  parse_arguments(a, b, 1, 125);
  if (a[45]:int != 125) goto B_e;
  parser_lex(a);
  goto B_d;
  label B_e:
  pm_diagnostic_list_append(a + 244, d = a[44]:int, d, 18);
  a[42]:int = 2;
  a[43]:int = d;
  label B_d:
  pm_state_stack_pop(g);
  b[3]:long@4 = a[43]:long@4;
  g = 1;
  goto B_a;
  label B_b:
  g = 0;
  if (eqz(d)) goto B_a;
  d = token_begins_expression_p(f);
  f = a[45]:int;
  if (d) goto B_g;
  d = f + -154;
  if (d > 8) goto B_a;
  if (1 << d & 385) goto B_f;
  goto B_a;
  label B_g:
  if (f == 14) goto B_a;
  label B_f:
  g = 1;
  d = a + 20;
  pm_state_stack_push(d, 1);
  parse_arguments(a, b, 1, 1);
  if (a[42]:int != 27) goto B_h;
  if (a[45]:int == 142) goto B_h;
  pm_diagnostic_list_append(a + 244, (a + 172)[0]:int, (a + 176)[0]:int, 80);
  label B_h:
  pm_state_stack_pop(d);
  label B_a:
  if (eqz(c)) goto B_j;
  if (a[45]:int != 14) goto B_n;
  parser_lex(a);
  g = parse_block(a);
  c = b[2]:int;
  if (eqz(c)) goto B_m;
  if (b[3]:int) goto B_m;
  if (c.d != 1) goto B_o;
  if ((((c + 20)[0]:int)[0]:int)[0]:ushort == 114) goto B_m;
  label B_o:
  pm_diagnostic_list_append(a + 244, g[1], (g + 8)[0]:int, 19);
  goto B_l;
  label B_n:
  if (pm_state_stack_p(a + 20)) goto B_j;
  if (a[45]:int != 71) goto B_j;
  parser_lex(a);
  g = parse_block(a);
  label B_m:
  if (eqz(g)) goto B_k;
  label B_l:
  c = b[24]:ubyte;
  if (b[5]:int) goto B_r;
  d = 5;
  if (c & 255) goto B_q;
  goto B_p;
  label B_r:
  d = select_if(5, 6, c & 255);
  label B_q:
  pm_diagnostic_list_append(a + 244, g[1], (g + 8)[0]:int, d);
  d = b[5]:int;
  if (eqz(d)) goto B_p;
  c = b[2]:int;
  if (c) goto B_s;
  c = calloc(1, 24);
  if (eqz(c)) goto B_i;
  c.a = 5;
  b[2]:int = c;
  c.c = (a = a[40]:int);
  c.b = a;
  label B_s:
  a = c + 12;
  if (c.d) goto B_t;
  c.b = d[1];
  label B_t:
  (c + 8)[0]:int = (d + 8)[0]:int;
  pm_node_list_append(a, d);
  label B_p:
  b[5]:int = g;
  label B_k:
  g = 1;
  label B_j:
  stack_pointer = e + 16;
  return g;
  label B_i:
  e[0] = 24;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_yield_node_create(a:int_ptr, b:int, c:int, d:int):int {
  var g:int_ptr;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  var f:int = calloc(1, 40);
  if (eqz(f)) goto B_a;
  if (eqz(d[0]:int)) goto B_c;
  g = d + 4;
  goto B_b;
  label B_c:
  if (eqz(c)) goto B_d;
  g = c + 8;
  goto B_b;
  label B_d:
  if (eqz(b[0]:int)) goto B_e;
  g = b + 4;
  goto B_b;
  label B_e:
  g = a + 8;
  label B_b:
  f[7]:int = c;
  f[0]:short = 148;
  f[8]:long@4 = d[0]:long@4;
  f[5]:long@4 = b[0]:long@4;
  f[4]:int = a[2];
  f[3]:int = (d = a[1]);
  f[2]:int = g[0];
  f[1]:int = d;
  stack_pointer = e + 16;
  return f;
  label B_a:
  e[0] = 40;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_forwarding_super_node_create(a:{ a:int, b:int }, b:int):int {
  var d:ushort_ptr;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = b[5]:int;
  if (eqz(d)) goto B_d;
  if (d[0] != 14) goto B_c;
  label B_d:
  if (a.a != 94) goto B_b;
  b = calloc(1, 16);
  if (eqz(b)) goto B_a;
  b[3]:int = d;
  b[0]:short = 58;
  b[1]:int = a.b;
  b[2]:int = select_if(d, a, d)[2]:int;
  stack_pointer = c + 16;
  return b;
  label B_c:
  assert_fail(26677, 13402, 3124, 10306);
  unreachable;
  label B_b:
  assert_fail(16185, 13402, 3125, 10306);
  unreachable;
  label B_a:
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_super_node_create(a:{ a:int, b:int, c:int }, b:int):int {
  var f:int;
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (a.a != 94) goto B_c;
  var d:int = calloc(1, 44);
  if (eqz(d)) goto B_b;
  e = b[5]:int;
  if (eqz(e)) goto B_e;
  f = (e + 8)[0]:int;
  if (eqz(b[3]:int)) goto B_d;
  var g:int = (b + 16)[0]:int;
  f = select_if(g, f, g > f);
  goto B_d;
  label B_e:
  if (eqz(b[3]:int)) goto B_f;
  f = (b + 16)[0]:int;
  goto B_d;
  label B_f:
  f = b[2]:int;
  if (eqz(f)) goto B_g;
  f = (f + 8)[0]:int;
  goto B_d;
  label B_g:
  f = (b + 16)[0]:int;
  label B_d:
  if (eqz(f)) goto B_a;
  d[10]:int = e;
  d[2]:int = f;
  d[0]:short = 139;
  d[8]:long@4 = b[3]:long@4;
  d[7]:int = b[2]:int;
  d[5]:long@4 = b[0]:long@4;
  d[4]:int = a.c;
  d[3]:int = (b = a.b);
  d[1]:int = b;
  stack_pointer = c + 16;
  return d;
  label B_c:
  assert_fail(16223, 13402, 5442, 10285);
  unreachable;
  label B_b:
  c[0] = 44;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  assert_fail(26957, 13402, 5447, 10285);
  return unreachable;
}

function parse_arguments(a:int, b:int, c:int, d:int) {
  var g:int_ptr;
  var o:ushort_ptr;
  var p:int;
  var q:int;
  var e:int = stack_pointer - 192;
  stack_pointer = e;
  var f:int = a[45]:int;
  if (f == d) goto B_l;
  if (f == 1) goto B_l;
  if ((f * 12 + 63600)[0]:int + -1 < 21) goto B_l;
  if (context_terminator((a[65]:int)[0]:int, g = a + 180)) goto B_l;
  var h:int = a + 292;
  var i:int = a + 168;
  var j:int = a + 244;
  var k:int = 0;
  var l:{ a:short, b:int, c:int, d:int } = 0;
  var m:int = 0;
  var n:int = 0;
  loop L_m {
    if (f == 1) goto B_l;
    o = l & 1;
    if (eqz(o)) goto B_n;
    pm_diagnostic_list_append(j, a[46]:int, a[47]:int, 2);
    label B_n:
    if (eqz(k & 1)) goto B_o;
    pm_diagnostic_list_append(j, a[46]:int, a[47]:int, 3);
    label B_o:
    f = g[0];
    br_table[B_u, B_r, B_r, B_s, B_r, B_r, B_r, B_t, B_v, ..B_w](
      f + -154);
    label B_w:
    if (f != 109) goto B_r;
    label B_v:
    if (eqz(m & 1)) goto B_x;
    pm_diagnostic_list_append(j, a[46]:int, a[47]:int, 4);
    label B_x:
    f = calloc(1, 24);
    if (eqz(f)) goto B_k;
    f[0]:int = 65624;
    n = parse_assocs(a, f);
    m = b[2]:int;
    if (m) goto B_y;
    m = calloc(1, 24);
    if (eqz(m)) goto B_j;
    m[0]:short = 5;
    b[2]:int = m;
    m[2]:int = (o = a[40]:int);
    m[1]:int = o;
    label B_y:
    o = m + 12;
    if (m[3]:int) goto B_z;
    m[1]:int = f[1]:int;
    label B_z:
    (m + 8)[0]:int = (f + 8)[0]:int;
    pm_node_list_append(o, f);
    m = 1;
    if (eqz(n)) goto B_p;
    m = 1;
    n = b[2]:int;
    n[1]:short = n[1]:ushort | 1;
    goto B_p;
    label B_u:
    parser_lex(a);
    p = a[44]:int;
    n = a[43]:int;
    if (eqz(token_begins_expression_p(a[45]:int))) goto B_ba;
    l = parse_expression(a, 14, 0, 80);
    f = pm_check_value_expression(l);
    if (eqz(f)) goto B_aa;
    pm_diagnostic_list_append(j, f[1]:int, (f + 8)[0]:int, 208);
    goto B_aa;
    label B_ba:
    l = pm_constant_pool_insert_shared(h, n, p - n);
    f = a[64]:int;
    if (eqz(f)) goto B_da;
    loop L_ea {
      if (pm_constant_id_list_includes(f, l)) goto B_ca;
      if (f[16]:ubyte) goto B_da;
      f = f[3]:int;
      if (f) continue L_ea;
    }
    label B_da:
    l = pm_constant_pool_insert_constant(h, 26310, 3);
    f = a[64]:int;
    if (eqz(f)) goto B_fa;
    loop L_ga {
      if (pm_constant_id_list_includes(f, l)) goto B_ca;
      if (f[16]:ubyte) goto B_fa;
      f = f[3]:int;
      if (f) continue L_ga;
    }
    label B_fa:
    pm_diagnostic_list_append(j, n, p, 13);
    label B_ca:
    l = 0;
    label B_aa:
    f = calloc(1, 24);
    if (eqz(f)) goto B_i;
    q = p;
    if (eqz(l)) goto B_ha;
    q = (l + 8)[0]:int;
    label B_ha:
    f[5]:int = p;
    f[4]:int = n;
    f[3]:int = l;
    f[2]:int = q;
    f[1]:int = n;
    f[0]:short = 12;
    if (eqz(o)) goto B_ia;
    l = b[2]:int;
    if (l) goto B_ja;
    l = calloc(1, 24);
    if (eqz(l)) goto B_h;
    l.a = 5;
    b[2]:int = l;
    l.c = (o = a[40]:int);
    l.b = o;
    label B_ja:
    o = l + 12;
    if (l.d) goto B_ka;
    l.b = n;
    label B_ka:
    (l + 8)[0]:int = q;
    pm_node_list_append(o, f);
    l = 1;
    goto B_p;
    label B_ia:
    b[5]:int = f;
    l = 1;
    goto B_p;
    label B_t:
    parser_lex(a);
    p = a[44]:int;
    o = a[43]:int;
    f = a[45]:int;
    br_table[B_na, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_na, ..B_oa](
      f + -20);
    label B_oa:
    br_table[B_na, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_ma, B_na, ..B_ma](
      f + -125);
    label B_na:
    n = pm_constant_pool_insert_shared(h, o, p - o);
    f = a[64]:int;
    if (eqz(f)) goto B_qa;
    loop L_ra {
      if (pm_constant_id_list_includes(f, n)) goto B_pa;
      if (f[16]:ubyte) goto B_qa;
      f = f[3]:int;
      if (f) continue L_ra;
    }
    label B_qa:
    pm_diagnostic_list_append(j, o, p, 15);
    label B_pa:
    n = 0;
    q = p;
    f = calloc(1, 24);
    if (f) goto B_la;
    e[32]:int = 24;
    fprintf(rodata[15455]:int, 31876, e + 128);
    abort();
    unreachable;
    label B_ma:
    n = parse_expression(a, 14, 0, 90);
    f = pm_check_value_expression(n);
    if (eqz(f)) goto B_sa;
    pm_diagnostic_list_append(j, f[1]:int, (f + 8)[0]:int, 208);
    label B_sa:
    if (eqz(m & 1)) goto B_ta;
    pm_diagnostic_list_append(j, o, (n + 8)[0]:int, 16);
    label B_ta:
    f = calloc(1, 24);
    if (eqz(f)) goto B_g;
    if (n) goto B_ua;
    q = p;
    goto B_la;
    label B_ua:
    q = (n + 8)[0]:int;
    label B_la:
    f[5]:int = n;
    f[4]:int = p;
    f[3]:int = o;
    f[2]:int = q;
    f[1]:int = o;
    f[0]:short = 136;
    n = b[2]:int;
    if (n) goto B_va;
    n = calloc(1, 24);
    if (eqz(n)) goto B_f;
    n[0]:short = 5;
    b[2]:int = n;
    n[2]:int = (o = a[40]:int);
    n[1]:int = o;
    label B_va:
    o = n + 12;
    if (n[3]:int) goto B_wa;
    n[1]:int = f[1]:int;
    label B_wa:
    (n + 8)[0]:int = (f + 8)[0]:int;
    pm_node_list_append(o, f);
    goto B_p;
    label B_s:
    if (eqz(c)) goto B_r;
    parser_lex(a);
    if (token_begins_expression_p(a[45]:int)) goto B_xa;
    k = pm_constant_pool_insert_shared(h, f = a[43]:int, a[44]:int - f);
    f = a[64]:int;
    if (eqz(f)) goto B_za;
    loop L_ab {
      if (pm_constant_id_list_includes(f, k)) goto B_ya;
      if (f[16]:ubyte) goto B_za;
      f = f[3]:int;
      if (f) continue L_ab;
    }
    label B_za:
    pm_diagnostic_list_append(j, a[43]:int, a[44]:int, 14);
    label B_ya:
    if ((d != 1 | (n ^ -1)) & 1) goto B_bb;
    pm_diagnostic_list_append(j, a[43]:int, a[44]:int, 11);
    label B_bb:
    if (i[0]:int != 157) goto B_e;
    f = calloc(1, 12);
    if (eqz(f)) goto B_d;
    f[0]:short = 56;
    f[2]:int = (k = a[44]:int);
    f[1]:int = (p = a[43]:int);
    n = b[2]:int;
    if (n) goto B_cb;
    n = calloc(1, 24);
    if (eqz(n)) goto B_c;
    n[0]:short = 5;
    b[2]:int = n;
    n[2]:int = (o = a[40]:int);
    n[1]:int = o;
    label B_cb:
    o = n + 12;
    if (n[3]:int) goto B_db;
    n[1]:int = p;
    label B_db:
    (n + 8)[0]:int = k;
    pm_node_list_append(o, f);
    k = 1;
    b[24]:byte = 1;
    goto B_p;
    label B_xa:
    (e + 176 + 8)[0]:int = (i + 8)[0]:int;
    e[22]:long = i[0]:long@4;
    o = 
      pm_range_node_create(a, 0, e + 176, parse_expression(a, 22, 0, 89));
    if (o) goto B_q;
    label B_r:
    o = parse_expression(a, 14, (n ^ -1) & 1, 80);
    f = pm_check_value_expression(o);
    if (eqz(f)) goto B_q;
    pm_diagnostic_list_append(j, f[1]:int, (f + 8)[0]:int, 208);
    label B_q:
    f = o[0];
    if (f == 86) goto B_kb;
    if (f != 140) goto B_ib;
    f = o + 32;
    goto B_jb;
    label B_kb:
    f = o + 36;
    label B_jb:
    f = f[0]:int;
    if (eqz(f)) goto B_ib;
    if ((f + -1)[0]:ubyte == 58) goto B_hb;
    label B_ib:
    p = 0;
    f = g[0];
    if (f == 82) goto B_gb;
    if (f != 42) goto B_fb;
    parser_lex(a);
    label B_hb:
    if (eqz(m & 1)) goto B_lb;
    pm_diagnostic_list_append(j, a[43]:int, a[44]:int, 4);
    label B_lb:
    if (i[0]:int != 42) goto B_nb;
    (e + 176 + 8)[0]:int = (i + 8)[0]:int;
    e[22]:long = i[0]:long@4;
    goto B_mb;
    label B_nb:
    e[44]:int = 3;
    e[46]:int = (f = a[40]:int);
    e[45]:int = f;
    label B_mb:
    f = calloc(1, 24);
    if (eqz(f)) goto B_b;
    f[0]:int = 65624;
    n = parse_expression(a, 14, 0, 110);
    m = pm_check_value_expression(n);
    if (eqz(m)) goto B_ob;
    pm_diagnostic_list_append(j, m[1]:int, (m + 8)[0]:int, 208);
    label B_ob:
    m = pm_assoc_node_create(o, e + 176, n);
    if (m[0]:ushort != 8) goto B_qb;
    if ((m[3]:int)[0]:ushort == 140) goto B_pb;
    label B_qb:
    f[1]:short = f[1]:ushort & 65534;
    label B_pb:
    pm_node_list_append(f + 12, m);
    if (f[1]:int) goto B_rb;
    f[1]:int = m[1]:int;
    label B_rb:
    (f + 8)[0]:int = (m + 8)[0]:int;
    p = 0;
    if (g[0] != 27) goto B_sb;
    parser_lex(a);
    if (token_begins_expression_p(a[45]:int)) goto B_tb;
    m = g[0];
    if (m == 162) goto B_tb;
    if (m != 109) goto B_sb;
    label B_tb:
    p = parse_assocs(a, f);
    label B_sb:
    m = 1;
    goto B_eb;
    label B_gb:
    parser_lex(a);
    pm_diagnostic_list_append(j, a[46]:int, a[47]:int, 12);
    label B_fb:
    f = o;
    label B_eb:
    n = b[2]:int;
    if (n) goto B_ub;
    n = calloc(1, 24);
    if (eqz(n)) goto B_a;
    n[0]:short = 5;
    b[2]:int = n;
    n[2]:int = (o = a[40]:int);
    n[1]:int = o;
    label B_ub:
    o = n + 12;
    if (n[3]:int) goto B_vb;
    n[1]:int = f[1]:int;
    label B_vb:
    (n + 8)[0]:int = (f + 8)[0]:int;
    pm_node_list_append(o, f);
    if (eqz(p)) goto B_p;
    n = b[2]:int;
    n[1]:short = n[1]:ushort | 1;
    label B_p:
    if (f[0]:ushort == 101) goto B_l;
    if (a[357]:ubyte) goto B_l;
    if (d == 1) goto B_wb;
    if (g[0] != 121) goto B_wb;
    parser_lex(a);
    label B_wb:
    if (i[0]:int == 27 & m) goto B_xb;
    if (g[0] != 27) goto B_l;
    parser_lex(a);
    label B_xb:
    n = 1;
    f = g[0];
    if (f != d) continue L_m;
  }
  label B_l:
  stack_pointer = e + 192;
  return ;
  label B_k:
  e[8]:int = 24;
  fprintf(rodata[15455]:int, 31876, e + 32);
  abort();
  unreachable;
  label B_j:
  e[12]:int = 24;
  fprintf(rodata[15455]:int, 31876, e + 48);
  abort();
  unreachable;
  label B_i:
  e[16]:int = 24;
  fprintf(rodata[15455]:int, 31876, e + 64);
  abort();
  unreachable;
  label B_h:
  e[20]:int = 24;
  fprintf(rodata[15455]:int, 31876, e + 80);
  abort();
  unreachable;
  label B_g:
  e[24]:int = 24;
  fprintf(rodata[15455]:int, 31876, e + 96);
  abort();
  unreachable;
  label B_f:
  e[28]:int = 24;
  fprintf(rodata[15455]:int, 31876, e + 112);
  abort();
  unreachable;
  label B_e:
  assert_fail(15637, 13402, 3102, 10145);
  unreachable;
  label B_d:
  e[36]:int = 12;
  fprintf(rodata[15455]:int, 31876, e + 144);
  abort();
  unreachable;
  label B_c:
  e[40]:int = 24;
  fprintf(rodata[15455]:int, 31876, e + 160);
  abort();
  unreachable;
  label B_b:
  e[4]:int = 24;
  fprintf(rodata[15455]:int, 31876, e + 16);
  abort();
  unreachable;
  label B_a:
  e[0]:int = 24;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
}

function pm_break_node_create(a:{ a:int, b:int, c:int }, b:int):int {
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (a.a != 66) goto B_b;
  var d:{ a:short, b:int, c:int, d:int, e:int, f:int } = calloc(1, 24);
  if (eqz(d)) goto B_a;
  d.d = b;
  d.a = 17;
  d.f = a.c;
  d.e = (e = a.b);
  d.b = e;
  d.c = select_if(b, a, b)[2]:int;
  stack_pointer = c + 16;
  return d;
  label B_b:
  assert_fail(17580, 13402, 1648, 10400);
  unreachable;
  label B_a:
  c[0] = 24;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_next_node_create(a:{ a:int, b:int, c:int }, b:int):int {
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (a.a != 84) goto B_b;
  var d:{ a:short, b:int, c:int, d:int, e:int, f:int } = calloc(1, 24);
  if (eqz(d)) goto B_a;
  d.d = b;
  d.a = 105;
  d.f = a.c;
  d.e = (e = a.b);
  d.b = e;
  d.c = select_if(b, a, b)[2]:int;
  stack_pointer = c + 16;
  return d;
  label B_b:
  assert_fail(15572, 13402, 4574, 10048);
  unreachable;
  label B_a:
  c[0] = 24;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_return_node_create(a:int_ptr, b:int):int {
  var d:{ a:short, b:int, c:int, d:int, e:int, f:int }
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = calloc(1, 24);
  if (d) goto B_a;
  c[0] = 24;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  d.f = b;
  d.a = 130;
  d.e = a[2];
  d.d = (e = a[1]);
  d.b = e;
  d.c = select_if(b, a, b)[2]:int;
  stack_pointer = c + 16;
  return d;
}

function pm_pre_execution_node_create(a:int_ptr, b:long_ptr@4, c:int, d:int_ptr):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 40);
  if (f) goto B_a;
  e[0] = 40;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  f[3]:int = c;
  f[0]:short = 118;
  f[9]:int = (c = d[2]);
  f[8]:int = d[1];
  f[6]:long@4 = b[1];
  f[5]:int = a[2];
  f[4]:int = (d = a[1]);
  f[2]:int = c;
  f[1]:int = d;
  stack_pointer = e + 16;
  return f;
}

function pm_begin_node_create(a:{ a:int, b:int, c:int }, b:int):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  var d:{ a:short, b:int, c:int, d:int, e:int, f:int } = calloc(1, 44);
  if (eqz(d)) goto B_a;
  var e:int = select_if(b, a, b)[2]:int;
  var f:int = a.b;
  var g:int = 0;
  var h:int = 0;
  if (a.a == 3) goto B_b;
  h = a.c;
  g = f;
  label B_b:
  d.f = b;
  d.e = h;
  d.d = g;
  d.c = e;
  d.b = f;
  d.a = 11;
  stack_pointer = c + 16;
  return d;
  label B_a:
  c[0] = 44;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function parse_rescues(a:int_ptr, b:int_ptr, c:int) {
  var k:int;
  var j:int;
  var e:int_ptr;
  var m:int;
  var l:int;
  var i:int_ptr;
  var n:int;
  var o:int;
  var d:int_ptr = stack_pointer - 64;
  stack_pointer = d;
  e = a[45];
  if (e != 89) goto B_e;
  var f:int = select_if(28, 27, c);
  var g:int = a + 20;
  var h:int = a + 244;
  i = 0;
  loop L_f {
    parser_lex(a);
    j = calloc(1, 52);
    if (eqz(j)) goto B_d;
    j[0]:short = 127;
    j[4]:int = (k = a[44]);
    j[3]:int = (e = a[43]);
    j[2]:int = k;
    j[1]:int = e;
    k = a[45];
    if (k > 120) goto B_l;
    if (k == 42) goto B_j;
    if (k != 95) goto B_k;
    goto B_g;
    label B_l:
    if (k == 121) goto B_g;
    if (k == 142) goto B_g;
    label B_k:
    if (token_begins_expression_p(k)) goto B_m;
    k = a[45];
    if (k != 161) goto B_g;
    label B_m:
    l = j + 20;
    loop L_n {
      if (a[45] != 161) goto B_p;
      parser_lex(a);
      m = a[44];
      n = a[43];
      e = parse_expression(a, 14, 0, 92);
      k = pm_check_value_expression(e);
      if (eqz(k)) goto B_q;
      pm_diagnostic_list_append(h, k[1]:int, (k + 8)[0]:int, 208);
      label B_q:
      k = calloc(1, 24);
      if (eqz(k)) goto B_c;
      o = m;
      if (eqz(e)) goto B_r;
      o = (e + 8)[0]:int;
      label B_r:
      k[5]:int = e;
      k[4]:int = m;
      k[3]:int = n;
      k[2]:int = o;
      k[1]:int = n;
      k[0]:short = 136;
      goto B_o;
      label B_p:
      k = parse_expression(a, 14, 0, 184);
      e = pm_check_value_expression(k);
      if (eqz(e)) goto B_o;
      pm_diagnostic_list_append(h, e[1], (e + 8)[0]:int, 208);
      label B_o:
      pm_node_list_append(l, k);
      j[2]:int = (k + 8)[0]:int;
      k = a[45];
      if (k == 27) goto B_s;
      if (k != 42) goto B_g;
      parser_lex(a);
      k = 0;
      e = 0;
      if (a[42] != 3) goto B_i;
      goto B_h;
      label B_s:
      parser_lex(a);
      continue L_n;
    }
    label B_j:
    parser_lex(a);
    k = 0;
    e = 0;
    if (a[42] == 3) goto B_h;
    label B_i:
    e = a[44];
    k = a[43];
    label B_h:
    j[8]:int = k;
    (j + 36)[0]:int = e;
    j[10]:int = (k = parse_target(a, parse_expression(a, 48, 0, 187)));
    j[2]:int = (k + 8)[0]:int;
    k = a[45];
    label B_g:
    if (k == 95) goto B_w;
    if (k == 142) goto B_x;
    if (k != 121) goto B_v;
    label B_x:
    parser_lex(a);
    k = a[45];
    if (k != 95) goto B_t;
    label B_w:
    parser_lex(a);
    goto B_u;
    label B_v:
    pm_diagnostic_list_append(h, k = a[44], k, 186);
    a[42] = 2;
    a[43] = k;
    label B_u:
    k = a[45];
    label B_t:
    k = k + -73;
    if (k > 4) goto B_z;
    if (1 << k & 21) goto B_y;
    label B_z:
    pm_state_stack_push(g, 0);
    k = parse_statements(a, f);
    if (eqz(k)) goto B_aa;
    j[11]:int = k;
    if (eqz(k[3]:int)) goto B_aa;
    j[2]:int = (k + 8)[0]:int;
    label B_aa:
    pm_state_stack_pop(g);
    k = a[45];
    if (k == 142) goto B_ba;
    if (k != 121) goto B_y;
    label B_ba:
    parser_lex(a);
    label B_y:
    if (i) goto B_da;
    if (b[3]) goto B_ea;
    b[1] = j[1]:int;
    label B_ea:
    b[6] = j;
    b[2] = j[2]:int;
    goto B_ca;
    label B_da:
    i[12] = j;
    (i + 8)[0]:int = j[2]:int;
    label B_ca:
    i = j;
    e = a[45];
    if (e == 89) continue L_f;
  }
  k = b[6];
  if (eqz(k)) goto B_e;
  j = (j + 8)[0]:int;
  loop L_fa {
    (k + 8)[0]:int = j;
    k = k[12]:int;
    if (k) continue L_fa;
  }
  label B_e:
  if (e != 73) goto B_ga;
  parser_lex(a);
  o = (a + 176)[0]:int;
  e = (a + 172)[0]:int;
  k = a[45];
  if (k == 142) goto B_ia;
  if (k != 121) goto B_ha;
  label B_ia:
  parser_lex(a);
  k = a[45];
  label B_ha:
  j = 0;
  br_table[B_ja, B_ka, B_ja, ..B_ka](k + -75)
  label B_ka:
  k = a + 20;
  pm_state_stack_push(k, 0);
  j = parse_statements(a, select_if(26, 25, c));
  pm_state_stack_pop(k);
  k = a[45];
  if (k == 142) goto B_la;
  if (k != 121) goto B_ja;
  label B_la:
  parser_lex(a);
  label B_ja:
  k = calloc(1, 32);
  if (eqz(k)) goto B_b;
  m = 
    select_if(select_if(j + 8, m = a + 188, l = a[45] == 3), m, j)[0]:int;
  n = 0;
  i = 0;
  if (l) goto B_ma;
  n = (a + 184)[0]:int;
  i = a[47];
  label B_ma:
  k[7]:int = i;
  k[6]:int = n;
  k[5]:int = j;
  k[4]:int = o;
  k[3]:int = e;
  k[2]:int = m;
  k[1]:int = e;
  k[0]:short = 47;
  b[7] = k;
  (b + 8)[0]:int = m;
  label B_ga:
  k = a[45];
  if (k != 77) goto B_na;
  parser_lex(a);
  m = (a + 176)[0]:int;
  j = (a + 172)[0]:int;
  k = a[45];
  if (k == 142) goto B_pa;
  if (k != 121) goto B_oa;
  label B_pa:
  parser_lex(a);
  k = a[45];
  label B_oa:
  e = 0;
  if (k == 75) goto B_qa;
  k = a + 20;
  pm_state_stack_push(k, 0);
  e = parse_statements(a, select_if(13, 12, c));
  pm_state_stack_pop(k);
  k = a[45];
  if (k == 142) goto B_ra;
  if (k != 121) goto B_qa;
  label B_ra:
  parser_lex(a);
  label B_qa:
  k = calloc(1, 32);
  if (eqz(k)) goto B_a;
  k[5]:int = e;
  k[4]:int = m;
  k[3]:int = j;
  k[1]:int = j;
  k[0]:short = 50;
  k[7]:int = (j = (a + 188)[0]:int);
  k[6]:int = (a + 184)[0]:int;
  k[2]:int = j;
  b[8] = k;
  k = a[45];
  label B_na:
  if (k != 75) goto B_ta;
  k = (a + 184)[0]:int;
  a = (a + 188)[0]:int;
  goto B_sa;
  label B_ta:
  a = (a + 176)[0]:int;
  k = a;
  label B_sa:
  b[9] = k;
  (b + 40)[0]:int = a;
  (b + 8)[0]:int = a;
  stack_pointer = d + 64;
  return ;
  label B_d:
  d[0] = 52;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_c:
  d[4] = 24;
  fprintf(rodata[15455]:int, 31876, d + 16);
  abort();
  unreachable;
  label B_b:
  d[8] = 32;
  fprintf(rodata[15455]:int, 31876, d + 32);
  abort();
  unreachable;
  label B_a:
  d[12] = 32;
  fprintf(rodata[15455]:int, 31876, d + 48);
  abort();
  unreachable;
}

function pm_begin_node_end_keyword_set(a:int_ptr, b:{ a:int, b:int, c:int }) {
  var d:int;
  var c:int;
  c = b.a;
  if (c == 2) goto B_b;
  if (c != 75) goto B_a;
  label B_b:
  (a + 8)[0]:int = (d = b.c);
  var e:int = 0;
  var f:int = 0;
  if (c == 3) goto B_c;
  e = b.b;
  f = d;
  label B_c:
  a[9] = e;
  (a + 40)[0]:int = f;
  return ;
  label B_a:
  assert_fail(17988, 13402, 1485, 4061);
  unreachable;
}

function pm_case_node_create(a:int_ptr, b:int, c:int_ptr):int {
  var e:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  e = calloc(1, 48);
  if (e) goto B_a;
  d[0] = 48;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_a:
  e[3]:int = b;
  e[0]:short = 25;
  e[11]:int = (b = c[2]);
  e[10]:int = c[1];
  e[9]:int = a[2];
  e[8]:int = (c = a[1]);
  e[2]:int = b;
  e[1]:int = c;
  stack_pointer = d + 16;
  return e;
}

function pm_case_match_node_create(a:int_ptr, b:int, c:int_ptr):int {
  var e:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  e = calloc(1, 48);
  if (e) goto B_a;
  d[0] = 48;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_a:
  e[3]:int = b;
  e[0]:short = 24;
  e[11]:int = (b = c[2]);
  e[10]:int = c[1];
  e[9]:int = a[2];
  e[8]:int = (c = a[1]);
  e[2]:int = b;
  e[1]:int = c;
  stack_pointer = d + 16;
  return e;
}

function parse_pattern(a:int, b:int, c:int):int {
  var e:int;
  var g:int_ptr;
  var f:int;
  var d:int = stack_pointer - 128;
  stack_pointer = d;
  e = a[45]:int;
  br_table[B_m, B_n, ..B_o](e + -161);
  label B_o:
  if (e != 109) goto B_l;
  parser_lex(a);
  c = pm_symbol_node_label_create(a + 168);
  b = calloc(1, 28);
  if (eqz(b)) goto B_j;
  e = (c + 8)[0]:int;
  if (c[0]:ushort != 138) goto B_p;
  c[1]:short = c[1]:ushort | 4;
  label B_p:
  f = c[1]:int;
  b[3]:int = c;
  b[2]:int = e;
  b[1]:int = f;
  b[0]:short = 8;
  b = parse_pattern_hash(a, b);
  goto B_f;
  label B_n:
  b = parse_pattern_hash(a, parse_pattern_keyword_rest(a));
  goto B_f;
  label B_m:
  if (eqz(b)) goto B_l;
  parser_lex(a);
  f = 1;
  c = parse_pattern_rest(a);
  goto B_k;
  label B_l:
  f = 0;
  c = parse_pattern_primitives(a, c);
  label B_k:
  e = c[0]:ushort;
  if (e == 86) goto B_t;
  if (e != 140) goto B_r;
  g = c + 32;
  goto B_s;
  label B_t:
  g = c + 36;
  label B_s:
  g = g[0];
  if (eqz(g)) goto B_r;
  if ((g + -1)[0]:ubyte != 58) goto B_r;
  b = calloc(1, 28);
  if (eqz(b)) goto B_q;
  f = (c + 8)[0]:int;
  if (e != 138) goto B_u;
  c[1]:short = c[1]:ushort | 4;
  label B_u:
  e = c[1]:int;
  b[3]:int = c;
  b[2]:int = f;
  b[1]:int = e;
  b[0]:short = 8;
  b = parse_pattern_hash(a, b);
  goto B_f;
  label B_r:
  if (eqz(b)) goto B_i;
  if (a[45]:int != 27) goto B_i;
  b = 0;
  (d + 120)[0]:int = 0;
  d[14]:long = 0L;
  pm_node_list_append(d + 112, c);
  if (a[45]:int != 27) goto B_g;
  e = a + 244;
  loop L_v {
    parser_lex(a);
    c = a[45]:int;
    if (c > 141) goto B_z;
    br_table[B_h, B_y, B_y, B_y, B_y, B_h, ..B_aa](c + -15)
    label B_aa:
    if (c == 95) goto B_h;
    if (c != 121) goto B_y;
    goto B_h;
    label B_z:
    br_table[B_h, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_x, ..B_y](
      c + -142);
    label B_y:
    c = parse_pattern_primitives(a, 166);
    goto B_w;
    label B_x:
    parser_lex(a);
    c = parse_pattern_rest(a);
    if (b & 1) goto B_ba;
    b = 1;
    goto B_w;
    label B_ba:
    pm_diagnostic_list_append(e, a[43]:int, a[44]:int, 178);
    b = 1;
    label B_w:
    pm_node_list_append(d + 112, c);
    if (a[45]:int == 27) continue L_v;
    goto B_g;
  }
  label B_q:
  d[20]:int = 28;
  fprintf(rodata[15455]:int, 31876, d + 80);
  abort();
  unreachable;
  label B_j:
  d[24]:int = 28;
  fprintf(rodata[15455]:int, 31876, d + 96);
  abort();
  unreachable;
  label B_i:
  if (f) goto B_ca;
  b = c;
  goto B_f;
  label B_ca:
  b = calloc(1, 60);
  if (eqz(b)) goto B_da;
  b[7]:int = c;
  b[0]:short = 7;
  b[1]:long@4 = c[1]:long@4;
  goto B_f;
  label B_da:
  d[16]:int = 60;
  fprintf(rodata[15455]:int, 31876, d + 64);
  abort();
  unreachable;
  label B_h:
  if (a[42]:int != 27) goto B_e;
  c = calloc(1, 12);
  if (eqz(c)) goto B_d;
  c[0]:short = 70;
  c[1]:long@4 = a[43]:long@4;
  pm_node_list_append(d + 112, c);
  label B_g:
  c = d[30]:int;
  a = c[0]:int;
  if (a[0]:ushort != 136) goto B_fa;
  f = d[28]:int;
  e = ((f << 2) + c + -4)[0]:int;
  if (e[0]:ushort != 136) goto B_fa;
  b = calloc(1, 52);
  if (eqz(b)) goto B_c;
  if (f != 1) goto B_ga;
  c = (a + 8)[0]:int;
  e = calloc(1, 12);
  if (eqz(e)) goto B_b;
  e[2]:int = c;
  e[1]:int = c;
  e[0]:short = 101;
  label B_ga:
  c = (e + 8)[0]:int;
  g = a[1]:int;
  b[8]:int = e;
  b[4]:int = a;
  b[2]:int = c;
  b[1]:int = g;
  b[0]:short = 52;
  if (f + -3 > -3) goto B_ea;
  e = b + 20;
  a = 4;
  c = 1;
  loop L_ha {
    pm_node_list_append(e, (d[30]:int + a)[0]:int);
    a = a + 4;
    c = c + 1;
    if (c < d[28]:int + -1) continue L_ha;
    goto B_ea;
  }
  label B_fa:
  b = calloc(1, 60);
  if (eqz(b)) goto B_a;
  a = a[1]:int;
  b[2]:int = ((((e = d[28]:int) << 2) + c + -4)[0]:int + 8)[0]:int;
  b[1]:int = a;
  b[0]:short = 7;
  if (eqz(e)) goto B_ea;
  g = b + 32;
  var h:int = b + 16;
  a = 0;
  f = 0;
  e = 0;
  loop L_ia {
    c = (d[30]:int + a)[0]:int;
    if (f & 1) goto B_la;
    f = c[0]:ushort;
    if (f == 136) goto B_ma;
    if (f != 70) goto B_ka;
    label B_ma:
    b[7]:int = c;
    f = 1;
    goto B_ja;
    label B_la:
    pm_node_list_append(g, c);
    f = 1;
    goto B_ja;
    label B_ka:
    pm_node_list_append(h, c);
    f = 0;
    label B_ja:
    a = a + 4;
    e = e + 1;
    if (e < d[28]:int) continue L_ia;
  }
  label B_ea:
  free(d[30]:int);
  label B_f:
  stack_pointer = d + 128;
  return b;
  label B_e:
  assert_fail(22945, 13402, 3557, 10068);
  unreachable;
  label B_d:
  d[12]:int = 12;
  fprintf(rodata[15455]:int, 31876, d + 48);
  abort();
  unreachable;
  label B_c:
  d[0]:int = 52;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_b:
  d[4]:int = 12;
  fprintf(rodata[15455]:int, 31876, d + 16);
  abort();
  unreachable;
  label B_a:
  d[8]:int = 60;
  fprintf(rodata[15455]:int, 31876, d + 32);
  abort();
  return unreachable;
}

function pm_if_node_modifier_create(a:int_ptr, b:int, c:long_ptr@4, d:int):int {
  var e:int_ptr = stack_pointer - 32;
  stack_pointer = e;
  pm_conditional_predicate(d);
  var f:int = calloc(1, 48);
  if (eqz(f)) goto B_b;
  var g:{ a:short, b:int, c:int } = calloc(1, 24);
  if (eqz(g)) goto B_a;
  g.a = 137;
  g.c = (a = a[40]);
  g.b = b[1]:int;
  var h:int = (b + 8)[0]:int;
  if (h <= a) goto B_c;
  g.c = h;
  label B_c:
  pm_node_list_append(g + 12, b);
  b[1]:short = b[1]:ushort | 32768;
  f[8]:int = g;
  f[5]:int = d;
  f[0]:int = -2147483581;
  f[2]:int = (d + 8)[0]:int;
  f[1]:int = b[1]:int;
  f[3]:long@4 = c[1];
  stack_pointer = e + 32;
  return f;
  label B_b:
  e[0] = 48;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  e[4] = 24;
  fprintf(rodata[15455]:int, 31876, e + 16);
  abort();
  return unreachable;
}

function pm_unless_node_modifier_create(a:int_ptr, b:int, c:long_ptr@4, d:int):int {
  var e:int_ptr = stack_pointer - 32;
  stack_pointer = e;
  pm_conditional_predicate(d);
  var f:int = calloc(1, 48);
  if (eqz(f)) goto B_b;
  var g:{ a:short, b:int, c:int } = calloc(1, 24);
  if (eqz(g)) goto B_a;
  g.a = 137;
  g.c = (a = a[40]);
  g.b = b[1]:int;
  var h:int = (b + 8)[0]:int;
  if (h <= a) goto B_c;
  g.c = h;
  label B_c:
  pm_node_list_append(g + 12, b);
  b[1]:short = b[1]:ushort | 32768;
  f[8]:int = g;
  f[5]:int = d;
  f[0]:int = -2147483505;
  f[2]:int = (d + 8)[0]:int;
  f[1]:int = b[1]:int;
  f[3]:long@4 = c[1];
  stack_pointer = e + 32;
  return f;
  label B_b:
  e[0] = 48;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  e[4] = 24;
  fprintf(rodata[15455]:int, 31876, e + 16);
  abort();
  return unreachable;
}

function pm_else_node_create(a:int_ptr, b:int, c:{ a:int, b:int, c:int }):int {
  var f:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  var e:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int, h:int } = 
    calloc(1, 32);
  if (eqz(e)) goto B_a;
  var g:int = select_if(select_if(b, c, f = c.a == 3), c, b)[2]:int;
  var h:int = a[2];
  a = a[1];
  var i:int = 0;
  var j:int = 0;
  if (f) goto B_b;
  j = c.c;
  i = c.b;
  label B_b:
  e.h = j;
  e.g = i;
  e.f = b;
  e.e = h;
  e.d = a;
  e.c = g;
  e.b = a;
  e.a = 47;
  stack_pointer = d + 16;
  return e;
  label B_a:
  d[0] = 32;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function parse_alias_argument(a:int_ptr, b:int_ptr):int {
  var d:long_ptr@4;
  var c:int = stack_pointer - 48;
  stack_pointer = c;
  br_table[B_i, B_c, B_c, B_c, B_c, B_i, B_f, B_i, B_i, B_i, B_c, B_c, B_c, B_c, B_i, B_i, B_c, B_i, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_h, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_i, B_i, B_c, B_i, B_c, B_c, B_c, B_c, B_d, B_i, B_i, B_i, B_c, B_c, B_c, B_h, B_c, B_c, B_c, B_c, B_c, B_c, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_c, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_c, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_c, B_h, B_c, B_h, B_h, B_c, B_h, B_h, B_h, B_h, B_c, B_c, B_c, B_i, B_i, B_i, B_i, B_c, B_h, B_i, B_c, B_c, B_c, B_e, B_c, B_c, B_c, B_i, B_c, B_c, B_c, B_c, B_c, B_c, B_i, B_c, B_c, B_c, B_i, B_c, B_c, B_c, B_c, B_c, B_i, B_c, B_i, B_c, B_i, B_c, B_c, B_c, B_c, B_g, B_i, B_i, B_c, B_c, B_c, B_i, B_i, B_i, B_i, B_i, ..B_c](
    a[45] + -4)
  label B_i:
  c[4]:int = 3;
  c[6]:int = (d = a[40]);
  c[5]:int = d;
  b = parse_operator_symbol(a, c + 16, select_if(4224, 0, b));
  goto B_b;
  label B_h:
  if (eqz(b)) goto B_j;
  a[0] = 4224;
  label B_j:
  parser_lex(a);
  b = calloc(1, 48);
  if (eqz(b)) goto B_a;
  b[0] = 1073741964;
  b[6] = (d = (a + 176)[0]:int);
  b[5] = (a = (a + 172)[0]:int);
  b[2] = d;
  b[1] = a;
  pm_string_shared_init(b + 36, a, d);
  goto B_b;
  label B_g:
  (c + 16 + 8)[0]:long = ((d = a[6]) + 8)[0]:long@4;
  (c + 16 + 16)[0]:long = (d + 16)[0]:long@4;
  (c + 16 + 24)[0]:long = (d + 24)[0]:long@4;
  c[2]:long = d[0];
  parser_lex(a);
  b = parse_symbol(a, c + 16, select_if(4224, 0, b));
  goto B_b;
  label B_f:
  parser_lex(a);
  b = pm_back_reference_read_node_create(a, a + 168);
  goto B_b;
  label B_e:
  parser_lex(a);
  b = pm_numbered_reference_read_node_create(a, a + 168);
  goto B_b;
  label B_d:
  parser_lex(a);
  b = pm_global_variable_read_node_create(a, a + 168);
  goto B_b;
  label B_c:
  pm_diagnostic_list_append(a + 244, (b = a + 184)[0], (a = a + 188)[0], 0);
  b = pm_missing_node_create(b[0], a[0]);
  label B_b:
  stack_pointer = c + 48;
  return b;
  label B_a:
  c[0]:int = 48;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_alias_global_variable_node_create(a:{ a:int, b:int, c:int }, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (a.a != 62) goto B_b;
  var e:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int } = 
    calloc(1, 28);
  if (eqz(e)) goto B_a;
  e.e = c;
  e.d = b;
  e.a = 1;
  e.g = a.c;
  e.f = (a = a.b);
  e.b = a;
  e.c = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(16060, 13402, 1022, 11267);
  unreachable;
  label B_a:
  d[0] = 28;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_alias_method_node_create(a:{ a:int, b:int, c:int }, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (a.a != 62) goto B_b;
  var e:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int } = 
    calloc(1, 28);
  if (eqz(e)) goto B_a;
  e.e = c;
  e.d = b;
  e.a = 2;
  e.g = a.c;
  e.f = (a = a.b);
  e.b = a;
  e.c = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(16060, 13402, 1046, 11304);
  unreachable;
  label B_a:
  d[0] = 28;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_integer_node_rational_imaginary_create(a:int, b:{ a:int, b:int, c:int }):int {
  var e:int;
  var c:int_ptr = stack_pointer - 32;
  stack_pointer = c;
  if (b.a != 61) goto B_b;
  var d:{ a:int, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(d)) goto B_a;
  c[4] = 60;
  c[5] = (e = b.b);
  c[6] = (b = b.c) + -1;
  d.d = pm_integer_node_rational_create(a, c + 16);
  d.c = b;
  d.b = e;
  d.a = 1073741892;
  stack_pointer = c + 32;
  return d;
  label B_b:
  assert_fail(15350, 13402, 3644, 9758);
  unreachable;
  label B_a:
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_integer_node_rational_create(a:int, b:int):int {
  var c:int_ptr = stack_pointer - 32;
  stack_pointer = c;
  if (b[0]:int != 60) goto B_c;
  var d:{ a:int, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(d)) goto B_b;
  var e:int = b[2]:int;
  var f:int = b[1]:int;
  b = calloc(1, 12);
  if (eqz(b)) goto B_a;
  b[1]:int = f;
  b[0]:short = 82;
  d.d = b;
  d.c = e;
  d.b = f;
  d.a = 1073741945;
  b[2]:int = e + -1;
  b[1]:short = a | 16384;
  stack_pointer = c + 32;
  return d;
  label B_c:
  assert_fail(17508, 13402, 3619, 9995);
  unreachable;
  label B_b:
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  c[4] = 12;
  fprintf(rodata[15455]:int, 31876, c + 16);
  abort();
  return unreachable;
}

function pm_integer_node_imaginary_create(a:int, b:int):int {
  var c:int_ptr = stack_pointer - 32;
  stack_pointer = c;
  if (b[0]:int != 59) goto B_c;
  var d:{ a:int, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(d)) goto B_b;
  var e:int = b[2]:int;
  var f:int = b[1]:int;
  b = calloc(1, 12);
  if (eqz(b)) goto B_a;
  b[1]:int = f;
  b[0]:short = 82;
  d.d = b;
  d.c = e;
  d.b = f;
  d.a = 1073741892;
  b[2]:int = e + -1;
  b[1]:short = a | 16384;
  stack_pointer = c + 32;
  return d;
  label B_c:
  assert_fail(15259, 13402, 3594, 9831);
  unreachable;
  label B_b:
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  c[4] = 12;
  fprintf(rodata[15455]:int, 31876, c + 16);
  abort();
  return unreachable;
}

function pm_integer_node_create(a:int, b:int):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (b[0]:int != 58) goto B_b;
  var d:int = calloc(1, 12);
  if (eqz(d)) goto B_a;
  d[0]:short = 82;
  d[1]:long@4 = b[1]:long@4;
  d[1]:short = a | 16384;
  stack_pointer = c + 16;
  return d;
  label B_b:
  assert_fail(16388, 13402, 3576, 10338);
  unreachable;
  label B_a:
  c[0] = 12;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function parse_heredoc_dedent_string(a:{ a:int, b:int }, b:int) {
  var d:ubyte_ptr;
  var f:int;
  pm_string_ensure_owned(a);
  var c:int = pm_string_length(a);
  var e:int = c + (d = a.a);
  if (c >= 1) goto B_b;
  f = d;
  goto B_a;
  label B_b:
  f = 0;
  loop L_d {
    if (eqz(pm_is_inline_whitespace(d[0]))) goto B_c;
    if (f >= b) goto B_c;
    if (d[0] != 9) goto B_f;
    f = (f & -8) + 8;
    if (f <= b) goto B_e;
    goto B_c;
    label B_f:
    f = f + 1;
    label B_e:
    c = c + -1;
    d = d + 1;
    if (d < e) continue L_d;
  }
  label B_c:
  f = a.a;
  label B_a:
  memmove(f, d, e - d);
  a.b = c;
}

function pm_interpolated_string_node_create(a:{ a:int, b:int, c:int }, b:long_ptr@4, c:{ a:int, b:int, c:int }):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  var e:int = calloc(1, 40);
  if (eqz(e)) goto B_a;
  var f:int = a.b;
  var g:int = 0;
  var h:int = 0;
  var i:int = 0;
  if (a.a == 3) goto B_b;
  i = a.c;
  h = f;
  label B_b:
  a = c.c;
  var j:int = 0;
  if (c.a == 3) goto B_c;
  g = c.b;
  j = a;
  label B_c:
  e[9]:int = j;
  e[8]:int = g;
  e[4]:int = i;
  e[3]:int = h;
  e[2]:int = a;
  e[1]:int = f;
  e[0]:short = 85;
  if (eqz(b)) goto B_d;
  e[5]:long@4 = b[0];
  (e + 28)[0]:int = (b + 8)[0]:int;
  label B_d:
  stack_pointer = d + 16;
  return e;
  label B_a:
  d[0] = 40;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function parse_heredoc_dedent(a:int, b:int_ptr, c:int) {
  var d:int;
  var i:int;
  var j:int;
  var h:int;
  if (b[0]) goto B_b;
  d = 0;
  goto B_a;
  label B_b:
  d = 0;
  var e:int = 1;
  var f:int = 0;
  loop L_c {
    var g:ubyte_ptr = e;
    h = b[2];
    i = h[f]:int;
    e = i[0]:ushort == 138;
    if (e) goto B_f;
    h[d]:int = i;
    goto B_e;
    label B_f:
    if (g & 1) goto B_h;
    j = (i + 40)[0]:int;
    goto B_g;
    label B_h:
    var k:int_ptr = i + 36;
    pm_string_ensure_owned(k);
    j = pm_string_length(k);
    var l:int = j + (g = i[9]:int);
    if (j >= 1) goto B_j;
    h = g;
    goto B_i;
    label B_j:
    h = 0;
    loop L_l {
      if (eqz(pm_is_inline_whitespace(g[0]))) goto B_k;
      if (h >= c) goto B_k;
      if (g[0] != 9) goto B_n;
      h = (h & -8) + 8;
      if (h <= c) goto B_m;
      goto B_k;
      label B_n:
      h = h + 1;
      label B_m:
      j = j + -1;
      g = g + 1;
      if (g < l) continue L_l;
    }
    label B_k:
    h = k[0];
    label B_i:
    memmove(h, g, l - g);
    (i + 40)[0]:int = j;
    label B_g:
    if (j) goto B_o;
    pm_node_destroy(a, i);
    goto B_d;
    label B_o:
    (b[2])[d]:int = i;
    label B_e:
    d = d + 1;
    label B_d:
    f = f + 1;
    if (f < b[0]) continue L_c;
  }
  label B_a:
  b[0] = d;
}

function pm_call_node_fcall_create(a:int, b:{ a:int, b:int, c:int }, c:int):int {
  var f:int;
  var h:int;
  var g:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  var e:int = calloc(1, 60);
  if (eqz(e)) goto B_a;
  e[0]:int = 524307;
  e[1]:int = (f = b.b);
  g = c[5]:int;
  if (eqz(g)) goto B_c;
  h = (g + 8)[0]:int;
  if (eqz(c[3]:int)) goto B_b;
  var i:int = (c + 16)[0]:int;
  h = select_if(i, h, i > h);
  goto B_b;
  label B_c:
  if (eqz(c[3]:int)) goto B_d;
  h = (c + 16)[0]:int;
  goto B_b;
  label B_d:
  h = c[2]:int;
  if (eqz(h)) goto B_e;
  h = (h + 8)[0]:int;
  goto B_b;
  label B_e:
  h = (c + 16)[0]:int;
  label B_b:
  e[2]:int = h;
  e[14]:int = g;
  e[9]:long@4 = c[0]:long@4;
  e[11]:int = c[2]:int;
  e[12]:long@4 = c[3]:long@4;
  (e + 32)[0]:int = select_if(0, c = b.c, b = b.a == 3);
  e[7]:int = select_if(0, f, b);
  e[6]:int = pm_constant_pool_insert_shared(a + 292, f, c - f);
  stack_pointer = d + 16;
  return e;
  label B_a:
  d[0] = 60;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_back_reference_read_node_create(a:int, b:{ a:int, b:int, c:int }):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (b.a != 10) goto B_b;
  var d:{ a:short, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(d)) goto B_a;
  d.d = pm_constant_pool_insert_shared(a + 292, a = b.b, (b = b.c) - a);
  d.c = b;
  d.b = a;
  d.a = 10;
  stack_pointer = c + 16;
  return d;
  label B_b:
  assert_fail(22391, 13402, 1412, 11434);
  unreachable;
  label B_a:
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_numbered_reference_read_node_create(a:int, b:{ a:int, b:int, c:int }):int {
  var f:int;
  var g:int;
  var i:ubyte_ptr;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (b.a != 122) goto B_c;
  var d:{ a:short, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(d)) goto B_b;
  var e:int = b.c;
  b = e - (g = (f = b.b) + 1);
  if (b <= 0) goto B_a;
  var h:int = memcpy(calloc(b + 1, 1), g, b);
  (h + b)[0]:byte = 0;
  0[16550]:int = 0;
  b = strtoul(h, c + 12, 10);
  if (h == (i = c[3])) goto B_e;
  if (i[0]) goto B_e;
  if (66200[0]:int != 68) goto B_d;
  label B_e:
  pm_diagnostic_list_append(a + 244, g, e, 118);
  b = -1;
  label B_d:
  free(h);
  d.d = b;
  d.c = e;
  d.b = f;
  d.a = 109;
  stack_pointer = c + 16;
  return d;
  label B_c:
  assert_fail(22429, 13402, 4656, 11469);
  unreachable;
  label B_b:
  c[0] = 16;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  assert_fail(26373, 13402, 919, 6423);
  return unreachable;
}

function pm_float_node_rational_imaginary_create(a:{ a:int, b:int, c:int }):int {
  var d:int;
  var b:int_ptr = stack_pointer - 32;
  stack_pointer = b;
  if (a.a != 47) goto B_b;
  var c:{ a:int, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(c)) goto B_a;
  b[4] = 46;
  b[5] = (d = a.b);
  b[6] = (a = a.c) + -1;
  c.d = pm_float_node_rational_create(b + 16);
  c.c = a;
  c.b = d;
  c.a = 1073741892;
  stack_pointer = b + 32;
  return c;
  label B_b:
  assert_fail(15301, 13402, 3042, 9718);
  unreachable;
  label B_a:
  b[0] = 16;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_float_node_rational_create(a:{ a:int, b:int, c:int }):int {
  var b:int_ptr = stack_pointer - 32;
  stack_pointer = b;
  if (a.a != 46) goto B_c;
  var c:{ a:int, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(c)) goto B_b;
  var d:int = a.c;
  var e:int = a.b;
  a = calloc(1, 12);
  if (eqz(a)) goto B_a;
  a.b = e;
  a.a = 1073741878;
  c.d = a;
  c.c = d;
  c.b = e;
  c.a = 1073741945;
  a.c = d + -1;
  stack_pointer = b + 32;
  return c;
  label B_c:
  assert_fail(17469, 13402, 3017, 9965);
  unreachable;
  label B_b:
  b[0] = 16;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_a:
  b[4] = 12;
  fprintf(rodata[15455]:int, 31876, b + 16);
  abort();
  return unreachable;
}

function pm_float_node_imaginary_create(a:{ a:int, b:int, c:int }):int {
  var b:int_ptr = stack_pointer - 32;
  stack_pointer = b;
  if (a.a != 45) goto B_c;
  var c:{ a:int, b:int, c:int, d:int } = calloc(1, 16);
  if (eqz(c)) goto B_b;
  var d:int = a.c;
  var e:int = a.b;
  a = calloc(1, 12);
  if (eqz(a)) goto B_a;
  a.b = e;
  a.a = 1073741878;
  c.d = a;
  c.c = d;
  c.b = e;
  c.a = 1073741892;
  a.c = d + -1;
  stack_pointer = b + 32;
  return c;
  label B_c:
  assert_fail(15219, 13402, 2993, 9800);
  unreachable;
  label B_b:
  b[0] = 16;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_a:
  b[4] = 12;
  fprintf(rodata[15455]:int, 31876, b + 16);
  abort();
  return unreachable;
}

function pm_float_node_create(a:int):int {
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  if (a[0]:int != 44) goto B_b;
  var c:int = calloc(1, 12);
  if (eqz(c)) goto B_a;
  c[0]:int = 1073741878;
  c[1]:long@4 = a[1]:long@4;
  stack_pointer = b + 16;
  return c;
  label B_b:
  assert_fail(15913, 13402, 2976, 10097);
  unreachable;
  label B_a:
  b[0] = 12;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function pm_range_node_create(a:int, b:ushort_ptr, c:int, d:ushort_ptr):int {
  var f:int_ptr;
  var g:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = pm_check_value_expression(b);
  if (eqz(f)) goto B_a;
  pm_diagnostic_list_append(a + 244, f[1], (f + 8)[0]:int, 208);
  label B_a:
  f = pm_check_value_expression(d);
  if (eqz(f)) goto B_b;
  pm_diagnostic_list_append(a + 244, f[1], (f + 8)[0]:int, 208);
  label B_b:
  a = calloc(1, 28);
  if (eqz(a)) goto B_c;
  f = c[0]:int;
  f = f == 32 | f == 157;
  if (eqz(b)) goto B_e;
  g = b[0];
  if (g == 106) goto B_e;
  if (g != 82) goto B_d;
  label B_e:
  if (eqz(d)) goto B_f;
  g = d[0];
  if (g == 106) goto B_f;
  if (g != 82) goto B_d;
  label B_f:
  f = f | 16384;
  label B_d:
  a[4]:int = d;
  a[3]:int = b;
  a[1]:short = f;
  a[0]:short = 120;
  a[5]:long@4 = c[1]:long@4;
  a[2]:int = select_if(d, c, d)[2]:int;
  a[1]:int = select_if(b, c, b)[1]:int;
  stack_pointer = e + 16;
  return a;
  label B_c:
  e[0] = 28;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_hash_node_create(a:int_ptr, b:int_ptr):int {
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  if (eqz(b)) goto B_b;
  var d:int_ptr = calloc(1, 40);
  if (eqz(d)) goto B_a;
  d[0] = 1073741889;
  d[9] = (a = a[40]);
  d[8] = a;
  d[4] = (a = b[2]);
  d[3] = (b = b[1]);
  d[2] = a;
  d[1] = b;
  stack_pointer = c + 16;
  return d;
  label B_b:
  assert_fail(17061, 13402, 3362, 10421);
  unreachable;
  label B_a:
  c[0] = 40;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_multi_target_node_create():int {
  var b:short_ptr;
  var a:int_ptr = stack_pointer - 16;
  stack_pointer = a;
  b = calloc(1, 56);
  if (b) goto B_a;
  a[0] = 56;
  fprintf(rodata[15455]:int, 31876, a);
  abort();
  unreachable;
  label B_a:
  b[0] = 103;
  stack_pointer = a + 16;
  return b;
}

function pm_multi_target_node_targets_append(a:int, b:int_ptr, c:{ a:ushort, b:int }) {
  var d:int;
  d = c.a;
  if (d == 136) goto B_c;
  if (d != 70) goto B_b;
  label B_c:
  if (b[6]) goto B_d;
  b[6] = c;
  goto B_a;
  label B_d:
  pm_diagnostic_list_append(a + 244, c.b, (c + 8)[0]:int, 142);
  pm_node_list_append(b + 28, c);
  goto B_a;
  label B_b:
  if (b[6]) goto B_e;
  pm_node_list_append(b + 12, c);
  goto B_a;
  label B_e:
  pm_node_list_append(b + 28, c);
  label B_a:
  d = c.b;
  a = b[1];
  if (eqz(a)) goto B_g;
  if (a <= d) goto B_f;
  label B_g:
  b[1] = d;
  label B_f:
  c = (c + 8)[0]:int;
  d = (b + 8)[0]:int;
  if (eqz(d)) goto B_i;
  if (d >= c) goto B_h;
  label B_i:
  b[2] = c;
  label B_h:
}

function pm_parser_local_add_location(a:int_ptr, b:int, c:int):int {
  b = pm_constant_pool_insert_shared(a + 292, b, c - b);
  if (eqz(b)) goto B_a;
  if (pm_constant_id_list_includes(a[64], b)) goto B_a;
  pm_constant_id_list_append(a[64], b);
  label B_a:
  return b;
}

function parse_assignment_values(a:int_ptr, b:int, c:int, d:int):int {
  var h:int_ptr;
  var f:int_ptr;
  var g:int;
  var i:int;
  var e:int_ptr = stack_pointer - 64;
  stack_pointer = e;
  if (a[45] != 161) goto B_g;
  parser_lex(a);
  f = (a + 176)[0]:int;
  g = (a + 172)[0]:int;
  h = parse_expression(a, c, 0, 92);
  d = pm_check_value_expression(h);
  if (eqz(d)) goto B_h;
  pm_diagnostic_list_append(a + 244, d[1]:int, (d + 8)[0]:int, 208);
  label B_h:
  d = calloc(1, 24);
  if (eqz(d)) goto B_e;
  i = f;
  if (eqz(h)) goto B_i;
  i = (h + 8)[0]:int;
  label B_i:
  d[5]:int = h;
  d[4]:int = f;
  d[3]:int = g;
  d[2]:int = i;
  d[1]:int = g;
  d[0]:short = 136;
  goto B_f;
  label B_g:
  d = parse_expression(a, c, select_if(d, b < 12, b == 18), 85);
  h = pm_check_value_expression(d);
  if (eqz(h)) goto B_f;
  pm_diagnostic_list_append(a + 244, h[1], (h + 8)[0]:int, 208);
  label B_f:
  if (b != 2) goto B_d;
  if (d[0]:ushort == 136) goto B_j;
  b = a[45];
  if (b != 27) goto B_c;
  label B_j:
  h = a[40];
  b = calloc(1, 40);
  if (eqz(b)) goto B_k;
  b[2]:int = h;
  b[0]:int = 1073741830;
  b[1]:int = d[1]:int;
  f = b + 12;
  pm_node_list_append(f, d);
  b[2]:int = (d + 8)[0]:int;
  h = d[0]:ushort;
  if (h == 6) goto B_m;
  if (h == 65) goto B_m;
  if (h == 120) goto B_m;
  if ((d + 3)[0]:ubyte & 64) goto B_l;
  label B_m:
  b[1]:short = b[1]:ushort & 49151;
  label B_l:
  if (h != 136) goto B_n;
  b[1]:short = b[1]:ushort | 1;
  label B_n:
  if (a[45] != 27) goto B_b;
  var j:int = a + 244;
  loop L_o {
    parser_lex(a);
    if (a[45] != 161) goto B_s;
    parser_lex(a);
    g = a[44];
    i = a[43];
    h = parse_expression(a, c, 0, 92);
    d = pm_check_value_expression(h);
    if (eqz(d)) goto B_t;
    pm_diagnostic_list_append(j, d[1]:int, (d + 8)[0]:int, 208);
    label B_t:
    d = calloc(1, 24);
    if (eqz(d)) goto B_q;
    var k:int = g;
    if (eqz(h)) goto B_u;
    k = (h + 8)[0]:int;
    label B_u:
    d[5]:int = h;
    d[4]:int = g;
    d[3]:int = i;
    d[2]:int = k;
    d[1]:int = i;
    d[0]:short = 136;
    goto B_r;
    label B_s:
    d = parse_expression(a, c, 0, 20);
    h = pm_check_value_expression(d);
    if (eqz(h)) goto B_r;
    pm_diagnostic_list_append(j, h[1], (h + 8)[0]:int, 208);
    label B_r:
    if (f[0]) goto B_v;
    if (b[6]:int) goto B_v;
    b[1]:int = d[1]:int;
    label B_v:
    pm_node_list_append(f, d);
    b[2]:int = (d + 8)[0]:int;
    h = d[0]:ushort;
    if (h == 6) goto B_x;
    if (h == 65) goto B_x;
    if (h == 120) goto B_x;
    if ((d + 3)[0]:ubyte & 64) goto B_w;
    label B_x:
    b[1]:short = b[1]:ushort & 49151;
    label B_w:
    if (h == 136) goto B_y;
    if (h == 101) goto B_b;
    goto B_p;
    label B_y:
    b[1]:short = b[1]:ushort | 1;
    goto B_p;
    label B_q:
    e[8] = 24;
    fprintf(rodata[15455]:int, 31876, e + 32);
    abort();
    unreachable;
    label B_p:
    if (a[45] == 27) continue L_o;
    goto B_b;
  }
  label B_k:
  e[4] = 40;
  fprintf(rodata[15455]:int, 31876, e + 16);
  abort();
  unreachable;
  label B_e:
  e[0] = 24;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_d:
  b = a[45];
  label B_c:
  if (b == 90) goto B_z;
  b = d;
  goto B_b;
  label B_z:
  h = (a + 188)[0]:int;
  f = (a + 184)[0]:int;
  parser_lex(a);
  a = parse_expression(a, c, 0, 185);
  b = calloc(1, 28);
  if (eqz(b)) goto B_a;
  b[6]:int = a;
  b[5]:int = h;
  b[4]:int = f;
  b[3]:int = d;
  b[0]:short = 126;
  b[1]:int = d[1]:int;
  b[2]:int = (a + 8)[0]:int;
  label B_b:
  stack_pointer = e + 64;
  return b;
  label B_a:
  e[12] = 28;
  fprintf(rodata[15455]:int, 31876, e + 48);
  abort();
  return unreachable;
}

function parse_write(a:int_ptr, b:int, c:int, d:int_ptr):int {
  var f:int;
  var j:int;
  var k:int;
  var l:int;
  var h:int;
  var g:int;
  var i:int;
  var m:long;
  var e:int = stack_pointer - 160;
  stack_pointer = e;
  f = b[0]:ushort;
  br_table[B_s, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_m, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_v, B_l, B_l, B_l, B_l, B_l, B_l, B_u, B_l, B_l, B_l, B_l, B_t, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_r, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_p, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_q, B_l, B_l, B_l, B_l, B_l, B_l, B_w, B_l, B_o, B_l, B_l, B_l, B_l, B_l, B_s, ..B_n](
    f + -10);
  label B_w:
  pm_node_destroy(a, d);
  goto B_k;
  label B_v:
  f = calloc(1, 36);
  if (eqz(f)) goto B_i;
  g = (b + 8)[0]:int;
  h = (d + 8)[0]:int;
  i = b[3]:int;
  j = b[1]:int;
  k = 0;
  l = 0;
  if (c[0]:int == 3) goto B_x;
  l = c[2]:int;
  k = c[1]:int;
  label B_x:
  f[8]:int = l;
  f[7]:int = k;
  f[6]:int = d;
  f[5]:int = g;
  f[4]:int = j;
  f[3]:int = i;
  f[2]:int = h;
  f[1]:int = j;
  f[0]:short = 32;
  pm_node_destroy(a, b);
  goto B_j;
  label B_u:
  f = calloc(1, 28);
  if (eqz(f)) goto B_h;
  k = (d + 8)[0]:int;
  l = b[1]:int;
  a = 0;
  j = 0;
  if (c[0]:int == 3) goto B_y;
  j = c[2]:int;
  a = c[1]:int;
  label B_y:
  f[6]:int = d;
  f[5]:int = j;
  f[4]:int = a;
  f[3]:int = b;
  f[2]:int = k;
  f[1]:int = l;
  f[0]:short = 41;
  goto B_j;
  label B_t:
  f = calloc(1, 36);
  if (eqz(f)) goto B_g;
  l = (d + 8)[0]:int;
  m = b[1]:long@4;
  h = b[3]:int;
  g = b[1]:int;
  j = 0;
  k = 0;
  if (c[0]:int == 3) goto B_z;
  k = c[2]:int;
  j = c[1]:int;
  label B_z:
  f[8]:int = k;
  f[7]:int = j;
  f[6]:int = d;
  f[4]:long@4 = m;
  f[3]:int = h;
  f[2]:int = l;
  f[1]:int = g;
  f[0]:short = 44;
  c = a[65];
  if (eqz(c)) goto B_aa;
  loop L_ca {
    d = c[0]:int;
    if (d > 29) goto B_da;
    d = 1 << d;
    if (d & 335552704) goto B_ba;
    if (d & 537919520) goto B_aa;
    label B_da:
    c = c[1]:int;
    if (c) continue L_ca;
    goto B_aa;
  }
  label B_ba:
  pm_diagnostic_list_append(a + 244, g, l, 210);
  label B_aa:
  pm_node_destroy(a, b);
  goto B_j;
  label B_s:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 211);
  label B_r:
  f = calloc(1, 36);
  if (eqz(f)) goto B_f;
  g = (d + 8)[0]:int;
  j = b[1]:int;
  k = b[0]:ushort;
  if (k == 10) goto B_ha;
  if (k == 109) goto B_fa;
  if (k != 62) goto B_ga;
  label B_ha:
  h = b[3]:int;
  i = j;
  goto B_ea;
  label B_ga:
  assert_fail(26957, 13402, 3235, 11841);
  unreachable;
  label B_fa:
  h = pm_constant_pool_insert_shared(a + 292, j, (b + 8)[0]:int - j);
  i = b[1]:int;
  label B_ea:
  var n:int = (b + 8)[0]:int;
  k = 0;
  l = 0;
  if (c[0]:int == 3) goto B_ia;
  l = c[2]:int;
  k = c[1]:int;
  label B_ia:
  f[8]:int = l;
  f[7]:int = k;
  f[6]:int = d;
  f[5]:int = n;
  f[4]:int = i;
  f[3]:int = h;
  f[2]:int = g;
  f[1]:int = j;
  f[0]:short = 64;
  pm_node_destroy(a, b);
  goto B_j;
  label B_q:
  j = (b + 8)[0]:int;
  if (j - (f = b[1]:int) != 2) goto B_ja;
  if (f[0]:ubyte != 95) goto B_ja;
  k = f[1]:ubyte;
  if (k == 48) goto B_ja;
  if (eqz(pm_is_decimal_digit(k))) goto B_ja;
  e[20]:int = f;
  pm_diagnostic_list_append_format(a + 244, f, j, 158, e + 80);
  label B_ja:
  k = b[2]:int;
  j = b[1]:int;
  l = b[4]:int;
  g = b[3]:int;
  pm_node_destroy(a, b);
  f = calloc(1, 40);
  if (eqz(f)) goto B_e;
  h = (d + 8)[0]:int;
  b = 0;
  a = 0;
  if (c[0]:int == 3) goto B_ka;
  a = c[2]:int;
  b = c[1]:int;
  label B_ka:
  f[9]:int = a;
  f[8]:int = b;
  f[7]:int = d;
  f[6]:int = k;
  f[5]:int = j;
  f[4]:int = l;
  f[3]:int = g;
  f[2]:int = h;
  f[1]:int = j;
  f[0]:short = 96;
  goto B_j;
  label B_p:
  f = calloc(1, 36);
  if (eqz(f)) goto B_d;
  g = (b + 8)[0]:int;
  h = (d + 8)[0]:int;
  i = b[3]:int;
  j = b[1]:int;
  k = 0;
  l = 0;
  if (c[0]:int == 3) goto B_la;
  l = c[2]:int;
  k = c[1]:int;
  label B_la:
  f[8]:int = l;
  f[7]:int = k;
  f[6]:int = d;
  f[5]:int = g;
  f[4]:int = j;
  f[3]:int = i;
  f[2]:int = h;
  f[1]:int = j;
  f[0]:short = 81;
  pm_node_destroy(a, b);
  goto B_j;
  label B_o:
  f = calloc(1, 68);
  if (eqz(f)) goto B_c;
  f[0]:short = 104;
  f[16]:int = d;
  f[1]:int = b[1]:int;
  f[3]:long@4 = b[3]:long@4;
  f[7]:long@4 = b[7]:long@4;
  f[10]:long@4 = b[10]:long@4;
  f[12]:long@4 = b[12]:long@4;
  f[14]:long@4 = c[1]:long@4;
  f[2]:int = (d + 8)[0]:int;
  (f + 20)[0]:long@4 = (b + 20)[0]:long@4;
  (f + 36)[0]:int = (b + 36)[0]:int;
  free(b);
  goto B_j;
  label B_n:
  if (f != 136) goto B_l;
  f = b[5]:int;
  if (eqz(f)) goto B_ma;
  b[5]:int = parse_write(a, f, c, d);
  label B_ma:
  j = calloc(1, 56);
  if (eqz(j)) goto B_b;
  j[0]:short = 103;
  pm_multi_target_node_targets_append(a, j, b);
  f = calloc(1, 68);
  if (eqz(f)) goto B_a;
  f[0]:short = 104;
  f[16]:int = d;
  f[1]:int = j[1]:int;
  f[3]:long@4 = j[3]:long@4;
  f[7]:long@4 = j[7]:long@4;
  f[10]:long@4 = j[10]:long@4;
  f[12]:long@4 = j[12]:long@4;
  f[14]:long@4 = c[1]:long@4;
  f[2]:int = (d + 8)[0]:int;
  (f + 20)[0]:long@4 = (j + 20)[0]:long@4;
  (f + 36)[0]:int = (j + 36)[0]:int;
  free(j);
  goto B_j;
  label B_m:
  j = b[7]:int;
  if (eqz(j)) goto B_na;
  k = (b + 32)[0]:int;
  f = (k + -1)[0]:ubyte;
  if (f == 33) goto B_na;
  if (f == 63) goto B_na;
  if (b[9]:int) goto B_na;
  if (b[11]:int) goto B_na;
  if (b[14]:int) goto B_na;
  if (b[3]:int) goto B_oa;
  e[19]:long = (m = b[7]:long@4);
  pm_parser_local_add_location(a,
                               j = i32_wrap_i64(m),
                               k = i32_wrap_i64(m >> 32L));
  pm_node_destroy(a, b);
  f = pm_local_variable_write_node_create(
        pm_constant_pool_insert_shared(a + 292, j, k - j),
        0,
        d,
        e + 152,
        c);
  pm_refute_numbered_parameter(a, j, k);
  goto B_j;
  label B_oa:
  if (j[0]:ubyte == 95) goto B_pa;
  if (eqz(call_indirect(j, k - j, (a[66])[2]:int))) goto B_na;
  label B_pa:
  b[11]:int = (f = pm_arguments_node_create(a));
  c = f + 12;
  if (f[3]:int) goto B_qa;
  f[1]:int = d[1];
  label B_qa:
  f = f + 8;
  f[0]:int = (d + 8)[0]:int;
  pm_node_list_append(c, d);
  (b + 8)[0]:int = f[0]:int;
  parse_write_name(a, b + 24);
  b[1]:short = b[1]:ushort | 4;
  goto B_k;
  label B_na:
  if (b[4]:int) goto B_ra;
  f = b[7]:int;
  if (eqz(f)) goto B_ra;
  if (f[0]:ubyte != 91) goto B_ra;
  if (((b + 32)[0]:int + -1)[0]:ubyte != 93) goto B_ra;
  f = b[14]:int;
  if (eqz(f)) goto B_sa;
  if (f[0]:ushort != 12) goto B_ra;
  label B_sa:
  f = b[11]:int;
  if (f) goto B_ta;
  b[11]:int = (f = pm_arguments_node_create(a));
  label B_ta:
  c = f + 12;
  if (f[3]:int) goto B_ua;
  f[1]:int = d[1];
  label B_ua:
  (f + 8)[0]:int = (f = d + 8)[0]:int;
  pm_node_list_append(c, d);
  (b + 8)[0]:int = f[0]:int;
  b[6]:int = pm_constant_pool_insert_constant(a + 292, 22981, 3);
  b[1]:short = b[1]:ushort | 4;
  goto B_k;
  label B_ra:
  pm_node_destroy(a, d);
  label B_l:
  pm_diagnostic_list_append(a + 244, c[1]:int, c[2]:int, 212);
  label B_k:
  f = b;
  label B_j:
  stack_pointer = e + 160;
  return f;
  label B_i:
  e[0]:int = 36;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_h:
  e[4]:int = 28;
  fprintf(rodata[15455]:int, 31876, e + 16);
  abort();
  unreachable;
  label B_g:
  e[8]:int = 36;
  fprintf(rodata[15455]:int, 31876, e + 32);
  abort();
  unreachable;
  label B_f:
  e[12]:int = 36;
  fprintf(rodata[15455]:int, 31876, e + 48);
  abort();
  unreachable;
  label B_e:
  e[16]:int = 40;
  fprintf(rodata[15455]:int, 31876, e + 64);
  abort();
  unreachable;
  label B_d:
  e[24]:int = 36;
  fprintf(rodata[15455]:int, 31876, e + 96);
  abort();
  unreachable;
  label B_c:
  e[28]:int = 68;
  fprintf(rodata[15455]:int, 31876, e + 112);
  abort();
  unreachable;
  label B_b:
  e[32]:int = 56;
  fprintf(rodata[15455]:int, 31876, e + 128);
  abort();
  unreachable;
  label B_a:
  e[36]:int = 68;
  fprintf(rodata[15455]:int, 31876, e + 144);
  abort();
  return unreachable;
}

function parse_assignment_value(a:int, b:int_ptr, c:int, d:int_ptr, e:int):int {
  var f:int_ptr = stack_pointer - 16;
  stack_pointer = f;
  b = parse_expression(a, c, select_if(d, b < 12, b == 18), e);
  d = pm_check_value_expression(b);
  if (eqz(d)) goto B_a;
  pm_diagnostic_list_append(a + 244, d[1], (d + 8)[0]:int, 208);
  label B_a:
  if (a[45]:int == 90) goto B_d;
  a = b;
  goto B_c;
  label B_d:
  d = (a + 188)[0]:int;
  e = (a + 184)[0]:int;
  parser_lex(a);
  c = parse_expression(a, c, 0, 185);
  a = calloc(1, 28);
  if (eqz(a)) goto B_b;
  a[6]:int = c;
  a[5]:int = d;
  a[4]:int = e;
  a[3]:int = b;
  a[0]:short = 126;
  a[1]:int = b[1];
  a[2]:int = (c + 8)[0]:int;
  label B_c:
  stack_pointer = f + 16;
  return a;
  label B_b:
  f[0] = 28;
  fprintf(rodata[15455]:int, 31876, f);
  abort();
  return unreachable;
}

function pm_global_variable_and_write_node_create(a:int, b:int, c:int, d:int):int {
  var i:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  if (c[0]:int != 6) goto B_b;
  var f:int = calloc(1, 36);
  if (eqz(f)) goto B_a;
  var g:int = (d + 8)[0]:int;
  var h:int = b[1]:int;
  i = b[0]:ushort;
  if (i == 10) goto B_f;
  if (i == 109) goto B_d;
  if (i != 62) goto B_e;
  label B_f:
  i = b[3]:int;
  goto B_c;
  label B_e:
  assert_fail(26957, 13402, 3235, 11841);
  unreachable;
  label B_d:
  i = pm_constant_pool_insert_shared(a + 292, h, (b + 8)[0]:int - h);
  label B_c:
  f[8]:int = d;
  f[3]:int = i;
  f[2]:int = g;
  f[1]:int = h;
  f[0]:short = 59;
  f[6]:long@4 = c[1]:long@4;
  f[4]:long@4 = b[1]:long@4;
  stack_pointer = e + 16;
  return f;
  label B_b:
  assert_fail(17398, 13402, 3245, 11072);
  unreachable;
  label B_a:
  e[0] = 36;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_class_variable_and_write_node_create(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 6) goto B_b;
  var e:int = calloc(1, 36);
  if (eqz(e)) goto B_a;
  e[8]:int = c;
  e[0]:short = 27;
  e[6]:long@4 = b[1]:long@4;
  e[4]:long@4 = a[1]:long@4;
  e[3]:int = a[3]:int;
  e[1]:int = a[1]:int;
  e[2]:int = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17398, 13402, 2388, 10992);
  unreachable;
  label B_a:
  d[0] = 36;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_constant_path_and_write_node_create(a:int_ptr, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 6) goto B_b;
  var e:int = calloc(1, 28);
  if (eqz(e)) goto B_a;
  e[6]:int = c;
  e[3]:int = a;
  e[0]:short = 36;
  e[4]:long@4 = b[1]:long@4;
  e[1]:int = a[1];
  e[2]:int = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17398, 13402, 2506, 10953);
  unreachable;
  label B_a:
  d[0] = 28;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_constant_and_write_node_create(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 6) goto B_b;
  var e:int = calloc(1, 36);
  if (eqz(e)) goto B_a;
  e[8]:int = c;
  e[0]:short = 33;
  e[6]:long@4 = b[1]:long@4;
  e[4]:long@4 = a[1]:long@4;
  e[3]:int = a[3]:int;
  e[1]:int = a[1]:int;
  e[2]:int = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17398, 13402, 2626, 10889);
  unreachable;
  label B_a:
  d[0] = 36;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_instance_variable_and_write_node_create(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 6) goto B_b;
  var e:int = calloc(1, 36);
  if (eqz(e)) goto B_a;
  e[8]:int = c;
  e[0]:short = 76;
  e[6]:long@4 = b[1]:long@4;
  e[4]:long@4 = a[1]:long@4;
  e[3]:int = a[3]:int;
  e[1]:int = a[1]:int;
  e[2]:int = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17398, 13402, 3701, 11113);
  unreachable;
  label B_a:
  d[0] = 36;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_local_variable_and_write_node_create(a:int, b:int, c:int, d:int, e:int):int {
  var g:int;
  var f:int_ptr = stack_pointer - 16;
  stack_pointer = f;
  g = a[0]:ushort;
  if (g == 19) goto B_d;
  if (g != 94) goto B_c;
  label B_d:
  if (b[0]:int != 6) goto B_b;
  g = calloc(1, 40);
  if (eqz(g)) goto B_a;
  g[9]:int = e;
  g[8]:int = d;
  g[7]:int = c;
  g[0]:short = 91;
  g[5]:long@4 = b[1]:long@4;
  g[3]:long@4 = a[1]:long@4;
  g[1]:int = a[1]:int;
  g[2]:int = (c + 8)[0]:int;
  stack_pointer = f + 16;
  return g;
  label B_c:
  assert_fail(26585, 13402, 4123, 11032);
  unreachable;
  label B_b:
  assert_fail(17398, 13402, 4124, 11032);
  unreachable;
  label B_a:
  f[0] = 40;
  fprintf(rodata[15455]:int, 31876, f);
  abort();
  return unreachable;
}

function pm_call_node_index_p(a:int):int {
  var b:int = 0;
  if (a[4]:int) goto B_a;
  var c:ubyte_ptr = a[7]:int;
  if (eqz(c)) goto B_a;
  if (c[0] != 91) goto B_a;
  if (((a + 32)[0]:int + -1)[0]:ubyte != 93) goto B_a;
  a = a[14]:int;
  if (a) goto B_b;
  return 1;
  label B_b:
  b = a[0]:ushort == 12;
  label B_a:
  return b;
}

function pm_index_and_write_node_create(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 6) goto B_b;
  var e:int = calloc(1, 60);
  if (eqz(e)) goto B_a;
  e[14]:int = c;
  e[0]:short = 72;
  e[12]:long@4 = b[1]:long@4;
  e[11]:int = a[14]:int;
  e[9]:long@4 = a[12]:long@4;
  e[8]:int = a[11]:int;
  e[6]:long@4 = a[9]:long@4;
  e[4]:long@4 = a[4]:long@4;
  e[3]:int = a[3]:int;
  e[1]:int = a[1]:int;
  e[1]:short = a[1]:ushort;
  e[2]:int = (c + 8)[0]:int;
  free(a);
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17398, 13402, 1995, 10858);
  unreachable;
  label B_a:
  d[0] = 60;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_call_node_writable_p(a:int_ptr):int {
  var b:int = 0;
  if (eqz(a[7])) goto B_a;
  var c:int = ((a + 32)[0]:int + -1)[0]:ubyte;
  if (c == 33) goto B_a;
  if (c == 63) goto B_a;
  if (a[9]) goto B_a;
  if (a[11]) goto B_a;
  b = eqz(a[14]);
  label B_a:
  return b;
}

function parse_write_name(a:int, b:int_ptr) {
  var c:int = a + 292;
  var d:{ a:int, b:int } = pm_constant_pool_id_to_constant(c, b[0]);
  a = d.b;
  var e:int = a + 1;
  var f:int = calloc(e, 1);
  if (eqz(f)) goto B_a;
  d = memcpy(f, d.a, a);
  (d + a)[0]:byte = 61;
  b[0] = pm_constant_pool_insert_owned(c, d, e);
  label B_a:
}

function parse_call_operator_write(a:int, b:int_ptr, c:int_ptr) {
  if (eqz(b[11])) goto B_a;
  pm_diagnostic_list_append(a + 244, c[1], c[2], 149);
  pm_node_destroy(a, b[11]);
  b[11] = 0;
  label B_a:
  if (eqz(b[14])) goto B_b;
  pm_diagnostic_list_append(a + 244, c[1], c[2], 150);
  pm_node_destroy(a, b[14]);
  b[14] = 0;
  label B_b:
}

function pm_call_and_write_node_create(a:{ a:int, b:int }, b:int, c:int, d:int):int {
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  if (b[14]:int) goto B_c;
  if (c[0]:int != 6) goto B_b;
  var f:int = calloc(1, 52);
  if (eqz(f)) goto B_a;
  f[12]:int = d;
  f[0]:short = 18;
  f[10]:long@4 = c[1]:long@4;
  f[9]:int = (c = b[6]:int);
  f[6]:long@4 = b[7]:long@4;
  f[4]:long@4 = b[4]:long@4;
  f[3]:int = b[3]:int;
  f[1]:int = b[1]:int;
  f[1]:short = b[1]:ushort;
  f[2]:int = (d + 8)[0]:int;
  d = a + 292;
  a = pm_constant_pool_id_to_constant(d, c);
  c = a.b;
  if (eqz(c)) goto B_e;
  c = 
    pm_constant_pool_insert_owned(d, memcpy(malloc(c = c + -1), a.a, c), c);
  goto B_d;
  label B_e:
  c = pm_constant_pool_insert_constant(d, 32200, 0);
  label B_d:
  f[8]:int = c;
  free(b);
  stack_pointer = e + 16;
  return f;
  label B_c:
  assert_fail(17026, 13402, 1958, 10923);
  unreachable;
  label B_b:
  assert_fail(17398, 13402, 1959, 10923);
  unreachable;
  label B_a:
  e[0] = 52;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_global_variable_or_write_node_create(a:int, b:int, c:int, d:int):int {
  var i:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  if (c[0]:int != 136) goto B_b;
  var f:int = calloc(1, 36);
  if (eqz(f)) goto B_a;
  var g:int = (d + 8)[0]:int;
  var h:int = b[1]:int;
  i = b[0]:ushort;
  if (i == 10) goto B_f;
  if (i == 109) goto B_d;
  if (i != 62) goto B_e;
  label B_f:
  i = b[3]:int;
  goto B_c;
  label B_e:
  assert_fail(26957, 13402, 3235, 11841);
  unreachable;
  label B_d:
  i = pm_constant_pool_insert_shared(a + 292, h, (b + 8)[0]:int - h);
  label B_c:
  f[8]:int = d;
  f[3]:int = i;
  f[2]:int = g;
  f[1]:int = h;
  f[0]:short = 61;
  f[6]:long@4 = c[1]:long@4;
  f[4]:long@4 = b[1]:long@4;
  stack_pointer = e + 16;
  return f;
  label B_b:
  assert_fail(17355, 13402, 3295, 10776);
  unreachable;
  label B_a:
  e[0] = 36;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_class_variable_or_write_node_create(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 136) goto B_b;
  var e:int = calloc(1, 36);
  if (eqz(e)) goto B_a;
  e[8]:int = c;
  e[0]:short = 29;
  e[6]:long@4 = b[1]:long@4;
  e[4]:long@4 = a[1]:long@4;
  e[3]:int = a[3]:int;
  e[1]:int = a[1]:int;
  e[2]:int = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17355, 13402, 2438, 10698);
  unreachable;
  label B_a:
  d[0] = 36;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_constant_path_or_write_node_create(a:int_ptr, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 136) goto B_b;
  var e:int = calloc(1, 28);
  if (eqz(e)) goto B_a;
  e[6]:int = c;
  e[3]:int = a;
  e[0]:short = 39;
  e[4]:long@4 = b[1]:long@4;
  e[1]:int = a[1];
  e[2]:int = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17355, 13402, 2554, 10660);
  unreachable;
  label B_a:
  d[0] = 28;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_constant_or_write_node_create(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 136) goto B_b;
  var e:int = calloc(1, 36);
  if (eqz(e)) goto B_a;
  e[8]:int = c;
  e[0]:short = 35;
  e[6]:long@4 = b[1]:long@4;
  e[4]:long@4 = a[1]:long@4;
  e[3]:int = a[3]:int;
  e[1]:int = a[1]:int;
  e[2]:int = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17355, 13402, 2676, 10598);
  unreachable;
  label B_a:
  d[0] = 36;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_instance_variable_or_write_node_create(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 136) goto B_b;
  var e:int = calloc(1, 36);
  if (eqz(e)) goto B_a;
  e[8]:int = c;
  e[0]:short = 78;
  e[6]:long@4 = b[1]:long@4;
  e[4]:long@4 = a[1]:long@4;
  e[3]:int = a[3]:int;
  e[1]:int = a[1]:int;
  e[2]:int = (c + 8)[0]:int;
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17355, 13402, 3751, 10816);
  unreachable;
  label B_a:
  d[0] = 36;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_local_variable_or_write_node_create(a:int, b:int, c:int, d:int, e:int):int {
  var g:int;
  var f:int_ptr = stack_pointer - 16;
  stack_pointer = f;
  g = a[0]:ushort;
  if (g == 19) goto B_d;
  if (g != 94) goto B_c;
  label B_d:
  if (b[0]:int != 136) goto B_b;
  g = calloc(1, 40);
  if (eqz(g)) goto B_a;
  g[9]:int = e;
  g[8]:int = d;
  g[7]:int = c;
  g[0]:short = 93;
  g[5]:long@4 = b[1]:long@4;
  g[3]:long@4 = a[1]:long@4;
  g[1]:int = a[1]:int;
  g[2]:int = (c + 8)[0]:int;
  stack_pointer = f + 16;
  return g;
  label B_c:
  assert_fail(26585, 13402, 4176, 10737);
  unreachable;
  label B_b:
  assert_fail(17355, 13402, 4177, 10737);
  unreachable;
  label B_a:
  f[0] = 40;
  fprintf(rodata[15455]:int, 31876, f);
  abort();
  return unreachable;
}

function pm_index_or_write_node_create(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (b[0]:int != 136) goto B_b;
  var e:int = calloc(1, 60);
  if (eqz(e)) goto B_a;
  e[14]:int = c;
  e[0]:short = 74;
  e[12]:long@4 = b[1]:long@4;
  e[11]:int = a[14]:int;
  e[9]:long@4 = a[12]:long@4;
  e[8]:int = a[11]:int;
  e[6]:long@4 = a[9]:long@4;
  e[4]:long@4 = a[4]:long@4;
  e[3]:int = a[3]:int;
  e[1]:int = a[1]:int;
  e[1]:short = a[1]:ushort;
  e[2]:int = (c + 8)[0]:int;
  free(a);
  stack_pointer = d + 16;
  return e;
  label B_b:
  assert_fail(17355, 13402, 2139, 10568);
  unreachable;
  label B_a:
  d[0] = 60;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function pm_call_or_write_node_create(a:{ a:int, b:int }, b:int, c:int, d:int):int {
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  if (b[14]:int) goto B_c;
  if (c[0]:int != 136) goto B_b;
  var f:int = calloc(1, 52);
  if (eqz(f)) goto B_a;
  f[12]:int = d;
  f[0]:short = 21;
  f[10]:long@4 = c[1]:long@4;
  f[9]:int = (c = b[6]:int);
  f[6]:long@4 = b[7]:long@4;
  f[4]:long@4 = b[4]:long@4;
  f[3]:int = b[3]:int;
  f[1]:int = b[1]:int;
  f[1]:short = b[1]:ushort;
  f[2]:int = (d + 8)[0]:int;
  d = a + 292;
  a = pm_constant_pool_id_to_constant(d, c);
  c = a.b;
  if (eqz(c)) goto B_e;
  c = 
    pm_constant_pool_insert_owned(d, memcpy(malloc(c = c + -1), a.a, c), c);
  goto B_d;
  label B_e:
  c = pm_constant_pool_insert_constant(d, 32200, 0);
  label B_d:
  f[8]:int = c;
  free(b);
  stack_pointer = e + 16;
  return f;
  label B_c:
  assert_fail(17026, 13402, 2102, 10631);
  unreachable;
  label B_b:
  assert_fail(17355, 13402, 2103, 10631);
  unreachable;
  label B_a:
  e[0] = 52;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_class_variable_operator_write_node_create(a:int, b:int, c:int_ptr, d:int):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 40);
  if (f) goto B_a;
  e[0] = 40;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  var g:int = (d + 8)[0]:int;
  var h:int = b[1]:int;
  var i:int = b[3]:int;
  var j:long = b[1]:long@4;
  f[9]:int =
    pm_constant_pool_insert_shared(a + 292, b = c[1], (b ^ -1) + (c = c[2]));
  f[8]:int = d;
  f[7]:int = c;
  f[6]:int = b;
  f[4]:long@4 = j;
  f[3]:int = i;
  f[2]:int = g;
  f[1]:int = h;
  f[0]:short = 28;
  stack_pointer = e + 16;
  return f;
}

function pm_constant_path_operator_write_node_create(a:int, b:int_ptr, c:int_ptr, d:int):int {
  var f:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 32);
  if (f) goto B_a;
  e[0] = 32;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  var g:int = (d + 8)[0]:int;
  var h:int = b[1];
  f.h =
    pm_constant_pool_insert_shared(a + 292, a = c[1], (a ^ -1) + (c = c[2]));
  f.g = d;
  f.f = c;
  f.e = a;
  f.d = b;
  f.c = g;
  f.b = h;
  f.a = 38;
  stack_pointer = e + 16;
  return f;
}

function pm_constant_operator_write_node_create(a:int, b:int, c:int_ptr, d:int):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 40);
  if (f) goto B_a;
  e[0] = 40;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  var g:int = (d + 8)[0]:int;
  var h:int = b[1]:int;
  var i:int = b[3]:int;
  var j:long = b[1]:long@4;
  f[9]:int =
    pm_constant_pool_insert_shared(a + 292, b = c[1], (b ^ -1) + (c = c[2]));
  f[8]:int = d;
  f[7]:int = c;
  f[6]:int = b;
  f[4]:long@4 = j;
  f[3]:int = i;
  f[2]:int = g;
  f[1]:int = h;
  f[0]:short = 34;
  stack_pointer = e + 16;
  return f;
}

function pm_instance_variable_operator_write_node_create(a:int, b:int, c:int_ptr, d:int):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 40);
  if (f) goto B_a;
  e[0] = 40;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  var g:int = (d + 8)[0]:int;
  var h:int = b[1]:int;
  var i:int = b[3]:int;
  var j:long = b[1]:long@4;
  f[9]:int =
    pm_constant_pool_insert_shared(a + 292, b = c[1], (b ^ -1) + (c = c[2]));
  f[8]:int = d;
  f[7]:int = c;
  f[6]:int = b;
  f[4]:long@4 = j;
  f[3]:int = i;
  f[2]:int = g;
  f[1]:int = h;
  f[0]:short = 77;
  stack_pointer = e + 16;
  return f;
}

function pm_local_variable_operator_write_node_create(a:int, b:int, c:int_ptr, d:int, e:int, f:int):int {
  var h:int;
  var g:int_ptr = stack_pointer - 16;
  stack_pointer = g;
  h = calloc(1, 44);
  if (h) goto B_a;
  g[0] = 44;
  fprintf(rodata[15455]:int, 31876, g);
  abort();
  unreachable;
  label B_a:
  var i:int = (d + 8)[0]:int;
  var j:int = b[1]:int;
  var k:long = b[1]:long@4;
  a = 
    pm_constant_pool_insert_shared(a + 292, b = c[1], (b ^ -1) + (c = c[2]));
  h[10]:int = f;
  h[9]:int = a;
  h[8]:int = e;
  h[7]:int = d;
  h[6]:int = c;
  h[5]:int = b;
  h[3]:long@4 = k;
  h[2]:int = i;
  h[1]:int = j;
  h[0]:short = 92;
  stack_pointer = g + 16;
  return h;
}

function pm_index_operator_write_node_create(a:int, b:int, c:int, d:int):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 64);
  if (f) goto B_a;
  e[0] = 64;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  var g:int = (d + 8)[0]:int;
  var h:int = b[1]:ushort;
  var i:int = b[1]:int;
  var j:int = b[3]:int;
  var k:long = b[4]:long@4;
  var l:long = b[9]:long@4;
  var m:int = b[11]:int;
  var n:long = b[12]:long@4;
  var o:int = b[14]:int;
  a = pm_constant_pool_insert_shared(a + 292,
                                     a = c[1]:int,
                                     (a ^ -1) + c[2]:int);
  f[15]:int = d;
  f[12]:int = a;
  f[11]:int = o;
  f[9]:long@4 = n;
  f[8]:int = m;
  f[6]:long@4 = l;
  f[4]:long@4 = k;
  f[3]:int = j;
  f[2]:int = g;
  f[1]:int = i;
  f[1]:short = h;
  f[0]:short = 73;
  f[13]:long@4 = c[1]:long@4;
  free(b);
  stack_pointer = e + 16;
  return f;
}

function pm_call_operator_write_node_create(a:int, b:int, c:int, d:{ a:int, b:int }):int {
  var n:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  if (b[14]:int) goto B_b;
  var f:int = calloc(1, 56);
  if (eqz(f)) goto B_a;
  var g:int = (d + 8)[0]:int;
  var h:int = b[1]:ushort;
  var i:int = b[1]:int;
  var j:int = b[3]:int;
  var k:long = b[4]:long@4;
  var l:long = b[7]:long@4;
  var m:int = b[6]:int;
  a = a + 292;
  n = 
    pm_constant_pool_insert_shared(a, n = c[1]:int, (n ^ -1) + c[2]:int);
  f[13]:int = d;
  f[10]:int = n;
  f[9]:int = m;
  f[6]:long@4 = l;
  f[4]:long@4 = k;
  f[3]:int = j;
  f[2]:int = g;
  f[1]:int = i;
  f[1]:short = h;
  f[0]:short = 20;
  f[11]:long@4 = c[1]:long@4;
  d = pm_constant_pool_id_to_constant(a, m);
  c = d.b;
  if (eqz(c)) goto B_d;
  c = 
    pm_constant_pool_insert_owned(a, memcpy(malloc(c = c + -1), d.a, c), c);
  goto B_c;
  label B_d:
  c = pm_constant_pool_insert_constant(a, 32200, 0);
  label B_c:
  f[8]:int = c;
  free(b);
  stack_pointer = e + 16;
  return f;
  label B_b:
  assert_fail(17026, 13402, 2030, 10533);
  unreachable;
  label B_a:
  e[0] = 56;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function parse_regular_expression_named_captures(a:int, b:int_ptr, c:int):int {
  var l:int;
  var n:int;
  var o:int;
  var d:int = stack_pointer - 96;
  stack_pointer = d;
  (d + 88)[0]:int = 0;
  d[10]:long = 0L;
  if (
    eqz(pm_regexp_named_capture_group_names(pm_string_source(b),
                                            pm_string_length(b),
                                            d + 80,
                                            a[358]:ubyte,
                                            a[66]:int))) goto B_d;
  if (eqz(d[20]:int)) goto B_d;
  (d + 64 + 8)[0]:int = 0;
  d[8]:long = 0L;
  var e:int = a + 244;
  var f:int = a + 292;
  var g:int = 0;
  var h:int = 0;
  loop L_e {
    var i:int = d[22]:int + h * 12;
    var j:int = pm_string_source(i);
    var k:int = pm_string_length(i);
    if (eqz(k)) goto B_f;
    if (eqz(a[358]:ubyte)) goto B_h;
    l = call_indirect(j, a[41]:int - j, (a[66]:int)[1]:int);
    if (l) goto B_g;
    l = 1;
    i = j[0]:byte;
    if (i == 95) goto B_g;
    if (i > -1) goto B_f;
    l = call_indirect(j, a[41]:int - j, (a[66]:int)[0]:int);
    if (l) goto B_g;
    goto B_f;
    label B_h:
    i = j[0]:ubyte;
    l = i32_extend8_s(i);
    if (l < 0) goto B_i;
    l = ((32208 + i)[0]:ubyte | l == 95) & 1;
    if (l) goto B_g;
    goto B_f;
    label B_i:
    pm_encoding_utf_8_alpha(j, a[41]:int - j);
    l = 1;
    label B_g:
    var m:int = j + k;
    i = j + l;
    if (l >= k) goto B_j;
    loop L_k {
      if (eqz(a[358]:ubyte)) goto B_m;
      l = call_indirect(i, a[41]:int - i, (a[66]:int)[2]:int);
      if (l) goto B_l;
      l = 1;
      n = i[0]:byte;
      if (n == 95) goto B_l;
      if (n > -1) goto B_j;
      l = call_indirect(i, a[41]:int - i, (a[66]:int)[0]:int);
      if (l) goto B_l;
      goto B_j;
      label B_m:
      o = i[0]:ubyte;
      n = i32_extend8_s(o);
      if (n < 0) goto B_n;
      l = 1;
      if (n == 95) goto B_l;
      l = (32208 + o)[0]:ubyte >> 1 & 1;
      if (l) goto B_l;
      goto B_j;
      label B_n:
      pm_encoding_utf_8_alnum(i, a[41]:int - i);
      l = 1;
      label B_l:
      i = i + l;
      if (i < m) continue L_k;
    }
    label B_j:
    if (i != m) goto B_f;
    if (b[2] != 1) goto B_p;
    l = pm_constant_pool_insert_shared(f, j, k);
    if (k != 2) goto B_o;
    if (j[0]:ubyte != 95) goto B_o;
    i = j[1]:ubyte;
    if (i == 48) goto B_o;
    if (eqz(pm_is_decimal_digit(i))) goto B_o;
    d[8]:int = j;
    pm_diagnostic_list_append_format(e, j, m, 158, d + 32);
    goto B_o;
    label B_p:
    i = c[3]:int;
    m = (i + 8)[0]:int;
    i = i[1]:int;
    l = malloc(k);
    if (eqz(l)) goto B_c;
    l = pm_constant_pool_insert_owned(f, memcpy(l, j, k), k);
    if (k != 2) goto B_q;
    if (j[0]:ubyte != 95) goto B_q;
    j = j[1]:ubyte;
    if (j == 48) goto B_q;
    if (eqz(pm_is_decimal_digit(j))) goto B_q;
    j = c[3]:int;
    n = (j + 8)[0]:int;
    d[12]:int = (j = j[1]:int);
    pm_diagnostic_list_append_format(e, j, n, 158, d + 48);
    label B_q:
    j = i;
    label B_o:
    if (eqz(l)) goto B_f;
    if (pm_constant_id_list_includes(d + 64, l)) goto B_f;
    pm_constant_id_list_append(d + 64, l);
    if (g) goto B_r;
    g = calloc(1, 28);
    if (eqz(g)) goto B_b;
    g[3]:int = c;
    g[0]:short = 100;
    g[1]:long@4 = c[1]:long@4;
    label B_r:
    o = 0;
    n = 0;
    i = a[64]:int;
    if (eqz(i)) goto B_t;
    n = 0;
    loop L_u {
      if (eqz(pm_constant_id_list_includes(i, l))) goto B_v;
      o = n;
      goto B_s;
      label B_v:
      if (i[16]:ubyte) goto B_w;
      n = n + 1;
      i = i[3]:int;
      if (i) continue L_u;
      label B_w:
    }
    n = a[64]:int;
    label B_t:
    if (pm_constant_id_list_includes(n, l)) goto B_s;
    pm_constant_id_list_append(a[64]:int, l);
    label B_s:
    i = calloc(1, 20);
    if (eqz(i)) goto B_a;
    i[4]:int = o;
    i[3]:int = l;
    i[2]:int = m;
    i[1]:int = j;
    i[0]:short = 95;
    pm_node_list_append(g + 16, i);
    label B_f:
    h = h + 1;
    if (h < d[20]:int) continue L_e;
  }
  c = select_if(g, c, g);
  pm_constant_id_list_free(d + 64);
  label B_d:
  pm_string_list_free(d + 80);
  stack_pointer = d + 96;
  return c;
  label B_c:
  abort();
  unreachable;
  label B_b:
  d[0]:int = 28;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_a:
  d[4]:int = 20;
  fprintf(rodata[15455]:int, 31876, d + 16);
  abort();
  return unreachable;
}

function pm_call_node_shorthand_create(a:int, b:{ a:ushort, b:int }, c:{ a:int, b:int, c:int }, d:int):int {
  var f:int;
  var h:int;
  var j:int;
  var i:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = pm_check_value_expression(b);
  if (eqz(f)) goto B_a;
  pm_diagnostic_list_append(a + 244, f[1]:int, (f + 8)[0]:int, 208);
  label B_a:
  var g:int = b.a;
  f = calloc(1, 60);
  if (eqz(f)) goto B_b;
  f[0]:short = 19;
  f[1]:int = b.b;
  f[1]:short = (h = ((g & 65535) == 131) << 3);
  i = d[5]:int;
  if (eqz(i)) goto B_d;
  g = (i + 8)[0]:int;
  if (eqz(d[3]:int)) goto B_c;
  j = (d + 16)[0]:int;
  g = select_if(j, g, j > g);
  goto B_c;
  label B_d:
  if (eqz(d[3]:int)) goto B_e;
  g = (d + 16)[0]:int;
  goto B_c;
  label B_e:
  g = d[2]:int;
  if (eqz(g)) goto B_f;
  g = (g + 8)[0]:int;
  goto B_c;
  label B_f:
  g = (d + 16)[0]:int;
  label B_c:
  f[3]:int = b;
  f[2]:int = g;
  b = 0;
  g = 0;
  j = c.a;
  if (j == 3) goto B_g;
  g = c.c;
  b = c.b;
  label B_g:
  f[4]:int = b;
  f[14]:int = i;
  (f + 20)[0]:int = g;
  f[9]:long@4 = d[0]:long@4;
  f[11]:int = d[2]:int;
  f[12]:long@4 = d[3]:long@4;
  if (j != 7) goto B_h;
  f[1]:short = h | 1;
  label B_h:
  f[6]:int = pm_constant_pool_insert_constant(a + 292, 8404, 4);
  stack_pointer = e + 16;
  return f;
  label B_b:
  e[0] = 60;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  return unreachable;
}

function pm_call_node_call_create(a:int, b:{ a:ushort, b:int }, c:{ a:int, b:int, c:int }, d:{ a:int, b:int, c:int }, e:int):int {
  var g:int;
  var i:int;
  var k:int;
  var j:int;
  var l:int;
  var f:int_ptr = stack_pointer - 16;
  stack_pointer = f;
  g = pm_check_value_expression(b);
  if (eqz(g)) goto B_a;
  pm_diagnostic_list_append(a + 244, g[1]:int, (g + 8)[0]:int, 208);
  label B_a:
  var h:int = b.a;
  g = calloc(1, 60);
  if (eqz(g)) goto B_b;
  g[0]:short = 19;
  g[1]:int = b.b;
  g[1]:short = (i = ((h & 65535) == 131) << 3);
  j = e[5]:int;
  if (eqz(j)) goto B_d;
  h = (j + 8)[0]:int;
  if (eqz(e[3]:int)) goto B_c;
  k = (e + 16)[0]:int;
  h = select_if(k, h, k > h);
  goto B_c;
  label B_d:
  if (eqz(e[3]:int)) goto B_e;
  h = (e + 16)[0]:int;
  goto B_c;
  label B_e:
  h = e[2]:int;
  if (eqz(h)) goto B_f;
  h = (h + 8)[0]:int;
  goto B_c;
  label B_f:
  h = (e + 16)[0]:int;
  label B_c:
  if (h) goto B_g;
  h = d.c;
  label B_g:
  g[3]:int = b;
  g[2]:int = h;
  b = 0;
  h = 0;
  k = 0;
  l = c.a;
  if (l == 3) goto B_h;
  k = c.c;
  h = c.b;
  label B_h:
  g[4]:int = h;
  (g + 20)[0]:int = k;
  h = 0;
  if (d.a == 3) goto B_i;
  h = d.c;
  b = d.b;
  label B_i:
  g[7]:int = b;
  g[14]:int = j;
  (g + 32)[0]:int = h;
  g[9]:long@4 = e[0]:long@4;
  g[11]:int = e[2]:int;
  g[12]:long@4 = e[3]:long@4;
  if (l != 7) goto B_j;
  g[1]:short = i | 1;
  label B_j:
  g[6]:int = pm_constant_pool_insert_shared(a + 292, e = d.b, d.c - e);
  stack_pointer = f + 16;
  return g;
  label B_b:
  f[0] = 60;
  fprintf(rodata[15455]:int, 31876, f);
  abort();
  return unreachable;
}

function pm_until_node_modifier_create(a:long_ptr@4, b:int, c:int_ptr, d:int):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 36);
  if (f) goto B_a;
  e[0] = 36;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  f[8]:int = c;
  f[7]:int = b;
  f[1]:short = d;
  f[0]:short = 144;
  f[3]:long@4 = a[1];
  f[1]:int = c[1];
  f[2]:int = (b + 8)[0]:int;
  stack_pointer = e + 16;
  return f;
}

function pm_while_node_modifier_create(a:long_ptr@4, b:int, c:int_ptr, d:int):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 36);
  if (f) goto B_a;
  e[0] = 36;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  f[8]:int = c;
  f[7]:int = b;
  f[1]:short = d;
  f[0]:short = 146;
  f[3]:long@4 = a[1];
  f[1]:int = c[1];
  f[2]:int = (b + 8)[0]:int;
  stack_pointer = e + 16;
  return f;
}

function pm_if_node_ternary_create(a:int, b:int_ptr, c:long_ptr@4, d:int, e:int_ptr, f:int):int {
  var h:{ a:short, b:int, c:int }
  var i:int;
  var g:int_ptr = stack_pointer - 64;
  stack_pointer = g;
  h = pm_check_value_expression(b);
  if (eqz(h)) goto B_a;
  pm_diagnostic_list_append(a + 244, h.b, (h + 8)[0]:int, 208);
  label B_a:
  pm_conditional_predicate(b);
  h = calloc(1, 24);
  if (eqz(h)) goto B_e;
  h.a = 137;
  h.c = (i = a[40]:int);
  h.b = d[1]:int;
  var j:int = h + 12;
  var k:int = (d + 8)[0]:int;
  if (k <= i) goto B_f;
  h.c = k;
  label B_f:
  pm_node_list_append(j, d);
  d[1]:short = d[1]:ushort | 32768;
  d = calloc(1, 24);
  if (eqz(d)) goto B_d;
  d[0]:short = 137;
  d[2]:int = (a = a[40]:int);
  d[1]:int = f[1]:int;
  i = d + 12;
  j = (f + 8)[0]:int;
  if (j <= a) goto B_g;
  d[2]:int = j;
  label B_g:
  pm_node_list_append(i, f);
  f[1]:short = f[1]:ushort | 32768;
  a = calloc(1, 32);
  if (eqz(a)) goto B_c;
  a[5]:int = d;
  a[0]:short = 47;
  a[4]:int = e[2];
  a[3]:int = (e = e[1]);
  a[2]:int = d[2]:int;
  a[1]:int = e;
  d = calloc(1, 48);
  if (eqz(d)) goto B_b;
  d[9]:int = a;
  d[8]:int = h;
  d[5]:int = b;
  d[0]:int = -2147483581;
  d[6]:long@4 = c[1];
  d[2]:int = f[2]:int;
  d[1]:int = b[1];
  stack_pointer = g + 64;
  return d;
  label B_e:
  g[0] = 24;
  fprintf(rodata[15455]:int, 31876, g);
  abort();
  unreachable;
  label B_d:
  g[4] = 24;
  fprintf(rodata[15455]:int, 31876, g + 16);
  abort();
  unreachable;
  label B_c:
  g[8] = 32;
  fprintf(rodata[15455]:int, 31876, g + 32);
  abort();
  unreachable;
  label B_b:
  g[12] = 48;
  fprintf(rodata[15455]:int, 31876, g + 48);
  abort();
  return unreachable;
}

function pm_call_node_aref_create(a:int, b:{ a:ushort, b:int }, c:int):int {
  var e:int;
  var g:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  e = pm_check_value_expression(b);
  if (eqz(e)) goto B_a;
  pm_diagnostic_list_append(a + 244, e[1]:int, (e + 8)[0]:int, 208);
  label B_a:
  var f:int = b.a;
  e = calloc(1, 60);
  if (eqz(e)) goto B_b;
  e[0]:short = 19;
  e[1]:int = b.b;
  e[1]:short = ((f & 65535) == 131) << 3;
  g = c[5]:int;
  if (eqz(g)) goto B_d;
  f = (g + 8)[0]:int;
  if (eqz(c[3]:int)) goto B_c;
  var h:int = (c + 16)[0]:int;
  f = select_if(h, f, h > f);
  goto B_c;
  label B_d:
  if (eqz(c[3]:int)) goto B_e;
  f = (c + 16)[0]:int;
  goto B_c;
  label B_e:
  f = c[2]:int;
  if (eqz(f)) goto B_f;
  f = (f + 8)[0]:int;
  goto B_c;
  label B_f:
  f = (c + 16)[0]:int;
  label B_c:
  e[3]:int = b;
  e[2]:int = f;
  e[14]:int = g;
  e[7]:int = c[0]:int;
  e[9]:long@4 = c[0]:long@4;
  e[11]:int = c[2]:int;
  e[12]:long@4 = c[3]:long@4;
  (e + 32)[0]:int = (c + 16)[0]:int;
  e[6]:int = pm_constant_pool_insert_constant(a + 292, 15106, 2);
  stack_pointer = d + 16;
  return e;
  label B_b:
  d[0] = 60;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function parse_block(a:int):int {
  var i:int;
  var l:int;
  var m:int;
  var b:int = stack_pointer - 80;
  stack_pointer = b;
  var c:int = (a + 176)[0]:int;
  var d:int = (a + 172)[0]:int;
  var e:int = a[42]:int;
  if (a[45]:int != 121) goto B_a;
  parser_lex(a);
  label B_a:
  var f:int = a[87]:int;
  var g:int = 0;
  a[87]:int = 0;
  var h:int = a + 20;
  pm_state_stack_push(h, 0);
  i = malloc(20);
  if (eqz(i)) goto B_b;
  i[17]:short@1 = 0;
  i[0]:long@4 = 0L;
  i[16]:byte = 0;
  (i + 19)[0]:byte = 0;
  (i + 8)[0]:int = 0;
  i[3]:int = a[64]:int;
  pm_constant_id_list_init(i);
  a[64]:int = i;
  label B_b:
  var j:int_ptr = a[45]:int;
  i = j;
  var k:int = 0;
  if (j != 133) goto B_g;
  parser_lex(a);
  (a[64]:int)[17]:byte = 1;
  (b + 64 + 8)[0]:int = ((i = a + 168) + 8)[0]:int;
  b[8]:long = i[0]:long@4;
  if (a[45]:int != 133) goto B_k;
  g = calloc(1, 44);
  if (eqz(g)) goto B_j;
  g[0]:short = 16;
  a[356]:byte = 1;
  g[8]:int = (k = select_if(0, b[18]:int, i = b[16]:int == 3));
  g[7]:int = (i = select_if(0, b[17]:int, i));
  g[2]:int = k;
  g[1]:int = i;
  goto B_i;
  label B_k:
  g = parse_block_parameters(a, 1, b + 64, 0);
  i = a[45]:int;
  if (i != 121) goto B_l;
  parser_lex(a);
  i = a[45]:int;
  label B_l:
  a[356]:byte = 1;
  if (i == 133) goto B_i;
  pm_diagnostic_list_append(a + 244, i = a[44]:int, i, 31);
  a[42]:int = 2;
  a[43]:int = i;
  goto B_h;
  label B_j:
  b[12]:int = 44;
  fprintf(rodata[15455]:int, 31876, b + 48);
  abort();
  unreachable;
  label B_i:
  parser_lex(a);
  i = a[42]:int;
  br_table[B_h, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_h, ..B_m](
    i + -125);
  label B_m:
  if (i != 2) goto B_f;
  label B_h:
  (g + 8)[0]:int = (i = a[44]:int);
  g[9]:int = a[43]:int;
  (g + 40)[0]:int = i;
  i = a[45]:int;
  k = (a[64]:int)[0]:int;
  label B_g:
  if (i != 121) goto B_n;
  parser_lex(a);
  label B_n:
  i = a[45]:int;
  if (e != 14) goto B_p;
  e = 0;
  if (i == 15) goto B_r;
  e = parse_statements(a, 1);
  if (a[45]:int != 15) goto B_q;
  label B_r:
  parser_lex(a);
  goto B_o;
  label B_q:
  pm_diagnostic_list_append(a + 244, i = a[44]:int, i, 32);
  a[42]:int = 2;
  a[43]:int = i;
  goto B_o;
  label B_p:
  e = 0;
  br_table[B_aa, B_t, B_aa, B_ba, B_ba, B_ba, B_ba, B_ba, B_aa, ..B_ba](
    i + -73 << 31)
  label B_ba:
  pm_state_stack_push(h, 0);
  e = parse_statements(a, 2);
  pm_state_stack_pop(h);
  i = a[45]:int;
  br_table[B_z, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_z, ..B_u](
    i + -77);
  label B_aa:
  e = 0;
  br_table[B_y, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_y, ..B_u](
    i + -77);
  label B_z:
  if (eqz(e)) goto B_ca;
  if (e[0]:ushort == 137) goto B_w;
  assert_fail(26476, 13402, 12277, 8846);
  unreachable;
  label B_ca:
  i = a[40]:int;
  l = 0;
  e = calloc(1, 44);
  goto B_x;
  label B_y:
  i = a[40]:int;
  l = 0;
  e = calloc(1, 44);
  label B_x:
  m = i;
  if (e) goto B_v;
  goto B_c;
  label B_w:
  i = a[40]:int;
  var n:int = calloc(1, 44);
  if (eqz(n)) goto B_c;
  m = (e + 8)[0]:int;
  l = e;
  e = n;
  label B_v:
  e[5]:int = l;
  e[3]:long@4 = 0L;
  e[2]:int = m;
  e[1]:int = i;
  e[0]:short = 11;
  parse_rescues(a, e, 0);
  i = e[5]:int;
  if (i) goto B_ea;
  i = e[6]:int;
  if (i) goto B_ea;
  i = e[7]:int;
  if (i) goto B_ea;
  i = e[8]:int;
  if (i) goto B_ea;
  i = e[1]:int;
  goto B_da;
  label B_ea:
  i = i[1]:int;
  label B_da:
  e[1]:int = i;
  i = a[45]:int;
  label B_u:
  if (i != 75) goto B_s;
  label B_t:
  parser_lex(a);
  goto B_o;
  label B_s:
  pm_diagnostic_list_append(a + 244, i = a[44]:int, i, 33);
  a[42]:int = 2;
  a[43]:int = i;
  label B_o:
  i = a[64]:int;
  if (j == 133) goto B_fa;
  j = i[18]:ubyte;
  if (eqz(j)) goto B_fa;
  k = a[44]:int;
  g = calloc(1, 16);
  if (eqz(g)) goto B_e;
  g[12]:byte = j;
  g[2]:int = k;
  g[1]:int = d;
  g[0]:short = 108;
  k = j;
  label B_fa:
  j = b + 64 + 8;
  j[0] = (i + 8)[0]:int;
  var o:long = i[0]:long@4;
  a[64]:int = i[3]:int;
  b[8]:long = o;
  free(i);
  pm_state_stack_pop(h);
  a[87]:int = f;
  i = calloc(1, 52);
  if (eqz(i)) goto B_d;
  i[1]:int = d;
  i[0]:short = 14;
  i[3]:long@4 = b[8]:long;
  i[10]:int = c;
  i[9]:int = d;
  i[8]:int = e;
  i[7]:int = g;
  i[6]:int = k;
  i[2]:int = (g = a[44]:int);
  i[12]:int = g;
  i[11]:int = a[43]:int;
  (i + 20)[0]:int = j[0];
  stack_pointer = b + 80;
  return i;
  label B_f:
  assert_fail(17739, 13402, 1607, 4000);
  unreachable;
  label B_e:
  b[0]:int = 16;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_d:
  b[4]:int = 52;
  fprintf(rodata[15455]:int, 31876, b + 16);
  abort();
  unreachable;
  label B_c:
  b[8]:int = 44;
  fprintf(rodata[15455]:int, 31876, b + 32);
  abort();
  return unreachable;
}

function pm_arguments_validate_block(a:int, b:int_ptr, c:int_ptr) {
  var d:int_ptr = b[2];
  if (eqz(d)) goto B_a;
  if (b[3]) goto B_a;
  if (d[3] != 1) goto B_b;
  if ((((d + 20)[0]:int)[0]:int)[0]:ushort == 114) goto B_a;
  label B_b:
  pm_diagnostic_list_append(a + 244, c[1], (c + 8)[0]:int, 19);
  label B_a:
}

function pm_arguments_node_create(a:int_ptr):int {
  var c:{ a:short, b:int, c:int }
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  c = calloc(1, 24);
  if (c) goto B_a;
  b[0] = 24;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_a:
  c.a = 5;
  c.c = (a = a[40]);
  c.b = a;
  stack_pointer = b + 16;
  return c;
}

function pm_match_predicate_node_create(a:int, b:int_ptr, c:int, d:long_ptr@4):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = pm_check_value_expression(b);
  if (eqz(f)) goto B_a;
  pm_diagnostic_list_append(a + 244, f[1]:int, (f + 8)[0]:int, 208);
  label B_a:
  f = calloc(1, 28);
  if (f) goto B_b;
  e[0] = 28;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_b:
  f[4]:int = c;
  f[3]:int = b;
  f[0]:short = 98;
  f[5]:long@4 = d[1];
  f[1]:int = b[1];
  f[2]:int = (c + 8)[0]:int;
  stack_pointer = e + 16;
  return f;
}

function pm_match_required_node_create(a:int, b:int_ptr, c:int, d:long_ptr@4):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = pm_check_value_expression(b);
  if (eqz(f)) goto B_a;
  pm_diagnostic_list_append(a + 244, f[1]:int, (f + 8)[0]:int, 208);
  label B_a:
  f = calloc(1, 28);
  if (f) goto B_b;
  e[0] = 28;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_b:
  f[4]:int = c;
  f[3]:int = b;
  f[0]:short = 99;
  f[5]:long@4 = d[1];
  f[1]:int = b[1];
  f[2]:int = (c + 8)[0]:int;
  stack_pointer = e + 16;
  return f;
}

function pm_symbol_node_label_create(a:int_ptr):int {
  var e:int;
  var c:int;
  var d:int;
  var b:int_ptr = stack_pointer - 32;
  stack_pointer = b;
  c = a[0];
  if (c == 2) goto B_f;
  if (c != 109) goto B_a;
  d = a[2];
  c = a[1];
  a = calloc(1, 48);
  if (eqz(a)) goto B_d;
  a[8] = d;
  a[7] = (e = d + -1);
  a[6] = e;
  a[5] = c;
  a[2] = d;
  a[1] = c;
  a[0] = 1073741964;
  if (e - c <= -1) goto B_c;
  pm_string_shared_init(a + 36, c, e);
  goto B_e;
  label B_f:
  c = a[2];
  d = a[1];
  a = calloc(1, 48);
  if (eqz(a)) goto B_b;
  a[6] = c;
  a[5] = d;
  a[2] = c;
  a[1] = d;
  a[0] = 1073741964;
  label B_e:
  stack_pointer = b + 32;
  return a;
  label B_d:
  b[0] = 48;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_c:
  assert_fail(26257, 13402, 5527, 9937);
  unreachable;
  label B_b:
  b[4] = 48;
  fprintf(rodata[15455]:int, 31876, b + 16);
  abort();
  unreachable;
  label B_a:
  assert_fail(26957, 13402, 5540, 9937);
  return unreachable;
}

function pm_local_variable_read_node_create(a:int, b:int, c:int):int {
  var e:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  e = 
    pm_constant_pool_insert_shared(a + 292, e = b[1]:int, b[2]:int - e);
  if (e != a[87]:int) goto B_a;
  pm_diagnostic_list_append(a + 244, b[1]:int, b[2]:int, 153);
  label B_a:
  a = calloc(1, 20);
  if (a) goto B_b;
  d[0] = 20;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_b:
  a[4]:int = c;
  a[3]:int = e;
  a[0]:short = 94;
  a[1]:long@4 = b[1]:long@4;
  stack_pointer = d + 16;
  return a;
}

function parse_variable(a:int_ptr):int {
  var d:int;
  var b:int = a + 168;
  var c:int = a + 292;
  var e:int = pm_constant_pool_insert_shared(c,
                                             d = (a + 172)[0]:int,
                                             (a + 176)[0]:int - d);
  d = a[64];
  var f:int = 0;
  loop L_c {
    if (pm_constant_id_list_includes(d, e)) goto B_b;
    if (d[16]:ubyte) goto B_d;
    f = f + 1;
    d = d[3]:int;
    if (d) continue L_c;
    label B_d:
  }
  d = 0;
  if ((a[64])[16]:ubyte) goto B_e;
  if (a[44] - (f = a[43]) != 2) goto B_e;
  if (f[0]:ubyte != 95) goto B_e;
  f = f[1]:ubyte;
  if (f == 48) goto B_e;
  if (eqz(pm_is_decimal_digit(f))) goto B_e;
  f = a[64];
  if (f[17]:ubyte) goto B_a;
  d = f;
  loop L_g {
    d = d[3]:int;
    if (eqz(d)) goto B_f;
    if (d[16]:ubyte) goto B_f;
    if (eqz(d[18]:ubyte)) continue L_g;
  }
  pm_diagnostic_list_append(a + 244, a[43], a[44], 147);
  return 0;
  label B_f:
  e = (a[43])[1]:ubyte;
  d = e + -48;
  if ((d & 255) <= f[18]:ubyte) goto B_h;
  f[18]:byte = d;
  label B_h:
  if ((e & 255) < 50) goto B_i;
  d = 49;
  loop L_j {
    f = malloc(2);
    f[1]:byte = d;
    f[0]:byte = 95;
    d = d + 1;
    f = pm_constant_pool_insert_owned(c, f, 2);
    if (eqz(f)) goto B_k;
    if (pm_constant_id_list_includes(a[64], f)) goto B_k;
    pm_constant_id_list_append(a[64], f);
    label B_k:
    if ((d & 255) < (e & 255)) continue L_j;
  }
  label B_i:
  pm_parser_local_add_token(a, b);
  d = pm_local_variable_read_node_create(a, b, 0);
  label B_e:
  return d;
  label B_b:
  return pm_local_variable_read_node_create(a, b, f);
  label B_a:
  pm_diagnostic_list_append(a + 244, a[43], a[44], 146);
  return 0;
}

function parse_operator_symbol(a:int_ptr, b:int, c:int):int {
  var g:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  var e:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int } = 
    calloc(1, 48);
  if (eqz(e)) goto B_a;
  var f:int = (a + 188)[0]:int;
  var h:int = select_if(a + 180, b, g = b[0]:int == 3)[1]:int;
  var i:int = 0;
  var j:int = 0;
  if (g) goto B_b;
  j = b[2]:int;
  i = b[1]:int;
  label B_b:
  e.g = f;
  e.e = j;
  e.d = i;
  e.c = f;
  e.b = h;
  e.a = 1073741964;
  e.f = (a + 184)[0]:int;
  b = a[45];
  if (b == 153) goto B_d;
  if (b != 11) goto B_c;
  label B_d:
  b = f + -1;
  f = select_if(b, f, b[0]:ubyte == 64);
  label B_c:
  if (eqz(c)) goto B_e;
  a[0] = c;
  label B_e:
  parser_lex(a);
  pm_string_shared_init(e + 36, (a + 172)[0]:int, f);
  stack_pointer = d + 16;
  return e;
  label B_a:
  d[0] = 48;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  return unreachable;
}

function parse_pattern_hash(a:int_ptr, b:int):int {
  var d:int;
  var e:int;
  var i:int;
  var h:int_ptr;
  var c:int = stack_pointer - 48;
  stack_pointer = c;
  (c + 40)[0]:int = 0;
  c[4]:long = 0L;
  d = b[0]:ushort;
  br_table[B_f, B_a, ..B_e](d + -8);
  label B_f:
  d = a[45];
  if (d > 27) goto B_d;
  if (eqz(1 << d & 135299072)) goto B_d;
  goto B_c;
  label B_e:
  if (d == 107) goto B_a;
  assert_fail(11717, 13402, 13364, 9000);
  unreachable;
  label B_d:
  e = d + -121;
  if (e > 21) goto B_g;
  if (1 << e & 2097169) goto B_c;
  label B_g:
  if (d == 95) goto B_c;
  b[4]:int = (d = parse_pattern(a, 0, 168));
  (b + 8)[0]:int = (d + 8)[0]:int;
  goto B_b;
  label B_c:
  d = b[3]:int;
  if (d[0]:ushort != 140) goto B_b;
  d = pm_constant_pool_insert_shared(a + 292,
                                     e = d[5]:int,
                                     (d + 24)[0]:int - e);
  if (eqz(d)) goto B_b;
  if (pm_constant_id_list_includes(a[64], d)) goto B_b;
  pm_constant_id_list_append(a[64], d);
  label B_b:
  pm_node_list_append(c + 32, b);
  b = 0;
  label B_a:
  if (a[45] != 27) goto B_h;
  var f:int = a + 292;
  var g:int = a + 168;
  h = a + 244;
  loop L_i {
    parser_lex(a);
    d = a[45];
    br_table[B_h, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_m, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_h, B_l, B_l, B_l, B_h, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_l, B_h, ..B_n](
      d + -95);
    label B_n:
    if (d == 162) goto B_o;
    br_table[B_h, B_l, B_l, B_l, B_l, B_h, ..B_l](d + -15);
    label B_o:
    d = parse_pattern_keyword_rest(a);
    if (b) goto B_p;
    b = d;
    goto B_j;
    label B_p:
    pm_diagnostic_list_append(h, d[1]:int, (d + 8)[0]:int, 173);
    pm_node_list_append(c + 32, d);
    goto B_j;
    label B_m:
    parser_lex(a);
    goto B_k;
    label B_l:
    pm_diagnostic_list_append(h, d = a[44], d, 177);
    a[42] = 2;
    a[43] = d;
    label B_k:
    d = pm_symbol_node_label_create(g);
    e = a[45];
    if (e > 27) goto B_s;
    if (1 << e & 135299072) goto B_r;
    label B_s:
    i = e + -121;
    if (i > 21) goto B_t;
    if (1 << i & 2097169) goto B_r;
    label B_t:
    if (e == 95) goto B_r;
    e = parse_pattern(a, 0, 168);
    goto B_q;
    label B_r:
    e = 0;
    i = 
      pm_constant_pool_insert_shared(f, i = d[5]:int, (d + 24)[0]:int - i);
    if (eqz(i)) goto B_q;
    if (pm_constant_id_list_includes(a[64], i)) goto B_q;
    pm_constant_id_list_append(a[64], i);
    label B_q:
    c[4]:int = 3;
    c[6]:int = (i = a[40]);
    c[5]:int = i;
    d = pm_assoc_node_create(d, c + 16, e);
    if (eqz(b)) goto B_u;
    pm_diagnostic_list_append(h, d[1]:int, (d + 8)[0]:int, 173);
    label B_u:
    pm_node_list_append(c + 32, d);
    label B_j:
    if (a[45] == 27) continue L_i;
  }
  label B_h:
  e = calloc(1, 48);
  if (eqz(e)) goto B_w;
  i = c[8]:int;
  if (eqz(i)) goto B_y;
  h = c[10]:int;
  d = h[0];
  a = b;
  if (b) goto B_z;
  a = ((i << 2) + h + -4)[0]:int;
  label B_z:
  a = (a + 8)[0]:int;
  d = d[1]:int;
  e[7]:int = b;
  e[2]:int = a;
  e[1]:int = d;
  e[0]:short = 66;
  b = e + 16;
  a = 0;
  d = 0;
  loop L_aa {
    pm_node_list_append(b, (c[10]:int + a)[0]:int);
    a = a + 4;
    d = d + 1;
    if (d < c[8]:int) continue L_aa;
    goto B_x;
  }
  label B_y:
  if (eqz(b)) goto B_v;
  var j:long = b[1]:long@4;
  e[7]:int = b;
  e[1]:long@4 = j;
  e[0]:short = 66;
  label B_x:
  free(c[10]:int);
  stack_pointer = c + 48;
  return e;
  label B_w:
  c[0]:int = 48;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_v:
  assert_fail(17048, 13402, 3192, 9864);
  return unreachable;
}

function parse_pattern_keyword_rest(a:int):int {
  var c:int_ptr;
  var e:int;
  var b:int = stack_pointer - 32;
  stack_pointer = b;
  if (a[45]:int != 162) goto B_c;
  parser_lex(a);
  (b + 24)[0]:int = (c = a + 176)[0];
  b[2]:long = a[42]:long@4;
  var d:int = a + 168;
  e = a[45]:int;
  if (e == 55) goto B_f;
  c = 0;
  if (e != 85) goto B_e;
  parser_lex(a);
  a = pm_no_keywords_parameter_node_create(b + 16, d);
  goto B_d;
  label B_f:
  parser_lex(a);
  c = 
    pm_constant_pool_insert_shared(a + 292, e = (a + 172)[0]:int, c[0] - e);
  if (eqz(c)) goto B_g;
  if (pm_constant_id_list_includes(a[64]:int, c)) goto B_g;
  pm_constant_id_list_append(a[64]:int, c);
  label B_g:
  c = pm_local_variable_target_node_create(a, d);
  label B_e:
  if (b[4]:int != 162) goto B_b;
  a = calloc(1, 24);
  if (eqz(a)) goto B_a;
  a[5]:int = b[6]:int;
  a[4]:int = (d = b[5]:int);
  a[3]:int = c;
  a[1]:int = d;
  a[0]:short = 9;
  a[2]:int = select_if(c, b + 16, c)[2]:int;
  label B_d:
  stack_pointer = b + 32;
  return a;
  label B_c:
  assert_fail(16543, 13402, 13311, 1899);
  unreachable;
  label B_b:
  assert_fail(16505, 13402, 1389, 10118);
  unreachable;
  label B_a:
  b[0]:int = 24;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  return unreachable;
}

function parse_pattern_rest(a:int):int {
  var e:long_ptr@4;
  var f:int;
  var b:int = stack_pointer - 32;
  stack_pointer = b;
  if (a[42]:int != 161) goto B_a;
  var c:int = (a + 176)[0]:int;
  var d:int = (a + 172)[0]:int;
  if (a[45]:int != 55) goto B_e;
  parser_lex(a);
  (b + 16 + 8)[0]:int = (f = ((e = a + 168) + 8)[0]:int);
  b[2]:long = e[0];
  e = pm_constant_pool_insert_shared(a + 292, e = b[5]:int, f - e);
  if (eqz(e)) goto B_f;
  if (pm_constant_id_list_includes(a[64]:int, e)) goto B_f;
  pm_constant_id_list_append(a[64]:int, e);
  label B_f:
  e = pm_local_variable_target_node_create(a, b + 16);
  a = calloc(1, 24);
  if (eqz(a)) goto B_d;
  if (e) goto B_c;
  e = 0;
  f = c;
  goto B_b;
  label B_e:
  e = 0;
  f = c;
  a = calloc(1, 24);
  if (a) goto B_b;
  label B_d:
  b[0]:int = 24;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_c:
  f = (e + 8)[0]:int;
  label B_b:
  a[5]:int = e;
  a[4]:int = c;
  a[3]:int = d;
  a[2]:int = f;
  a[1]:int = d;
  a[0]:short = 136;
  stack_pointer = b + 32;
  return a;
  label B_a:
  assert_fail(16587, 13402, 13289, 1880);
  return unreachable;
}

function parse_pattern_primitives(a:int_ptr, b:int):int {
  var i:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int }
  var j:{ a:short, b:int, c:int }
  var k:int;
  var l:int;
  var m:int;
  var c:int = stack_pointer - 80;
  stack_pointer = c;
  var d:int = a + 244;
  var e:long_ptr@4 = a + 168;
  var f:int = 0;
  loop L_b {
    var g:int = a[44];
    var h:int = a[43];
    br_table[B_k, B_i, B_i, B_i, B_i, B_k, B_i, B_i, B_k, B_i, B_i, B_i, B_k, B_i, B_k, B_i, B_i, B_i, B_i, B_i, B_k, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_k, B_k, B_k, B_k, B_i, B_i, B_i, B_i, B_i, B_i, B_k, B_k, B_i, B_i, B_k, B_k, B_k, B_k, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_k, B_i, B_i, B_i, B_i, B_i, B_i, B_k, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_k, B_i, B_i, B_k, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_k, B_k, B_k, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_k, B_i, B_i, B_j, B_i, B_i, B_i, B_i, B_k, B_k, B_k, B_k, B_k, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_k, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_i, B_k, B_i, B_i, B_k, B_i, B_i, B_k, B_k, B_k, B_i, B_k, ..B_i](
      a[45] + -9)
    label B_k:
    if (f) goto B_l;
    i = parse_pattern_primitive(a, b);
    goto B_g;
    label B_l:
    j = parse_pattern_primitive(a, 171);
    i = calloc(1, 28);
    if (eqz(i)) goto B_f;
    k = (j + 8)[0]:int;
    l = f[1]:int;
    i.g = g;
    i.f = h;
    i.e = j;
    i.d = f;
    i.c = k;
    i.b = l;
    goto B_h;
    label B_j:
    parser_lex(a);
    if (eqz(f)) goto B_m;
    pm_node_destroy(a, f);
    label B_m:
    i = parse_pattern(a, 0, 169);
    if (a[45] != 125) goto B_n;
    parser_lex(a);
    goto B_g;
    label B_n:
    pm_diagnostic_list_append(d, f = a[44], f, 181);
    a[42] = 2;
    a[43] = f;
    goto B_g;
    label B_i:
    pm_diagnostic_list_append(d, a[46], a[47], b);
    k = a[47];
    i = a[46];
    j = calloc(1, 12);
    if (eqz(j)) goto B_e;
    j.c = k;
    j.b = i;
    j.a = 101;
    if (f) goto B_o;
    i = j;
    goto B_g;
    label B_o:
    i = calloc(1, 28);
    if (eqz(i)) goto B_d;
    l = f[1]:int;
    i.g = g;
    i.f = h;
    i.e = j;
    i.d = f;
    i.c = k;
    i.b = l;
    label B_h:
    i.a = 3;
    label B_g:
    f = a[45];
    if (f == 133) goto B_c;
    if (f != 42) goto B_q;
    b = a + 292;
    loop L_r {
      parser_lex(a);
      h = a[44];
      l = a[43];
      if (a[45] != 55) goto B_t;
      parser_lex(a);
      goto B_s;
      label B_t:
      pm_diagnostic_list_append(d, h, h, 176);
      a[42] = 2;
      a[43] = h;
      label B_s:
      (c + 64 + 8)[0]:int = (f = (e + 8)[0]:int);
      c[8]:long = e[0];
      g = pm_constant_pool_insert_shared(b, k = c[17]:int, m = f - k);
      f = a[64];
      if (eqz(f)) goto B_v;
      j = 0;
      loop L_w {
        if (pm_constant_id_list_includes(f, g)) goto B_u;
        if (f[16]:ubyte) goto B_v;
        j = j + 1;
        f = f[3]:int;
        if (f) continue L_w;
      }
      label B_v:
      j = 0;
      f = pm_constant_pool_insert_shared(b, k, m);
      if (eqz(f)) goto B_u;
      if (pm_constant_id_list_includes(a[64], f)) goto B_u;
      pm_constant_id_list_append(a[64], f);
      label B_u:
      j = pm_local_variable_target_node_create_depth(a, c + 64, j);
      f = calloc(1, 28);
      if (eqz(f)) goto B_a;
      g = i.b;
      f[6]:int = h;
      f[5]:int = l;
      f[4]:int = j;
      f[3]:int = i;
      f[1]:int = g;
      f[0]:short = 23;
      f[2]:int = (j + 8)[0]:int;
      i = f;
      if (a[45] == 42) continue L_r;
      goto B_p;
    }
    label B_q:
    f = i;
    label B_p:
    stack_pointer = c + 80;
    return f;
    label B_f:
    c[12]:int = 28;
    fprintf(rodata[15455]:int, 31876, c + 48);
    abort();
    unreachable;
    label B_e:
    c[0]:int = 12;
    fprintf(rodata[15455]:int, 31876, c);
    abort();
    unreachable;
    label B_d:
    c[8]:int = 28;
    fprintf(rodata[15455]:int, 31876, c + 32);
    abort();
    unreachable;
    label B_c:
    parser_lex(a);
    f = i;
    continue L_b;
  }
  label B_a:
  c[4]:int = 28;
  fprintf(rodata[15455]:int, 31876, c + 16);
  abort();
  return unreachable;
}

function parse_required_destructured_parameter(a:int):int {
  var c:int;
  var k:int;
  var l:int;
  var j:int;
  var i:int;
  var h:int;
  var g:int;
  var d:int;
  var e:int;
  var b:int = stack_pointer - 96;
  stack_pointer = b;
  if (a[45]:int != 123) goto B_b;
  parser_lex(a);
  goto B_a;
  label B_b:
  pm_diagnostic_list_append(a + 244, c = (a + 176)[0]:int, c, 94);
  a[42]:int = 2;
  (a + 172)[0]:int = c;
  label B_a:
  d = calloc(1, 56);
  if (eqz(d)) goto B_f;
  d[0]:short = 103;
  d[1]:int = (c = (a + 172)[0]:int);
  (d + 44)[0]:int = (a + 176)[0]:int;
  d[10]:int = c;
  e = a + 244;
  var f:int = a + 292;
  g = a + 168;
  c = a[45]:int;
  loop L_g {
    if (c == 55) goto B_n;
    if (c == 161) goto B_o;
    if (c != 123) goto B_m;
    c = parse_required_destructured_parameter(a);
    goto B_h;
    label B_o:
    parser_lex(a);
    h = a[44]:int;
    i = a[43]:int;
    if (a[45]:int != 55) goto B_q;
    parser_lex(a);
    (b + 80 + 8)[0]:int = (g + 8)[0]:int;
    b[10]:long = g[0]:long@4;
    j = calloc(1, 16);
    if (eqz(j)) goto B_k;
    j[3]:int =
      pm_constant_pool_insert_shared(f, c = b[21]:int, l = (k = b[22]:int) - c);
    j[2]:int = k;
    j[1]:int = c;
    j[0]:short = 125;
    if (eqz(pm_parser_parameter_name_check(a, b + 80))) goto B_r;
    k = j[0]:ushort;
    br_table[B_s, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_s, B_s, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_t, B_s, B_s, B_t, B_t, B_s, ..B_u](
      k + -89);
    label B_u:
    br_table[B_s, B_t, B_s, ..B_t](k + -13);
    label B_t:
    assert_fail(19245, 13402, 902, 6009);
    unreachable;
    label B_s:
    j[1]:short = j[1]:ushort | 1;
    label B_r:
    c = pm_constant_pool_insert_shared(f, c, l);
    if (eqz(c)) goto B_v;
    if (pm_constant_id_list_includes(a[64]:int, c)) goto B_v;
    pm_constant_id_list_append(a[64]:int, c);
    label B_v:
    c = calloc(1, 24);
    if (eqz(c)) goto B_p;
    k = j[2]:int;
    goto B_i;
    label B_q:
    j = 0;
    k = h;
    c = calloc(1, 24);
    if (c) goto B_i;
    label B_p:
    b[16]:int = 24;
    fprintf(rodata[15455]:int, 31876, b + 64);
    abort();
    unreachable;
    label B_n:
    parser_lex(a);
    goto B_l;
    label B_m:
    pm_diagnostic_list_append(e, c = a[44]:int, c, 93);
    a[42]:int = 2;
    a[43]:int = c;
    label B_l:
    (b + 80 + 8)[0]:int = (g + 8)[0]:int;
    b[10]:long = g[0]:long@4;
    c = calloc(1, 16);
    if (eqz(c)) goto B_j;
    c[3]:int =
      pm_constant_pool_insert_shared(f, j = b[21]:int, h = (i = b[22]:int) - j);
    c[2]:int = i;
    c[1]:int = j;
    c[0]:short = 125;
    if (eqz(pm_parser_parameter_name_check(a, b + 80))) goto B_w;
    i = c[0]:ushort;
    br_table[B_x, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_x, B_x, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_y, B_x, B_x, B_y, B_y, B_x, ..B_z](
      i + -89);
    label B_z:
    br_table[B_x, B_y, B_x, ..B_y](i + -13);
    label B_y:
    assert_fail(19245, 13402, 902, 6009);
    unreachable;
    label B_x:
    c[1]:short = c[1]:ushort | 1;
    label B_w:
    j = pm_constant_pool_insert_shared(f, j, h);
    if (eqz(j)) goto B_h;
    if (pm_constant_id_list_includes(a[64]:int, j)) goto B_h;
    pm_constant_id_list_append(a[64]:int, j);
    goto B_h;
    label B_k:
    b[12]:int = 16;
    fprintf(rodata[15455]:int, 31876, b + 48);
    abort();
    unreachable;
    label B_j:
    b[4]:int = 16;
    fprintf(rodata[15455]:int, 31876, b + 16);
    abort();
    unreachable;
    label B_i:
    c[5]:int = j;
    c[4]:int = h;
    c[3]:int = i;
    c[2]:int = k;
    c[1]:int = i;
    c[0]:short = 136;
    label B_h:
    pm_multi_target_node_targets_append(a, d, c);
    c = a[45]:int;
    if (c != 27) goto B_d;
    parser_lex(a);
    c = a[45]:int;
    if (eqz(d[3]:int)) continue L_g;
    if (c == 125) goto B_e;
    continue L_g;
  }
  label B_f:
  b[0]:int = 56;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_e:
  if (g[0]:int != 27) goto B_c;
  c = calloc(1, 12);
  if (c) goto B_aa;
  b[8]:int = 12;
  fprintf(rodata[15455]:int, 31876, b + 32);
  abort();
  unreachable;
  label B_aa:
  c[0]:short = 70;
  c[1]:long@4 = a[43]:long@4;
  pm_multi_target_node_targets_append(a, d, c);
  pm_diagnostic_list_append(e, (a + 184)[0]:int, (a + 188)[0]:int, 163);
  c = a[45]:int;
  label B_d:
  if (c != 125) goto B_ca;
  parser_lex(a);
  c = a[43]:int;
  goto B_ba;
  label B_ca:
  pm_diagnostic_list_append(e, c = a[44]:int, c, 98);
  a[42]:int = 2;
  a[43]:int = c;
  label B_ba:
  d[12]:int = c;
  (d + 52)[0]:int = (a = a[44]:int);
  (d + 8)[0]:int = a;
  stack_pointer = b + 96;
  return d;
  label B_c:
  assert_fail(22945, 13402, 3557, 10068);
  return unreachable;
}

function pm_parser_parameter_name_check(a:int_ptr, b:int_ptr):int {
  var e:{ a:ubyte, b:ubyte }
  var d:ubyte_ptr;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = b[2];
  if (d - (e = b[1]) != 2) goto B_a;
  if (e.a != 95) goto B_a;
  var f:int = e.b;
  if (f == 48) goto B_a;
  if (eqz(pm_is_decimal_digit(f))) goto B_a;
  c[0] = e;
  pm_diagnostic_list_append_format(a + 244, e, d, 158, c);
  label B_a:
  e = pm_constant_pool_insert_shared(a + 292, e = b[1], b[2] - e);
  e = pm_constant_id_list_includes(a[64], e);
  if (eqz(e)) goto B_b;
  d = b[1];
  if (d >= (b = b[2])) goto B_b;
  if (d[0] == 95) goto B_b;
  pm_diagnostic_list_append(a + 244, d, b, 155);
  label B_b:
  stack_pointer = c + 16;
  return e;
}

function pm_no_keywords_parameter_node_create(a:{ a:int, b:int, c:int }, b:{ a:int, b:int, c:int }):int {
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  br_table[B_a, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_b, B_a, ..B_b](
    a.a + -147)
  label B_b:
  assert_fail(16427, 13402, 4614, 10181);
  unreachable;
  label B_a:
  if (b.a != 85) goto B_d;
  var d:{ a:short, b:int, c:int, d:int, e:int, f:int, g:int } = 
    calloc(1, 28);
  if (eqz(d)) goto B_c;
  d.a = 107;
  d.g = (e = b.c);
  d.f = b.b;
  d.e = a.c;
  d.d = (a = a.b);
  d.c = e;
  d.b = a;
  stack_pointer = c + 16;
  return d;
  label B_d:
  assert_fail(17142, 13402, 4615, 10181);
  unreachable;
  label B_c:
  c[0] = 28;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  return unreachable;
}

function pm_call_target_node_create(a:int):int {
  var c:int;
  var b:int_ptr = stack_pointer - 16;
  stack_pointer = b;
  c = calloc(1, 36);
  if (c) goto B_a;
  b[0] = 36;
  fprintf(rodata[15455]:int, 31876, b);
  abort();
  unreachable;
  label B_a:
  c[0]:short = 22;
  c[7]:long@4 = a[7]:long@4;
  c[6]:int = a[6]:int;
  c[4]:long@4 = a[4]:long@4;
  c[3]:int = a[3]:int;
  c[1]:long@4 = a[1]:long@4;
  c[1]:short = a[1]:ushort;
  free(a);
  stack_pointer = b + 16;
  return c;
}

function pm_local_variable_read_node_create_constant_id(a:int, b:int, c:int, d:int):int {
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  if (a[87]:int != c) goto B_a;
  pm_diagnostic_list_append(a + 244, b[1]:int, b[2]:int, 153);
  label B_a:
  a = calloc(1, 20);
  if (a) goto B_b;
  e[0] = 20;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_b:
  a[4]:int = d;
  a[3]:int = c;
  a[0]:short = 94;
  a[1]:long@4 = b[1]:long@4;
  stack_pointer = e + 16;
  return a;
}

function pm_parser_local_add_token(a:int_ptr, b:int_ptr) {
  var c:int;
  b = pm_constant_pool_insert_shared(a + 292, c = b[1], b[2] - c);
  if (eqz(b)) goto B_a;
  if (pm_constant_id_list_includes(a[64], b)) goto B_a;
  pm_constant_id_list_append(a[64], b);
  label B_a:
}

function pm_local_variable_target_node_create(a:int, b:{ a:short, b:int, c:int, d:int }):int {
  var e:{ a:ubyte, b:ubyte }
  var d:int;
  var c:int_ptr = stack_pointer - 32;
  stack_pointer = c;
  d = b.c;
  if (d - (e = b.b) != 2) goto B_a;
  if (e.a != 95) goto B_a;
  var f:int = e.b;
  if (f == 48) goto B_a;
  if (eqz(pm_is_decimal_digit(f))) goto B_a;
  c[4] = e;
  pm_diagnostic_list_append_format(a + 244, e, d, 158, c + 16);
  label B_a:
  d = pm_constant_pool_insert_shared(a + 292, a = b.b, (e = b.c) - a);
  b = calloc(1, 20);
  if (b) goto B_b;
  c[0] = 20;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_b:
  b.d = d;
  b.c = e;
  b.b = a;
  b.a = 95;
  stack_pointer = c + 32;
  return b;
}

function parse_pattern_primitive(a:int, b:int):int {
  var f:int;
  var g:int;
  var h:int;
  var e:int;
  var c:int = stack_pointer - 64;
  stack_pointer = c;
  var d:int = a + 180;
  br_table[B_h, B_d, B_d, B_d, B_d, B_j, B_d, B_d, B_k, B_d, B_d, B_d, B_g, B_d, B_h, B_d, B_d, B_d, B_d, B_d, B_e, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_h, B_h, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_l, B_d, B_d, B_h, B_h, B_h, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_d, B_d, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_h, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_l, B_d, B_d, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_h, B_h, B_h, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_d, B_h, B_d, B_d, B_h, B_d, B_d, B_f, B_i, B_i, B_d, B_h, ..B_d](
    a[45]:int + -9)
  label B_l:
  parser_lex(a);
  (c + 56)[0]:int = (b = (a + 176)[0]:int);
  c[6]:long = a[42]:long@4;
  e = a + 292;
  h = pm_constant_pool_insert_shared(e, f = c[13]:int, g = b - f);
  b = a[64]:int;
  if (eqz(b)) goto B_n;
  d = 0;
  loop L_o {
    if (pm_constant_id_list_includes(b, h)) goto B_m;
    if (b[16]:ubyte) goto B_n;
    d = d + 1;
    b = b[3]:int;
    if (b) continue L_o;
  }
  label B_n:
  d = 0;
  b = pm_constant_pool_insert_shared(e, f, g);
  if (eqz(b)) goto B_m;
  if (pm_constant_id_list_includes(a[64]:int, b)) goto B_m;
  pm_constant_id_list_append(a[64]:int, b);
  label B_m:
  b = pm_local_variable_target_node_create_depth(a, c + 48, d);
  goto B_a;
  label B_k:
  (c + 48 + 8)[0]:int = (d + 8)[0]:int;
  c[6]:long = d[0]:long@4;
  parser_lex(a);
  if (a[45]:int != 20) goto B_p;
  parser_lex(a);
  b = pm_array_pattern_node_empty_create(c + 48, a + 168);
  goto B_a;
  label B_p:
  d = parse_pattern(a, 1, 164);
  if (a[45]:int != 121) goto B_q;
  parser_lex(a);
  label B_q:
  expect1(a, 20, 180);
  (c + 40)[0]:int = (a + 176)[0]:int;
  c[4]:long = a[42]:long@4;
  a = d[0]:ushort;
  if (a == 52) goto B_s;
  if (a != 7) goto B_r;
  if (d[11]:int) goto B_r;
  d[1]:int = (a = c[13]:int);
  d[11]:int = a;
  d[13]:int = c[9]:int;
  (d + 8)[0]:int = (a = c[10]:int);
  (d + 48)[0]:int = c[14]:int;
  (d + 56)[0]:int = a;
  b = d;
  goto B_a;
  label B_s:
  if (d[9]:int) goto B_r;
  d[1]:int = (a = c[13]:int);
  d[9]:int = a;
  d[11]:int = c[9]:int;
  (d + 8)[0]:int = (a = c[10]:int);
  (d + 40)[0]:int = c[14]:int;
  (d + 48)[0]:int = a;
  b = d;
  goto B_a;
  label B_r:
  b = pm_array_pattern_node_empty_create(c + 48, c + 32);
  pm_node_list_append(b + 16, d);
  goto B_a;
  label B_j:
  h = a[359]:ubyte;
  a[359]:byte = 0;
  (c + 48 + 8)[0]:int = (d + 8)[0]:int;
  c[6]:long = d[0]:long@4;
  parser_lex(a);
  b = a[45]:int;
  br_table[B_v, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_u, B_w, ..B_x](
    b + -149);
  label B_x:
  if (b == 109) goto B_y;
  if (b != 15) goto B_u;
  parser_lex(a);
  b = pm_hash_pattern_node_empty_create(c + 48, a + 168);
  a[359]:byte = h;
  goto B_a;
  label B_y:
  parser_lex(a);
  b = pm_symbol_node_label_create(a + 168);
  c[8]:int = 3;
  c[10]:int = (d = a[40]:int);
  c[9]:int = d;
  b = pm_assoc_node_create(b, c + 32, 0);
  goto B_t;
  label B_w:
  b = parse_pattern_keyword_rest(a);
  goto B_t;
  label B_v:
  b = parse_expression(a, 52, 0, 174);
  c[8]:int = 3;
  c[10]:int = (d = a[40]:int);
  c[9]:int = d;
  d = b[0]:ushort;
  if (d == 86) goto B_ca;
  if (d != 140) goto B_aa;
  d = b + 32;
  goto B_ba;
  label B_ca:
  d = b + 36;
  label B_ba:
  d = d[0]:int;
  if (eqz(d)) goto B_aa;
  if ((d + -1)[0]:ubyte == 58) goto B_z;
  label B_aa:
  pm_diagnostic_list_append(a + 244, b[1]:int, (b + 8)[0]:int, 175);
  label B_z:
  b = pm_assoc_node_create(b, c + 32, 0);
  goto B_t;
  label B_u:
  parser_lex(a);
  pm_diagnostic_list_append(a + 244,
                            (b = a + 172)[0]:int,
                            (d = a + 176)[0]:int,
                            174);
  b = pm_missing_node_create(b[0]:int, d[0]:int);
  c[8]:int = 3;
  c[10]:int = (d = a[40]:int);
  c[9]:int = d;
  b = pm_assoc_node_create(b, c + 32, 0);
  label B_t:
  b = parse_pattern_hash(a, b);
  d = a[45]:int;
  if (d != 121) goto B_da;
  parser_lex(a);
  d = a[45]:int;
  label B_da:
  if (d != 15) goto B_fa;
  parser_lex(a);
  d = (a + 172)[0]:int;
  goto B_ea;
  label B_fa:
  pm_diagnostic_list_append(a + 244, d = (a + 176)[0]:int, d, 179);
  a[42]:int = 2;
  (a + 172)[0]:int = d;
  label B_ea:
  (b + 8)[0]:int = (f = (a + 176)[0]:int);
  b[1]:int = (e = c[13]:int);
  (b + 44)[0]:int = f;
  b[10]:int = d;
  (b + 36)[0]:int = c[14]:int;
  b[8]:int = e;
  a[359]:byte = h;
  goto B_a;
  label B_i:
  (c + 48 + 8)[0]:int = (d + 8)[0]:int;
  c[6]:long = d[0]:long@4;
  parser_lex(a);
  br_table[B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ia, B_ia, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ha, B_ha, B_ha, B_ia, B_ia, B_ia, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ha, B_ha, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ia, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ia, B_ia, B_ia, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, B_ha, B_ha, B_ia, B_ha, B_ha, B_ha, B_ha, B_ha, B_ha, B_ia, ..B_ha](
    a[45]:int + -9)
  label B_ia:
  b = parse_expression(a, 52, 0, 172);
  goto B_ga;
  label B_ha:
  pm_diagnostic_list_append(a + 244, b = c[13]:int, d = c[14]:int, 172);
  b = pm_missing_node_create(b, d);
  label B_ga:
  b = pm_range_node_create(a, 0, c + 48, b);
  goto B_a;
  label B_h:
  d = 0;
  b = parse_expression(a, 52, 0, b);
  if (a[45]:int + -31 > 1) goto B_a;
  parser_lex(a);
  (c + 56)[0]:int = (a + 176)[0]:int;
  c[6]:long = a[42]:long@4;
  br_table[B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ka, B_ka, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ja, B_ja, B_ja, B_ka, B_ka, B_ka, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ja, B_ja, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ka, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ka, B_ka, B_ka, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, B_ja, B_ja, B_ka, B_ja, B_ja, B_ja, B_ja, B_ja, B_ja, B_ka, ..B_ja](
    a[45]:int + -9)
  label B_ka:
  d = parse_expression(a, 52, 0, 172);
  label B_ja:
  b = pm_range_node_create(a, b, c + 48, d);
  goto B_a;
  label B_g:
  parser_lex(a);
  (c + 56)[0]:int = (a + 176)[0]:int;
  c[6]:long = a[42]:long@4;
  b = a + 168;
  h = a[45]:int;
  br_table[B_na, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_qa, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_la, B_pa, B_la, B_la, B_la, B_la, B_la, B_la, B_sa, B_la, B_ra, ..B_ta](
    h + -10);
  label B_ta:
  br_table[B_oa, B_ma, ..B_la](h + -122);
  label B_sa:
  parser_lex(a);
  d = parse_variable(a);
  if (d) goto B_b;
  f = (a + 176)[0]:int;
  h = f - (d = (a + 172)[0]:int);
  if (a[88]:int == 1) goto B_c;
  if (h != 2) goto B_c;
  if (d[0]:ubyte == 105) goto B_ua;
  h = 2;
  goto B_c;
  label B_ua:
  h = 2;
  if (d[1]:ubyte != 116) goto B_c;
  d = pm_local_variable_read_node_create_constant_id(
        a,
        b,
        pm_constant_pool_insert_constant(a + 292, 3996, 3),
        0);
  goto B_b;
  label B_ra:
  parser_lex(a);
  b = pm_pinned_variable_node_create(
        c + 48,
        pm_instance_variable_read_node_create(a, b));
  goto B_a;
  label B_qa:
  parser_lex(a);
  b = pm_pinned_variable_node_create(
        c + 48,
        pm_class_variable_read_node_create(a, b));
  goto B_a;
  label B_pa:
  parser_lex(a);
  b = pm_pinned_variable_node_create(
        c + 48,
        pm_global_variable_read_node_create(a, b));
  goto B_a;
  label B_oa:
  parser_lex(a);
  b = pm_pinned_variable_node_create(
        c + 48,
        pm_numbered_reference_read_node_create(a, b));
  goto B_a;
  label B_na:
  parser_lex(a);
  b = pm_pinned_variable_node_create(
        c + 48,
        pm_back_reference_read_node_create(a, b));
  goto B_a;
  label B_ma:
  h = a[359]:ubyte;
  a[359]:byte = 0;
  (c + 32 + 8)[0]:int = (d + 8)[0]:int;
  c[4]:long = d[0]:long@4;
  parser_lex(a);
  pm_assert_value_expression(a, d = parse_expression(a, 2, 1, 170));
  a[359]:byte = h;
  if (a[45]:int != 121) goto B_va;
  parser_lex(a);
  label B_va:
  expect1(a, 125, 181);
  b = pm_pinned_expression_node_create(d, c + 48, c + 32, b);
  goto B_a;
  label B_la:
  pm_diagnostic_list_append(a + 244, a = c[13]:int, b = c[14]:int, 170);
  b = 
    pm_pinned_variable_node_create(c + 48, pm_missing_node_create(a, b));
  goto B_a;
  label B_f:
  (c + 48 + 8)[0]:int = (d + 8)[0]:int;
  c[6]:long = d[0]:long@4;
  parser_lex(a);
  if (a[45]:int != 29) goto B_xa;
  parser_lex(a);
  goto B_wa;
  label B_xa:
  pm_diagnostic_list_append(a + 244, b = (a + 176)[0]:int, b, 54);
  a[42]:int = 2;
  (a + 172)[0]:int = b;
  label B_wa:
  b = 
    parse_pattern_constant_path(
      a,
      pm_constant_path_node_create(a,
                                   0,
                                   c + 48,
                                   pm_constant_read_node_create(a, a + 168)));
  goto B_a;
  label B_e:
  (c + 48 + 8)[0]:int = (d + 8)[0]:int;
  c[6]:long = d[0]:long@4;
  parser_lex(a);
  b = 
    parse_pattern_constant_path(a, pm_constant_read_node_create(a, c + 48));
  goto B_a;
  label B_d:
  pm_diagnostic_list_append(a + 244,
                            (d = a + 184)[0]:int,
                            (a = a + 188)[0]:int,
                            b);
  a = a[0]:int;
  d = d[0]:int;
  b = calloc(1, 12);
  if (eqz(b)) goto B_ya;
  b[2]:int = a;
  b[1]:int = d;
  b[0]:short = 101;
  goto B_a;
  label B_ya:
  c[0]:int = 12;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_c:
  c[5]:int = d;
  c[4]:int = h;
  pm_diagnostic_list_append_format(a + 244, d, f, 144, c + 16);
  d = pm_local_variable_read_node_create(a, b, 0);
  label B_b:
  b = pm_pinned_variable_node_create(c + 48, d);
  label B_a:
  stack_pointer = c + 64;
  return b;
}

function pm_local_variable_target_node_create_depth(a:int, b:{ a:short, b:int, c:int, d:int, e:int }, c:int):int {
  var f:{ a:ubyte, b:ubyte }
  var e:int;
  var d:int_ptr = stack_pointer - 32;
  stack_pointer = d;
  e = b.c;
  if (e - (f = b.b) != 2) goto B_a;
  if (f.a != 95) goto B_a;
  var g:int = f.b;
  if (g == 48) goto B_a;
  if (eqz(pm_is_decimal_digit(g))) goto B_a;
  d[4] = f;
  pm_diagnostic_list_append_format(a + 244, f, e, 158, d + 16);
  label B_a:
  e = pm_constant_pool_insert_shared(a + 292, a = b.b, (f = b.c) - a);
  b = calloc(1, 20);
  if (b) goto B_b;
  d[0] = 20;
  fprintf(rodata[15455]:int, 31876, d);
  abort();
  unreachable;
  label B_b:
  b.e = c;
  b.d = e;
  b.c = f;
  b.b = a;
  b.a = 95;
  stack_pointer = d + 32;
  return b;
}

function pm_array_pattern_node_empty_create(a:int_ptr, b:int_ptr):int {
  var d:int;
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = calloc(1, 60);
  if (d) goto B_a;
  c[0] = 60;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  d[0]:short = 7;
  d[14]:int = (e = b[2]);
  d[13]:int = b[1];
  d[12]:int = a[2];
  d[11]:int = (b = a[1]);
  d[2]:int = e;
  d[1]:int = b;
  stack_pointer = c + 16;
  return d;
}

function pm_hash_pattern_node_empty_create(a:int_ptr, b:int_ptr):int {
  var d:int;
  var e:int;
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = calloc(1, 48);
  if (d) goto B_a;
  c[0] = 48;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  d[0]:short = 66;
  d[11]:int = (e = b[2]);
  d[10]:int = b[1];
  d[9]:int = a[2];
  d[8]:int = (b = a[1]);
  d[2]:int = e;
  d[1]:int = b;
  stack_pointer = c + 16;
  return d;
}

function pm_pinned_variable_node_create(a:int_ptr, b:int):int {
  var d:{ a:short, b:int, c:int, d:int, e:int, f:int }
  var c:int_ptr = stack_pointer - 16;
  stack_pointer = c;
  d = calloc(1, 24);
  if (d) goto B_a;
  c[0] = 24;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_a:
  d.d = b;
  d.a = 116;
  d.f = a[2];
  d.e = (a = a[1]);
  d.b = a;
  d.c = (b + 8)[0]:int;
  stack_pointer = c + 16;
  return d;
}

function pm_pinned_expression_node_create(a:int, b:int_ptr, c:long_ptr@4, d:int_ptr):int {
  var f:int;
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  f = calloc(1, 40);
  if (f) goto B_a;
  e[0] = 40;
  fprintf(rodata[15455]:int, 31876, e);
  abort();
  unreachable;
  label B_a:
  f[3]:int = a;
  f[0]:short = 115;
  f[9]:int = (a = d[2]);
  f[8]:int = d[1];
  f[6]:long@4 = c[1];
  f[5]:int = b[2];
  f[4]:int = (d = b[1]);
  f[2]:int = a;
  f[1]:int = d;
  stack_pointer = e + 16;
  return f;
}

function parse_pattern_constant_path(a:int, b:int_ptr):int {
  var d:int_ptr;
  var f:int;
  var i:int;
  var g:int_ptr;
  var e:int;
  var h:int;
  var c:int = stack_pointer - 48;
  stack_pointer = c;
  d = a[45]:int;
  if (d != 26) goto B_a;
  e = a + 244;
  f = a + 168;
  loop L_b {
    parser_lex(a);
    (c + 32 + 8)[0]:int = (f + 8)[0]:int;
    c[4]:long = f[0]:long@4;
    if (a[45]:int != 29) goto B_d;
    parser_lex(a);
    goto B_c;
    label B_d:
    pm_diagnostic_list_append(e, d = a[44]:int, d, 54);
    a[42]:int = 2;
    a[43]:int = d;
    label B_c:
    b = pm_constant_path_node_create(a,
                                     b,
                                     c + 32,
                                     pm_constant_read_node_create(a, f));
    d = a[45]:int;
    if (d == 26) continue L_b;
  }
  label B_a:
  if (d == 123) goto B_m;
  if (d == 16) goto B_n;
  f = b;
  goto B_g;
  label B_n:
  parser_lex(a);
  d = a + 176;
  e = d[0];
  g = a + 172;
  h = g[0];
  f = a[45]:int;
  if (f != 121) goto B_o;
  parser_lex(a);
  f = a[45]:int;
  label B_o:
  if (f == 20) goto B_l;
  f = parse_pattern(a, 1, 164);
  i = a[45]:int;
  if (i != 121) goto B_p;
  parser_lex(a);
  i = a[45]:int;
  label B_p:
  if (i != 20) goto B_k;
  parser_lex(a);
  goto B_j;
  label B_m:
  parser_lex(a);
  d = a + 176;
  e = d[0];
  g = a + 172;
  h = g[0];
  if (a[45]:int == 125) goto B_l;
  f = parse_pattern(a, 1, 169);
  if (a[45]:int != 125) goto B_q;
  parser_lex(a);
  goto B_j;
  label B_q:
  pm_diagnostic_list_append(a + 244, i = a[44]:int, i, 181);
  a[42]:int = 2;
  a[43]:int = i;
  goto B_j;
  label B_l:
  parser_lex(a);
  d = a[44]:int;
  g = a[43]:int;
  goto B_i;
  label B_k:
  pm_diagnostic_list_append(a + 244, i = a[44]:int, i, 180);
  a[42]:int = 2;
  a[43]:int = i;
  label B_j:
  d = d[0];
  g = g[0];
  if (f) goto B_h;
  label B_i:
  f = calloc(1, 60);
  if (eqz(f)) goto B_f;
  f[14]:int = d;
  f[13]:int = g;
  f[12]:int = e;
  f[11]:int = h;
  f[3]:int = b;
  f[2]:int = d;
  f[0]:short = 7;
  f[1]:int = b[1];
  goto B_g;
  label B_h:
  a = f[0]:ushort;
  br_table[B_t, B_r, B_r, B_r, B_r, B_r, B_r, B_r, B_r, B_r, B_r, B_r, B_r, B_r, B_s, ..B_u](
    a + -52);
  label B_u:
  if (a != 7) goto B_r;
  if (f[3]:int) goto B_r;
  if (f[11]:int) goto B_r;
  f[3]:int = b;
  a = b[1];
  (f + 56)[0]:int = d;
  f[13]:int = g;
  (f + 48)[0]:int = e;
  f[11]:int = h;
  (f + 8)[0]:int = d;
  f[1]:int = a;
  goto B_g;
  label B_t:
  if (f[3]:int) goto B_r;
  if (f[9]:int) goto B_r;
  f[3]:int = b;
  a = b[1];
  (f + 48)[0]:int = d;
  f[11]:int = g;
  (f + 40)[0]:int = e;
  f[9]:int = h;
  (f + 8)[0]:int = d;
  f[1]:int = a;
  goto B_g;
  label B_s:
  if (f[3]:int) goto B_r;
  if (f[8]:int) goto B_r;
  f[3]:int = b;
  a = b[1];
  (f + 44)[0]:int = d;
  f[10]:int = g;
  (f + 36)[0]:int = e;
  f[8]:int = h;
  (f + 8)[0]:int = d;
  f[1]:int = a;
  goto B_g;
  label B_r:
  a = calloc(1, 60);
  if (eqz(a)) goto B_e;
  a[14]:int = d;
  a[13]:int = g;
  a[12]:int = e;
  a[11]:int = h;
  a[3]:int = b;
  a[2]:int = d;
  a[0]:short = 7;
  a[1]:int = b[1];
  pm_node_list_append(a + 16, f);
  f = a;
  label B_g:
  stack_pointer = c + 48;
  return f;
  label B_f:
  c[0]:int = 60;
  fprintf(rodata[15455]:int, 31876, c);
  abort();
  unreachable;
  label B_e:
  c[4]:int = 60;
  fprintf(rodata[15455]:int, 31876, c + 16);
  abort();
  return unreachable;
}

function pm_local_variable_write_node_create(a:int, b:int, c:int, d:int, e:{ a:int, b:int, c:int }):int {
  var f:int_ptr = stack_pointer - 16;
  stack_pointer = f;
  var g:int = calloc(1, 40);
  if (eqz(g)) goto B_a;
  var h:int = (c + 8)[0]:int;
  var i:long = d[0]:long@4;
  var j:int = d[0]:int;
  d = 0;
  var k:int = 0;
  if (e.a == 3) goto B_b;
  k = e.c;
  d = e.b;
  label B_b:
  g[9]:int = k;
  g[8]:int = d;
  g[7]:int = c;
  g[5]:long@4 = i;
  g[4]:int = b;
  g[3]:int = a;
  g[2]:int = h;
  g[1]:int = j;
  g[0]:short = 96;
  stack_pointer = f + 16;
  return g;
  label B_a:
  f[0] = 40;
  fprintf(rodata[15455]:int, 31876, f);
  abort();
  return unreachable;
}

export function pm_pack_parse(a:int, b:int_ptr, c:int, d:int_ptr, e:int_ptr, f:int_ptr, g:int_ptr, h:int_ptr, i:long_ptr, j:int_ptr):int {
  var o:ubyte_ptr;
  var t:long;
  if (j[0]) goto B_a;
  j[0] = 2;
  label B_a:
  if (b[0] != c) goto B_b;
  d[0] = 21;
  e[0] = 2;
  f[0] = 4;
  g[0] = 9;
  h[0] = 3;
  return 0;
  label B_b:
  var k:int = 0;
  h[0] = 0;
  i[0] = 1L;
  var l:int = 1;
  var m:byte_ptr = b[0];
  var n:int = m[0];
  b[0] = (o = m + 1);
  var p:int = 4;
  var q:int = 2;
  m = 0;
  var r:int = 0;
  var s:int = 0;
  br_table[B_l, B_l, B_l, B_l, B_l, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_l, B_n, B_n, B_za, B_n, B_c, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_n, B_q, B_ca, B_z, B_d, B_ia, B_ga, B_ha, B_ea, B_x, B_pa, B_va, B_n, B_xa, B_u, B_na, B_n, B_s, B_wa, B_n, B_ya, B_n, B_ka, B_la, B_n, B_p, B_n, B_aa, B_n, B_n, B_n, B_n, B_n, B_n, B_ba, B_y, B_ua, B_ia, B_fa, B_ha, B_da, B_w, B_m, B_qa, B_n, B_sa, B_t, B_oa, B_n, B_r, B_ra, B_n, B_ta, B_n, B_v, B_ma, B_ja, B_o, ..B_n](
    n + -9)
  label B_za:
  if (o >= c) goto B_ab;
  l = c - o;
  loop L_bb {
    if (o[0] == 10) goto B_ab;
    b[0] = (o = o + 1);
    l = l + -1;
    if (l) continue L_bb;
  }
  label B_ab:
  d[0] = 1;
  e[0] = 2;
  f[0] = 4;
  g[0] = 9;
  h[0] = 3;
  i[0] = 0L;
  return 0;
  label B_ya:
  m = 0;
  p = 5;
  r = 3;
  goto B_e;
  label B_xa:
  m = 0;
  p = 6;
  r = 3;
  goto B_e;
  label B_wa:
  m = 0;
  p = 7;
  r = 3;
  goto B_e;
  label B_va:
  m = 0;
  p = 8;
  r = 3;
  goto B_e;
  label B_ua:
  r = 0;
  m = 1;
  goto B_e;
  label B_ta:
  p = 5;
  goto B_f;
  label B_sa:
  p = 6;
  goto B_f;
  label B_ra:
  p = 7;
  goto B_f;
  label B_qa:
  p = 8;
  goto B_f;
  label B_pa:
  m = 0;
  p = 1;
  r = 3;
  goto B_e;
  label B_oa:
  s = 1;
  p = 5;
  goto B_g;
  label B_na:
  s = 1;
  p = 6;
  goto B_g;
  label B_ma:
  r = 1;
  p = 5;
  goto B_h;
  label B_la:
  r = 1;
  p = 6;
  goto B_h;
  label B_ka:
  p = 9;
  r = 4;
  m = 2;
  q = 3;
  goto B_e;
  label B_ja:
  p = 9;
  m = 2;
  q = 4;
  r = 4;
  goto B_e;
  label B_ia:
  p = 7;
  goto B_j;
  label B_ha:
  p = 6;
  goto B_j;
  label B_ga:
  p = 7;
  r = 1;
  goto B_i;
  label B_fa:
  p = 6;
  r = 1;
  goto B_i;
  label B_ea:
  p = 7;
  goto B_k;
  label B_da:
  p = 6;
  goto B_k;
  label B_ca:
  p = 9;
  r = 4;
  m = 2;
  q = 6;
  goto B_e;
  label B_ba:
  p = 9;
  r = 4;
  m = 2;
  q = 7;
  goto B_e;
  label B_aa:
  p = 9;
  r = 4;
  m = 2;
  q = 8;
  goto B_e;
  label B_z:
  r = 4;
  m = 2;
  q = 9;
  p = 9;
  goto B_e;
  label B_y:
  p = 9;
  r = 4;
  m = 2;
  q = 10;
  goto B_e;
  label B_x:
  p = 9;
  r = 4;
  m = 2;
  q = 11;
  goto B_e;
  label B_w:
  p = 9;
  r = 4;
  m = 2;
  q = 12;
  goto B_e;
  label B_v:
  p = 9;
  r = 4;
  m = 2;
  q = 13;
  goto B_e;
  label B_u:
  p = 9;
  r = 4;
  m = 2;
  q = 14;
  goto B_e;
  label B_t:
  p = 9;
  r = 4;
  m = 2;
  q = 15;
  goto B_e;
  label B_s:
  p = 9;
  r = 4;
  m = 2;
  q = 16;
  goto B_e;
  label B_r:
  p = 9;
  r = 4;
  m = 2;
  q = 17;
  goto B_e;
  label B_q:
  p = 9;
  r = 4;
  m = 2;
  q = 18;
  goto B_e;
  label B_p:
  p = 9;
  r = 4;
  m = 2;
  q = 19;
  goto B_e;
  label B_o:
  p = 9;
  r = 4;
  m = 2;
  q = 20;
  goto B_e;
  label B_n:
  return 2;
  label B_m:
  r = 3;
  m = 1;
  p = 1;
  goto B_e;
  label B_l:
  d[0] = 0;
  e[0] = 2;
  f[0] = 4;
  g[0] = 9;
  h[0] = 3;
  i[0] = 0L;
  return 0;
  label B_k:
  m = 2;
  q = 5;
  r = 2;
  goto B_e;
  label B_j:
  r = 3;
  label B_i:
  m = 2;
  q = 5;
  goto B_e;
  label B_h:
  m = 0;
  s = 1;
  goto B_d;
  label B_g:
  m = 0;
  q = 2;
  r = 2;
  goto B_d;
  label B_f:
  r = 3;
  m = 1;
  label B_e:
  s = 0;
  label B_d:
  d[0] = q;
  e[0] = m;
  f[0] = r;
  g[0] = p;
  l = b[0];
  if (l >= c) goto B_cb;
  k = 1;
  m = 0;
  loop L_db {
    e = l[0]:byte;
    br_table[B_hb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_cb, B_gb, B_cb, B_fb, ..B_ib](
      e + -33);
    label B_ib:
    if (e != 95) goto B_cb;
    label B_hb:
    b[0] = l + 1;
    l = 4;
    if (s | d[0] != 2) goto B_c;
    br_table[B_eb, B_eb, B_eb, B_eb, B_c, B_lb, B_kb, B_jb, B_eb, ..B_c](
      g[0])
    label B_lb:
    g[0] = 0;
    goto B_eb;
    label B_kb:
    g[0] = 2;
    goto B_eb;
    label B_jb:
    g[0] = 3;
    goto B_eb;
    label B_gb:
    b[0] = l + 1;
    if (eqz(m & 1)) goto B_mb;
    return 5;
    label B_mb:
    m = 1;
    f[0] = 1;
    goto B_eb;
    label B_fb:
    b[0] = l + 1;
    if (eqz(m & 1)) goto B_nb;
    return 5;
    label B_nb:
    f[0] = 2;
    m = 1;
    label B_eb:
    l = b[0];
    if (l < c) continue L_db;
  }
  k = 0;
  label B_cb:
  if (a != 1) goto B_ob;
  if (d[0] != 18) goto B_ob;
  i[0] = 0L;
  label B_ob:
  if (eqz(k)) goto B_pb;
  l = l[0]:ubyte;
  if (l != 42) goto B_qb;
  l = 0;
  t = 0L;
  br_table[B_tb, B_vb, B_vb, B_wb, B_ub, B_xb, B_yb, B_yb, ..B_ub](
    d[0] + -13)
  label B_yb:
  t = 0L;
  l = a;
  br_table[B_tb, B_zb, ..B_sb](a)
  label B_zb:
  l = 1;
  goto B_tb;
  label B_xb:
  t = 0L;
  l = a;
  br_table[B_tb, B_ac, ..B_sb](a)
  label B_ac:
  l = 2;
  goto B_tb;
  label B_wb:
  t = 1L;
  l = a;
  br_table[B_tb, B_ub, ..B_rb](a);
  label B_vb:
  t = 1L;
  goto B_tb;
  label B_ub:
  l = 1;
  t = 0L;
  label B_tb:
  h[0] = l;
  label B_sb:
  i[0] = t;
  label B_rb:
  b[0] = b[0] + 1;
  goto B_pb;
  label B_qb:
  if ((l + -48 & 255) > 9) goto B_pb;
  0[16550]:int = 0;
  h[0] = 0;
  t = 0L;
  l = b[0];
  c = l[0]:ubyte;
  if ((c + -48 & 255) > 9) goto B_bc;
  l = l + 1;
  t = 0L;
  loop L_cc {
    if (t < 1844674407370955162L) goto B_dc;
    66200[0]:int = 68;
    c = (l + -1)[0]:ubyte;
    label B_dc:
    b[0] = l;
    t = t * 10L + i64_extend8_s(i64_extend_i32_u(c)) + -48L;
    c = l[0]:ubyte;
    l = l + 1;
    if ((c + -48 & 255) < 10) continue L_cc;
  }
  label B_bc:
  l = 3;
  if (66200[0]:int) goto B_c;
  i[0] = t;
  label B_pb:
  l = 0;
  br_table[B_fc, B_ec, B_ec, B_ec, B_ec, B_ec, B_ec, B_ec, B_ec, B_ec, B_c, B_c, B_c, ..B_ec](
    d[0] + -3)
  label B_fc:
  if (j[0] != 2) goto B_c;
  j[0] = 3;
  return 0;
  label B_ec:
  j[0] = 1;
  label B_c:
  return l;
}

export function pm_size_to_native(a:int):int {
  var b:int = 0;
  if (a > 8) goto B_a;
  b = ((a << 2) + 58340)[0]:int;
  label B_a:
  return b;
}

export function pm_token_type_to_str(a:int):int {
  var b:int = 58376;
  a = a + -1;
  if (a > 164) goto B_a;
  b = ((a << 2) + 58380)[0]:int;
  label B_a:
  return b;
}

export function pm_node_list_append(a:{ a:int, b:int, c:int }, b:int) {
  var c:int;
  var d:int;
  c = a.a;
  if (c == a.b) goto B_b;
  d = a.c;
  goto B_a;
  label B_b:
  a.b = (c = select_if(c << 1, 4, c));
  a.c = (d = realloc(a.c, c << 2));
  c = a.a;
  label B_a:
  a.a = c + 1;
  d[c]:int = b;
}

export function pm_node_destroy(a:int, b:int) {
  var c:int;
  br_table[B_b, B_ld, B_kd, B_jd, B_id, B_hd, B_gd, B_fd, B_ed, B_a, B_dd, B_cd, B_a, B_bd, B_a, B_ad, B_zc, B_yc, B_xc, B_wc, B_vc, B_uc, B_tc, B_sc, B_rc, B_qc, B_pc, B_oc, B_nc, B_a, B_a, B_mc, B_lc, B_kc, B_jc, B_ic, B_hc, B_gc, B_fc, B_ec, B_dc, B_a, B_a, B_cc, B_bc, B_ac, B_zb, B_yb, B_xb, B_wb, B_a, B_vb, B_ub, B_a, B_tb, B_a, B_a, B_sb, B_rb, B_qb, B_pb, B_a, B_a, B_ob, B_nb, B_mb, B_lb, B_kb, B_jb, B_a, B_ib, B_hb, B_gb, B_fb, B_eb, B_db, B_cb, B_bb, B_a, B_a, B_ab, B_a, B_za, B_ya, B_xa, B_wa, B_va, B_ua, B_a, B_ta, B_sa, B_ra, B_qa, B_a, B_a, B_pa, B_oa, B_na, B_ma, B_la, B_a, B_ka, B_ja, B_ia, B_ha, B_a, B_a, B_a, B_a, B_ga, B_fa, B_ea, B_da, B_ca, B_ba, B_aa, B_z, B_y, B_x, B_w, B_v, B_a, B_u, B_a, B_a, B_t, B_s, B_a, B_a, B_r, B_a, B_q, B_a, B_p, B_a, B_o, B_n, B_m, B_l, B_k, B_a, B_j, B_i, B_h, B_g, B_f, B_e, B_d, ..B_c](
    b[0]:ushort + -1)
  label B_ld:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[4]:int);
  free(b);
  return ;
  label B_kd:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[4]:int);
  free(b);
  return ;
  label B_jd:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[4]:int);
  free(b);
  return ;
  label B_id:
  pm_node_list_free(a, b + 12);
  free(b);
  return ;
  label B_hd:
  pm_node_list_free(a, b + 12);
  free(b);
  return ;
  label B_gd:
  c = b[3]:int;
  if (eqz(c)) goto B_md;
  pm_node_destroy(a, c);
  label B_md:
  pm_node_list_free(a, b + 16);
  c = b[7]:int;
  if (eqz(c)) goto B_nd;
  pm_node_destroy(a, c);
  label B_nd:
  pm_node_list_free(a, b + 32);
  free(b);
  return ;
  label B_fd:
  pm_node_destroy(a, b[3]:int);
  c = b[4]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_ed:
  c = b[3]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_dd:
  c = b[5]:int;
  if (eqz(c)) goto B_od;
  pm_node_destroy(a, c);
  label B_od:
  c = b[6]:int;
  if (eqz(c)) goto B_pd;
  pm_node_destroy(a, c);
  label B_pd:
  c = b[7]:int;
  if (eqz(c)) goto B_qd;
  pm_node_destroy(a, c);
  label B_qd:
  c = b[8]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_cd:
  c = b[3]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_bd:
  pm_constant_id_list_free(b + 12);
  c = b[7]:int;
  if (eqz(c)) goto B_rd;
  pm_node_destroy(a, c);
  label B_rd:
  c = b[8]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_ad:
  c = b[3]:int;
  if (eqz(c)) goto B_sd;
  pm_node_destroy(a, c);
  label B_sd:
  pm_node_list_free(a, b + 16);
  free(b);
  return ;
  label B_zc:
  c = b[3]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_yc:
  c = b[3]:int;
  if (eqz(c)) goto B_td;
  pm_node_destroy(a, c);
  label B_td:
  pm_node_destroy(a, b[12]:int);
  free(b);
  return ;
  label B_xc:
  c = b[3]:int;
  if (eqz(c)) goto B_ud;
  pm_node_destroy(a, c);
  label B_ud:
  c = b[11]:int;
  if (eqz(c)) goto B_vd;
  pm_node_destroy(a, c);
  label B_vd:
  c = b[14]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_wc:
  c = b[3]:int;
  if (eqz(c)) goto B_wd;
  pm_node_destroy(a, c);
  label B_wd:
  pm_node_destroy(a, b[13]:int);
  free(b);
  return ;
  label B_vc:
  c = b[3]:int;
  if (eqz(c)) goto B_xd;
  pm_node_destroy(a, c);
  label B_xd:
  pm_node_destroy(a, b[12]:int);
  free(b);
  return ;
  label B_uc:
  pm_node_destroy(a, b[3]:int);
  free(b);
  return ;
  label B_tc:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[4]:int);
  free(b);
  return ;
  label B_sc:
  c = b[3]:int;
  if (eqz(c)) goto B_yd;
  pm_node_destroy(a, c);
  label B_yd:
  pm_node_list_free(a, b + 16);
  c = b[7]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_rc:
  c = b[3]:int;
  if (eqz(c)) goto B_zd;
  pm_node_destroy(a, c);
  label B_zd:
  pm_node_list_free(a, b + 16);
  c = b[7]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_qc:
  pm_constant_id_list_free(b + 12);
  pm_node_destroy(a, b[8]:int);
  c = b[11]:int;
  if (eqz(c)) goto B_ae;
  pm_node_destroy(a, c);
  label B_ae:
  c = b[12]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_pc:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_oc:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_nc:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_mc:
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_lc:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_kc:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_jc:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_ic:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_hc:
  c = b[3]:int;
  if (eqz(c)) goto B_be;
  pm_node_destroy(a, c);
  label B_be:
  pm_node_destroy(a, b[4]:int);
  free(b);
  return ;
  label B_gc:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_fc:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_ec:
  c = b[3]:int;
  if (eqz(c)) goto B_ce;
  pm_node_destroy(a, c);
  label B_ce:
  pm_node_destroy(a, b[4]:int);
  free(b);
  return ;
  label B_dc:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_cc:
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_bc:
  c = b[6]:int;
  if (eqz(c)) goto B_de;
  pm_node_destroy(a, c);
  label B_de:
  c = b[7]:int;
  if (eqz(c)) goto B_ee;
  pm_node_destroy(a, c);
  label B_ee:
  c = b[8]:int;
  if (eqz(c)) goto B_fe;
  pm_node_destroy(a, c);
  label B_fe:
  pm_constant_id_list_free(b + 36);
  free(b);
  return ;
  label B_ac:
  pm_node_destroy(a, b[5]:int);
  free(b);
  return ;
  label B_zb:
  c = b[5]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_yb:
  c = b[5]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_xb:
  pm_node_destroy(a, b[5]:int);
  free(b);
  return ;
  label B_wb:
  c = b[5]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_vb:
  c = b[3]:int;
  if (eqz(c)) goto B_ge;
  pm_node_destroy(a, c);
  label B_ge:
  pm_node_destroy(a, b[4]:int);
  pm_node_list_free(a, b + 20);
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_ub:
  c = b[3]:int;
  if (eqz(c)) goto B_he;
  pm_node_destroy(a, c);
  label B_he:
  c = b[4]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_tb:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[4]:int);
  c = b[5]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_sb:
  c = b[3]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_rb:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_qb:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_pb:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_ob:
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_nb:
  pm_node_list_free(a, b + 20);
  free(b);
  return ;
  label B_mb:
  c = b[3]:int;
  if (eqz(c)) goto B_ie;
  pm_node_destroy(a, c);
  label B_ie:
  pm_node_list_free(a, b + 16);
  c = b[7]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_lb:
  pm_node_destroy(a, b[5]:int);
  c = b[8]:int;
  if (eqz(c)) goto B_je;
  pm_node_destroy(a, c);
  label B_je:
  c = b[9]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_kb:
  pm_node_destroy(a, b[3]:int);
  free(b);
  return ;
  label B_jb:
  pm_node_destroy(a, b[3]:int);
  free(b);
  return ;
  label B_ib:
  pm_node_destroy(a, b[3]:int);
  c = b[4]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_hb:
  c = b[3]:int;
  if (eqz(c)) goto B_ke;
  pm_node_destroy(a, c);
  label B_ke:
  c = b[8]:int;
  if (eqz(c)) goto B_le;
  pm_node_destroy(a, c);
  label B_le:
  c = b[11]:int;
  if (eqz(c)) goto B_me;
  pm_node_destroy(a, c);
  label B_me:
  pm_node_destroy(a, b[14]:int);
  free(b);
  return ;
  label B_gb:
  c = b[3]:int;
  if (eqz(c)) goto B_ne;
  pm_node_destroy(a, c);
  label B_ne:
  c = b[8]:int;
  if (eqz(c)) goto B_oe;
  pm_node_destroy(a, c);
  label B_oe:
  c = b[11]:int;
  if (eqz(c)) goto B_pe;
  pm_node_destroy(a, c);
  label B_pe:
  pm_node_destroy(a, b[15]:int);
  free(b);
  return ;
  label B_fb:
  c = b[3]:int;
  if (eqz(c)) goto B_qe;
  pm_node_destroy(a, c);
  label B_qe:
  c = b[8]:int;
  if (eqz(c)) goto B_re;
  pm_node_destroy(a, c);
  label B_re:
  c = b[11]:int;
  if (eqz(c)) goto B_se;
  pm_node_destroy(a, c);
  label B_se:
  pm_node_destroy(a, b[14]:int);
  free(b);
  return ;
  label B_eb:
  pm_node_destroy(a, b[3]:int);
  c = b[6]:int;
  if (eqz(c)) goto B_te;
  pm_node_destroy(a, c);
  label B_te:
  c = b[9]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_db:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_cb:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_bb:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_ab:
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_za:
  pm_node_list_free(a, b + 20);
  free(b);
  return ;
  label B_ya:
  pm_node_list_free(a, b + 20);
  free(b);
  return ;
  label B_xa:
  pm_node_list_free(a, b + 20);
  free(b);
  return ;
  label B_wa:
  pm_node_list_free(a, b + 20);
  free(b);
  return ;
  label B_va:
  pm_node_list_free(a, b + 20);
  free(b);
  return ;
  label B_ua:
  pm_node_list_free(a, b + 12);
  free(b);
  return ;
  label B_ta:
  pm_constant_id_list_free(b + 12);
  c = b[13]:int;
  if (eqz(c)) goto B_ue;
  pm_node_destroy(a, c);
  label B_ue:
  c = b[14]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_sa:
  pm_node_destroy(a, b[7]:int);
  free(b);
  return ;
  label B_ra:
  pm_node_destroy(a, b[7]:int);
  free(b);
  return ;
  label B_qa:
  pm_node_destroy(a, b[7]:int);
  free(b);
  return ;
  label B_pa:
  pm_node_destroy(a, b[7]:int);
  free(b);
  return ;
  label B_oa:
  pm_string_free(b + 36);
  free(b);
  return ;
  label B_na:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[4]:int);
  free(b);
  return ;
  label B_ma:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[4]:int);
  free(b);
  return ;
  label B_la:
  pm_node_destroy(a, b[3]:int);
  pm_node_list_free(a, b + 16);
  free(b);
  return ;
  label B_ka:
  pm_constant_id_list_free(b + 12);
  pm_node_destroy(a, b[8]:int);
  c = b[9]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_ja:
  pm_node_list_free(a, b + 12);
  c = b[6]:int;
  if (eqz(c)) goto B_ve;
  pm_node_destroy(a, c);
  label B_ve:
  pm_node_list_free(a, b + 28);
  free(b);
  return ;
  label B_ia:
  pm_node_list_free(a, b + 12);
  c = b[6]:int;
  if (eqz(c)) goto B_we;
  pm_node_destroy(a, c);
  label B_we:
  pm_node_list_free(a, b + 28);
  pm_node_destroy(a, b[16]:int);
  free(b);
  return ;
  label B_ha:
  c = b[3]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_ga:
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_fa:
  pm_node_destroy(a, b[8]:int);
  free(b);
  return ;
  label B_ea:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[4]:int);
  free(b);
  return ;
  label B_da:
  pm_node_list_free(a, b + 12);
  pm_node_list_free(a, b + 24);
  c = b[9]:int;
  if (eqz(c)) goto B_xe;
  pm_node_destroy(a, c);
  label B_xe:
  pm_node_list_free(a, b + 40);
  pm_node_list_free(a, b + 52);
  c = b[16]:int;
  if (eqz(c)) goto B_ye;
  pm_node_destroy(a, c);
  label B_ye:
  c = b[17]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_ca:
  c = b[3]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_ba:
  pm_node_destroy(a, b[3]:int);
  free(b);
  return ;
  label B_aa:
  pm_node_destroy(a, b[3]:int);
  free(b);
  return ;
  label B_z:
  c = b[3]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_y:
  c = b[3]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_x:
  pm_constant_id_list_free(b + 12);
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_w:
  c = b[3]:int;
  if (eqz(c)) goto B_ze;
  pm_node_destroy(a, c);
  label B_ze:
  c = b[4]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_v:
  pm_node_destroy(a, b[3]:int);
  free(b);
  return ;
  label B_u:
  pm_string_free(b + 36);
  free(b);
  return ;
  label B_t:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[6]:int);
  free(b);
  return ;
  label B_s:
  pm_node_list_free(a, b + 20);
  c = b[10]:int;
  if (eqz(c)) goto B_af;
  pm_node_destroy(a, c);
  label B_af:
  c = b[11]:int;
  if (eqz(c)) goto B_bf;
  pm_node_destroy(a, c);
  label B_bf:
  c = b[12]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_r:
  c = b[5]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_q:
  pm_constant_id_list_free(b + 12);
  pm_node_destroy(a, b[10]:int);
  c = b[11]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_p:
  pm_string_free(b + 12);
  free(b);
  return ;
  label B_o:
  c = b[5]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_n:
  pm_node_list_free(a, b + 12);
  free(b);
  return ;
  label B_m:
  pm_string_free(b + 36);
  free(b);
  return ;
  label B_l:
  c = b[7]:int;
  if (eqz(c)) goto B_cf;
  pm_node_destroy(a, c);
  label B_cf:
  c = b[10]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_k:
  pm_string_free(b + 36);
  free(b);
  return ;
  label B_j:
  pm_node_list_free(a, b + 12);
  free(b);
  return ;
  label B_i:
  pm_node_destroy(a, b[5]:int);
  c = b[8]:int;
  if (eqz(c)) goto B_df;
  pm_node_destroy(a, c);
  label B_df:
  c = b[9]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_h:
  pm_node_destroy(a, b[7]:int);
  c = b[8]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_g:
  pm_node_list_free(a, b + 20);
  c = b[8]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_f:
  pm_node_destroy(a, b[7]:int);
  c = b[8]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_e:
  pm_string_free(b + 36);
  free(b);
  return ;
  label B_d:
  c = b[7]:int;
  if (eqz(c)) goto B_a;
  pm_node_destroy(a, c);
  free(b);
  return ;
  label B_c:
  assert_fail(26957, 13527, 86, 1146);
  unreachable;
  label B_b:
  pm_node_destroy(a, b[3]:int);
  pm_node_destroy(a, b[4]:int);
  label B_a:
  free(b);
}

function pm_node_list_free(a:int, b:{ a:int, b:int, c:int }) {
  if (eqz(b.b)) goto B_a;
  if (eqz(b.a)) goto B_b;
  var c:int = 0;
  var d:int = 0;
  loop L_c {
    pm_node_destroy(a, (b.c + c)[0]:int);
    c = c + 4;
    d = d + 1;
    if (d < b.a) continue L_c;
  }
  label B_b:
  free(b.c);
  label B_a:
}

export function pm_node_memsize(a:int, b:long_ptr@4) {
  b[0] = 0L;
  pm_node_memsize_node(a, b);
}

function pm_node_memsize_node(a:int, b:{ a:int, b:int }) {
  var c:int;
  loop L_b {
    b.b = b.b + 1;
    br_table[B_ae, B_zd, B_yd, B_xd, B_wd, B_vd, B_ud, B_td, B_sd, B_xa, B_rd, B_qd, B_xa, B_pd, B_wa, B_od, B_nd, B_md, B_ld, B_kd, B_jd, B_id, B_hd, B_gd, B_fd, B_ed, B_dd, B_cd, B_bd, B_xa, B_xa, B_ad, B_zc, B_yc, B_xc, B_wc, B_vc, B_uc, B_tc, B_sc, B_rc, B_xa, B_xa, B_qc, B_pc, B_oc, B_nc, B_mc, B_lc, B_kc, B_ya, B_jc, B_ic, B_ya, B_hc, B_ya, B_ya, B_gc, B_fc, B_ec, B_dc, B_xa, B_xa, B_cc, B_bc, B_ac, B_zb, B_yb, B_xb, B_ya, B_wb, B_vb, B_ub, B_tb, B_sb, B_rb, B_qb, B_pb, B_xa, B_xa, B_ob, B_ya, B_nb, B_mb, B_lb, B_kb, B_jb, B_ib, B_wa, B_hb, B_gb, B_fb, B_eb, B_db, B_db, B_cb, B_bb, B_ab, B_za, B_va, B_ya, B_ua, B_ta, B_sa, B_ra, B_ya, B_qa, B_xa, B_xa, B_pa, B_oa, B_na, B_ma, B_la, B_ka, B_ja, B_ia, B_ha, B_ga, B_fa, B_ea, B_ya, B_da, B_ca, B_xa, B_ba, B_aa, B_wa, B_ya, B_z, B_ya, B_y, B_ya, B_x, B_ya, B_w, B_v, B_u, B_t, B_s, B_ya, B_r, B_q, B_p, B_o, B_n, B_m, B_l, ..B_a](
      a[0]:ushort + -1)
    label B_ae:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 16)[0]:int;
    continue L_b;
    label B_zd:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 16)[0]:int;
    continue L_b;
    label B_yd:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 16)[0]:int;
    continue L_b;
    label B_xd:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 16)[0]:int;
    continue L_b;
    label B_wd:
    b.a = b.a + 12;
    a = pm_node_list_memsize(a + 12, b);
    goto B_j;
    label B_vd:
    b.a = b.a + 28;
    a = pm_node_list_memsize(a + 12, b);
    goto B_j;
    label B_ud:
    b.a = b.a + 36;
    c = a[3]:int;
    if (eqz(c)) goto B_be;
    pm_node_memsize_node(c, b);
    label B_be:
    b.a = pm_node_list_memsize(a + 16, b) + b.a;
    c = a[7]:int;
    if (eqz(c)) goto B_ce;
    pm_node_memsize_node(c, b);
    label B_ce:
    a = pm_node_list_memsize(a + 32, b);
    goto B_j;
    label B_td:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    goto B_h;
    label B_sd:
    b.a = b.a + 24;
    goto B_c;
    label B_rd:
    b.a = b.a + 44;
    c = a[5]:int;
    if (eqz(c)) goto B_de;
    pm_node_memsize_node(c, b);
    label B_de:
    c = a[6]:int;
    if (eqz(c)) goto B_ee;
    pm_node_memsize_node(c, b);
    label B_ee:
    c = a[7]:int;
    if (eqz(c)) goto B_d;
    pm_node_memsize_node(c, b);
    goto B_d;
    label B_qd:
    b.a = b.a + 24;
    goto B_c;
    label B_pd:
    b.a = b.a + 40;
    b.a = pm_constant_id_list_memsize(a + 12) + b.a;
    c = a[7]:int;
    if (eqz(c)) goto B_d;
    pm_node_memsize_node(c, b);
    goto B_d;
    label B_od:
    b.a = b.a + 32;
    c = a[3]:int;
    if (eqz(c)) goto B_fe;
    pm_node_memsize_node(c, b);
    label B_fe:
    a = pm_node_list_memsize(a + 16, b);
    goto B_j;
    label B_nd:
    b.a = b.a + 24;
    goto B_c;
    label B_md:
    b.a = b.a + 52;
    c = a[3]:int;
    if (eqz(c)) goto B_ge;
    pm_node_memsize_node(c, b);
    label B_ge:
    a = (a + 48)[0]:int;
    continue L_b;
    label B_ld:
    b.a = b.a + 60;
    c = a[3]:int;
    if (eqz(c)) goto B_he;
    pm_node_memsize_node(c, b);
    label B_he:
    c = a[11]:int;
    if (eqz(c)) goto B_e;
    pm_node_memsize_node(c, b);
    goto B_e;
    label B_kd:
    b.a = b.a + 56;
    c = a[3]:int;
    if (eqz(c)) goto B_ie;
    pm_node_memsize_node(c, b);
    label B_ie:
    a = (a + 52)[0]:int;
    continue L_b;
    label B_jd:
    b.a = b.a + 52;
    c = a[3]:int;
    if (eqz(c)) goto B_je;
    pm_node_memsize_node(c, b);
    label B_je:
    a = (a + 48)[0]:int;
    continue L_b;
    label B_id:
    b.a = b.a + 36;
    a = (a + 12)[0]:int;
    continue L_b;
    label B_hd:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 16)[0]:int;
    continue L_b;
    label B_gd:
    b.a = b.a + 36;
    c = a[3]:int;
    if (eqz(c)) goto B_ke;
    pm_node_memsize_node(c, b);
    label B_ke:
    b.a = pm_node_list_memsize(a + 16, b) + b.a;
    goto B_k;
    label B_fd:
    b.a = b.a + 36;
    c = a[3]:int;
    if (eqz(c)) goto B_le;
    pm_node_memsize_node(c, b);
    label B_le:
    b.a = pm_node_list_memsize(a + 16, b) + b.a;
    goto B_k;
    label B_ed:
    b.a = b.a + 52;
    b.a = pm_constant_id_list_memsize(a + 12) + b.a;
    pm_node_memsize_node(a[8]:int, b);
    c = a[11]:int;
    if (eqz(c)) goto B_f;
    pm_node_memsize_node(c, b);
    goto B_f;
    label B_dd:
    b.a = b.a + 36;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_cd:
    b.a = b.a + 40;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_bd:
    b.a = b.a + 36;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_ad:
    b.a = b.a + 36;
    a = (a + 24)[0]:int;
    continue L_b;
    label B_zc:
    b.a = b.a + 36;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_yc:
    b.a = b.a + 40;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_xc:
    b.a = b.a + 36;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_wc:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 24)[0]:int;
    continue L_b;
    label B_vc:
    b.a = b.a + 28;
    c = a[3]:int;
    if (eqz(c)) goto B_me;
    pm_node_memsize_node(c, b);
    label B_me:
    a = (a + 16)[0]:int;
    continue L_b;
    label B_uc:
    b.a = b.a + 32;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 24)[0]:int;
    continue L_b;
    label B_tc:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 24)[0]:int;
    continue L_b;
    label B_sc:
    b.a = b.a + 28;
    c = a[3]:int;
    if (eqz(c)) goto B_ne;
    pm_node_memsize_node(c, b);
    label B_ne:
    a = (a + 16)[0]:int;
    continue L_b;
    label B_rc:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 24)[0]:int;
    continue L_b;
    label B_qc:
    b.a = b.a + 36;
    a = (a + 24)[0]:int;
    continue L_b;
    label B_pc:
    b.a = b.a + 88;
    c = a[6]:int;
    if (eqz(c)) goto B_oe;
    pm_node_memsize_node(c, b);
    label B_oe:
    c = a[7]:int;
    if (eqz(c)) goto B_pe;
    pm_node_memsize_node(c, b);
    label B_pe:
    c = a[8]:int;
    if (eqz(c)) goto B_qe;
    pm_node_memsize_node(c, b);
    label B_qe:
    a = pm_constant_id_list_memsize(a + 36);
    goto B_j;
    label B_oc:
    b.a = b.a + 40;
    a = (a + 20)[0]:int;
    continue L_b;
    label B_nc:
    b.a = b.a + 32;
    goto B_g;
    label B_mc:
    b.a = b.a + 32;
    goto B_g;
    label B_lc:
    b.a = b.a + 24;
    a = (a + 20)[0]:int;
    continue L_b;
    label B_kc:
    b.a = b.a + 32;
    goto B_g;
    label B_jc:
    b.a = b.a + 40;
    c = a[3]:int;
    if (eqz(c)) goto B_re;
    pm_node_memsize_node(c, b);
    label B_re:
    pm_node_memsize_node(a[4]:int, b);
    b.a = pm_node_list_memsize(a + 20, b) + b.a;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_ic:
    b.a = b.a + 28;
    c = a[3]:int;
    if (eqz(c)) goto B_h;
    pm_node_memsize_node(c, b);
    goto B_h;
    label B_hc:
    b.a = b.a + 56;
    pm_node_memsize_node(a[3]:int, b);
    pm_node_memsize_node(a[4]:int, b);
    goto B_g;
    label B_gc:
    b.a = b.a + 16;
    goto B_c;
    label B_fc:
    b.a = b.a + 36;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_ec:
    b.a = b.a + 40;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_dc:
    b.a = b.a + 36;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_cc:
    b.a = b.a + 36;
    a = (a + 24)[0]:int;
    continue L_b;
    label B_bc:
    b.a = b.a + 28;
    a = pm_node_list_memsize(a + 20, b);
    goto B_j;
    label B_ac:
    b.a = b.a + 36;
    c = a[3]:int;
    if (eqz(c)) goto B_se;
    pm_node_memsize_node(c, b);
    label B_se:
    b.a = pm_node_list_memsize(a + 16, b) + b.a;
    goto B_k;
    label B_zb:
    b.a = b.a + 48;
    pm_node_memsize_node(a[5]:int, b);
    c = a[8]:int;
    if (eqz(c)) goto B_i;
    pm_node_memsize_node(c, b);
    goto B_i;
    label B_yb:
    b.a = b.a + 16;
    a = (a + 12)[0]:int;
    continue L_b;
    label B_xb:
    b.a = b.a + 16;
    a = (a + 12)[0]:int;
    continue L_b;
    label B_wb:
    b.a = b.a + 36;
    pm_node_memsize_node(a[3]:int, b);
    goto B_h;
    label B_vb:
    b.a = b.a + 60;
    c = a[3]:int;
    if (eqz(c)) goto B_te;
    pm_node_memsize_node(c, b);
    label B_te:
    c = a[8]:int;
    if (eqz(c)) goto B_ue;
    pm_node_memsize_node(c, b);
    label B_ue:
    c = a[11]:int;
    if (eqz(c)) goto B_ve;
    pm_node_memsize_node(c, b);
    label B_ve:
    a = (a + 56)[0]:int;
    continue L_b;
    label B_ub:
    b.a = b.a + 64;
    c = a[3]:int;
    if (eqz(c)) goto B_we;
    pm_node_memsize_node(c, b);
    label B_we:
    c = a[8]:int;
    if (eqz(c)) goto B_xe;
    pm_node_memsize_node(c, b);
    label B_xe:
    c = a[11]:int;
    if (eqz(c)) goto B_ye;
    pm_node_memsize_node(c, b);
    label B_ye:
    a = (a + 60)[0]:int;
    continue L_b;
    label B_tb:
    b.a = b.a + 60;
    c = a[3]:int;
    if (eqz(c)) goto B_ze;
    pm_node_memsize_node(c, b);
    label B_ze:
    c = a[8]:int;
    if (eqz(c)) goto B_af;
    pm_node_memsize_node(c, b);
    label B_af:
    c = a[11]:int;
    if (eqz(c)) goto B_bf;
    pm_node_memsize_node(c, b);
    label B_bf:
    a = (a + 56)[0]:int;
    continue L_b;
    label B_sb:
    b.a = b.a + 40;
    pm_node_memsize_node(a[3]:int, b);
    c = a[6]:int;
    if (eqz(c)) goto B_i;
    pm_node_memsize_node(c, b);
    goto B_i;
    label B_rb:
    b.a = b.a + 36;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_qb:
    b.a = b.a + 40;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_pb:
    b.a = b.a + 36;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_ob:
    b.a = b.a + 36;
    a = (a + 24)[0]:int;
    continue L_b;
    label B_nb:
    b.a = b.a + 28;
    a = pm_node_list_memsize(a + 20, b);
    goto B_j;
    label B_mb:
    b.a = b.a + 28;
    a = pm_node_list_memsize(a + 20, b);
    goto B_j;
    label B_lb:
    b.a = b.a + 28;
    a = pm_node_list_memsize(a + 20, b);
    goto B_j;
    label B_kb:
    b.a = b.a + 28;
    a = pm_node_list_memsize(a + 20, b);
    goto B_j;
    label B_jb:
    b.a = b.a + 28;
    a = pm_node_list_memsize(a + 20, b);
    goto B_j;
    label B_ib:
    b.a = b.a + 12;
    a = pm_node_list_memsize(a + 12, b);
    goto B_j;
    label B_hb:
    b.a = b.a + 48;
    b.a = pm_constant_id_list_memsize(a + 12) + b.a;
    c = a[13]:int;
    if (eqz(c)) goto B_e;
    pm_node_memsize_node(c, b);
    goto B_e;
    label B_gb:
    b.a = b.a + 40;
    a = (a + 28)[0]:int;
    continue L_b;
    label B_fb:
    b.a = b.a + 44;
    a = (a + 28)[0]:int;
    continue L_b;
    label B_eb:
    b.a = b.a + 40;
    a = (a + 28)[0]:int;
    continue L_b;
    label B_db:
    a = 20;
    goto B_j;
    label B_cb:
    b.a = b.a + 40;
    a = (a + 28)[0]:int;
    continue L_b;
    label B_bb:
    b.a = b.a + 48;
    a = pm_string_memsize(a + 36);
    goto B_j;
    label B_ab:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 16)[0]:int;
    continue L_b;
    label B_za:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 16)[0]:int;
    continue L_b;
    label B_ya:
    a = 12;
    goto B_j;
    label B_xa:
    a = 16;
    goto B_j;
    label B_wa:
    a = 32;
    goto B_j;
    label B_va:
    b.a = b.a + 16;
    pm_node_memsize_node(a[3]:int, b);
    a = pm_node_list_memsize(a + 16, b);
    goto B_j;
    label B_ua:
    b.a = b.a + 40;
    b.a = pm_constant_id_list_memsize(a + 12) + b.a;
    pm_node_memsize_node(a[8]:int, b);
    goto B_i;
    label B_ta:
    b.a = b.a + 32;
    b.a = pm_node_list_memsize(a + 12, b) + b.a;
    c = a[6]:int;
    if (eqz(c)) goto B_cf;
    pm_node_memsize_node(c, b);
    label B_cf:
    a = pm_node_list_memsize(a + 28, b);
    goto B_j;
    label B_sa:
    b.a = b.a + 44;
    b.a = pm_node_list_memsize(a + 12, b) + b.a;
    c = a[6]:int;
    if (eqz(c)) goto B_df;
    pm_node_memsize_node(c, b);
    label B_df:
    b.a = pm_node_list_memsize(a + 28, b) + b.a;
    a = (a + 64)[0]:int;
    continue L_b;
    label B_ra:
    b.a = b.a + 24;
    goto B_c;
    label B_qa:
    a = 28;
    goto B_j;
    label B_pa:
    b.a = b.a + 28;
    a = (a + 24)[0]:int;
    continue L_b;
    label B_oa:
    b.a = b.a + 36;
    a = (a + 32)[0]:int;
    continue L_b;
    label B_na:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 16)[0]:int;
    continue L_b;
    label B_ma:
    b.a = b.a + 24;
    b.a = pm_node_list_memsize(a + 12, b) + b.a;
    b.a = pm_node_list_memsize(a + 24, b) + b.a;
    c = a[9]:int;
    if (eqz(c)) goto B_ef;
    pm_node_memsize_node(c, b);
    label B_ef:
    b.a = pm_node_list_memsize(a + 40, b) + b.a;
    b.a = pm_node_list_memsize(a + 52, b) + b.a;
    c = a[16]:int;
    if (eqz(c)) goto B_ff;
    pm_node_memsize_node(c, b);
    label B_ff:
    a = a[17]:int;
    if (a) continue L_b;
    goto B_a;
    label B_la:
    b.a = b.a + 32;
    goto B_c;
    label B_ka:
    b.a = b.a + 40;
    a = (a + 12)[0]:int;
    continue L_b;
    label B_ja:
    b.a = b.a + 24;
    a = (a + 12)[0]:int;
    continue L_b;
    label B_ia:
    b.a = b.a + 40;
    goto B_c;
    label B_ha:
    b.a = b.a + 40;
    goto B_c;
    label B_ga:
    b.a = b.a + 16;
    b.a = pm_constant_id_list_memsize(a + 12) + b.a;
    a = (a + 24)[0]:int;
    continue L_b;
    label B_fa:
    b.a = b.a + 28;
    c = a[3]:int;
    if (eqz(c)) goto B_h;
    pm_node_memsize_node(c, b);
    goto B_h;
    label B_ea:
    b.a = b.a + 16;
    a = (a + 12)[0]:int;
    continue L_b;
    label B_da:
    b.a = b.a + 48;
    a = pm_string_memsize(a + 36);
    goto B_j;
    label B_ca:
    a = 24;
    goto B_j;
    label B_ba:
    b.a = b.a + 28;
    pm_node_memsize_node(a[3]:int, b);
    a = (a + 24)[0]:int;
    continue L_b;
    label B_aa:
    b.a = b.a + 40;
    b.a = pm_node_list_memsize(a + 20, b) + b.a;
    c = a[10]:int;
    if (eqz(c)) goto B_gf;
    pm_node_memsize_node(c, b);
    label B_gf:
    c = a[11]:int;
    if (eqz(c)) goto B_f;
    pm_node_memsize_node(c, b);
    goto B_f;
    label B_z:
    b.a = b.a + 24;
    goto B_g;
    label B_y:
    b.a = b.a + 44;
    b.a = pm_constant_id_list_memsize(a + 12) + b.a;
    pm_node_memsize_node(a[10]:int, b);
    a = a[11]:int;
    if (a) continue L_b;
    goto B_a;
    label B_x:
    b.a = b.a + 24;
    a = pm_string_memsize(a + 12);
    goto B_j;
    label B_w:
    b.a = b.a + 24;
    goto B_g;
    label B_v:
    b.a = b.a + 12;
    a = pm_node_list_memsize(a + 12, b);
    goto B_j;
    label B_u:
    b.a = b.a + 48;
    a = pm_string_memsize(a + 36);
    goto B_j;
    label B_t:
    b.a = b.a + 44;
    c = a[7]:int;
    if (eqz(c)) goto B_hf;
    pm_node_memsize_node(c, b);
    label B_hf:
    a = a[10]:int;
    if (a) continue L_b;
    goto B_a;
    label B_s:
    b.a = b.a + 48;
    a = pm_string_memsize(a + 36);
    goto B_j;
    label B_r:
    b.a = b.a + 20;
    a = pm_node_list_memsize(a + 12, b);
    goto B_j;
    label B_q:
    b.a = b.a + 48;
    pm_node_memsize_node(a[5]:int, b);
    c = a[8]:int;
    if (eqz(c)) goto B_i;
    pm_node_memsize_node(c, b);
    goto B_i;
    label B_p:
    b.a = b.a + 36;
    pm_node_memsize_node(a[7]:int, b);
    goto B_d;
    label B_o:
    b.a = b.a + 24;
    b.a = pm_node_list_memsize(a + 20, b) + b.a;
    goto B_d;
    label B_n:
    b.a = b.a + 36;
    pm_node_memsize_node(a[7]:int, b);
    goto B_d;
    label B_m:
    b.a = b.a + 48;
    a = pm_string_memsize(a + 36);
    goto B_j;
    label B_l:
    b.a = b.a + 40;
    label B_k:
    a = a[7]:int;
    if (a) continue L_b;
    goto B_a;
    label B_j:
    b.a = b.a + a;
    goto B_a;
    label B_i:
    a = a[9]:int;
    if (a) continue L_b;
    goto B_a;
    label B_h:
    a = a[4]:int;
    if (a) continue L_b;
    goto B_a;
    label B_g:
    a = a[5]:int;
    if (a) continue L_b;
    goto B_a;
    label B_f:
    a = a[12]:int;
    if (a) continue L_b;
    goto B_a;
    label B_e:
    a = a[14]:int;
    if (a) continue L_b;
    goto B_a;
    label B_d:
    a = a[8]:int;
    if (a) continue L_b;
    goto B_a;
    label B_c:
    a = a[3]:int;
    if (a) continue L_b;
  }
  label B_a:
}

function pm_node_list_memsize(a:{ a:int, b:int, c:int }, b:int):int {
  var c:int = a.b;
  if (eqz(a.a)) goto B_a;
  var d:int = 0;
  var e:int = 0;
  loop L_b {
    pm_node_memsize_node((a.c + d)[0]:int, b);
    d = d + 4;
    e = e + 1;
    if (e < a.a) continue L_b;
  }
  label B_a:
  return (c << 2) + 12;
}

export function pm_node_type_to_str(a:int):int {
  var b:int = 32200;
  a = a + -1;
  if ((a & 65535) > 147) goto B_a;
  b = ((i32_extend16_s(a) << 2) + 59040)[0]:int;
  label B_a:
  return b;
}

export function pm_diagnostic_list_append(a:int, b:int, c:int, d:int):int {
  var e:int_ptr;
  e = calloc(20, 1);
  if (eqz(e)) goto B_c;
  if (d >= 219) goto B_b;
  if (d == 88) goto B_a;
  e[2] = c;
  e[1] = b;
  e[3] = ((d << 2) + 59632)[0]:int;
  pm_list_append(a, e);
  label B_c:
  return e != 0;
  label B_b:
  assert_fail(16927, 13494, 276, 12386);
  unreachable;
  label B_a:
  assert_fail(12400, 13494, 279, 12386);
  return unreachable;
}

export function pm_diagnostic_list_append_format(a:int, b:int, c:int, d:int, e:int):int {
  var h:int;
  var j:int;
  var f:int_ptr = stack_pointer - 16;
  stack_pointer = f;
  f[3] = e;
  if (d >= 219) goto B_b;
  if (d == 88) goto B_a;
  var g:int = 0;
  var i:int = vsnprintf(0, 0, h = ((d << 2) + 59632)[0]:int, f[3]);
  if (i < 0) goto B_c;
  d = calloc(20, 1);
  if (eqz(d)) goto B_c;
  j = i + 1;
  i = malloc(j);
  if (i) goto B_d;
  free(d);
  goto B_c;
  label B_d:
  f[3] = e;
  vsnprintf(i, j, h, e);
  g = 1;
  d[16]:byte = 1;
  d[3]:int = i;
  d[2]:int = c;
  d[1]:int = b;
  pm_list_append(a, d);
  label B_c:
  stack_pointer = f + 16;
  return g;
  label B_b:
  assert_fail(16927, 13494, 276, 12386);
  unreachable;
  label B_a:
  assert_fail(12400, 13494, 279, 12386);
  return unreachable;
}

export function pm_diagnostic_list_free(a:int) {
  a = a[1]:int;
  if (eqz(a)) goto B_a;
  loop L_b {
    var b:int = a[0]:int;
    if (eqz(a[16]:ubyte)) goto B_c;
    free(a[3]:int);
    label B_c:
    free(a);
    a = b;
    if (b) continue L_b;
  }
  label B_a:
}

export function pm_prettyprint(a:int, b:int, c:int) {
  var d:long_ptr = stack_pointer - 16;
  stack_pointer = d;
  (d + 8)[0]:int = 0;
  d[0] = 0L;
  prettyprint_node(a, b, c, d);
  pm_buffer_free(d);
  stack_pointer = d + 16;
}

function prettyprint_node(a:int, b:int, c:int, d:int_ptr) {
  var f:int;
  var h:int;
  var g:int;
  var e:int = stack_pointer - 864;
  stack_pointer = e;
  br_table[B_pg, B_og, B_ng, B_mg, B_lg, B_kg, B_jg, B_ig, B_hg, B_gg, B_fg, B_eg, B_dg, B_cg, B_bg, B_ag, B_zf, B_yf, B_xf, B_wf, B_vf, B_uf, B_tf, B_sf, B_rf, B_qf, B_pf, B_of, B_nf, B_mf, B_lf, B_kf, B_jf, B_if, B_hf, B_gf, B_ff, B_ef, B_df, B_cf, B_bf, B_af, B_ze, B_ye, B_xe, B_we, B_ve, B_ue, B_te, B_se, B_re, B_qe, B_pe, B_oe, B_ne, B_me, B_le, B_ke, B_je, B_ie, B_he, B_ge, B_fe, B_ee, B_de, B_ce, B_be, B_ae, B_zd, B_yd, B_xd, B_wd, B_vd, B_ud, B_td, B_sd, B_rd, B_qd, B_pd, B_od, B_nd, B_md, B_ld, B_kd, B_jd, B_id, B_hd, B_gd, B_fd, B_ed, B_dd, B_cd, B_bd, B_ad, B_zc, B_yc, B_xc, B_wc, B_vc, B_uc, B_tc, B_sc, B_rc, B_qc, B_pc, B_oc, B_nc, B_mc, B_lc, B_kc, B_jc, B_ic, B_hc, B_gc, B_fc, B_ec, B_dc, B_cc, B_bc, B_ac, B_zb, B_yb, B_xb, B_wb, B_vb, B_ub, B_tb, B_sb, B_rb, B_qb, B_pb, B_ob, B_nb, B_mb, B_lb, B_kb, B_jb, B_ib, B_hb, B_gb, B_fb, B_eb, B_db, B_cb, B_bb, B_ab, B_za, B_ya, ..B_a](
    c[0]:ushort + -1)
  label B_pg:
  pm_buffer_append_string(a, 31245, 37);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24152, 19);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24194, 19);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25239, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_og:
  pm_buffer_append_string(a, 31375, 29);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24152, 19);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24194, 19);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25239, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ng:
  pm_buffer_append_string(a, 28637, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23217, 15);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23200, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_mg:
  pm_buffer_append_string(a, 31405, 21);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23217, 15);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23200, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_lg:
  pm_buffer_append_string(a, 27727, 27);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_rg;
  pm_buffer_append_string(a, 4198, 23);
  goto B_qg;
  label B_rg:
  pm_buffer_append_string(a, 1080, 4);
  label B_qg:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23306, 20);
  e[0]:int = c[3]:int;
  pm_buffer_append_format(a, 32147, e);
  f = c[3]:int;
  if (eqz(f)) goto B_a;
  g = d[0];
  h = 0;
  loop L_sg {
    pm_buffer_append_string(d, 31823, 4);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_ug;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_tg;
    label B_ug:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_tg:
    prettyprint_node(a, b, (c[5]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_sg;
    goto B_a;
  }
  label B_kg:
  pm_buffer_append_string(a, 27160, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_wg;
  pm_buffer_append_string(a, 4182, 15);
  goto B_vg;
  label B_wg:
  pm_buffer_append_string(a, 1080, 4);
  label B_vg:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23371, 19);
  e[4]:int = c[3]:int;
  pm_buffer_append_format(a, 32147, e + 16);
  f = c[3]:int;
  if (eqz(f)) goto B_xg;
  g = d[0];
  h = 0;
  loop L_yg {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_ah;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_zg;
    label B_ah:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_zg:
    prettyprint_node(a, b, (c[5]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_yg;
  }
  label B_xg:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[6]:int) goto B_ch;
  pm_buffer_append_string(a, 31828, 5);
  goto B_bh;
  label B_ch:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_bh:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  if (c[8]:int) goto B_dh;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_dh:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_jg:
  pm_buffer_append_string(a, 28606, 30);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23180, 19);
  if (c[3]:int) goto B_fh;
  pm_buffer_append_string(a, 31828, 5);
  goto B_eh;
  label B_fh:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_eh:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23663, 20);
  e[12]:int = c[4]:int;
  pm_buffer_append_format(a, 32147, e + 48);
  f = c[4]:int;
  if (eqz(f)) goto B_gh;
  g = d[0];
  h = 0;
  loop L_hh {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_jh;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_ih;
    label B_jh:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_ih:
    prettyprint_node(a, b, (c[6]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_hh;
  }
  label B_gh:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23102, 15);
  if (c[7]:int) goto B_lh;
  pm_buffer_append_string(a, 31828, 5);
  goto B_kh;
  label B_lh:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  label B_kh:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23251, 16);
  e[8]:int = c[8]:int;
  pm_buffer_append_format(a, 32147, e + 32);
  f = c[8]:int;
  if (eqz(f)) goto B_mh;
  g = d[0];
  h = 0;
  loop L_nh {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_ph;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_oh;
    label B_ph:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_oh:
    prettyprint_node(a, b, (c[10]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_nh;
  }
  label B_mh:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[11]:int) goto B_rh;
  pm_buffer_append_string(a, 31828, 5);
  goto B_qh;
  label B_rh:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 44);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[11]:int, (c + 48)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_qh:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  if (c[13]:int) goto B_sh;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_sh:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 52);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[13]:int, (c + 56)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ig:
  pm_buffer_append_string(a, 31764, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 22985, 14);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  if (c[4]:int) goto B_uh;
  pm_buffer_append_string(a, 31828, 5);
  goto B_th;
  label B_uh:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  label B_th:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  if (c[5]:int) goto B_vh;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_vh:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_hg:
  pm_buffer_append_string(a, 27636, 28);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  if (c[3]:int) goto B_xh;
  pm_buffer_append_string(a, 31828, 5);
  goto B_wh;
  label B_xh:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_wh:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[4]:int, (c + 20)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_gg:
  pm_buffer_append_string(a, 31688, 35);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_fg:
  pm_buffer_append_string(a, 28949, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24910, 28);
  if (c[3]:int) goto B_zh;
  pm_buffer_append_string(a, 31828, 5);
  goto B_yh;
  label B_zh:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_yh:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[5]:int) goto B_bi;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ai;
  label B_bi:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  label B_ai:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24079, 24);
  if (c[6]:int) goto B_di;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ci;
  label B_di:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  label B_ci:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24104, 22);
  if (c[7]:int) goto B_fi;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ei;
  label B_fi:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  label B_ei:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24127, 24);
  if (c[8]:int) goto B_hi;
  pm_buffer_append_string(a, 31828, 5);
  goto B_gi;
  label B_hi:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  label B_gi:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  if (c[9]:int) goto B_ii;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_ii:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[9]:int, (c + 40)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_eg:
  pm_buffer_append_string(a, 27238, 31);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23832, 21);
  if (c[3]:int) goto B_ki;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ji;
  label B_ki:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_ji:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[4]:int, (c + 20)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_dg:
  pm_buffer_append_string(a, 31208, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_mi;
  pm_buffer_append_string(a, 6045, 19);
  goto B_li;
  label B_mi:
  pm_buffer_append_string(a, 1080, 4);
  label B_li:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_cg:
  pm_buffer_append_string(a, 29201, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23574, 17);
  pm_buffer_append_string(a, 15178, 2);
  if (eqz(c[3]:int)) goto B_ni;
  e[12]:long =
    pm_constant_pool_id_to_constant(g = b + 292, ((c + 20)[0]:int)[0]:int)[0]:long@4 <<
    32L;
  pm_buffer_append_format(a, 4999, e + 96);
  if (c[3]:int < 2) goto B_ni;
  f = 4;
  h = 1;
  loop L_oi {
    pm_buffer_append_string(a, 31813, 2);
    e[10]:long =
      pm_constant_pool_id_to_constant(g, (c[5]:int + f)[0]:int)[0]:long@4 <<
      32L;
    pm_buffer_append_format(a, 4999, e + 80);
    f = f + 4;
    h = h + 1;
    if (h < c[3]:int) continue L_oi;
  }
  label B_ni:
  pm_buffer_append_string(a, 32013, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23032, 28);
  e[16]:int = c[6]:int;
  pm_buffer_append_format(a, 32008, e + 64);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23487, 21);
  if (c[7]:int) goto B_qi;
  pm_buffer_append_string(a, 31828, 5);
  goto B_pi;
  label B_qi:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  label B_pi:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23000, 15);
  if (c[8]:int) goto B_si;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ri;
  label B_si:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  label B_ri:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[9]:int, (c + 40)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 44);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[11]:int, (c + 48)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_bg:
  pm_buffer_append_string(a, 28200, 32);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_ui;
  pm_buffer_append_string(a, 6045, 19);
  goto B_ti;
  label B_ui:
  pm_buffer_append_string(a, 1080, 4);
  label B_ti:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  if (c[3]:int) goto B_wi;
  pm_buffer_append_string(a, 31828, 5);
  goto B_vi;
  label B_wi:
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  label B_vi:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  if (c[4]:int) goto B_yi;
  pm_buffer_append_string(a, 31828, 5);
  goto B_xi;
  label B_yi:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_xi:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[6]:int, (c + 28)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ag:
  pm_buffer_append_string(a, 27903, 33);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23487, 21);
  if (c[3]:int) goto B_aj;
  pm_buffer_append_string(a, 31828, 5);
  goto B_zi;
  label B_aj:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_zi:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23574, 17);
  e[28]:int = c[4]:int;
  pm_buffer_append_format(a, 32147, e + 112);
  f = c[4]:int;
  if (eqz(f)) goto B_bj;
  g = d[0];
  h = 0;
  loop L_cj {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_ej;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_dj;
    label B_ej:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_dj:
    prettyprint_node(a, b, (c[6]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_cj;
  }
  label B_bj:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[7]:int) goto B_gj;
  pm_buffer_append_string(a, 31828, 5);
  goto B_fj;
  label B_gj:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[7]:int, (c + 32)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_fj:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  if (c[9]:int) goto B_hj;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_hj:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[9]:int, (c + 40)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_zf:
  pm_buffer_append_string(a, 29225, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23285, 20);
  if (c[3]:int) goto B_jj;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ij;
  label B_jj:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_ij:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25239, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[4]:int, (c + 20)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_yf:
  pm_buffer_append_string(a, 30663, 30);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_mj;
  pm_buffer_append_string(a, 7390, 16);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_nj;
  pm_buffer_append_byte(a, 44);
  goto B_lj;
  label B_nj:
  if (f & 4) goto B_kj;
  goto B_b;
  label B_mj:
  if (eqz(f & 2)) goto B_d;
  label B_lj:
  pm_buffer_append_string(a, 8348, 14);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_b;
  label B_kj:
  pm_buffer_append_byte(a, 44);
  goto B_c;
  label B_xf:
  pm_buffer_append_string(a, 29105, 22);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_qj;
  pm_buffer_append_string(a, 7390, 16);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_rj;
  pm_buffer_append_byte(a, 44);
  goto B_pj;
  label B_rj:
  if (f & 4) goto B_oj;
  goto B_e;
  label B_qj:
  if (eqz(f & 2)) goto B_g;
  label B_pj:
  pm_buffer_append_string(a, 8348, 14);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_e;
  label B_oj:
  pm_buffer_append_byte(a, 44);
  goto B_f;
  label B_wf:
  pm_buffer_append_string(a, 29793, 35);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_uj;
  pm_buffer_append_string(a, 7390, 16);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_vj;
  pm_buffer_append_byte(a, 44);
  goto B_tj;
  label B_vj:
  if (f & 4) goto B_sj;
  goto B_h;
  label B_uj:
  if (eqz(f & 2)) goto B_j;
  label B_tj:
  pm_buffer_append_string(a, 8348, 14);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_h;
  label B_sj:
  pm_buffer_append_byte(a, 44);
  goto B_i;
  label B_vf:
  pm_buffer_append_string(a, 30122, 29);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_yj;
  pm_buffer_append_string(a, 7390, 16);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_zj;
  pm_buffer_append_byte(a, 44);
  goto B_xj;
  label B_zj:
  if (f & 4) goto B_wj;
  goto B_k;
  label B_yj:
  if (eqz(f & 2)) goto B_m;
  label B_xj:
  pm_buffer_append_string(a, 8348, 14);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_k;
  label B_wj:
  pm_buffer_append_byte(a, 44);
  goto B_l;
  label B_uf:
  pm_buffer_append_string(a, 27360, 28);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_ck;
  pm_buffer_append_string(a, 7390, 16);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_dk;
  pm_buffer_append_byte(a, 44);
  goto B_bk;
  label B_dk:
  if (f & 4) goto B_ak;
  goto B_n;
  label B_ck:
  if (eqz(f & 2)) goto B_p;
  label B_bk:
  pm_buffer_append_string(a, 8348, 14);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_n;
  label B_ak:
  pm_buffer_append_byte(a, 44);
  goto B_o;
  label B_tf:
  pm_buffer_append_string(a, 28704, 32);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23233, 17);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_sf:
  pm_buffer_append_string(a, 29333, 27);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24058, 20);
  if (c[3]:int) goto B_fk;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ek;
  label B_fk:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_ek:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23531, 21);
  e[32]:int = c[4]:int;
  pm_buffer_append_format(a, 32147, e + 128);
  f = c[4]:int;
  if (eqz(f)) goto B_gk;
  g = d[0];
  h = 0;
  loop L_hk {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_jk;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_ik;
    label B_jk:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_ik:
    prettyprint_node(a, b, (c[6]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_hk;
  }
  label B_gk:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23118, 21);
  if (c[7]:int) goto B_lk;
  pm_buffer_append_string(a, 31828, 5);
  goto B_kk;
  label B_lk:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  label B_kk:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25074, 27);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[8]:int, (c + 36)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[10]:int, (c + 44)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_rf:
  pm_buffer_append_string(a, 30977, 22);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24058, 20);
  if (c[3]:int) goto B_nk;
  pm_buffer_append_string(a, 31828, 5);
  goto B_mk;
  label B_nk:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_mk:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23531, 21);
  e[36]:int = c[4]:int;
  pm_buffer_append_format(a, 32147, e + 144);
  f = c[4]:int;
  if (eqz(f)) goto B_ok;
  g = d[0];
  h = 0;
  loop L_pk {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_rk;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_qk;
    label B_rk:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_qk:
    prettyprint_node(a, b, (c[6]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_pk;
  }
  label B_ok:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23118, 21);
  if (c[7]:int) goto B_tk;
  pm_buffer_append_string(a, 31828, 5);
  goto B_sk;
  label B_tk:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  label B_sk:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25074, 27);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[8]:int, (c + 36)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[10]:int, (c + 44)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_qf:
  pm_buffer_append_string(a, 27879, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23574, 17);
  pm_buffer_append_string(a, 15178, 2);
  if (eqz(c[3]:int)) goto B_uk;
  e[22]:long =
    pm_constant_pool_id_to_constant(g = b + 292, ((c + 20)[0]:int)[0]:int)[0]:long@4 <<
    32L;
  pm_buffer_append_format(a, 4999, e + 176);
  if (c[3]:int < 2) goto B_uk;
  f = 4;
  h = 1;
  loop L_vk {
    pm_buffer_append_string(a, 31813, 2);
    e[20]:long =
      pm_constant_pool_id_to_constant(g, (c[5]:int + f)[0]:int)[0]:long@4 <<
      32L;
    pm_buffer_append_format(a, 4999, e + 160);
    f = f + 4;
    h = h + 1;
    if (h < c[3]:int) continue L_vk;
  }
  label B_uk:
  pm_buffer_append_string(a, 32013, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24828, 28);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23999, 24);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24418, 35);
  if (c[9]:int) goto B_xk;
  pm_buffer_append_string(a, 31828, 5);
  goto B_wk;
  label B_xk:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[9]:int, (c + 40)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_wk:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23465, 21);
  if (c[11]:int) goto B_zk;
  pm_buffer_append_string(a, 31828, 5);
  goto B_yk;
  label B_zk:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[11]:int, d);
  d[0] = f;
  label B_yk:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23000, 15);
  if (c[12]:int) goto B_bl;
  pm_buffer_append_string(a, 31828, 5);
  goto B_al;
  label B_bl:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[12]:int, d);
  d[0] = f;
  label B_al:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25162, 26);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 52);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[13]:int, (c + 56)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[15]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_pf:
  pm_buffer_append_string(a, 30733, 39);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_of:
  pm_buffer_append_string(a, 29873, 44);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23704, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[9]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_nf:
  pm_buffer_append_string(a, 30190, 38);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_mf:
  pm_buffer_append_string(a, 31540, 35);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_lf:
  pm_buffer_append_string(a, 27456, 37);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_kf:
  pm_buffer_append_string(a, 30444, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  if (c[7]:int) goto B_cl;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_cl:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[7]:int, (c + 32)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_jf:
  pm_buffer_append_string(a, 30628, 34);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_if:
  pm_buffer_append_string(a, 29753, 39);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23704, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[9]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_hf:
  pm_buffer_append_string(a, 30088, 33);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_gf:
  pm_buffer_append_string(a, 30694, 38);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23233, 17);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  goto B_a;
  label B_ff:
  pm_buffer_append_string(a, 29249, 30);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23162, 17);
  if (c[3]:int) goto B_el;
  pm_buffer_append_string(a, 31828, 5);
  goto B_dl;
  label B_el:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_dl:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24328, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24502, 24);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ef:
  pm_buffer_append_string(a, 29829, 43);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23233, 17);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23704, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[7]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_df:
  pm_buffer_append_string(a, 30152, 37);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23233, 17);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  goto B_a;
  label B_cf:
  pm_buffer_append_string(a, 27419, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23162, 17);
  if (c[3]:int) goto B_gl;
  pm_buffer_append_string(a, 31828, 5);
  goto B_fl;
  label B_gl:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_fl:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24328, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24502, 24);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_bf:
  pm_buffer_append_string(a, 30379, 35);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23233, 17);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  goto B_a;
  label B_af:
  pm_buffer_append_string(a, 31509, 30);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_ze:
  pm_buffer_append_string(a, 27327, 32);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_ye:
  pm_buffer_append_string(a, 29684, 31);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[7]:int, (c + 32)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_xe:
  pm_buffer_append_string(a, 29593, 21);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  if (c[6]:int) goto B_il;
  pm_buffer_append_string(a, 31828, 5);
  goto B_hl;
  label B_il:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  label B_hl:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23487, 21);
  if (c[7]:int) goto B_kl;
  pm_buffer_append_string(a, 31828, 5);
  goto B_jl;
  label B_kl:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  label B_jl:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23000, 15);
  if (c[8]:int) goto B_ml;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ll;
  label B_ml:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  label B_ll:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23574, 17);
  pm_buffer_append_string(a, 15178, 2);
  if (eqz(c[9]:int)) goto B_nl;
  e[28]:long =
    pm_constant_pool_id_to_constant(g = b + 292, ((c + 44)[0]:int)[0]:int)[0]:long@4 <<
    32L;
  pm_buffer_append_format(a, 4999, e + 224);
  if (c[9]:int < 2) goto B_nl;
  f = 4;
  h = 1;
  loop L_ol {
    pm_buffer_append_string(a, 31813, 2);
    e[26]:long =
      pm_constant_pool_id_to_constant(g, (c[11]:int + f)[0]:int)[0]:long@4 <<
      32L;
    pm_buffer_append_format(a, 4999, e + 208);
    f = f + 4;
    h = h + 1;
    if (h < c[9]:int) continue L_ol;
  }
  label B_nl:
  pm_buffer_append_string(a, 32013, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23032, 28);
  e[48]:int = c[12]:int;
  pm_buffer_append_format(a, 32008, e + 192);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25019, 26);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 52);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[13]:int, (c + 56)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  if (c[15]:int) goto B_ql;
  pm_buffer_append_string(a, 31828, 5);
  goto B_pl;
  label B_ql:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 60);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[15]:int, (c + 64)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_pl:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24589, 21);
  if (c[17]:int) goto B_sl;
  pm_buffer_append_string(a, 31828, 5);
  goto B_rl;
  label B_sl:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 68);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[17]:int, (c + 72)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_rl:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24545, 21);
  if (c[19]:int) goto B_ul;
  pm_buffer_append_string(a, 31828, 5);
  goto B_tl;
  label B_ul:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 76);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[19]:int, (c + 80)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_tl:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24631, 20);
  if (c[21]:int) goto B_wl;
  pm_buffer_append_string(a, 31828, 5);
  goto B_vl;
  label B_wl:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 84);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[21]:int, (c + 88)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_vl:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  if (c[23]:int) goto B_xl;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_xl:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 92);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[23]:int, (c + 96)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_we:
  pm_buffer_append_string(a, 31483, 25);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24589, 21);
  if (c[3]:int) goto B_zl;
  pm_buffer_append_string(a, 31828, 5);
  goto B_yl;
  label B_zl:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_yl:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24545, 21);
  if (c[6]:int) goto B_bm;
  pm_buffer_append_string(a, 31828, 5);
  goto B_am;
  label B_bm:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_am:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25239, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ve:
  pm_buffer_append_string(a, 30954, 22);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25046, 27);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[5]:int) goto B_dm;
  pm_buffer_append_string(a, 31828, 5);
  goto B_cm;
  label B_dm:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  label B_cm:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  if (c[6]:int) goto B_em;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_em:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[6]:int, (c + 28)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ue:
  pm_buffer_append_string(a, 27755, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[5]:int) goto B_gm;
  pm_buffer_append_string(a, 31828, 5);
  goto B_fm;
  label B_gm:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  label B_fm:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[6]:int, (c + 28)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_te:
  pm_buffer_append_string(a, 31316, 34);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24287, 19);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  goto B_a;
  label B_se:
  pm_buffer_append_string(a, 31000, 24);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25102, 29);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[5]:int) goto B_im;
  pm_buffer_append_string(a, 31828, 5);
  goto B_hm;
  label B_im:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  label B_hm:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[6]:int, (c + 28)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_re:
  pm_buffer_append_string(a, 30930, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_qe:
  pm_buffer_append_string(a, 28737, 29);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23180, 19);
  if (c[3]:int) goto B_km;
  pm_buffer_append_string(a, 31828, 5);
  goto B_jm;
  label B_km:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_jm:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23217, 15);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23663, 20);
  e[60]:int = c[5]:int;
  pm_buffer_append_format(a, 32147, e + 240);
  f = c[5]:int;
  if (eqz(f)) goto B_lm;
  g = d[0];
  h = 0;
  loop L_mm {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_om;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_nm;
    label B_om:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_nm:
    prettyprint_node(a, b, (c[7]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_mm;
  }
  label B_lm:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23200, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[9]:int) goto B_qm;
  pm_buffer_append_string(a, 31828, 5);
  goto B_pm;
  label B_qm:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[9]:int, (c + 40)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_pm:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  if (c[11]:int) goto B_rm;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_rm:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 44);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[11]:int, (c + 48)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_pe:
  pm_buffer_append_string(a, 28531, 26);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_tm;
  pm_buffer_append_string(a, 12678, 12);
  goto B_sm;
  label B_tm:
  pm_buffer_append_string(a, 1080, 4);
  label B_sm:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23217, 15);
  if (c[3]:int) goto B_vm;
  pm_buffer_append_string(a, 31828, 5);
  goto B_um;
  label B_vm:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_um:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23200, 16);
  if (c[4]:int) goto B_xm;
  pm_buffer_append_string(a, 31828, 5);
  goto B_wm;
  label B_xm:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  label B_wm:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_oe:
  pm_buffer_append_string(a, 27612, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_ne:
  pm_buffer_append_string(a, 28033, 21);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23061, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23781, 21);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[5]:int) goto B_zm;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ym;
  label B_zm:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  label B_ym:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24857, 26);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24939, 25);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[8]:int, (c + 36)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24884, 25);
  if (c[10]:int) goto B_bn;
  pm_buffer_append_string(a, 31828, 5);
  goto B_an;
  label B_bn:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[10]:int, (c + 44)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_an:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 48);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[12]:int, (c + 52)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_me:
  pm_buffer_append_string(a, 27689, 37);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_le:
  pm_buffer_append_string(a, 28233, 37);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_ke:
  pm_buffer_append_string(a, 28393, 33);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23928, 16);
  if (c[3]:int) goto B_cn;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_cn:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  goto B_a;
  label B_je:
  pm_buffer_append_string(a, 30813, 40);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_ie:
  pm_buffer_append_string(a, 29963, 45);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23704, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[9]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_he:
  pm_buffer_append_string(a, 30268, 39);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_ge:
  pm_buffer_append_string(a, 31612, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_fe:
  pm_buffer_append_string(a, 27532, 38);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_ee:
  pm_buffer_append_string(a, 30518, 37);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[7]:int, (c + 32)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_de:
  pm_buffer_append_string(a, 29310, 22);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23371, 19);
  e[64]:int = c[5]:int;
  pm_buffer_append_format(a, 32147, e + 256);
  f = c[5]:int;
  if (eqz(f)) goto B_dn;
  g = d[0];
  h = 0;
  loop L_en {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_gn;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_fn;
    label B_gn:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_fn:
    prettyprint_node(a, b, (c[7]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_en;
  }
  label B_dn:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ce:
  pm_buffer_append_string(a, 28674, 29);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23180, 19);
  if (c[3]:int) goto B_in;
  pm_buffer_append_string(a, 31828, 5);
  goto B_hn;
  label B_in:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_hn:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23371, 19);
  e[68]:int = c[4]:int;
  pm_buffer_append_format(a, 32147, e + 272);
  f = c[4]:int;
  if (eqz(f)) goto B_jn;
  g = d[0];
  h = 0;
  loop L_kn {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_mn;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_ln;
    label B_mn:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_ln:
    prettyprint_node(a, b, (c[6]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_kn;
  }
  label B_jn:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23102, 15);
  if (c[7]:int) goto B_on;
  pm_buffer_append_string(a, 31828, 5);
  goto B_nn;
  label B_on:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  label B_nn:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[8]:int) goto B_qn;
  pm_buffer_append_string(a, 31828, 5);
  goto B_pn;
  label B_qn:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[8]:int, (c + 36)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_pn:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  if (c[10]:int) goto B_rn;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_rn:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[10]:int, (c + 44)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_be:
  pm_buffer_append_string(a, 29615, 20);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24993, 25);
  if (c[3]:int) goto B_tn;
  pm_buffer_append_string(a, 31828, 5);
  goto B_sn;
  label B_tn:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_sn:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24058, 20);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24965, 27);
  if (c[6]:int) goto B_vn;
  pm_buffer_append_string(a, 31828, 5);
  goto B_un;
  label B_vn:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_un:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[8]:int) goto B_xn;
  pm_buffer_append_string(a, 31828, 5);
  goto B_wn;
  label B_xn:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  label B_wn:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23118, 21);
  if (c[9]:int) goto B_zn;
  pm_buffer_append_string(a, 31828, 5);
  goto B_yn;
  label B_zn:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[9]:int, d);
  d[0] = f;
  label B_yn:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  if (c[10]:int) goto B_ao;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_ao:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[10]:int, (c + 44)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ae:
  pm_buffer_append_string(a, 27132, 27);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25262, 18);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  goto B_a;
  label B_zd:
  pm_buffer_append_string(a, 27270, 26);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  goto B_a;
  label B_yd:
  pm_buffer_append_string(a, 27207, 30);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_xd:
  pm_buffer_append_string(a, 28996, 20);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23762, 18);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[4]:int) goto B_co;
  pm_buffer_append_string(a, 31828, 5);
  goto B_bo;
  label B_co:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  label B_bo:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24527, 17);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24611, 19);
  if (c[7]:int) goto B_do;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_do:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[7]:int, (c + 32)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_wd:
  pm_buffer_append_string(a, 30596, 31);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_go;
  pm_buffer_append_string(a, 7390, 16);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_ho;
  pm_buffer_append_byte(a, 44);
  goto B_fo;
  label B_ho:
  if (f & 4) goto B_eo;
  goto B_q;
  label B_go:
  if (eqz(f & 2)) goto B_s;
  label B_fo:
  pm_buffer_append_string(a, 8348, 14);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_q;
  label B_eo:
  pm_buffer_append_byte(a, 44);
  goto B_r;
  label B_vd:
  pm_buffer_append_string(a, 29716, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_ko;
  pm_buffer_append_string(a, 7390, 16);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_lo;
  pm_buffer_append_byte(a, 44);
  goto B_jo;
  label B_lo:
  if (f & 4) goto B_io;
  goto B_t;
  label B_ko:
  if (eqz(f & 2)) goto B_v;
  label B_jo:
  pm_buffer_append_string(a, 8348, 14);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_t;
  label B_io:
  pm_buffer_append_byte(a, 44);
  goto B_u;
  label B_ud:
  pm_buffer_append_string(a, 30057, 30);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_oo;
  pm_buffer_append_string(a, 7390, 16);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_po;
  pm_buffer_append_byte(a, 44);
  goto B_no;
  label B_po:
  if (f & 4) goto B_mo;
  goto B_w;
  label B_oo:
  if (eqz(f & 2)) goto B_y;
  label B_no:
  pm_buffer_append_string(a, 8348, 14);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_w;
  label B_mo:
  pm_buffer_append_byte(a, 44);
  goto B_x;
  label B_td:
  pm_buffer_append_string(a, 27297, 29);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_so;
  pm_buffer_append_string(a, 7390, 16);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_to;
  pm_buffer_append_byte(a, 44);
  goto B_ro;
  label B_to:
  if (f & 4) goto B_qo;
  goto B_z;
  label B_so:
  if (eqz(f & 2)) goto B_ba;
  label B_ro:
  pm_buffer_append_string(a, 8348, 14);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_z;
  label B_qo:
  pm_buffer_append_byte(a, 44);
  goto B_aa;
  label B_sd:
  pm_buffer_append_string(a, 30854, 42);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_rd:
  pm_buffer_append_string(a, 30009, 47);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23704, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[9]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_qd:
  pm_buffer_append_string(a, 30308, 41);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_pd:
  pm_buffer_append_string(a, 31649, 38);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_od:
  pm_buffer_append_string(a, 27571, 40);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_nd:
  pm_buffer_append_string(a, 30556, 39);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[7]:int, (c + 32)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_md:
  pm_buffer_append_string(a, 28484, 25);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23609, 16);
  d = c[1]:ushort;
  b = d & 1;
  if (eqz(b)) goto B_wo;
  pm_buffer_append_string(a, 1138, 7);
  d = c[1]:ushort;
  if (eqz(d & 2)) goto B_xo;
  pm_buffer_append_byte(a, 44);
  goto B_vo;
  label B_xo:
  if (d & 4) goto B_uo;
  goto B_ca;
  label B_wo:
  if (eqz(d & 2)) goto B_ea;
  label B_vo:
  pm_buffer_append_string(a, 8772, 8);
  b = 1;
  d = c[1]:ushort;
  if (eqz(d & 4)) goto B_ca;
  label B_uo:
  pm_buffer_append_byte(a, 44);
  goto B_da;
  label B_ld:
  pm_buffer_append_string(a, 31025, 43);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_ap;
  pm_buffer_append_string(a, 11735, 12);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_bp;
  pm_buffer_append_byte(a, 44);
  goto B_zo;
  label B_bp:
  if (f & 4) goto B_yo;
  goto B_fa;
  label B_ap:
  if (eqz(f & 2)) goto B_ha;
  label B_zo:
  pm_buffer_append_string(a, 13286, 9);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_fa;
  label B_yo:
  pm_buffer_append_byte(a, 44);
  goto B_ga;
  label B_kd:
  pm_buffer_append_string(a, 28830, 47);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_ep;
  pm_buffer_append_string(a, 11735, 12);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_fp;
  pm_buffer_append_byte(a, 44);
  goto B_dp;
  label B_fp:
  if (f & 4) goto B_cp;
  goto B_ia;
  label B_ep:
  if (eqz(f & 2)) goto B_ka;
  label B_dp:
  pm_buffer_append_string(a, 13286, 9);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_ia;
  label B_cp:
  pm_buffer_append_byte(a, 44);
  goto B_ja;
  label B_jd:
  pm_buffer_append_string(a, 29387, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[3]:int) goto B_hp;
  pm_buffer_append_string(a, 31828, 5);
  goto B_gp;
  label B_hp:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_gp:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23268, 16);
  e[80]:int = c[5]:int;
  pm_buffer_append_format(a, 32147, e + 320);
  f = c[5]:int;
  if (eqz(f)) goto B_ip;
  g = d[0];
  h = 0;
  loop L_jp {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_lp;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_kp;
    label B_lp:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_kp:
    prettyprint_node(a, b, (c[7]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_jp;
  }
  label B_ip:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  if (c[8]:int) goto B_mp;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_mp:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_id:
  pm_buffer_append_string(a, 29043, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[3]:int) goto B_op;
  pm_buffer_append_string(a, 31828, 5);
  goto B_np;
  label B_op:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_np:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23268, 16);
  e[84]:int = c[5]:int;
  pm_buffer_append_format(a, 32147, e + 336);
  f = c[5]:int;
  if (eqz(f)) goto B_pp;
  g = d[0];
  h = 0;
  loop L_qp {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_sp;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_rp;
    label B_sp:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_rp:
    prettyprint_node(a, b, (c[7]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_qp;
  }
  label B_pp:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  if (c[8]:int) goto B_tp;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_tp:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_hd:
  pm_buffer_append_string(a, 29424, 37);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23268, 16);
  e[88]:int = c[5]:int;
  pm_buffer_append_format(a, 32147, e + 352);
  f = c[5]:int;
  if (eqz(f)) goto B_up;
  g = d[0];
  h = 0;
  loop L_vp {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_xp;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_wp;
    label B_xp:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_wp:
    prettyprint_node(a, b, (c[7]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_vp;
  }
  label B_up:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_gd:
  pm_buffer_append_string(a, 29280, 29);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_zp;
  pm_buffer_append_string(a, 4225, 12);
  goto B_yp;
  label B_zp:
  pm_buffer_append_string(a, 1080, 4);
  label B_yp:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23391, 19);
  e[92]:int = c[3]:int;
  pm_buffer_append_format(a, 32147, e + 368);
  f = c[3]:int;
  if (eqz(f)) goto B_a;
  g = d[0];
  h = 0;
  loop L_aq {
    pm_buffer_append_string(d, 31823, 4);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_cq;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_bq;
    label B_cq:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_bq:
    prettyprint_node(a, b, (c[5]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_aq;
    goto B_a;
  }
  label B_fd:
  pm_buffer_append_string(a, 28055, 38);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_eq;
  pm_buffer_append_string(a, 6045, 19);
  goto B_dq;
  label B_eq:
  pm_buffer_append_string(a, 1080, 4);
  label B_dq:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  if (c[3]:int) goto B_gq;
  pm_buffer_append_string(a, 31828, 5);
  goto B_fq;
  label B_gq:
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  label B_fq:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  if (c[4]:int) goto B_iq;
  pm_buffer_append_string(a, 31828, 5);
  goto B_hq;
  label B_iq:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_hq:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[6]:int, (c + 28)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ed:
  pm_buffer_append_string(a, 31788, 24);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23574, 17);
  pm_buffer_append_string(a, 15178, 2);
  if (eqz(c[3]:int)) goto B_jq;
  e[52]:long =
    pm_constant_pool_id_to_constant(g = b + 292, ((c + 20)[0]:int)[0]:int)[0]:long@4 <<
    32L;
  pm_buffer_append_format(a, 4999, e + 416);
  if (c[3]:int < 2) goto B_jq;
  f = 4;
  h = 1;
  loop L_kq {
    pm_buffer_append_string(a, 31813, 2);
    e[50]:long =
      pm_constant_pool_id_to_constant(g, (c[5]:int + f)[0]:int)[0]:long@4 <<
      32L;
    pm_buffer_append_format(a, 4999, e + 400);
    f = f + 4;
    h = h + 1;
    if (h < c[3]:int) continue L_kq;
  }
  label B_jq:
  pm_buffer_append_string(a, 32013, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23032, 28);
  e[96]:int = c[6]:int;
  pm_buffer_append_format(a, 32008, e + 384);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[7]:int, (c + 32)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[9]:int, (c + 40)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 44);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[11]:int, (c + 48)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23487, 21);
  if (c[13]:int) goto B_mq;
  pm_buffer_append_string(a, 31828, 5);
  goto B_lq;
  label B_mq:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[13]:int, d);
  d[0] = f;
  label B_lq:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23016, 15);
  if (c[14]:int) goto B_nq;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_nq:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[14]:int, d);
  d[0] = f;
  goto B_a;
  label B_dd:
  pm_buffer_append_string(a, 30773, 39);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[8]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23962, 16);
  e[108]:int = c[9]:int;
  pm_buffer_append_format(a, 32008, e + 432);
  goto B_a;
  label B_cd:
  pm_buffer_append_string(a, 29918, 44);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[8]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23684, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[9]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23962, 16);
  e[112]:int = c[10]:int;
  pm_buffer_append_format(a, 32008, e + 448);
  goto B_a;
  label B_bd:
  pm_buffer_append_string(a, 30229, 38);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[8]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23962, 16);
  e[116]:int = c[9]:int;
  pm_buffer_append_format(a, 32008, e + 464);
  goto B_a;
  label B_ad:
  pm_buffer_append_string(a, 31576, 35);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23962, 16);
  e[120]:int = c[4]:int;
  pm_buffer_append_format(a, 32008, e + 480);
  goto B_a;
  label B_zc:
  pm_buffer_append_string(a, 27494, 37);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23962, 16);
  e[124]:int = c[4]:int;
  pm_buffer_append_format(a, 32008, e + 496);
  goto B_a;
  label B_yc:
  pm_buffer_append_string(a, 30481, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23945, 16);
  e[128]:int = c[4]:int;
  pm_buffer_append_format(a, 32008, e + 512);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_xc:
  pm_buffer_append_string(a, 31069, 31);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_qq;
  pm_buffer_append_string(a, 11735, 12);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_rq;
  pm_buffer_append_byte(a, 44);
  goto B_pq;
  label B_rq:
  if (f & 4) goto B_oq;
  goto B_la;
  label B_qq:
  if (eqz(f & 2)) goto B_na;
  label B_pq:
  pm_buffer_append_string(a, 13286, 9);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_la;
  label B_oq:
  pm_buffer_append_byte(a, 44);
  goto B_ma;
  label B_wc:
  pm_buffer_append_string(a, 30897, 32);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23762, 18);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_vc:
  pm_buffer_append_string(a, 31451, 31);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24024, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23762, 18);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_uc:
  pm_buffer_append_string(a, 30415, 28);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23895, 15);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23446, 18);
  e[132]:int = c[4]:int;
  pm_buffer_append_format(a, 32147, e + 528);
  f = c[4]:int;
  if (eqz(f)) goto B_a;
  g = d[0];
  h = 0;
  loop L_sq {
    pm_buffer_append_string(d, 31823, 4);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_uq;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_tq;
    label B_uq:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_tq:
    prettyprint_node(a, b, (c[6]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_sq;
    goto B_a;
  }
  label B_tc:
  pm_buffer_append_string(a, 29361, 25);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_sc:
  pm_buffer_append_string(a, 31130, 24);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23574, 17);
  pm_buffer_append_string(a, 15178, 2);
  if (eqz(c[3]:int)) goto B_vq;
  e[70]:long =
    pm_constant_pool_id_to_constant(g = b + 292, ((c + 20)[0]:int)[0]:int)[0]:long@4 <<
    32L;
  pm_buffer_append_format(a, 4999, e + 560);
  if (c[3]:int < 2) goto B_vq;
  f = 4;
  h = 1;
  loop L_wq {
    pm_buffer_append_string(a, 31813, 2);
    e[68]:long =
      pm_constant_pool_id_to_constant(g, (c[5]:int + f)[0]:int)[0]:long@4 <<
      32L;
    pm_buffer_append_format(a, 4999, e + 544);
    f = f + 4;
    h = h + 1;
    if (h < c[3]:int) continue L_wq;
  }
  label B_vq:
  pm_buffer_append_string(a, 32013, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25132, 29);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23999, 24);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23000, 15);
  if (c[9]:int) goto B_yq;
  pm_buffer_append_string(a, 31828, 5);
  goto B_xq;
  label B_yq:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[9]:int, d);
  d[0] = f;
  label B_xq:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25162, 26);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[10]:int, (c + 44)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[12]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_rc:
  pm_buffer_append_string(a, 27389, 29);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23429, 16);
  e[148]:int = c[3]:int;
  pm_buffer_append_format(a, 32147, e + 592);
  f = c[3]:int;
  if (eqz(f)) goto B_zq;
  g = d[0];
  h = 0;
  loop L_ar {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_cr;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_br;
    label B_cr:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_br:
    prettyprint_node(a, b, (c[5]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_ar;
  }
  label B_zq:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23102, 15);
  if (c[6]:int) goto B_er;
  pm_buffer_append_string(a, 31828, 5);
  goto B_dr;
  label B_er:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  label B_dr:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23411, 17);
  e[144]:int = c[7]:int;
  pm_buffer_append_format(a, 32147, e + 576);
  f = c[7]:int;
  if (eqz(f)) goto B_fr;
  g = d[0];
  h = 0;
  loop L_gr {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_ir;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_hr;
    label B_ir:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_hr:
    prettyprint_node(a, b, (c[9]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_gr;
  }
  label B_fr:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24589, 21);
  if (c[10]:int) goto B_kr;
  pm_buffer_append_string(a, 31828, 5);
  goto B_jr;
  label B_kr:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[10]:int, (c + 44)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_jr:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24567, 21);
  if (c[12]:int) goto B_lr;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_lr:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 48);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[12]:int, (c + 52)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_qc:
  pm_buffer_append_string(a, 30350, 28);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23429, 16);
  e[156]:int = c[3]:int;
  pm_buffer_append_format(a, 32147, e + 624);
  f = c[3]:int;
  if (eqz(f)) goto B_mr;
  g = d[0];
  h = 0;
  loop L_nr {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_pr;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_or;
    label B_pr:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_or:
    prettyprint_node(a, b, (c[5]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_nr;
  }
  label B_mr:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23102, 15);
  if (c[6]:int) goto B_rr;
  pm_buffer_append_string(a, 31828, 5);
  goto B_qr;
  label B_rr:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  label B_qr:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23411, 17);
  e[152]:int = c[7]:int;
  pm_buffer_append_format(a, 32147, e + 608);
  f = c[7]:int;
  if (eqz(f)) goto B_sr;
  g = d[0];
  h = 0;
  loop L_tr {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_vr;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_ur;
    label B_vr:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_ur:
    prettyprint_node(a, b, (c[9]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_tr;
  }
  label B_sr:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24589, 21);
  if (c[10]:int) goto B_xr;
  pm_buffer_append_string(a, 31828, 5);
  goto B_wr;
  label B_xr:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[10]:int, (c + 44)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_wr:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24545, 21);
  if (c[12]:int) goto B_zr;
  pm_buffer_append_string(a, 31828, 5);
  goto B_yr;
  label B_zr:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 48);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[12]:int, (c + 52)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_yr:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 56);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[14]:int, (c + 60)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[16]:int, d);
  d[0] = f;
  goto B_a;
  label B_pc:
  pm_buffer_append_string(a, 27184, 22);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23285, 20);
  if (c[3]:int) goto B_bs;
  pm_buffer_append_string(a, 31828, 5);
  goto B_as;
  label B_bs:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_as:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25239, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[4]:int, (c + 20)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_oc:
  pm_buffer_append_string(a, 29152, 21);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_nc:
  pm_buffer_append_string(a, 28126, 37);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25239, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_mc:
  pm_buffer_append_string(a, 27937, 36);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23876, 18);
  e[160]:int = c[12]:ubyte;
  pm_buffer_append_format(a, 32008, e + 640);
  goto B_a;
  label B_lc:
  pm_buffer_append_string(a, 31724, 39);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23744, 17);
  e[164]:int = c[3]:int;
  pm_buffer_append_format(a, 32008, e + 656);
  goto B_a;
  label B_kc:
  pm_buffer_append_string(a, 28271, 42);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_ds;
  pm_buffer_append_string(a, 6045, 19);
  goto B_cs;
  label B_ds:
  pm_buffer_append_string(a, 1080, 4);
  label B_cs:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  goto B_a;
  label B_jc:
  pm_buffer_append_string(a, 28164, 35);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_fs;
  pm_buffer_append_string(a, 6045, 19);
  goto B_es;
  label B_fs:
  pm_buffer_append_string(a, 1080, 4);
  label B_es:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_ic:
  pm_buffer_append_string(a, 28510, 20);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23217, 15);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23200, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_hc:
  pm_buffer_append_string(a, 27974, 28);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23663, 20);
  e[180]:int = c[3]:int;
  pm_buffer_append_format(a, 32147, e + 720);
  f = c[3]:int;
  if (eqz(f)) goto B_oa;
  g = d[0];
  h = 0;
  loop L_gs {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_is;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_hs;
    label B_is:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_hs:
    prettyprint_node(a, b, (c[5]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_gs;
    goto B_oa;
  }
  label B_gc:
  pm_buffer_append_string(a, 28003, 29);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23000, 15);
  if (c[3]:int) goto B_ks;
  pm_buffer_append_string(a, 31828, 5);
  goto B_js;
  label B_ks:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_js:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[6]:int, (c + 28)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_fc:
  pm_buffer_append_string(a, 28914, 34);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23832, 21);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24589, 21);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24567, 21);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ec:
  pm_buffer_append_string(a, 31283, 32);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24267, 19);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[4]:int, (c + 20)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_dc:
  pm_buffer_append_string(a, 28767, 31);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[3]:int) goto B_ms;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ls;
  label B_ms:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_ls:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_cc:
  pm_buffer_append_string(a, 28799, 30);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[3]:int) goto B_os;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ns;
  label B_os:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_ns:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_bc:
  pm_buffer_append_string(a, 29017, 25);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23574, 17);
  pm_buffer_append_string(a, 15178, 2);
  if (eqz(c[3]:int)) goto B_ps;
  e[94]:long =
    pm_constant_pool_id_to_constant(g = b + 292, ((c + 20)[0]:int)[0]:int)[0]:long@4 <<
    32L;
  pm_buffer_append_format(a, 4999, e + 752);
  if (c[3]:int < 2) goto B_ps;
  f = 4;
  h = 1;
  loop L_qs {
    pm_buffer_append_string(a, 31813, 2);
    e[92]:long =
      pm_constant_pool_id_to_constant(g, (c[5]:int + f)[0]:int)[0]:long@4 <<
      32L;
    pm_buffer_append_format(a, 4999, e + 736);
    f = f + 4;
    h = h + 1;
    if (h < c[3]:int) continue L_qs;
  }
  label B_ps:
  pm_buffer_append_string(a, 32013, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23349, 21);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  goto B_a;
  label B_ac:
  pm_buffer_append_string(a, 31351, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_ss;
  pm_buffer_append_string(a, 12678, 12);
  goto B_rs;
  label B_ss:
  pm_buffer_append_string(a, 1080, 4);
  label B_rs:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23217, 15);
  if (c[3]:int) goto B_us;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ts;
  label B_us:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_ts:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23200, 16);
  if (c[4]:int) goto B_ws;
  pm_buffer_append_string(a, 31828, 5);
  goto B_vs;
  label B_ws:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[4]:int, d);
  d[0] = f;
  label B_vs:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[5]:int, (c + 24)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_zb:
  pm_buffer_append_string(a, 29174, 26);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25262, 18);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  goto B_a;
  label B_yb:
  pm_buffer_append_string(a, 28558, 22);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_xb:
  pm_buffer_append_string(a, 28878, 35);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  h = f & 1;
  if (eqz(h)) goto B_zs;
  pm_buffer_append_string(a, 11735, 12);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_at;
  pm_buffer_append_byte(a, 44);
  goto B_ys;
  label B_at:
  if (f & 4) goto B_xs;
  goto B_pa;
  label B_zs:
  if (eqz(f & 2)) goto B_ra;
  label B_ys:
  pm_buffer_append_string(a, 13286, 9);
  h = 1;
  f = c[1]:ushort;
  if (eqz(f & 4)) goto B_pa;
  label B_xs:
  pm_buffer_append_byte(a, 44);
  goto B_qa;
  label B_wb:
  pm_buffer_append_string(a, 28314, 42);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_ct;
  pm_buffer_append_string(a, 6045, 19);
  goto B_bt;
  label B_ct:
  pm_buffer_append_string(a, 1080, 4);
  label B_bt:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24762, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[4]:int, (c + 20)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_vb:
  pm_buffer_append_string(a, 28357, 35);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_et;
  pm_buffer_append_string(a, 6045, 19);
  goto B_dt;
  label B_et:
  pm_buffer_append_string(a, 1080, 4);
  label B_dt:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24251, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_ub:
  pm_buffer_append_string(a, 28451, 32);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23832, 21);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23803, 28);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  goto B_a;
  label B_tb:
  pm_buffer_append_string(a, 29659, 24);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23509, 21);
  e[192]:int = c[5]:int;
  pm_buffer_append_format(a, 32147, e + 768);
  f = c[5]:int;
  if (eqz(f)) goto B_ft;
  g = d[0];
  h = 0;
  loop L_gt {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_it;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_ht;
    label B_it:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_ht:
    prettyprint_node(a, b, (c[7]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_gt;
  }
  label B_ft:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  if (c[8]:int) goto B_kt;
  pm_buffer_append_string(a, 31828, 5);
  goto B_jt;
  label B_kt:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[8]:int, (c + 36)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_jt:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24307, 20);
  if (c[10]:int) goto B_mt;
  pm_buffer_append_string(a, 31828, 5);
  goto B_lt;
  label B_mt:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[10]:int, d);
  d[0] = f;
  label B_lt:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[11]:int) goto B_ot;
  pm_buffer_append_string(a, 31828, 5);
  goto B_nt;
  label B_ot:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[11]:int, d);
  d[0] = f;
  label B_nt:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23140, 21);
  if (c[12]:int) goto B_pt;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_pt:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[12]:int, d);
  d[0] = f;
  goto B_a;
  label B_sb:
  pm_buffer_append_string(a, 28094, 31);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_rt;
  pm_buffer_append_string(a, 6045, 19);
  goto B_qt;
  label B_rt:
  pm_buffer_append_string(a, 1080, 4);
  label B_qt:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  if (c[3]:int) goto B_tt;
  pm_buffer_append_string(a, 31828, 5);
  goto B_st;
  label B_tt:
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[3]:int);
  pm_buffer_append_byte(a, 10);
  label B_st:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24742, 19);
  if (c[4]:int) goto B_vt;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ut;
  label B_vt:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_ut:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24478, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[6]:int, (c + 28)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_rb:
  pm_buffer_append_string(a, 27108, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_qb:
  pm_buffer_append_string(a, 28581, 24);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23306, 20);
  if (c[5]:int) goto B_wt;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_wt:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  goto B_a;
  label B_pb:
  pm_buffer_append_string(a, 29546, 22);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_ob:
  pm_buffer_append_string(a, 27846, 32);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23574, 17);
  pm_buffer_append_string(a, 15178, 2);
  if (eqz(c[3]:int)) goto B_xt;
  e[100]:long =
    pm_constant_pool_id_to_constant(g = b + 292, ((c + 20)[0]:int)[0]:int)[0]:long@4 <<
    32L;
  pm_buffer_append_format(a, 4999, e + 800);
  if (c[3]:int < 2) goto B_xt;
  f = 4;
  h = 1;
  loop L_yt {
    pm_buffer_append_string(a, 31813, 2);
    e[98]:long =
      pm_constant_pool_id_to_constant(g, (c[5]:int + f)[0]:int)[0]:long@4 <<
      32L;
    pm_buffer_append_format(a, 4999, e + 784);
    f = f + 4;
    h = h + 1;
    if (h < c[3]:int) continue L_yt;
  }
  label B_xt:
  pm_buffer_append_string(a, 32013, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24828, 28);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[8]:int, (c + 36)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23832, 21);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[10]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23000, 15);
  if (c[11]:int) goto B_au;
  pm_buffer_append_string(a, 31828, 5);
  goto B_zt;
  label B_au:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[11]:int, d);
  d[0] = f;
  label B_zt:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 48);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[12]:int, (c + 52)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_nb:
  pm_buffer_append_string(a, 29513, 32);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_mb:
  pm_buffer_append_string(a, 31179, 28);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23979, 19);
  pm_buffer_append_string(a, 27029, 2);
  prettyprint_source(a, pm_string_source(d = c + 12), pm_string_length(d));
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_lb:
  pm_buffer_append_string(a, 31101, 28);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_kb:
  pm_buffer_append_string(a, 27665, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23854, 21);
  if (c[5]:int) goto B_bu;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_bu:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  goto B_a;
  label B_jb:
  pm_buffer_append_string(a, 27792, 28);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23016, 15);
  e[204]:int = c[3]:int;
  pm_buffer_append_format(a, 32147, e + 816);
  f = c[3]:int;
  if (eqz(f)) goto B_a;
  g = d[0];
  h = 0;
  loop L_cu {
    pm_buffer_append_string(d, 31823, 4);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_eu;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_du;
    label B_eu:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_du:
    prettyprint_node(a, b, (c[5]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_cu;
    goto B_a;
  }
  label B_ib:
  pm_buffer_append_string(a, 29488, 24);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  if (eqz(f & 1)) goto B_iu;
  pm_buffer_append_string(a, 9470, 21);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_ju;
  pm_buffer_append_byte(a, 44);
  goto B_hu;
  label B_ju:
  if (f & 4) goto B_gu;
  goto B_sa;
  label B_iu:
  if (eqz(f & 2)) goto B_fu;
  label B_hu:
  pm_buffer_append_string(a, 9420, 23);
  if (eqz(c[2]:ubyte & 4)) goto B_sa;
  label B_gu:
  pm_buffer_append_byte(a, 44);
  goto B_ta;
  label B_fu:
  if (f & 4) goto B_ta;
  pm_buffer_append_string(a, 1080, 4);
  goto B_sa;
  label B_hb:
  pm_buffer_append_string(a, 28427, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24589, 21);
  if (c[5]:int) goto B_lu;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ku;
  label B_lu:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_ku:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23285, 20);
  if (c[7]:int) goto B_nu;
  pm_buffer_append_string(a, 31828, 5);
  goto B_mu;
  label B_nu:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  label B_mu:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24545, 21);
  if (c[8]:int) goto B_pu;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ou;
  label B_pu:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[8]:int, (c + 36)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_ou:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23928, 16);
  if (c[10]:int) goto B_qu;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_qu:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[10]:int, d);
  d[0] = f;
  goto B_a;
  label B_gb:
  pm_buffer_append_string(a, 29080, 24);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  if (eqz(f & 1)) goto B_uu;
  pm_buffer_append_string(a, 9470, 21);
  f = c[1]:ushort;
  if (eqz(f & 2)) goto B_vu;
  pm_buffer_append_byte(a, 44);
  goto B_tu;
  label B_vu:
  if (f & 4) goto B_su;
  goto B_ua;
  label B_uu:
  if (eqz(f & 2)) goto B_ru;
  label B_tu:
  pm_buffer_append_string(a, 9420, 23);
  if (eqz(c[2]:ubyte & 4)) goto B_ua;
  label B_su:
  pm_buffer_append_byte(a, 44);
  goto B_va;
  label B_ru:
  if (f & 4) goto B_va;
  pm_buffer_append_string(a, 1080, 4);
  goto B_ua;
  label B_fb:
  pm_buffer_append_string(a, 29636, 22);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  goto B_a;
  label B_eb:
  pm_buffer_append_string(a, 29569, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23626, 16);
  e[208]:int = c[3]:int;
  pm_buffer_append_format(a, 32147, e + 832);
  f = c[3]:int;
  if (eqz(f)) goto B_wu;
  g = d[0];
  h = 0;
  loop L_xu {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_zu;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_yu;
    label B_zu:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_yu:
    prettyprint_node(a, b, (c[5]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_xu;
  }
  label B_wu:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25239, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[6]:int, (c + 28)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_db:
  pm_buffer_append_string(a, 27821, 24);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24058, 20);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[5]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24965, 27);
  if (c[6]:int) goto B_bv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_av;
  label B_bv:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_av:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23327, 21);
  if (c[8]:int) goto B_dv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_cv;
  label B_dv:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  label B_cv:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23118, 21);
  if (c[9]:int) goto B_fv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ev;
  label B_fv:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[9]:int, d);
  d[0] = f;
  label B_ev:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25189, 26);
  if (c[10]:int) goto B_gv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_gv:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[10]:int, (c + 44)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_cb:
  pm_buffer_append_string(a, 29128, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_iv;
  pm_buffer_append_string(a, 6335, 15);
  goto B_hv;
  label B_iv:
  pm_buffer_append_string(a, 1080, 4);
  label B_hv:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  if (c[5]:int) goto B_kv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_jv;
  label B_kv:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_jv:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24058, 20);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23349, 21);
  if (c[8]:int) goto B_lv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_lv:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_bb:
  pm_buffer_append_string(a, 28973, 22);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23531, 21);
  e[212]:int = c[5]:int;
  pm_buffer_append_format(a, 32147, e + 848);
  f = c[5]:int;
  if (eqz(f)) goto B_mv;
  g = d[0];
  h = 0;
  loop L_nv {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_pv;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_ov;
    label B_pv:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_ov:
    prettyprint_node(a, b, (c[7]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_nv;
  }
  label B_mv:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23349, 21);
  if (c[8]:int) goto B_qv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_qv:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_ab:
  pm_buffer_append_string(a, 31155, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  if (eqz(c[2]:ubyte & 1)) goto B_sv;
  pm_buffer_append_string(a, 6335, 15);
  goto B_rv;
  label B_sv:
  pm_buffer_append_string(a, 1080, 4);
  label B_rv:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  if (c[5]:int) goto B_uv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_tv;
  label B_uv:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_tv:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24058, 20);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23349, 21);
  if (c[8]:int) goto B_vv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_vv:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  goto B_a;
  label B_za:
  pm_buffer_append_string(a, 29462, 25);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23592, 16);
  f = c[1]:ushort;
  if (eqz(f & 1)) goto B_wv;
  pm_buffer_append_string(a, 9470, 21);
  if (eqz(c[2]:ubyte & 2)) goto B_wa;
  pm_buffer_append_byte(a, 44);
  goto B_xa;
  label B_wv:
  if (f & 2) goto B_xa;
  pm_buffer_append_string(a, 1080, 4);
  goto B_wa;
  label B_ya:
  pm_buffer_append_string(a, 31427, 23);
  prettyprint_location(a, b, c + 4);
  pm_buffer_append_string(a, 32195, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 25216, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24589, 21);
  if (c[5]:int) goto B_yv;
  pm_buffer_append_string(a, 31828, 5);
  goto B_xv;
  label B_yv:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_xv:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23285, 20);
  if (c[7]:int) goto B_aw;
  pm_buffer_append_string(a, 31828, 5);
  goto B_zv;
  label B_aw:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[7]:int, d);
  d[0] = f;
  label B_zv:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24567, 21);
  if (c[8]:int) goto B_bw;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_bw:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_xa:
  pm_buffer_append_string(a, 9420, 23);
  label B_wa:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24366, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, b = c[7]:int, (c + 32)[0]:int - b);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24345, 20);
  pm_buffer_append_string(a, 27029, 2);
  prettyprint_source(a, pm_string_source(d = c + 36), pm_string_length(d));
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_va:
  pm_buffer_append_string(a, 9444, 25);
  label B_ua:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[3]:int) goto B_dw;
  pm_buffer_append_string(a, 31828, 5);
  goto B_cw;
  label B_dw:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_cw:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24721, 20);
  if (c[5]:int) goto B_fw;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ew;
  label B_fw:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_ew:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  if (c[7]:int) goto B_hw;
  pm_buffer_append_string(a, 31828, 5);
  goto B_gw;
  label B_hw:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, b = c[7]:int, (c + 32)[0]:int - b);
  pm_buffer_append_string(a, 32198, 2);
  label B_gw:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24345, 20);
  pm_buffer_append_string(a, 27029, 2);
  prettyprint_source(a, pm_string_source(d = c + 36), pm_string_length(d));
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ta:
  pm_buffer_append_string(a, 7890, 7);
  label B_sa:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[3]:int) goto B_jw;
  pm_buffer_append_string(a, 31828, 5);
  goto B_iw;
  label B_jw:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_iw:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24366, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  if (c[7]:int) goto B_lw;
  pm_buffer_append_string(a, 31828, 5);
  goto B_kw;
  label B_lw:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, b = c[7]:int, (c + 32)[0]:int - b);
  pm_buffer_append_string(a, 32198, 2);
  label B_kw:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24345, 20);
  pm_buffer_append_string(a, 27029, 2);
  prettyprint_source(a, pm_string_source(d = c + 36), pm_string_length(d));
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ra:
  h = 0;
  if (eqz(f & 4)) goto B_pa;
  label B_qa:
  pm_buffer_append_string(a, 11818, 11);
  f = c[1]:ushort;
  h = 1;
  label B_pa:
  if (eqz(f & 8)) goto B_pw;
  if (eqz(h)) goto B_qw;
  pm_buffer_append_byte(a, 44);
  label B_qw:
  pm_buffer_append_string(a, 12437, 5);
  h = 1;
  f = c[1]:ushort;
  if (f & 16) goto B_ow;
  goto B_mw;
  label B_pw:
  if (eqz(f & 16)) goto B_mw;
  if (eqz(h)) goto B_nw;
  label B_ow:
  pm_buffer_append_byte(a, 44);
  label B_nw:
  pm_buffer_append_string(a, 6621, 7);
  f = c[1]:ushort;
  h = 1;
  label B_mw:
  if (eqz(f & 32)) goto B_uw;
  if (eqz(h)) goto B_vw;
  pm_buffer_append_byte(a, 44);
  label B_vw:
  pm_buffer_append_string(a, 3984, 11);
  h = 1;
  f = c[1]:ushort;
  if (f & 64) goto B_tw;
  goto B_rw;
  label B_uw:
  if (eqz(f & 64)) goto B_rw;
  if (eqz(h)) goto B_sw;
  label B_tw:
  pm_buffer_append_byte(a, 44);
  label B_sw:
  pm_buffer_append_string(a, 8968, 12);
  f = c[1]:ushort;
  h = 1;
  label B_rw:
  if (eqz(f & 128)) goto B_zw;
  if (eqz(h)) goto B_ax;
  pm_buffer_append_byte(a, 44);
  label B_ax:
  pm_buffer_append_string(a, 25321, 6);
  h = 1;
  f = c[1]:ushort;
  if (f & 256) goto B_yw;
  goto B_ww;
  label B_zw:
  if (eqz(f & 256)) goto B_ww;
  if (eqz(h)) goto B_xw;
  label B_yw:
  pm_buffer_append_byte(a, 44);
  label B_xw:
  pm_buffer_append_string(a, 9470, 21);
  f = c[1]:ushort;
  h = 1;
  label B_ww:
  if (eqz(f & 512)) goto B_fx;
  if (eqz(h)) goto B_gx;
  pm_buffer_append_byte(a, 44);
  label B_gx:
  pm_buffer_append_string(a, 9420, 23);
  if ((c + 3)[0]:ubyte & 4) goto B_ex;
  goto B_bx;
  label B_fx:
  if (eqz(f & 1024)) goto B_cx;
  if (eqz(h)) goto B_dx;
  label B_ex:
  pm_buffer_append_byte(a, 44);
  label B_dx:
  pm_buffer_append_string(a, 9444, 25);
  goto B_bx;
  label B_cx:
  if (h) goto B_bx;
  pm_buffer_append_string(a, 1080, 4);
  label B_bx:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24366, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, b = c[7]:int, (c + 32)[0]:int - b);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24345, 20);
  pm_buffer_append_string(a, 27029, 2);
  prettyprint_source(a, pm_string_source(d = c + 36), pm_string_length(d));
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_oa:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23553, 20);
  e[176]:int = c[6]:int;
  pm_buffer_append_format(a, 32147, e + 704);
  f = c[6]:int;
  if (eqz(f)) goto B_hx;
  g = d[0];
  h = 0;
  loop L_ix {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_kx;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_jx;
    label B_kx:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_jx:
    prettyprint_node(a, b, (c[8]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_ix;
  }
  label B_hx:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23102, 15);
  if (c[9]:int) goto B_mx;
  pm_buffer_append_string(a, 31828, 5);
  goto B_lx;
  label B_mx:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[9]:int, d);
  d[0] = f;
  label B_lx:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23251, 16);
  e[172]:int = c[10]:int;
  pm_buffer_append_format(a, 32147, e + 688);
  f = c[10]:int;
  if (eqz(f)) goto B_nx;
  g = d[0];
  h = 0;
  loop L_ox {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_qx;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_px;
    label B_qx:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_px:
    prettyprint_node(a, b, (c[12]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_ox;
  }
  label B_nx:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23643, 19);
  e[168]:int = c[13]:int;
  pm_buffer_append_format(a, 32147, e + 672);
  f = c[13]:int;
  if (eqz(f)) goto B_rx;
  g = d[0];
  h = 0;
  loop L_sx {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_ux;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_tx;
    label B_ux:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_tx:
    prettyprint_node(a, b, (c[15]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_sx;
  }
  label B_rx:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23078, 23);
  if (c[16]:int) goto B_wx;
  pm_buffer_append_string(a, 31828, 5);
  goto B_vx;
  label B_wx:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[16]:int, d);
  d[0] = f;
  label B_vx:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23928, 16);
  if (c[17]:int) goto B_xx;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_xx:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[17]:int, d);
  d[0] = f;
  goto B_a;
  label B_na:
  h = 0;
  if (eqz(f & 4)) goto B_la;
  label B_ma:
  pm_buffer_append_string(a, 11818, 11);
  f = c[1]:ushort;
  h = 1;
  label B_la:
  if (eqz(f & 8)) goto B_by;
  if (eqz(h)) goto B_cy;
  pm_buffer_append_byte(a, 44);
  label B_cy:
  pm_buffer_append_string(a, 12437, 5);
  h = 1;
  f = c[1]:ushort;
  if (f & 16) goto B_ay;
  goto B_yx;
  label B_by:
  if (eqz(f & 16)) goto B_yx;
  if (eqz(h)) goto B_zx;
  label B_ay:
  pm_buffer_append_byte(a, 44);
  label B_zx:
  pm_buffer_append_string(a, 6621, 7);
  f = c[1]:ushort;
  h = 1;
  label B_yx:
  if (eqz(f & 32)) goto B_gy;
  if (eqz(h)) goto B_hy;
  pm_buffer_append_byte(a, 44);
  label B_hy:
  pm_buffer_append_string(a, 3984, 11);
  h = 1;
  f = c[1]:ushort;
  if (f & 64) goto B_fy;
  goto B_dy;
  label B_gy:
  if (eqz(f & 64)) goto B_dy;
  if (eqz(h)) goto B_ey;
  label B_fy:
  pm_buffer_append_byte(a, 44);
  label B_ey:
  pm_buffer_append_string(a, 8968, 12);
  f = c[1]:ushort;
  h = 1;
  label B_dy:
  if (eqz(f & 128)) goto B_ly;
  if (eqz(h)) goto B_my;
  pm_buffer_append_byte(a, 44);
  label B_my:
  pm_buffer_append_string(a, 25321, 6);
  h = 1;
  f = c[1]:ushort;
  if (f & 256) goto B_ky;
  goto B_iy;
  label B_ly:
  if (eqz(f & 256)) goto B_iy;
  if (eqz(h)) goto B_jy;
  label B_ky:
  pm_buffer_append_byte(a, 44);
  label B_jy:
  pm_buffer_append_string(a, 9470, 21);
  f = c[1]:ushort;
  h = 1;
  label B_iy:
  if (eqz(f & 512)) goto B_ry;
  if (eqz(h)) goto B_sy;
  pm_buffer_append_byte(a, 44);
  label B_sy:
  pm_buffer_append_string(a, 9420, 23);
  if ((c + 3)[0]:ubyte & 4) goto B_qy;
  goto B_ny;
  label B_ry:
  if (eqz(f & 1024)) goto B_oy;
  if (eqz(h)) goto B_py;
  label B_qy:
  pm_buffer_append_byte(a, 44);
  label B_py:
  pm_buffer_append_string(a, 9444, 25);
  goto B_ny;
  label B_oy:
  if (h) goto B_ny;
  pm_buffer_append_string(a, 1080, 4);
  label B_ny:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24366, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 20);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[5]:int, (c + 24)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, b = c[7]:int, (c + 32)[0]:int - b);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24345, 20);
  pm_buffer_append_string(a, 27029, 2);
  prettyprint_source(a, pm_string_source(d = c + 36), pm_string_length(d));
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ka:
  h = 0;
  if (eqz(f & 4)) goto B_ia;
  label B_ja:
  pm_buffer_append_string(a, 11818, 11);
  f = c[1]:ushort;
  h = 1;
  label B_ia:
  if (eqz(f & 8)) goto B_wy;
  if (eqz(h)) goto B_xy;
  pm_buffer_append_byte(a, 44);
  label B_xy:
  pm_buffer_append_string(a, 12437, 5);
  h = 1;
  f = c[1]:ushort;
  if (f & 16) goto B_vy;
  goto B_ty;
  label B_wy:
  if (eqz(f & 16)) goto B_ty;
  if (eqz(h)) goto B_uy;
  label B_vy:
  pm_buffer_append_byte(a, 44);
  label B_uy:
  pm_buffer_append_string(a, 6621, 7);
  f = c[1]:ushort;
  h = 1;
  label B_ty:
  if (eqz(f & 32)) goto B_bz;
  if (eqz(h)) goto B_cz;
  pm_buffer_append_byte(a, 44);
  label B_cz:
  pm_buffer_append_string(a, 3984, 11);
  h = 1;
  f = c[1]:ushort;
  if (f & 64) goto B_az;
  goto B_yy;
  label B_bz:
  if (eqz(f & 64)) goto B_yy;
  if (eqz(h)) goto B_zy;
  label B_az:
  pm_buffer_append_byte(a, 44);
  label B_zy:
  pm_buffer_append_string(a, 8968, 12);
  f = c[1]:ushort;
  h = 1;
  label B_yy:
  if (eqz(f & 128)) goto B_gz;
  if (eqz(h)) goto B_hz;
  pm_buffer_append_byte(a, 44);
  label B_hz:
  pm_buffer_append_string(a, 25321, 6);
  h = 1;
  f = c[1]:ushort;
  if (f & 256) goto B_fz;
  goto B_dz;
  label B_gz:
  if (eqz(f & 256)) goto B_dz;
  if (eqz(h)) goto B_ez;
  label B_fz:
  pm_buffer_append_byte(a, 44);
  label B_ez:
  pm_buffer_append_string(a, 9470, 21);
  f = c[1]:ushort;
  h = 1;
  label B_dz:
  if (eqz(f & 512)) goto B_mz;
  if (eqz(h)) goto B_nz;
  pm_buffer_append_byte(a, 44);
  label B_nz:
  pm_buffer_append_string(a, 9420, 23);
  if ((c + 3)[0]:ubyte & 4) goto B_lz;
  goto B_iz;
  label B_mz:
  if (eqz(f & 1024)) goto B_jz;
  if (eqz(h)) goto B_kz;
  label B_lz:
  pm_buffer_append_byte(a, 44);
  label B_kz:
  pm_buffer_append_string(a, 9444, 25);
  goto B_iz;
  label B_jz:
  if (h) goto B_iz;
  pm_buffer_append_string(a, 1080, 4);
  label B_iz:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23268, 16);
  e[76]:int = c[5]:int;
  pm_buffer_append_format(a, 32147, e + 304);
  f = c[5]:int;
  if (eqz(f)) goto B_oz;
  g = d[0];
  h = 0;
  loop L_pz {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_rz;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_qz;
    label B_rz:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_qz:
    prettyprint_node(a, b, (c[7]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_pz;
  }
  label B_oz:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ha:
  h = 0;
  if (eqz(f & 4)) goto B_fa;
  label B_ga:
  pm_buffer_append_string(a, 11818, 11);
  f = c[1]:ushort;
  h = 1;
  label B_fa:
  if (eqz(f & 8)) goto B_vz;
  if (eqz(h)) goto B_wz;
  pm_buffer_append_byte(a, 44);
  label B_wz:
  pm_buffer_append_string(a, 12437, 5);
  h = 1;
  f = c[1]:ushort;
  if (f & 16) goto B_uz;
  goto B_sz;
  label B_vz:
  if (eqz(f & 16)) goto B_sz;
  if (eqz(h)) goto B_tz;
  label B_uz:
  pm_buffer_append_byte(a, 44);
  label B_tz:
  pm_buffer_append_string(a, 6621, 7);
  f = c[1]:ushort;
  h = 1;
  label B_sz:
  if (eqz(f & 32)) goto B_aaa;
  if (eqz(h)) goto B_baa;
  pm_buffer_append_byte(a, 44);
  label B_baa:
  pm_buffer_append_string(a, 3984, 11);
  h = 1;
  f = c[1]:ushort;
  if (f & 64) goto B_zz;
  goto B_xz;
  label B_aaa:
  if (eqz(f & 64)) goto B_xz;
  if (eqz(h)) goto B_yz;
  label B_zz:
  pm_buffer_append_byte(a, 44);
  label B_yz:
  pm_buffer_append_string(a, 8968, 12);
  f = c[1]:ushort;
  h = 1;
  label B_xz:
  if (eqz(f & 128)) goto B_faa;
  if (eqz(h)) goto B_gaa;
  pm_buffer_append_byte(a, 44);
  label B_gaa:
  pm_buffer_append_string(a, 25321, 6);
  h = 1;
  f = c[1]:ushort;
  if (f & 256) goto B_eaa;
  goto B_caa;
  label B_faa:
  if (eqz(f & 256)) goto B_caa;
  if (eqz(h)) goto B_daa;
  label B_eaa:
  pm_buffer_append_byte(a, 44);
  label B_daa:
  pm_buffer_append_string(a, 9470, 21);
  f = c[1]:ushort;
  h = 1;
  label B_caa:
  if (eqz(f & 512)) goto B_laa;
  if (eqz(h)) goto B_maa;
  pm_buffer_append_byte(a, 44);
  label B_maa:
  pm_buffer_append_string(a, 9420, 23);
  if ((c + 3)[0]:ubyte & 4) goto B_kaa;
  goto B_haa;
  label B_laa:
  if (eqz(f & 1024)) goto B_iaa;
  if (eqz(h)) goto B_jaa;
  label B_kaa:
  pm_buffer_append_byte(a, 44);
  label B_jaa:
  pm_buffer_append_string(a, 9444, 25);
  goto B_haa;
  label B_iaa:
  if (h) goto B_haa;
  pm_buffer_append_string(a, 1080, 4);
  label B_haa:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 12);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[3]:int, (c + 16)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23268, 16);
  e[72]:int = c[5]:int;
  pm_buffer_append_format(a, 32147, e + 288);
  f = c[5]:int;
  if (eqz(f)) goto B_naa;
  g = d[0];
  h = 0;
  loop L_oaa {
    pm_buffer_append_string(d, 31816, 6);
    pm_buffer_concat(a, d);
    if (f != 1) goto B_qaa;
    pm_buffer_append_string(a, 27045, 10);
    pm_buffer_append_string(d, 31823, 4);
    goto B_paa;
    label B_qaa:
    pm_buffer_append_string(a, 27034, 10);
    pm_buffer_append_string(d, 31816, 6);
    label B_paa:
    prettyprint_node(a, b, (c[7]:int + h)[0]:int, d);
    d[0] = g;
    h = h + 4;
    f = f + -1;
    if (f) continue L_oaa;
  }
  label B_naa:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24675, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 32);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[8]:int, (c + 36)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_ea:
  b = 0;
  if (eqz(d & 4)) goto B_ca;
  label B_da:
  pm_buffer_append_string(a, 8455, 6);
  d = c[1]:ushort;
  b = 1;
  label B_ca:
  if (eqz(d & 8)) goto B_saa;
  if (eqz(b)) goto B_taa;
  pm_buffer_append_byte(a, 44);
  label B_taa:
  pm_buffer_append_string(a, 8759, 12);
  goto B_raa;
  label B_saa:
  if (b) goto B_raa;
  pm_buffer_append_string(a, 1080, 4);
  label B_raa:
  pm_buffer_append_byte(a, 10);
  goto B_a;
  label B_ba:
  h = 0;
  if (eqz(f & 4)) goto B_z;
  label B_aa:
  pm_buffer_append_string(a, 9701, 16);
  f = c[1]:ushort;
  h = 1;
  label B_z:
  if (eqz(f & 8)) goto B_vaa;
  if (eqz(h)) goto B_waa;
  pm_buffer_append_byte(a, 44);
  label B_waa:
  pm_buffer_append_string(a, 1087, 18);
  goto B_uaa;
  label B_vaa:
  if (h) goto B_uaa;
  pm_buffer_append_string(a, 1080, 4);
  label B_uaa:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23285, 20);
  if (c[6]:int) goto B_yaa;
  pm_buffer_append_string(a, 31828, 5);
  goto B_xaa;
  label B_yaa:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[6]:int, d);
  d[0] = f;
  label B_xaa:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[7]:int, (c + 32)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23928, 16);
  if (c[9]:int) goto B_zaa;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_zaa:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[9]:int, d);
  d[0] = f;
  goto B_a;
  label B_y:
  h = 0;
  if (eqz(f & 4)) goto B_w;
  label B_x:
  pm_buffer_append_string(a, 9701, 16);
  f = c[1]:ushort;
  h = 1;
  label B_w:
  if (eqz(f & 8)) goto B_bba;
  if (eqz(h)) goto B_cba;
  pm_buffer_append_byte(a, 44);
  label B_cba:
  pm_buffer_append_string(a, 1087, 18);
  goto B_aba;
  label B_bba:
  if (h) goto B_aba;
  pm_buffer_append_string(a, 1080, 4);
  label B_aba:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  if (c[3]:int) goto B_eba;
  pm_buffer_append_string(a, 31828, 5);
  goto B_dba;
  label B_eba:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_dba:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24389, 28);
  if (c[4]:int) goto B_gba;
  pm_buffer_append_string(a, 31828, 5);
  goto B_fba;
  label B_gba:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_fba:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23285, 20);
  if (c[8]:int) goto B_iba;
  pm_buffer_append_string(a, 31828, 5);
  goto B_hba;
  label B_iba:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  label B_hba:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[9]:int, (c + 40)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23911, 16);
  if (c[11]:int) goto B_kba;
  pm_buffer_append_string(a, 31828, 5);
  goto B_jba;
  label B_kba:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[11]:int, d);
  d[0] = f;
  label B_jba:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 48);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[12]:int, (c + 52)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[14]:int, d);
  d[0] = f;
  goto B_a;
  label B_v:
  h = 0;
  if (eqz(f & 4)) goto B_t;
  label B_u:
  pm_buffer_append_string(a, 9701, 16);
  f = c[1]:ushort;
  h = 1;
  label B_t:
  if (eqz(f & 8)) goto B_mba;
  if (eqz(h)) goto B_nba;
  pm_buffer_append_byte(a, 44);
  label B_nba:
  pm_buffer_append_string(a, 1087, 18);
  goto B_lba;
  label B_mba:
  if (h) goto B_lba;
  pm_buffer_append_string(a, 1080, 4);
  label B_lba:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  if (c[3]:int) goto B_pba;
  pm_buffer_append_string(a, 31828, 5);
  goto B_oba;
  label B_pba:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_oba:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24389, 28);
  if (c[4]:int) goto B_rba;
  pm_buffer_append_string(a, 31828, 5);
  goto B_qba;
  label B_rba:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_qba:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23285, 20);
  if (c[8]:int) goto B_tba;
  pm_buffer_append_string(a, 31828, 5);
  goto B_sba;
  label B_tba:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  label B_sba:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[9]:int, (c + 40)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23911, 16);
  if (c[11]:int) goto B_vba;
  pm_buffer_append_string(a, 31828, 5);
  goto B_uba;
  label B_vba:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[11]:int, d);
  d[0] = f;
  label B_uba:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23684, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[12]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 52);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[13]:int, (c + 56)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[15]:int, d);
  d[0] = f;
  goto B_a;
  label B_s:
  h = 0;
  if (eqz(f & 4)) goto B_q;
  label B_r:
  pm_buffer_append_string(a, 9701, 16);
  f = c[1]:ushort;
  h = 1;
  label B_q:
  if (eqz(f & 8)) goto B_xba;
  if (eqz(h)) goto B_yba;
  pm_buffer_append_byte(a, 44);
  label B_yba:
  pm_buffer_append_string(a, 1087, 18);
  goto B_wba;
  label B_xba:
  if (h) goto B_wba;
  pm_buffer_append_string(a, 1080, 4);
  label B_wba:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  if (c[3]:int) goto B_aca;
  pm_buffer_append_string(a, 31828, 5);
  goto B_zba;
  label B_aca:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_zba:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24389, 28);
  if (c[4]:int) goto B_cca;
  pm_buffer_append_string(a, 31828, 5);
  goto B_bca;
  label B_cca:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_bca:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23285, 20);
  if (c[8]:int) goto B_eca;
  pm_buffer_append_string(a, 31828, 5);
  goto B_dca;
  label B_eca:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[8]:int, d);
  d[0] = f;
  label B_dca:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[9]:int, (c + 40)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23911, 16);
  if (c[11]:int) goto B_gca;
  pm_buffer_append_string(a, 31828, 5);
  goto B_fca;
  label B_gca:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[11]:int, d);
  d[0] = f;
  label B_fca:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 48);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[12]:int, (c + 52)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[14]:int, d);
  d[0] = f;
  goto B_a;
  label B_p:
  h = 0;
  if (eqz(f & 4)) goto B_n;
  label B_o:
  pm_buffer_append_string(a, 9701, 16);
  f = c[1]:ushort;
  h = 1;
  label B_n:
  if (eqz(f & 8)) goto B_ica;
  if (eqz(h)) goto B_jca;
  pm_buffer_append_byte(a, 44);
  label B_jca:
  pm_buffer_append_string(a, 1087, 18);
  goto B_hca;
  label B_ica:
  if (h) goto B_hca;
  pm_buffer_append_string(a, 1080, 4);
  label B_hca:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24389, 28);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[6]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24805, 22);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, d = c[7]:int, (c + 32)[0]:int - d);
  pm_buffer_append_string(a, 32198, 2);
  goto B_a;
  label B_m:
  h = 0;
  if (eqz(f & 4)) goto B_k;
  label B_l:
  pm_buffer_append_string(a, 9701, 16);
  f = c[1]:ushort;
  h = 1;
  label B_k:
  if (eqz(f & 8)) goto B_lca;
  if (eqz(h)) goto B_mca;
  pm_buffer_append_byte(a, 44);
  label B_mca:
  pm_buffer_append_string(a, 1087, 18);
  goto B_kca;
  label B_lca:
  if (h) goto B_kca;
  pm_buffer_append_string(a, 1080, 4);
  label B_kca:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  if (c[3]:int) goto B_oca;
  pm_buffer_append_string(a, 31828, 5);
  goto B_nca;
  label B_oca:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_nca:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24389, 28);
  if (c[4]:int) goto B_qca;
  pm_buffer_append_string(a, 31828, 5);
  goto B_pca;
  label B_qca:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_pca:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24782, 22);
  if (c[6]:int) goto B_sca;
  pm_buffer_append_string(a, 31828, 5);
  goto B_rca;
  label B_sca:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_rca:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24214, 20);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[8]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24172, 21);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[9]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[10]:int, (c + 44)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[12]:int, d);
  d[0] = f;
  goto B_a;
  label B_j:
  h = 0;
  if (eqz(f & 4)) goto B_h;
  label B_i:
  pm_buffer_append_string(a, 9701, 16);
  f = c[1]:ushort;
  h = 1;
  label B_h:
  if (eqz(f & 8)) goto B_uca;
  if (eqz(h)) goto B_vca;
  pm_buffer_append_byte(a, 44);
  label B_vca:
  pm_buffer_append_string(a, 1087, 18);
  goto B_tca;
  label B_uca:
  if (h) goto B_tca;
  pm_buffer_append_string(a, 1080, 4);
  label B_tca:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  if (c[3]:int) goto B_xca;
  pm_buffer_append_string(a, 31828, 5);
  goto B_wca;
  label B_xca:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_wca:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24389, 28);
  if (c[4]:int) goto B_zca;
  pm_buffer_append_string(a, 31828, 5);
  goto B_yca;
  label B_zca:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_yca:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24782, 22);
  if (c[6]:int) goto B_bda;
  pm_buffer_append_string(a, 31828, 5);
  goto B_ada;
  label B_bda:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_ada:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24214, 20);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[8]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24172, 21);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[9]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23684, 19);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[10]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 44);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[11]:int, (c + 48)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[13]:int, d);
  d[0] = f;
  goto B_a;
  label B_g:
  h = 0;
  if (eqz(f & 4)) goto B_e;
  label B_f:
  pm_buffer_append_string(a, 9701, 16);
  f = c[1]:ushort;
  h = 1;
  label B_e:
  if (eqz(f & 8)) goto B_dda;
  if (eqz(h)) goto B_eda;
  pm_buffer_append_byte(a, 44);
  label B_eda:
  pm_buffer_append_string(a, 1087, 18);
  goto B_cda;
  label B_dda:
  if (h) goto B_cda;
  pm_buffer_append_string(a, 1080, 4);
  label B_cda:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  if (c[3]:int) goto B_gda;
  pm_buffer_append_string(a, 31828, 5);
  goto B_fda;
  label B_gda:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_fda:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24389, 28);
  if (c[4]:int) goto B_ida;
  pm_buffer_append_string(a, 31828, 5);
  goto B_hda;
  label B_ida:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_hda:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24235, 15);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[6]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24782, 22);
  if (c[7]:int) goto B_kda;
  pm_buffer_append_string(a, 31828, 5);
  goto B_jda;
  label B_kda:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 28);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[7]:int, (c + 32)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_jda:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24698, 22);
  if (c[9]:int) goto B_mda;
  pm_buffer_append_string(a, 31828, 5);
  goto B_lda;
  label B_mda:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 36);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[9]:int, (c + 40)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_lda:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23285, 20);
  if (c[11]:int) goto B_oda;
  pm_buffer_append_string(a, 31828, 5);
  goto B_nda;
  label B_oda:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[11]:int, d);
  d[0] = f;
  label B_nda:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24652, 22);
  if (c[12]:int) goto B_qda;
  pm_buffer_append_string(a, 31828, 5);
  goto B_pda;
  label B_qda:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 48);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[12]:int, (c + 52)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_pda:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23928, 16);
  if (c[14]:int) goto B_rda;
  pm_buffer_append_string(a, 31828, 5);
  goto B_a;
  label B_rda:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[14]:int, d);
  d[0] = f;
  goto B_a;
  label B_d:
  h = 0;
  if (eqz(f & 4)) goto B_b;
  label B_c:
  pm_buffer_append_string(a, 9701, 16);
  f = c[1]:ushort;
  h = 1;
  label B_b:
  if (eqz(f & 8)) goto B_tda;
  if (eqz(h)) goto B_uda;
  pm_buffer_append_byte(a, 44);
  label B_uda:
  pm_buffer_append_string(a, 1087, 18);
  goto B_sda;
  label B_tda:
  if (h) goto B_sda;
  pm_buffer_append_string(a, 1080, 4);
  label B_sda:
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 23724, 19);
  if (c[3]:int) goto B_wda;
  pm_buffer_append_string(a, 31828, 5);
  goto B_vda;
  label B_wda:
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31816, 6);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[3]:int, d);
  d[0] = f;
  label B_vda:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24389, 28);
  if (c[4]:int) goto B_yda;
  pm_buffer_append_string(a, 31828, 5);
  goto B_xda;
  label B_yda:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 16);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[4]:int, (c + 20)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_xda:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24782, 22);
  if (c[6]:int) goto B_aea;
  pm_buffer_append_string(a, 31828, 5);
  goto B_zda;
  label B_aea:
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 24);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[6]:int, (c + 28)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  label B_zda:
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24214, 20);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[8]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24172, 21);
  pm_buffer_append_byte(a, 32);
  prettyprint_constant(a, b, c[9]:int);
  pm_buffer_append_byte(a, 10);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24454, 23);
  pm_buffer_append_byte(a, 32);
  prettyprint_location(a, b, c + 40);
  pm_buffer_append_string(a, 27027, 4);
  prettyprint_source(a, f = c[10]:int, (c + 44)[0]:int - f);
  pm_buffer_append_string(a, 32198, 2);
  pm_buffer_concat(a, d);
  pm_buffer_append_string(a, 24041, 16);
  pm_buffer_append_byte(a, 10);
  f = d[0];
  pm_buffer_append_string(d, 31823, 4);
  pm_buffer_concat(a, d);
  prettyprint_node(a, b, c[12]:int, d);
  d[0] = f;
  label B_a:
  stack_pointer = e + 864;
}

function prettyprint_location(a:int, b:int, c:{ a:int, b:int }) {
  var d:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int } = 
    stack_pointer - 32;
  stack_pointer = d;
  pm_newline_list_line_column(d + 24, b = b + 308, c.a);
  pm_newline_list_line_column(d + 16, b, c.b);
  d.b = d.h;
  d.d = d.f;
  d.a = d.g + 1;
  d.c = d.e + 1;
  pm_buffer_append_format(a, 26346, d);
  stack_pointer = d + 32;
}

function prettyprint_source(a:int, b:int, c:int) {
  var g:int;
  var f:ubyte_ptr;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  if (eqz(c)) goto B_a;
  var e:int = 0;
  loop L_b {
    f = b + e;
    g = f[0];
    if (g < 7) goto B_e;
    if (g > 126) goto B_e;
    if ((g + -14 & 255) > 17) goto B_d;
    label B_e:
    d[0] = g;
    pm_buffer_append_format(a, 15513, d);
    goto B_c;
    label B_d:
    br_table[B_p, B_o, B_n, B_m, B_l, B_k, B_j, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_i, B_h, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_f, B_g, ..B_f](
      g + -7)
    label B_p:
    pm_buffer_append_string(a, 13552, 2);
    goto B_c;
    label B_o:
    pm_buffer_append_string(a, 13538, 2);
    goto B_c;
    label B_n:
    pm_buffer_append_string(a, 4222, 2);
    goto B_c;
    label B_m:
    pm_buffer_append_string(a, 7969, 2);
    goto B_c;
    label B_l:
    pm_buffer_append_string(a, 1550, 2);
    goto B_c;
    label B_k:
    pm_buffer_append_string(a, 9550, 2);
    goto B_c;
    label B_j:
    pm_buffer_append_string(a, 6576, 2);
    goto B_c;
    label B_i:
    pm_buffer_append_string(a, 26980, 2);
    goto B_c;
    label B_h:
    if (e + 1 >= c) goto B_q;
    g = (f + 1)[0]:ubyte;
    if (g == 36) goto B_r;
    if (g == 123) goto B_r;
    if (g != 64) goto B_q;
    label B_r:
    pm_buffer_append_byte(a, 92);
    label B_q:
    pm_buffer_append_byte(a, 35);
    goto B_c;
    label B_g:
    pm_buffer_append_string(a, 15175, 2);
    goto B_c;
    label B_f:
    pm_buffer_append_byte(a, g);
    label B_c:
    if (c != (e = e + 1)) continue L_b;
  }
  label B_a:
  stack_pointer = d + 16;
}

function prettyprint_constant(a:int, b:int, c:int) {
  var d:long_ptr = stack_pointer - 16;
  stack_pointer = d;
  d[0] = pm_constant_pool_id_to_constant(b + 292, c)[0]:long@4 << 32L;
  pm_buffer_append_format(a, 4999, d);
  stack_pointer = d + 16;
}

export function pm_strpbrk(a:int, b:ubyte_ptr, c:int, d:int):int {
  var g:ubyte_ptr;
  var e:int = 0;
  if (d < 1) goto B_a;
  if (eqz(a[358]:ubyte)) goto B_b;
  if (eqz((a[66]:int)[20]:ubyte)) goto B_b;
  e = 0;
  var f:int = 0;
  loop L_c {
    if (f >= d) goto B_a;
    if (eqz(strchr(c, (g = b + f)[0]))) goto B_d;
    return g;
    label B_d:
    g = call_indirect(g, d - f, (a[66]:int)[0]:int);
    f = g + f;
    if (g) continue L_c;
    goto B_a;
  }
  label B_b:
  loop L_f {
    if (strchr(c, b[0])) goto B_e;
    b = b + 1;
    d = d + -1;
    if (eqz(d)) goto B_a;
    continue L_f;
  }
  label B_e:
  e = b;
  label B_a:
  return e;
}

export function pm_strspn_whitespace(a:int, b:int):int {
  var c:int = 0;
  if (b < 1) goto B_a;
  loop L_b {
    if (eqz(((a + c)[0]:ubyte + 60512)[0]:ubyte & 1)) goto B_a;
    if (b != (c = c + 1)) continue L_b;
  }
  c = b;
  label B_a:
  return c;
}

export function pm_strspn_whitespace_newlines(a:int, b:int, c:int):int {
  var d:int = 0;
  if (b < 1) goto B_a;
  loop L_b {
    var e:ubyte_ptr = a + d;
    var f:int = e[0];
    if (eqz((f + 60512)[0]:ubyte & 1)) goto B_a;
    if (f != 10) goto B_c;
    pm_newline_list_append(c, e);
    label B_c:
    if (b != (d = d + 1)) continue L_b;
  }
  d = b;
  label B_a:
  return d;
}

export function pm_strspn_inline_whitespace(a:int, b:int):int {
  var c:int = 0;
  if (b < 1) goto B_a;
  loop L_b {
    if (eqz(((a + c)[0]:ubyte + 60512)[0]:ubyte & 2)) goto B_a;
    if (b != (c = c + 1)) continue L_b;
  }
  c = b;
  label B_a:
  return c;
}

export function pm_strspn_regexp_option(a:int, b:int):int {
  var c:int = 0;
  if (b < 1) goto B_a;
  loop L_b {
    if (eqz(((a + c)[0]:ubyte + 60512)[0]:ubyte & 4)) goto B_a;
    if (b != (c = c + 1)) continue L_b;
  }
  c = b;
  label B_a:
  return c;
}

function pm_is_whitespace(a:int):int {
  return (a + 60512)[0]:ubyte & 1
}

function pm_is_inline_whitespace(a:int):int {
  return ((a + 60512)[0]:ubyte & 2) >> 1
}

export function pm_strspn_binary_number(a:int, b:int, c:int_ptr):int {
  if (b >= 1) goto B_a;
  return 0;
  label B_a:
  var d:ubyte_ptr = 0;
  var e:int = 0;
  loop L_c {
    var f:ubyte_ptr = a + e;
    var g:int = f[0];
    if (eqz((g + 60768)[0]:ubyte & 2)) goto B_b;
    if ((d & (g = g == 95)) != 1) goto B_d;
    c[0] = f;
    label B_d:
    d = g;
    if (b != (e = e + 1)) continue L_c;
  }
  e = b;
  label B_b:
  d = e + a + -1;
  if (d[0] != 95) goto B_e;
  c[0] = d;
  label B_e:
  return e;
}

export function pm_strspn_octal_number(a:int, b:int, c:int_ptr):int {
  if (b >= 1) goto B_a;
  return 0;
  label B_a:
  var d:ubyte_ptr = 0;
  var e:int = 0;
  loop L_c {
    var f:ubyte_ptr = a + e;
    var g:int = f[0];
    if (eqz((g + 60768)[0]:ubyte & 8)) goto B_b;
    if ((d & (g = g == 95)) != 1) goto B_d;
    c[0] = f;
    label B_d:
    d = g;
    if (b != (e = e + 1)) continue L_c;
  }
  e = b;
  label B_b:
  d = e + a + -1;
  if (d[0] != 95) goto B_e;
  c[0] = d;
  label B_e:
  return e;
}

export function pm_strspn_decimal_digit(a:int, b:int):int {
  var c:int = 0;
  if (b < 1) goto B_a;
  loop L_b {
    if (eqz(((a + c)[0]:ubyte + 60768)[0]:ubyte & 16)) goto B_a;
    if (b != (c = c + 1)) continue L_b;
  }
  c = b;
  label B_a:
  return c;
}

export function pm_strspn_decimal_number(a:int, b:int, c:int_ptr):int {
  if (b >= 1) goto B_a;
  return 0;
  label B_a:
  var d:ubyte_ptr = 0;
  var e:int = 0;
  loop L_c {
    var f:ubyte_ptr = a + e;
    var g:int = f[0];
    if (eqz((g + 60768)[0]:ubyte & 32)) goto B_b;
    if ((d & (g = g == 95)) != 1) goto B_d;
    c[0] = f;
    label B_d:
    d = g;
    if (b != (e = e + 1)) continue L_c;
  }
  e = b;
  label B_b:
  d = e + a + -1;
  if (d[0] != 95) goto B_e;
  c[0] = d;
  label B_e:
  return e;
}

export function pm_strspn_hexadecimal_digit(a:int, b:int):int {
  var c:int = 0;
  if (b < 1) goto B_a;
  loop L_b {
    if (eqz(((a + c)[0]:ubyte + 60768)[0]:ubyte & 64)) goto B_a;
    if (b != (c = c + 1)) continue L_b;
  }
  c = b;
  label B_a:
  return c;
}

export function pm_strspn_hexadecimal_number(a:int, b:int, c:int_ptr):int {
  if (b >= 1) goto B_a;
  return 0;
  label B_a:
  var d:ubyte_ptr = 0;
  var e:int = 0;
  loop L_c {
    var f:ubyte_ptr = a + e;
    var g:int = f[0];
    if ((g + 60768)[0]:byte > -1) goto B_b;
    if ((d & (g = g == 95)) != 1) goto B_d;
    c[0] = f;
    label B_d:
    d = g;
    if (b != (e = e + 1)) continue L_c;
  }
  e = b;
  label B_b:
  d = e + a + -1;
  if (d[0] != 95) goto B_e;
  c[0] = d;
  label B_e:
  return e;
}

function pm_is_binary_digit(a:int):int {
  return (a + 60768)[0]:ubyte & 1
}

function pm_is_octal_digit(a:int):int {
  return ((a + 60768)[0]:ubyte & 4) >> 2
}

function pm_is_decimal_digit(a:int):int {
  return ((a + 60768)[0]:ubyte & 16) >> 4
}

function pm_is_hexadecimal_digit(a:int):int {
  return ((a + 60768)[0]:ubyte & 64) >> 6
}

export function mmap(a:int, b:int, c:int, d:int, e:int, f:long):int {
  var g:{ a:int, b:int, c:long, d:int }
  if (d & 1327360) goto B_b;
  g = d & 3;
  if (g == 3) goto B_b;
  if (eqz(g)) goto B_b;
  if (eqz(d & 16)) goto B_a;
  label B_b:
  0[16550]:int = 28;
  return -1;
  label B_a:
  if (eqz(c)) goto B_d;
  if (eqz(c & 4)) goto B_c;
  label B_d:
  0[16550]:int = 28;
  return -1;
  label B_c:
  if (b) goto B_e;
  0[16550]:int = 28;
  return -1;
  label B_e:
  g = b + 24;
  if (g >= b) goto B_f;
  0[16550]:int = 48;
  return -1;
  label B_f:
  g = malloc(g);
  if (g) goto B_g;
  0[16550]:int = 48;
  return -1;
  label B_g:
  g.d = b;
  g.c = f;
  g.b = d;
  g.a = c;
  g = g + 24;
  if (d & 32) goto B_i;
  c = g;
  loop L_j {
    d = pread(e, c, b, f);
    if (d > -1) goto B_l;
    if (66200[0]:int == 27) goto B_k;
    return -1;
    label B_l:
    if (eqz(d)) goto B_h;
    c = c + d;
    b = b - d;
    f = f + i64_extend_i32_u(d);
    label B_k:
    if (b) continue L_j;
    goto B_h;
  }
  label B_i:
  memset(g, 0, b);
  label B_h:
  return g;
}

export function munmap(a:int, b:int):int {
  if ((a + -8)[0]:int == b) goto B_a;
  0[16550]:int = 28;
  return -1;
  label B_a:
  free(a + -24);
  return 0;
}

export function pm_string_sizeof():int {
  return 12
}

export function pm_string_shared_init(a:{ a:int, b:int, c:int }, b:int, c:int) {
  if (b <= c) goto B_a;
  assert_fail(12819, 13442, 17, 3962);
  unreachable;
  label B_a:
  a.c = 1;
  a.a = b;
  a.b = c - b;
}

export function pm_string_owned_init(a:{ a:int, b:int, c:int }, b:int, c:int) {
  a.c = 2;
  a.b = c;
  a.a = b;
}

export function pm_string_constant_init(a:{ a:int, b:int, c:int }, b:int, c:int) {
  a.c = 0;
  a.b = c;
  a.a = b;
}

export function pm_string_mapped_init(a:int, b:int):int {
  var e:int;
  var f:int;
  var c:int_ptr = stack_pointer - 160;
  stack_pointer = c;
  var d:int = 0;
  b = open(b, 67108864, 0);
  if (b != -1) goto B_b;
  perror(7898);
  goto B_a;
  label B_b:
  if (fstat(b, c + 16) != -1) goto B_c;
  close(b);
  perror(4152);
  d = 0;
  goto B_a;
  label B_c:
  e = c[16];
  if (e) goto B_e;
  close(b);
  a[1]:long@4 = 0L;
  a[0]:int = c + 15;
  goto B_d;
  label B_e:
  d = 0;
  f = mmap(0, e, 1, 2, b, 0L);
  if (f != -1) goto B_f;
  perror(13275);
  goto B_a;
  label B_f:
  close(b);
  a[2]:int = 3;
  a[1]:int = e;
  a[0]:int = f;
  label B_d:
  d = 1;
  label B_a:
  stack_pointer = c + 160;
  return d;
}

export function pm_string_memsize(a:int_ptr):int {
  var b:int = 12;
  if (a[2] != 2) goto B_a;
  b = a[1] + 12;
  label B_a:
  return b;
}

export function pm_string_ensure_owned(a:{ a:int, b:int, c:int }) {
  if (a.c == 2) goto B_a;
  var b:int = a.a;
  var c:int = a.b;
  var d:int = malloc(c);
  if (eqz(d)) goto B_a;
  a.c = 2;
  a.a = d;
  memcpy(d, b, c);
  label B_a:
}

export function pm_string_length(a:int_ptr):int {
  return a[1]
}

export function pm_string_source(a:int_ptr):int {
  return a[0]
}

export function pm_string_free(a:{ a:int, b:int, c:int }) {
  var b:int = a.a;
  br_table[B_c, B_b, ..B_a](a.c + -2)
  label B_c:
  free(b);
  return ;
  label B_b:
  a = a.b;
  if (eqz(a)) goto B_a;
  munmap(b, a);
  label B_a:
}

export function pm_buffer_sizeof():int {
  return 12
}

export function pm_buffer_init_capacity(a:{ a:int, b:int, c:int }, b:int):int {
  a.b = b;
  a.a = 0;
  a.c = (b = malloc(b));
  return b != 0;
}

export function pm_buffer_init(a:int):int {
  var b:int;
  a[0]:long@4 = 4398046511104L;
  a[2]:int = (b = malloc(1024));
  return b != 0;
}

export function pm_buffer_value(a:int_ptr):int {
  return a[2]
}

export function pm_buffer_length(a:int_ptr):int {
  return a[0]
}

export function pm_buffer_append_zeroes(a:{ a:int, b:int, c:int }, b:int) {
  var e:int;
  var d:int;
  var c:int;
  c = a.a;
  d = c + b;
  if (d > (e = a.b)) goto B_b;
  e = a.c;
  goto B_a;
  label B_b:
  if (e) goto B_c;
  e = 1;
  a.b = 1;
  label B_c:
  if (d <= e) goto B_d;
  loop L_e {
    if (d > (e = e << 1)) continue L_e
  }
  a.b = e;
  label B_d:
  a.c = (e = realloc(a.c, e));
  label B_a:
  a.a = d;
  memset(e + c, 0, b);
}

export function pm_buffer_append_format(a:{ a:int, b:int, c:int }, b:int, c:int) {
  var g:int;
  var h:int;
  var f:int;
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  d[3] = c;
  var e:int = vsnprintf(0, 0, b, c);
  if (e < 0) goto B_a;
  f = a.a;
  h = f + (g = e + 1);
  if (h <= (e = a.b)) goto B_b;
  if (e) goto B_c;
  e = 1;
  a.b = 1;
  label B_c:
  if (h <= e) goto B_d;
  loop L_e {
    if (h > (e = e << 1)) continue L_e
  }
  a.b = e;
  label B_d:
  a.c = realloc(a.c, e);
  label B_b:
  a.a = h;
  d[3] = c;
  vsnprintf(a.c + f, g, b, c);
  a.a = a.a + -1;
  label B_a:
  stack_pointer = d + 16;
}

export function pm_buffer_append_string(a:{ a:int, b:int, c:int }, b:int, c:int) {
  var f:int;
  var e:int;
  var d:int;
  d = a.a;
  e = d + c;
  if (e > (f = a.b)) goto B_b;
  f = a.c;
  goto B_a;
  label B_b:
  if (f) goto B_c;
  f = 1;
  a.b = 1;
  label B_c:
  if (e <= f) goto B_d;
  loop L_e {
    if (e > (f = f << 1)) continue L_e
  }
  a.b = f;
  label B_d:
  a.c = (f = realloc(a.c, f));
  label B_a:
  a.a = e;
  memcpy(f + d, b, c);
}

export function pm_buffer_append_bytes(a:{ a:int, b:int, c:int }, b:int, c:int) {
  var f:int;
  var e:int;
  var d:int;
  d = a.a;
  e = d + c;
  if (e > (f = a.b)) goto B_b;
  f = a.c;
  goto B_a;
  label B_b:
  if (f) goto B_c;
  f = 1;
  a.b = 1;
  label B_c:
  if (e <= f) goto B_d;
  loop L_e {
    if (e > (f = f << 1)) continue L_e
  }
  a.b = f;
  label B_d:
  a.c = (f = realloc(a.c, f));
  label B_a:
  a.a = e;
  memcpy(f + d, b, c);
}

export function pm_buffer_append_byte(a:{ a:int, b:int, c:int }, b:int) {
  var e:int;
  var d:int;
  var c:int;
  c = a.a;
  d = c + 1;
  if (d > (e = a.b)) goto B_b;
  e = a.c;
  goto B_a;
  label B_b:
  if (e) goto B_c;
  e = 1;
  a.b = 1;
  label B_c:
  if (d <= e) goto B_d;
  loop L_e {
    if (d > (e = e << 1)) continue L_e
  }
  a.b = e;
  label B_d:
  a.c = (e = realloc(a.c, e));
  label B_a:
  a.a = d;
  (e + c)[0]:byte = b;
}

export function pm_buffer_append_varuint(a:{ a:int, b:int, c:int }, b:int) {
  var f:int;
  var e:int;
  var d:int;
  var c:int;
  if (b < 128) goto B_a;
  loop L_b {
    c = b | -128;
    d = a.a;
    e = d + 1;
    if (e > (f = a.b)) goto B_d;
    f = a.c;
    goto B_c;
    label B_d:
    if (f) goto B_e;
    f = 1;
    a.b = 1;
    label B_e:
    if (e <= f) goto B_f;
    loop L_g {
      if (e > (f = f << 1)) continue L_g
    }
    a.b = f;
    label B_f:
    a.c = (f = realloc(a.c, f));
    label B_c:
    a.a = e;
    (f + d)[0]:byte = c;
    f = b > 16383;
    e = b >> 7;
    b = e;
    if (f) continue L_b;
  }
  c = a.a;
  b = c + 1;
  if (b > (f = a.b)) goto B_i;
  f = a.c;
  goto B_h;
  label B_i:
  if (f) goto B_j;
  f = 1;
  a.b = 1;
  label B_j:
  if (b <= f) goto B_k;
  loop L_l {
    if (b > (f = f << 1)) continue L_l
  }
  a.b = f;
  label B_k:
  a.c = (f = realloc(a.c, f));
  label B_h:
  a.a = b;
  (f + c)[0]:byte = e;
  return ;
  label B_a:
  c = a.a;
  e = c + 1;
  if (e > (f = a.b)) goto B_n;
  f = a.c;
  goto B_m;
  label B_n:
  if (f) goto B_o;
  f = 1;
  a.b = 1;
  label B_o:
  if (e <= f) goto B_p;
  loop L_q {
    if (e > (f = f << 1)) continue L_q
  }
  a.b = f;
  label B_p:
  a.c = (f = realloc(a.c, f));
  label B_m:
  a.a = e;
  (f + c)[0]:byte = b;
}

export function pm_buffer_append_varsint(a:int, b:int) {
  pm_buffer_append_varuint(a, b << 1 ^ b >> 31)
}

export function pm_buffer_prepend_string(a:{ a:int, b:int, c:int }, b:int, c:int) {
  var f:int;
  var e:int;
  var d:int;
  d = a.a;
  e = d + c;
  if (e > (f = a.b)) goto B_b;
  f = a.c;
  goto B_a;
  label B_b:
  if (f) goto B_c;
  f = 1;
  a.b = 1;
  label B_c:
  if (e <= f) goto B_d;
  loop L_e {
    if (e > (f = f << 1)) continue L_e
  }
  a.b = f;
  label B_d:
  a.c = (f = realloc(a.c, f));
  label B_a:
  a.a = e;
  memmove(f + c, f, d);
  memcpy(a.c, b, c);
}

export function pm_buffer_concat(a:{ a:int, b:int, c:int }, b:int_ptr) {
  var f:int;
  var e:int;
  var c:int = b[0];
  if (eqz(c)) goto B_a;
  var d:int = b[2];
  e = a.a;
  f = e + c;
  if (f > (b = a.b)) goto B_c;
  b = a.c;
  goto B_b;
  label B_c:
  if (b) goto B_d;
  b = 1;
  a.b = 1;
  label B_d:
  if (f <= b) goto B_e;
  loop L_f {
    if (f > (b = b << 1)) continue L_f
  }
  a.b = b;
  label B_e:
  a.c = (b = realloc(a.c, b));
  label B_b:
  a.a = f;
  memcpy(b + e, d, c);
  label B_a:
}

export function pm_buffer_free(a:int_ptr) {
  free(a[2])
}

export function pm_newline_list_init(a:{ a:int, b:int, c:int, d:int }, b:int, c:int):int {
  var d:int;
  a.d = (d = calloc(c, 4));
  if (eqz(d)) goto B_a;
  a.c = c;
  a.b = 1;
  a.a = b;
  label B_a:
  return d != 0;
}

export function pm_newline_list_append(a:{ a:int, b:int, c:int, d:int }, b:ubyte_ptr):int {
  var d:int;
  var c:int;
  var e:int;
  c = a.b;
  if (c != a.c) goto B_a;
  a.c = (d = c * 3 >> 1);
  e = a.d;
  a.d = (d = calloc(d, 4));
  memcpy(d, e, c << 2);
  free(e);
  if (a.d) goto B_a;
  return 0;
  label B_a:
  if (b[0] != 10) goto B_d;
  c = a.a;
  if (c > b) goto B_c;
  c = b - c + 1;
  e = a.d;
  b = a.b;
  if (eqz(b)) goto B_e;
  if (c <= ((b << 2) + e + -4)[0]:int) goto B_b;
  label B_e:
  a.b = b + 1;
  e[b]:int = c;
  return 1;
  label B_d:
  assert_fail(26941, 13375, 38, 12625);
  unreachable;
  label B_c:
  assert_fail(1950, 13375, 39, 12625);
  unreachable;
  label B_b:
  assert_fail(15109, 13375, 42, 12625);
  return unreachable;
}

export function pm_newline_list_line_column(a:{ a:int, b:int }, b:int_ptr, c:int) {
  var g:int;
  var d:int = b[0];
  if (d > c) goto B_a;
  var e:int = c - d;
  c = b[1] + -1;
  var f:int = b[3];
  b = 0;
  loop L_b {
    g = f[d = (c - b >> 1) + b]:int;
    if (g != e) goto B_c;
    a.b = 0;
    a.a = d;
    return ;
    label B_c:
    c = select_if(c, d + -1, g = g < e);
    if (c >= (b = select_if(d + 1, b, g))) continue L_b;
  }
  a.a = (b = b + -1);
  a.b = e - f[b]:int;
  return ;
  label B_a:
  assert_fail(1950, 13375, 55, 7856);
  unreachable;
}

export function pm_newline_list_free(a:int_ptr) {
  free(a[3])
}

export function pm_strncasecmp(a:ubyte_ptr, b:ubyte_ptr, c:int):int {
  var d:int;
  if (c) goto B_a;
  return 0;
  label B_a:
  loop L_c {
    d = a[0];
    if (d) goto B_d;
    return 0;
    label B_d:
    var e:int = b[0];
    if (eqz(e)) goto B_b;
    d = tolower(d) - tolower(e);
    if (d) goto B_b;
    a = a + 1;
    b = b + 1;
    c = c + -1;
    if (c) continue L_c;
  }
  return 0;
  label B_b:
  return d;
}

export function pm_memchr(a:int, b:int, c:int, d:int, e:int):int {
  var g:ubyte_ptr;
  var f:int;
  if (eqz(d)) goto B_b;
  if (b < 64) goto B_b;
  if (eqz(e[20]:ubyte & 255)) goto B_b;
  f = 0;
  d = 0;
  loop L_c {
    if (d >= c) goto B_a;
    g = a + d;
    if (g[0] != b) goto B_d;
    return g;
    label B_d:
    g = call_indirect(g, c - d, e[0]:int);
    d = g + d;
    if (g) continue L_c;
    goto B_a;
  }
  label B_b:
  f = memchr(a, b, c);
  label B_a:
  return f;
}

export function pm_string_list_append(a:int, b:long_ptr@4) {
  var e:int;
  var c:int;
  var d:int;
  c = a[0]:int;
  d = c + 1;
  if (d > (e = a[1]:int)) goto B_c;
  e = a[2]:int;
  goto B_b;
  label B_c:
  a[1]:int = (e = select_if(e << 1, 1, e));
  a[2]:int = (e = realloc(a[2]:int, e * 12));
  if (eqz(e)) goto B_a;
  c = a[0]:int;
  d = c + 1;
  label B_b:
  a[0]:int = d;
  a = e + c * 12;
  a[0]:long@4 = b[0];
  (a + 8)[0]:int = (b + 8)[0]:int;
  return ;
  label B_a:
  abort();
  unreachable;
}

export function pm_string_list_free(a:int_ptr) {
  free(a[2])
}

export function pm_state_stack_push(a:int_ptr, b:int) {
  a[0] = a[0] << 1 | b
}

export function pm_state_stack_pop(a:int_ptr) {
  a[0] = a[0] >> 1
}

export function pm_state_stack_p(a:int_ptr):int {
  return a[0] & 1
}

export function pm_list_empty_p(a:int_ptr):int {
  return eqz(a[1])
}

export function pm_list_size(a:int_ptr):int {
  return a[0]
}

export function pm_list_append(a:{ a:int, b:int, c:int }, b:int) {
  var c:int_ptr;
  if (a.b) goto B_b;
  c = a + 4;
  goto B_a;
  label B_b:
  c = a.c;
  label B_a:
  c[0] = b;
  a.c = b;
  a.a = a.a + 1;
}

export function pm_list_free(a:{ a:int, b:int }) {
  var b:int_ptr = a.b;
  if (eqz(b)) goto B_a;
  loop L_b {
    var c:int = b[0];
    free(b);
    b = c;
    if (c) continue L_b;
  }
  label B_a:
  a.a = 0;
}

export function pm_constant_id_list_init(a:int) {
  a[0]:long@4 = 0L;
  a[2]:int = 0;
}

export function pm_constant_id_list_append(a:{ a:int, b:int, c:int }, b:int):int {
  var d:int;
  var c:int;
  c = a.a;
  if (c >= (d = a.b)) goto B_b;
  d = a.c;
  goto B_a;
  label B_b:
  a.b = (c = select_if(d << 1, 8, d));
  a.c = (d = realloc(a.c, c << 2));
  if (d) goto B_c;
  return 0;
  label B_c:
  c = a.a;
  label B_a:
  a.a = c + 1;
  d[c]:int = b;
  return 1;
}

export function pm_constant_id_list_includes(a:int_ptr, b:int):int {
  var c:int;
  var e:int;
  c = a[0];
  if (c) goto B_a;
  return 0;
  label B_a:
  var d:int = 1;
  a = a[2];
  if (a[0] == b) goto B_b;
  a = a + 4;
  d = 1;
  loop L_d {
    if (c == (e = d)) goto B_c;
    d = e + 1;
    var f:int = a[0];
    a = a + 4;
    if (f != b) continue L_d;
  }
  label B_c:
  d = e < c;
  label B_b:
  return d;
}

export function pm_constant_id_list_memsize(a:int_ptr):int {
  return (a[1] << 2) + 12
}

export function pm_constant_id_list_free(a:int_ptr) {
  a = a[2];
  if (eqz(a)) goto B_a;
  free(a);
  label B_a:
}

export function pm_constant_pool_init(a:{ a:int, b:int, c:int, d:int }, b:int):int {
  var c:int = 0;
  if (b < 0) goto B_a;
  if (b) goto B_c;
  b = 1;
  goto B_b;
  label B_c:
  b = b + -1;
  b = b >> 1 | b;
  b = b >> 2 | b;
  b = b >> 4 | b;
  b = b >> 8 | b;
  b = (b >> 16 | b) + 1;
  label B_b:
  var d:int = calloc(b, 16);
  if (eqz(d)) goto B_a;
  a.d = b;
  a.c = 0;
  a.a = d;
  a.b = d + (b << 3);
  c = 1;
  label B_a:
  return c;
}

export function pm_constant_pool_id_to_constant(a:int_ptr, b:int):int {
  if (eqz(b)) goto B_b;
  if (a[2] >= b) goto B_a;
  label B_b:
  assert_fail(9577, 13414, 180, 3826);
  unreachable;
  label B_a:
  return (b << 3) + a[1] + -8;
}

export function pm_constant_pool_insert_shared(a:int, b:int, c:int):int {
  return pm_constant_pool_insert(a, b, c, 0)
}

function pm_constant_pool_insert(a:{ a:int, b:int, c:int, d:int }, b:int, c:int, d:int):int {
  var f:int;
  var g:int;
  var e:int;
  var o:int;
  var h:int;
  var l:{ a:int, b:int }
  var i:int;
  var m:int;
  var n:int;
  var k:int;
  e = a.c;
  if (e >= ((f = a.d) >> 2) * 3) goto B_f;
  g = f;
  goto B_e;
  label B_f:
  if (f & f + -1) goto B_c;
  h = 0;
  if (f < 0) goto B_d;
  g = f << 1;
  i = calloc(g, 16);
  if (eqz(i)) goto B_d;
  var j:int = i + (f << 4);
  k = a.a;
  if (eqz(f)) goto B_g;
  l = g + -1;
  m = 0;
  loop L_h {
    n = k + (m << 3);
    if (eqz(n[0]:int & 1073741823)) goto B_i;
    o = n[1]:int;
    loop L_j {
      h = o & l;
      o = h + 1;
      h = i + (h << 3);
      if (h[0]:int & 1073741823) continue L_j;
    }
    h[0]:long@4 = n[0]:long@4;
    label B_i:
    m = m + 1;
    if (m != f) continue L_h;
  }
  label B_g:
  o = memcpy(j, a.b, e << 3);
  free(k);
  a.d = g;
  a.a = i;
  a.b = o;
  label B_e:
  if (g & (m = g + -1)) goto B_b;
  if (c) goto B_l;
  o = 5381;
  goto B_k;
  label B_l:
  i = c & 3;
  if (c >= 4) goto B_n;
  o = 5381;
  h = 0;
  goto B_m;
  label B_n:
  l = c & -4;
  o = 5381;
  h = 0;
  loop L_o {
    o = (((o * 33 + (o = b + h)[0]:ubyte) * 33 + (o + 1)[0]:ubyte) * 33 +
         (o + 2)[0]:ubyte) *
        33 +
        (o + 3)[0]:ubyte;
    if (l != (h = h + 4)) continue L_o;
  }
  label B_m:
  if (eqz(i)) goto B_k;
  h = b + h;
  loop L_p {
    o = o * 33 + h[0]:ubyte;
    h = h + 1;
    i = i + -1;
    if (i) continue L_p;
  }
  label B_k:
  f = a.a;
  l = f + ((i = o & m) << 3);
  n = l.a;
  h = n & 1073741823;
  if (eqz(h)) goto B_q;
  k = a.b;
  loop L_r {
    h = k + (h + -1 << 3);
    if (h[1]:int != c) goto B_s;
    g = h[0]:int;
    if (memcmp(g, b, c)) goto B_s;
    if (d != 1) goto B_u;
    free(b);
    n = l.a;
    goto B_t;
    label B_u:
    if ((n & -1073741824) != 1073741824) goto B_t;
    free(g);
    h[0]:int = b;
    l.a = (n = l.a & 1073741823);
    label B_t:
    return n & 1073741823;
    label B_s:
    l = f + ((i = i + 1 & m) << 3);
    n = l.a;
    h = n & 1073741823;
    if (h) continue L_r;
  }
  label B_q:
  a.c = (h = (i = a.c) + 1);
  if (h >= 1073741824) goto B_a;
  l.b = o;
  l.a = h | d << 30;
  o = a.b + (i << 3);
  o[1]:int = c;
  o[0]:int = b;
  label B_d:
  return h;
  label B_c:
  assert_fail(26314, 13414, 106, 9553);
  unreachable;
  label B_b:
  assert_fail(26314, 13414, 193, 1926);
  unreachable;
  label B_a:
  assert_fail(26834, 13414, 234, 1926);
  return unreachable;
}

export function pm_constant_pool_insert_owned(a:int, b:int, c:int):int {
  return pm_constant_pool_insert(a, b, c, 1)
}

export function pm_constant_pool_insert_constant(a:int, b:int, c:int):int {
  return pm_constant_pool_insert(a, b, c, 2)
}

export function pm_constant_pool_free(a:int_ptr) {
  var b:int = a[3];
  if (eqz(b)) goto B_a;
  var c:int = 0;
  var d:int = 0;
  loop L_b {
    var e:int = (a[0] + c)[0]:int;
    var f:int = e & 1073741823;
    if (eqz(f)) goto B_c;
    if ((e & -1073741824) != 1073741824) goto B_c;
    free(((f << 3) + a[1] + -8)[0]:int);
    b = a[3];
    label B_c:
    c = c + 8;
    d = d + 1;
    if (d < b) continue L_b;
  }
  label B_a:
  free(a[0]);
}

export function malloc(a:int):int {
  return dlmalloc(a)
}

function dlmalloc(a:int):int {
  var e:int;
  var d:int;
  var g:{ a:int, b:int, c:int, d:int, e:int }
  var f:int;
  var i:int;
  var h:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int }
  var j:int;
  var c:int_ptr;
  var k:int_ptr;
  var l:int_ptr;
  var b:int = stack_pointer - 16;
  stack_pointer = b;
  c = 0[16432]:int;
  if (c) goto B_a;
  d = 0[16544]:int;
  if (eqz(d)) goto B_c;
  e = 0[16545]:int;
  goto B_b;
  label B_c:
  0[16547]:long@4 = -1L;
  0[16545]:long@4 = 281474976776192L;
  0[16544]:int = (d = (b + 8 & -16) ^ 1431655768);
  0[16549]:int = 0;
  0[16537]:int = 0;
  e = 65536;
  label B_b:
  c = 0;
  f = select_if(196608, 131824 + e + -1 & 0 - e, 196608) - 131824;
  if (f < 89) goto B_a;
  e = 0;
  0[16539]:int = f;
  0[16538]:int = 131824;
  0[16430]:int = 131824;
  0[16435]:int = d;
  0[16434]:int = -1;
  loop L_d {
    (e + 65764)[0]:int = (d = e + 65752);
    d[0]:int = (g = e + 65744);
    (e + 65756)[0]:int = g;
    (e + 65772)[0]:int = (g = e + 65760);
    g.a = d;
    (e + 65780)[0]:int = (d = e + 65768);
    d[0]:int = g;
    (e + 65776)[0]:int = d;
    e = e + 32;
    if (e != 256) continue L_d;
  }
  c = 131824 + (e = select_if(-8 - 131824 & 15, 0, 131824 + 8 & 15));
  (c + 4)[0]:int = (e = (d = f + -56) - e) | 1;
  0[16433]:int = 0[16548]:int;
  0[16429]:int = e;
  0[16432]:int = c;
  (131824 + d)[1]:int = 56;
  label B_a:
  if (a > 236) goto B_p;
  h = 0[16426]:int;
  e = h >> (d = (f = select_if(16, a + 19 & -16, a < 11)) >> 3);
  if (eqz(e & 3)) goto B_q;
  g = ((e & 1) | d) ^ 1;
  d = g << 3;
  e = d + 65744;
  if (e != (f = (d = (d + 65752)[0]:int)[2]:int)) goto B_s;
  0[16426]:int = h & -2 << g;
  goto B_r;
  label B_s:
  e[2]:int = f;
  f[3]:int = e;
  label B_r:
  e = d + 8;
  d[1]:int = (g = g << 3) | 3;
  d = d + g;
  d[1]:int = d[1]:int | 1;
  goto B_e;
  label B_q:
  if (f <= (i = 0[16428]:int)) goto B_o;
  if (eqz(e)) goto B_t;
  e = e << d & ((e = 2 << d) | 0 - e);
  d = ctz(e & 0 - e);
  e = d << 3;
  g = e + 65744;
  if (g != (a = (e = (e + 65752)[0]:int)[2]:int)) goto B_v;
  0[16426]:int = (h = h & -2 << d);
  goto B_u;
  label B_v:
  g.c = a;
  a[3]:int = g;
  label B_u:
  e[1]:int = f | 3;
  (e + (d = d << 3))[0]:int = (g = d - f);
  a = e + f;
  a[1]:int = g | 1;
  if (eqz(i)) goto B_w;
  f = (i & -8) + 65744;
  d = 0[16431]:int;
  if (h & (j = 1 << (i >> 3))) goto B_y;
  0[16426]:int = h | j;
  j = f;
  goto B_x;
  label B_y:
  j = f[2]:int;
  label B_x:
  j[3]:int = d;
  f[2]:int = d;
  d[3]:int = f;
  d[2]:int = j;
  label B_w:
  e = e + 8;
  0[16431]:int = a;
  0[16428]:int = g;
  goto B_e;
  label B_t:
  k = 0[16427]:int;
  if (eqz(k)) goto B_o;
  a = ((ctz(k & 0 - k) << 2) + 66008)[0]:int;
  d = (a[1]:int & -8) - f;
  g = a;
  loop L_aa {
    e = g.e;
    if (e) goto B_ba;
    e = (g + 20)[0]:int;
    if (eqz(e)) goto B_z;
    label B_ba:
    g = (e[1]:int & -8) - f;
    d = select_if(g, d, g = g < d);
    a = select_if(e, a, g);
    g = e;
    continue L_aa;
  }
  label B_z:
  l = a[6]:int;
  j = a[3]:int;
  if (j == a) goto B_ca;
  e = a[2]:int;
  e < 0[16430]:int;
  j[2]:int = e;
  e[3]:int = j;
  goto B_f;
  label B_ca:
  g = a + 20;
  e = g.a;
  if (e) goto B_da;
  e = a[4]:int;
  if (eqz(e)) goto B_n;
  g = a + 16;
  label B_da:
  loop L_ea {
    c = g;
    j = e;
    g = j + 20;
    e = g.a;
    if (e) continue L_ea;
    g = j + 16;
    e = j[4]:int;
    if (e) continue L_ea;
  }
  c[0] = 0;
  goto B_f;
  label B_p:
  f = -1;
  if (a > -65) goto B_o;
  e = a + 19;
  f = e & -16;
  k = 0[16427]:int;
  if (eqz(k)) goto B_o;
  i = 0;
  if (f < 256) goto B_fa;
  i = 31;
  if (f > 16777215) goto B_fa;
  i = (f >> 38 - (e = clz(e >> 8)) & 1) - (e << 1) + 62;
  label B_fa:
  d = 0 - f;
  g = ((i << 2) + 66008)[0]:int;
  if (g) goto B_ja;
  e = 0;
  j = 0;
  goto B_ia;
  label B_ja:
  e = 0;
  a = f << select_if(0, 25 - (i >> 1), i == 31);
  j = 0;
  loop L_ka {
    h = (g.b & -8) - f;
    if (h >= d) goto B_la;
    d = h;
    j = g;
    if (h) goto B_la;
    d = 0;
    j = g;
    e = g;
    goto B_ha;
    label B_la:
    e = select_if(select_if(e,
                            h = (g + 20)[0]:int,
                            h == (g = (g + (a >> 29 & 4) + 16)[0]:int)),
                  e,
                  h);
    a = a << 1;
    if (g) continue L_ka;
  }
  label B_ia:
  if (e | j) goto B_ma;
  j = 0;
  e = 2 << i;
  e = (e | 0 - e) & k;
  if (eqz(e)) goto B_o;
  e = ((ctz(e & 0 - e) << 2) + 66008)[0]:int;
  label B_ma:
  if (eqz(e)) goto B_ga;
  label B_ha:
  loop L_na {
    h = (e[1]:int & -8) - f;
    a = h < d;
    g = e[4]:int;
    if (g) goto B_oa;
    g = (e + 20)[0]:int;
    label B_oa:
    d = select_if(h, d, a);
    j = select_if(e, j, a);
    e = g;
    if (g) continue L_na;
  }
  label B_ga:
  if (eqz(j)) goto B_o;
  if (d >= 0[16428]:int - f) goto B_o;
  c = j[6]:int;
  a = j[3]:int;
  if (a == j) goto B_pa;
  e = j[2]:int;
  e < 0[16430]:int;
  a[2]:int = e;
  e[3]:int = a;
  goto B_g;
  label B_pa:
  g = j + 20;
  e = g.a;
  if (e) goto B_qa;
  e = j[4]:int;
  if (eqz(e)) goto B_m;
  g = j + 16;
  label B_qa:
  loop L_ra {
    h = g;
    a = e;
    g = a + 20;
    e = g.a;
    if (e) continue L_ra;
    g = a + 16;
    e = a[4]:int;
    if (e) continue L_ra;
  }
  h.a = 0;
  goto B_g;
  label B_o:
  e = 0[16428]:int;
  if (e < f) goto B_sa;
  d = 0[16431]:int;
  g = e - f;
  if (g < 16) goto B_ua;
  a = d + f;
  a[1]:int = g | 1;
  (d + e)[0]:int = g;
  d[1]:int = f | 3;
  goto B_ta;
  label B_ua:
  d[1]:int = e | 3;
  e = d + e;
  e[1]:int = e[1]:int | 1;
  a = 0;
  g = 0;
  label B_ta:
  0[16428]:int = g;
  0[16431]:int = a;
  e = d + 8;
  goto B_e;
  label B_sa:
  g = 0[16429]:int;
  if (g <= f) goto B_va;
  e = c + f;
  e[1]:int = (d = g - f) | 1;
  0[16432]:int = e;
  0[16429]:int = d;
  c[1] = f | 3;
  e = c + 8;
  goto B_e;
  label B_va:
  if (eqz(0[16544]:int)) goto B_xa;
  d = 0[16546]:int;
  goto B_wa;
  label B_xa:
  0[16547]:long@4 = -1L;
  0[16545]:long@4 = 281474976776192L;
  0[16544]:int = (b + 12 & -16) ^ 1431655768;
  0[16549]:int = 0;
  0[16537]:int = 0;
  d = 65536;
  label B_wa:
  e = 0;
  a = d + (i = f + 71);
  j = a & (h = 0 - d);
  if (j > f) goto B_ya;
  0[16550]:int = 48;
  goto B_e;
  label B_ya:
  e = 0[16536]:int;
  if (eqz(e)) goto B_za;
  d = 0[16534]:int;
  k = d + j;
  if (k <= d) goto B_ab;
  if (k <= e) goto B_za;
  label B_ab:
  e = 0;
  0[16550]:int = 48;
  goto B_e;
  label B_za:
  if (0[66148]:ubyte & 4) goto B_j;
  if (eqz(c)) goto B_db;
  e = 66152;
  loop L_eb {
    d = e[0]:int;
    if (d > c) goto B_fb;
    if (d + e[1]:int > c) goto B_cb;
    label B_fb:
    e = e[2]:int;
    if (e) continue L_eb;
  }
  label B_db:
  a = sbrk(0);
  if (a == -1) goto B_k;
  h = j;
  e = 0[16545]:int;
  d = e + -1;
  if (eqz(d & a)) goto B_gb;
  h = j - a + (d + a & 0 - e);
  label B_gb:
  if (h <= f) goto B_k;
  if (h > 2147483646) goto B_k;
  e = 0[16536]:int;
  if (eqz(e)) goto B_hb;
  d = 0[16534]:int;
  g = d + h;
  if (g <= d) goto B_k;
  if (g > e) goto B_k;
  label B_hb:
  e = sbrk(h);
  if (e != a) goto B_bb;
  goto B_i;
  label B_cb:
  h = a - g & h;
  if (h > 2147483646) goto B_k;
  a = sbrk(h);
  if (a == e[0]:int + e[1]:int) goto B_l;
  e = a;
  label B_bb:
  if (e == -1) goto B_ib;
  if (f + 72 <= h) goto B_ib;
  d = i - h + (d = 0[16546]:int) & 0 - d;
  if (d <= 2147483646) goto B_jb;
  a = e;
  goto B_i;
  label B_jb:
  if (sbrk(d) == -1) goto B_kb;
  h = d + h;
  a = e;
  goto B_i;
  label B_kb:
  sbrk(0 - h);
  goto B_k;
  label B_ib:
  a = e;
  if (e != -1) goto B_i;
  goto B_k;
  label B_n:
  j = 0;
  goto B_f;
  label B_m:
  a = 0;
  goto B_g;
  label B_l:
  if (a != -1) goto B_i;
  label B_k:
  0[16537]:int = 0[16537]:int | 4;
  label B_j:
  if (j > 2147483646) goto B_h;
  a = sbrk(j);
  e = sbrk(0);
  if (a == -1) goto B_h;
  if (e == -1) goto B_h;
  if (a >= e) goto B_h;
  h = e - a;
  if (h <= f + 56) goto B_h;
  label B_i:
  0[16534]:int = (e = 0[16534]:int + h);
  if (e <= 0[16535]:int) goto B_lb;
  0[16535]:int = e;
  label B_lb:
  d = 0[16432]:int;
  if (eqz(d)) goto B_pb;
  e = 66152;
  loop L_qb {
    if (a == (g = e[0]:int) + (j = e[1]:int)) goto B_ob;
    e = e[2]:int;
    if (e) continue L_qb;
    goto B_nb;
  }
  label B_pb:
  e = 0[16430]:int;
  if (eqz(e)) goto B_sb;
  if (a >= e) goto B_rb;
  label B_sb:
  0[16430]:int = a;
  label B_rb:
  e = 0;
  0[16539]:int = h;
  0[16538]:int = a;
  0[16434]:int = -1;
  0[16435]:int = 0[16544]:int;
  0[16541]:int = 0;
  loop L_tb {
    (e + 65764)[0]:int = (d = e + 65752);
    d[0]:int = (g = e + 65744);
    (e + 65756)[0]:int = g;
    (e + 65772)[0]:int = (g = e + 65760);
    g.a = d;
    (e + 65780)[0]:int = (d = e + 65768);
    d[0]:int = g;
    (e + 65776)[0]:int = d;
    e = e + 32;
    if (e != 256) continue L_tb;
  }
  d = a + (e = select_if(-8 - a & 15, 0, a + 8 & 15));
  d[1]:int = (e = (g = h + -56) - e) | 1;
  0[16433]:int = 0[16548]:int;
  0[16429]:int = e;
  0[16432]:int = d;
  (a + g)[1]:int = 56;
  goto B_mb;
  label B_ob:
  if (e[12]:ubyte & 8) goto B_nb;
  if (d < g) goto B_nb;
  if (d >= a) goto B_nb;
  a = d + (g = select_if(-8 - d & 15, 0, d + 8 & 15));
  a[1]:int = (g = (c = 0[16429]:int + h) - g) | 1;
  e[1]:int = j + h;
  0[16433]:int = 0[16548]:int;
  0[16429]:int = g;
  0[16432]:int = a;
  (d + c)[1]:int = 56;
  goto B_mb;
  label B_nb:
  if (a >= (j = 0[16430]:int)) goto B_ub;
  0[16430]:int = a;
  j = a;
  label B_ub:
  g = a + h;
  e = 66152;
  loop L_cc {
    if (e[0]:int == g) goto B_bc;
    e = e[2]:int;
    if (e) continue L_cc;
    goto B_ac;
  }
  label B_bc:
  if (eqz(e[12]:ubyte & 8)) goto B_zb;
  label B_ac:
  e = 66152;
  loop L_dc {
    g = e[0]:int;
    if (g > d) goto B_ec;
    g = g + e[1]:int;
    if (g > d) goto B_yb;
    label B_ec:
    e = e[2]:int;
    continue L_dc;
  }
  label B_zb:
  e[0]:int = a;
  e[1]:int = e[1]:int + h;
  c = a + select_if(-8 - a & 15, 0, a + 8 & 15);
  c[1] = f | 3;
  h = g + select_if(-8 - g & 15, 0, g + 8 & 15);
  e = h - (f = c + f);
  if (h != d) goto B_fc;
  0[16432]:int = f;
  0[16429]:int = (e = 0[16429]:int + e);
  f[1]:int = e | 1;
  goto B_wb;
  label B_fc:
  if (h != 0[16431]:int) goto B_gc;
  0[16431]:int = f;
  0[16428]:int = (e = 0[16428]:int + e);
  f[1]:int = e | 1;
  (f + e)[0]:int = e;
  goto B_wb;
  label B_gc:
  d = h.b;
  if ((d & 3) != 1) goto B_hc;
  i = d & -8;
  if (d > 255) goto B_jc;
  g = h.c;
  g == (a = ((j = d >> 3) << 3) + 65744);
  d = h.d;
  if (d != g) goto B_kc;
  0[16426]:int = 0[16426]:int & -2 << j;
  goto B_ic;
  label B_kc:
  d == a;
  d[2]:int = g;
  g.d = d;
  goto B_ic;
  label B_jc:
  k = h.g;
  a = h.d;
  if (a == h) goto B_mc;
  d = h.c;
  d < j;
  a[2]:int = d;
  d[3]:int = a;
  goto B_lc;
  label B_mc:
  d = h + 20;
  g = d[0]:int;
  if (g) goto B_nc;
  d = h + 16;
  g = d[0]:int;
  if (g) goto B_nc;
  a = 0;
  goto B_lc;
  label B_nc:
  loop L_oc {
    j = d;
    a = g;
    d = a + 20;
    g = d[0]:int;
    if (g) continue L_oc;
    d = a + 16;
    g = a[4]:int;
    if (g) continue L_oc;
  }
  j[0]:int = 0;
  label B_lc:
  if (eqz(k)) goto B_ic;
  if (h != (d = ((g = h.h) << 2) + 66008)[0]:int) goto B_qc;
  d[0]:int = a;
  if (a) goto B_pc;
  0[16427]:int = 0[16427]:int & -2 << g;
  goto B_ic;
  label B_qc:
  (k + select_if(16, 20, k[4] == h))[0]:int = a;
  if (eqz(a)) goto B_ic;
  label B_pc:
  a[6]:int = k;
  d = h.e;
  if (eqz(d)) goto B_rc;
  a[4]:int = d;
  d[6]:int = a;
  label B_rc:
  d = h.f;
  if (eqz(d)) goto B_ic;
  (a + 20)[0]:int = d;
  d[6]:int = a;
  label B_ic:
  e = i + e;
  h = h + i;
  d = h.b;
  label B_hc:
  h.b = d & -2;
  (f + e)[0]:int = e;
  f[1]:int = e | 1;
  if (e > 255) goto B_sc;
  d = (e & -8) + 65744;
  g = 0[16426]:int;
  if (g & (e = 1 << (e >> 3))) goto B_uc;
  0[16426]:int = g | e;
  e = d;
  goto B_tc;
  label B_uc:
  e = d[2]:int;
  label B_tc:
  e[3]:int = f;
  d[2]:int = f;
  f[3]:int = d;
  f[2]:int = e;
  goto B_wb;
  label B_sc:
  d = 31;
  if (e > 16777215) goto B_vc;
  d = (e >> 38 - (d = clz(e >> 8)) & 1) - (d << 1) + 62;
  label B_vc:
  f[7]:int = d;
  f[4]:long@4 = 0L;
  g = (d << 2) + 66008;
  a = 0[16427]:int;
  if (a & (j = 1 << d)) goto B_wc;
  g.a = f;
  0[16427]:int = a | j;
  f[6]:int = g;
  f[2]:int = f;
  f[3]:int = f;
  goto B_wb;
  label B_wc:
  d = e << select_if(0, 25 - (d >> 1), d == 31);
  a = g.a;
  loop L_xc {
    g = a;
    if ((g.b & -8) == e) goto B_xb;
    a = d >> 29;
    d = d << 1;
    j = g + (a & 4) + 16;
    a = j[0]:int;
    if (a) continue L_xc;
  }
  j[0]:int = f;
  f[6]:int = g;
  f[3]:int = f;
  f[2]:int = f;
  goto B_wb;
  label B_yb:
  c = a + (e = select_if(-8 - a & 15, 0, a + 8 & 15));
  c[1] = (e = (j = h + -56) - e) | 1;
  (a + j)[1]:int = 56;
  j = select_if(d,
                j = g + select_if(55 - g & 15, 0, g + -55 & 15) + -63,
                j < d + 16);
  j[1]:int = 35;
  0[16433]:int = 0[16548]:int;
  0[16429]:int = e;
  0[16432]:int = c;
  (j + 16)[0]:long@4 = 0[16540]:long@4;
  j[2]:long@4 = 0[16538]:long@4;
  0[16540]:int = j + 8;
  0[16539]:int = h;
  0[16538]:int = a;
  0[16541]:int = 0;
  e = j + 36;
  loop L_yc {
    e[0]:int = 7;
    e = e + 4;
    if (e < g) continue L_yc;
  }
  if (j == d) goto B_mb;
  j[1]:int = j[1]:int & -2;
  j[0]:int = (a = j - d);
  d[1]:int = a | 1;
  if (a > 255) goto B_zc;
  e = (a & -8) + 65744;
  g = 0[16426]:int;
  if (g & (a = 1 << (a >> 3))) goto B_bd;
  0[16426]:int = g | a;
  g = e;
  goto B_ad;
  label B_bd:
  g = e[2]:int;
  label B_ad:
  g.d = d;
  e[2]:int = d;
  d[3]:int = e;
  d[2]:int = g;
  goto B_mb;
  label B_zc:
  e = 31;
  if (a > 16777215) goto B_cd;
  e = (a >> 38 - (e = clz(a >> 8)) & 1) - (e << 1) + 62;
  label B_cd:
  d[7]:int = e;
  d[4]:long@4 = 0L;
  g = (e << 2) + 66008;
  j = 0[16427]:int;
  if (j & (h = 1 << e)) goto B_dd;
  g.a = d;
  0[16427]:int = j | h;
  d[6]:int = g;
  d[2]:int = d;
  d[3]:int = d;
  goto B_mb;
  label B_dd:
  e = a << select_if(0, 25 - (e >> 1), e == 31);
  j = g.a;
  loop L_ed {
    g = j;
    if ((g.b & -8) == a) goto B_vb;
    j = e >> 29;
    e = e << 1;
    h = g + (j & 4) + 16;
    j = h.a;
    if (j) continue L_ed;
  }
  h.a = d;
  d[6]:int = g;
  d[3]:int = d;
  d[2]:int = d;
  goto B_mb;
  label B_xb:
  e = g.c;
  e[3]:int = f;
  g.c = f;
  f[6]:int = 0;
  f[3]:int = g;
  f[2]:int = e;
  label B_wb:
  e = c + 8;
  goto B_e;
  label B_vb:
  e = g.c;
  e[3]:int = d;
  g.c = d;
  d[6]:int = 0;
  d[3]:int = g;
  d[2]:int = e;
  label B_mb:
  e = 0[16429]:int;
  if (e <= f) goto B_h;
  d = 0[16432]:int;
  g = d + f;
  g.b = (e = e - f) | 1;
  0[16429]:int = e;
  0[16432]:int = g;
  d[1]:int = f | 3;
  e = d + 8;
  goto B_e;
  label B_h:
  e = 0;
  0[16550]:int = 48;
  goto B_e;
  label B_g:
  if (eqz(c)) goto B_fd;
  if (j != (e = ((g = j[7]:int) << 2) + 66008)[0]:int) goto B_hd;
  e[0]:int = a;
  if (a) goto B_gd;
  0[16427]:int = (k = k & -2 << g);
  goto B_fd;
  label B_hd:
  (c + select_if(16, 20, c[4] == j))[0]:int = a;
  if (eqz(a)) goto B_fd;
  label B_gd:
  a[6]:int = c;
  e = j[4]:int;
  if (eqz(e)) goto B_id;
  a[4]:int = e;
  e[6]:int = a;
  label B_id:
  e = (j + 20)[0]:int;
  if (eqz(e)) goto B_fd;
  (a + 20)[0]:int = e;
  e[6]:int = a;
  label B_fd:
  if (d > 15) goto B_kd;
  j[1]:int = (e = d + f) | 3;
  e = j + e;
  e[1]:int = e[1]:int | 1;
  goto B_jd;
  label B_kd:
  a = j + f;
  a[1]:int = d | 1;
  j[1]:int = f | 3;
  (a + d)[0]:int = d;
  if (d > 255) goto B_ld;
  e = (d & -8) + 65744;
  g = 0[16426]:int;
  if (g & (d = 1 << (d >> 3))) goto B_nd;
  0[16426]:int = g | d;
  d = e;
  goto B_md;
  label B_nd:
  d = e[2]:int;
  label B_md:
  d[3]:int = a;
  e[2]:int = a;
  a[3]:int = e;
  a[2]:int = d;
  goto B_jd;
  label B_ld:
  e = 31;
  if (d > 16777215) goto B_od;
  e = (d >> 38 - (e = clz(d >> 8)) & 1) - (e << 1) + 62;
  label B_od:
  a[7]:int = e;
  a[4]:long@4 = 0L;
  g = (e << 2) + 66008;
  if (k & (f = 1 << e)) goto B_pd;
  g.a = a;
  0[16427]:int = k | f;
  a[6]:int = g;
  a[2]:int = a;
  a[3]:int = a;
  goto B_jd;
  label B_pd:
  e = d << select_if(0, 25 - (e >> 1), e == 31);
  f = g.a;
  loop L_rd {
    g = f;
    if ((g.b & -8) == d) goto B_qd;
    f = e >> 29;
    e = e << 1;
    h = g + (f & 4) + 16;
    f = h.a;
    if (f) continue L_rd;
  }
  h.a = a;
  a[6]:int = g;
  a[3]:int = a;
  a[2]:int = a;
  goto B_jd;
  label B_qd:
  e = g.c;
  e[3]:int = a;
  g.c = a;
  a[6]:int = 0;
  a[3]:int = g;
  a[2]:int = e;
  label B_jd:
  e = j + 8;
  goto B_e;
  label B_f:
  if (eqz(l)) goto B_sd;
  if (a != (e = ((g = a[7]:int) << 2) + 66008)[0]:int) goto B_ud;
  e[0]:int = j;
  if (j) goto B_td;
  0[16427]:int = k & -2 << g;
  goto B_sd;
  label B_ud:
  (l + select_if(16, 20, l[4] == a))[0]:int = j;
  if (eqz(j)) goto B_sd;
  label B_td:
  j[6]:int = l;
  e = a[4]:int;
  if (eqz(e)) goto B_vd;
  j[4]:int = e;
  e[6]:int = j;
  label B_vd:
  e = (a + 20)[0]:int;
  if (eqz(e)) goto B_sd;
  (j + 20)[0]:int = e;
  e[6]:int = j;
  label B_sd:
  if (d > 15) goto B_xd;
  a[1]:int = (e = d + f) | 3;
  e = a + e;
  e[1]:int = e[1]:int | 1;
  goto B_wd;
  label B_xd:
  g = a + f;
  g.b = d | 1;
  a[1]:int = f | 3;
  (g + d)[0]:int = d;
  if (eqz(i)) goto B_yd;
  f = (i & -8) + 65744;
  e = 0[16431]:int;
  j = 1 << (i >> 3);
  if (j & h) goto B_ae;
  0[16426]:int = j | h;
  j = f;
  goto B_zd;
  label B_ae:
  j = f[2]:int;
  label B_zd:
  j[3]:int = e;
  f[2]:int = e;
  e[3]:int = f;
  e[2]:int = j;
  label B_yd:
  0[16431]:int = g;
  0[16428]:int = d;
  label B_wd:
  e = a + 8;
  label B_e:
  stack_pointer = b + 16;
  return e;
}

export function free(a:int) {
  dlfree(a)
}

function dlfree(a:int_ptr) {
  var c:int_ptr;
  var e:{ a:int, b:int, c:int, d:int }
  var f:int_ptr;
  var g:int_ptr;
  var h:int_ptr;
  if (eqz(a)) goto B_a;
  var b:int = a + -8;
  var d:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int } = 
    b + (a = (c = (a + -4)[0]:int) & -8);
  if (c & 1) goto B_b;
  if (eqz(c & 3)) goto B_a;
  b = b - (c = b[0]:int);
  if (b < (e = 0[16430]:int)) goto B_a;
  a = c + a;
  if (b == 0[16431]:int) goto B_c;
  if (c > 255) goto B_d;
  e = b[2]:int;
  e == (g = ((f = c >> 3) << 3) + 65744);
  c = b[3]:int;
  if (c != e) goto B_e;
  0[16426]:int = 0[16426]:int & -2 << f;
  goto B_b;
  label B_e:
  c == g;
  c[2] = e;
  e.d = c;
  goto B_b;
  label B_d:
  h = b[6]:int;
  g = b[3]:int;
  if (g == b) goto B_g;
  c = b[2]:int;
  c < e;
  g[2] = c;
  c[3] = g;
  goto B_f;
  label B_g:
  c = b + 20;
  e = c[0];
  if (e) goto B_h;
  c = b + 16;
  e = c[0];
  if (e) goto B_h;
  g = 0;
  goto B_f;
  label B_h:
  loop L_i {
    f = c;
    g = e;
    c = g + 20;
    e = c[0];
    if (e) continue L_i;
    c = g + 16;
    e = g[4];
    if (e) continue L_i;
  }
  f[0] = 0;
  label B_f:
  if (eqz(h)) goto B_b;
  if (b != (c = ((e = b[7]:int) << 2) + 66008)[0]) goto B_k;
  c[0] = g;
  if (g) goto B_j;
  0[16427]:int = 0[16427]:int & -2 << e;
  goto B_b;
  label B_k:
  (h + select_if(16, 20, h[4] == b))[0]:int = g;
  if (eqz(g)) goto B_b;
  label B_j:
  g[6] = h;
  c = b[4]:int;
  if (eqz(c)) goto B_l;
  g[4] = c;
  c[6] = g;
  label B_l:
  c = b[5]:int;
  if (eqz(c)) goto B_b;
  (g + 20)[0]:int = c;
  c[6] = g;
  goto B_b;
  label B_c:
  c = d.b;
  if ((c & 3) != 3) goto B_b;
  d.b = c & -2;
  0[16428]:int = a;
  (b + a)[0]:int = a;
  b[1]:int = a | 1;
  return ;
  label B_b:
  if (b >= d) goto B_a;
  c = d.b;
  if (eqz(c & 1)) goto B_a;
  if (c & 2) goto B_n;
  if (d != 0[16432]:int) goto B_o;
  0[16432]:int = b;
  0[16429]:int = (a = 0[16429]:int + a);
  b[1]:int = a | 1;
  if (b != 0[16431]:int) goto B_a;
  0[16428]:int = 0;
  0[16431]:int = 0;
  return ;
  label B_o:
  if (d != 0[16431]:int) goto B_p;
  0[16431]:int = b;
  0[16428]:int = (a = 0[16428]:int + a);
  b[1]:int = a | 1;
  (b + a)[0]:int = a;
  return ;
  label B_p:
  a = (c & -8) + a;
  if (c > 255) goto B_r;
  e = d.c;
  e == (g = ((f = c >> 3) << 3) + 65744);
  c = d.d;
  if (c != e) goto B_s;
  0[16426]:int = 0[16426]:int & -2 << f;
  goto B_q;
  label B_s:
  c == g;
  c[2] = e;
  e.d = c;
  goto B_q;
  label B_r:
  h = d.g;
  g = d.d;
  if (g == d) goto B_u;
  c = d.c;
  c < 0[16430]:int;
  g[2] = c;
  c[3] = g;
  goto B_t;
  label B_u:
  c = d + 20;
  e = c[0];
  if (e) goto B_v;
  c = d + 16;
  e = c[0];
  if (e) goto B_v;
  g = 0;
  goto B_t;
  label B_v:
  loop L_w {
    f = c;
    g = e;
    c = g + 20;
    e = c[0];
    if (e) continue L_w;
    c = g + 16;
    e = g[4];
    if (e) continue L_w;
  }
  f[0] = 0;
  label B_t:
  if (eqz(h)) goto B_q;
  if (d != (c = ((e = d.h) << 2) + 66008)[0]) goto B_y;
  c[0] = g;
  if (g) goto B_x;
  0[16427]:int = 0[16427]:int & -2 << e;
  goto B_q;
  label B_y:
  (h + select_if(16, 20, h[4] == d))[0]:int = g;
  if (eqz(g)) goto B_q;
  label B_x:
  g[6] = h;
  c = d.e;
  if (eqz(c)) goto B_z;
  g[4] = c;
  c[6] = g;
  label B_z:
  c = d.f;
  if (eqz(c)) goto B_q;
  (g + 20)[0]:int = c;
  c[6] = g;
  label B_q:
  (b + a)[0]:int = a;
  b[1]:int = a | 1;
  if (b != 0[16431]:int) goto B_m;
  0[16428]:int = a;
  return ;
  label B_n:
  d.b = c & -2;
  (b + a)[0]:int = a;
  b[1]:int = a | 1;
  label B_m:
  if (a > 255) goto B_aa;
  c = (a & -8) + 65744;
  e = 0[16426]:int;
  if (e & (a = 1 << (a >> 3))) goto B_ca;
  0[16426]:int = e | a;
  a = c;
  goto B_ba;
  label B_ca:
  a = c[2];
  label B_ba:
  a[3] = b;
  c[2] = b;
  b[3]:int = c;
  b[2]:int = a;
  return ;
  label B_aa:
  c = 31;
  if (a > 16777215) goto B_da;
  c = (a >> 38 - (c = clz(a >> 8)) & 1) - (c << 1) + 62;
  label B_da:
  b[7]:int = c;
  b[4]:long@4 = 0L;
  e = (c << 2) + 66008;
  g = 0[16427]:int;
  if (g & (d = 1 << c)) goto B_fa;
  e.a = b;
  0[16427]:int = g | d;
  b[6]:int = e;
  b[2]:int = b;
  b[3]:int = b;
  goto B_ea;
  label B_fa:
  c = a << select_if(0, 25 - (c >> 1), c == 31);
  g = e.a;
  loop L_ha {
    e = g;
    if ((e.b & -8) == a) goto B_ga;
    g = c >> 29;
    c = c << 1;
    d = e + (g & 4) + 16;
    g = d.a;
    if (g) continue L_ha;
  }
  d.a = b;
  b[6]:int = e;
  b[3]:int = b;
  b[2]:int = b;
  goto B_ea;
  label B_ga:
  a = e.c;
  a[3] = b;
  e.c = b;
  b[6]:int = 0;
  b[3]:int = e;
  b[2]:int = a;
  label B_ea:
  0[16434]:int = select_if(b = 0[16434]:int + -1, -1, b);
  label B_a:
}

export function calloc(a:int, b:int):int {
  var c:int;
  if (a) goto B_b;
  c = 0;
  goto B_a;
  label B_b:
  var d:long = i64_extend_i32_u(a) * i64_extend_i32_u(b);
  c = i32_wrap_i64(d);
  if ((b | a) < 65536) goto B_a;
  c = select_if(-1, c, i32_wrap_i64(d >> 32L) != 0);
  label B_a:
  a = dlmalloc(c);
  if (eqz(a)) goto B_c;
  if (eqz((a + -4)[0]:ubyte & 3)) goto B_c;
  memset(a, 0, c);
  label B_c:
  return a;
}

export function realloc(a:int, b:int_ptr):int {
  var l:int_ptr;
  if (a) goto B_a;
  return dlmalloc(b);
  label B_a:
  if (b < -64) goto B_b;
  0[16550]:int = 48;
  return 0;
  label B_b:
  var c:int_ptr = select_if(16, b + 19 & -16, b < 11);
  var d:int_ptr = a + -4;
  var e:int = d[0];
  var f:{ a:int, b:int, c:int } = e & -8;
  if (e & 3) goto B_e;
  if (c < 256) goto B_d;
  if (f < (c | 4)) goto B_d;
  if (f - c <= 0[16546]:int << 1) goto B_c;
  goto B_d;
  label B_e:
  var g:int = a + -8;
  var h:int_ptr = g + f;
  if (f < c) goto B_f;
  b = f - c;
  if (b < 16) goto B_c;
  d[0] = (c | (e & 1)) | 2;
  c = g + c;
  c[1] = b | 3;
  h[1] = h[1] | 1;
  dispose_chunk(c, b);
  return a;
  label B_f:
  if (h != 0[16432]:int) goto B_g;
  f = 0[16429]:int + f;
  if (f <= c) goto B_d;
  d[0] = (c | (e & 1)) | 2;
  0[16432]:int = (b = g + c);
  0[16429]:int = (c = f - c);
  b[1] = c | 1;
  return a;
  label B_g:
  if (h != 0[16431]:int) goto B_h;
  f = 0[16428]:int + f;
  if (f < c) goto B_d;
  b = f - c;
  if (b < 16) goto B_j;
  d[0] = (c | (e & 1)) | 2;
  c = g + c;
  c[1] = b | 1;
  f = g + f;
  f.a = b;
  f.b = f.b & -2;
  goto B_i;
  label B_j:
  d[0] = ((e & 1) | f) | 2;
  b = g + f;
  b[1] = b[1] | 1;
  b = 0;
  c = 0;
  label B_i:
  0[16431]:int = c;
  0[16428]:int = b;
  return a;
  label B_h:
  var i:int_ptr = h[1];
  if (i & 2) goto B_d;
  var j:int = (i & -8) + f;
  if (j < c) goto B_d;
  var k:int = j - c;
  if (i > 255) goto B_l;
  b = h[2];
  b == (i = ((l = i >> 3) << 3) + 65744);
  f = h[3];
  if (f != b) goto B_m;
  0[16426]:int = 0[16426]:int & -2 << l;
  goto B_k;
  label B_m:
  f == i;
  f.c = b;
  b[3] = f;
  goto B_k;
  label B_l:
  var m:int_ptr = h[6];
  i = h[3];
  if (i == h) goto B_o;
  b = h[2];
  b < 0[16430]:int;
  i[2] = b;
  b[3] = i;
  goto B_n;
  label B_o:
  b = h + 20;
  f = b[0];
  if (f) goto B_p;
  b = h + 16;
  f = b[0];
  if (f) goto B_p;
  i = 0;
  goto B_n;
  label B_p:
  loop L_q {
    l = b;
    i = f;
    b = i + 20;
    f = b[0];
    if (f) continue L_q;
    b = i + 16;
    f = i[4];
    if (f) continue L_q;
  }
  l[0] = 0;
  label B_n:
  if (eqz(m)) goto B_k;
  if (h != (b = ((f = h[7]) << 2) + 66008)[0]) goto B_s;
  b[0] = i;
  if (i) goto B_r;
  0[16427]:int = 0[16427]:int & -2 << f;
  goto B_k;
  label B_s:
  (m + select_if(16, 20, m[4] == h))[0]:int = i;
  if (eqz(i)) goto B_k;
  label B_r:
  i[6] = m;
  b = h[4];
  if (eqz(b)) goto B_t;
  i[4] = b;
  b[6] = i;
  label B_t:
  b = h[5];
  if (eqz(b)) goto B_k;
  (i + 20)[0]:int = b;
  b[6] = i;
  label B_k:
  if (k > 15) goto B_u;
  d[0] = ((e & 1) | j) | 2;
  b = g + j;
  b[1] = b[1] | 1;
  return a;
  label B_u:
  d[0] = (c | (e & 1)) | 2;
  b = g + c;
  b[1] = k | 3;
  c = g + j;
  c[1] = c[1] | 1;
  dispose_chunk(b, k);
  return a;
  label B_d:
  c = dlmalloc(b);
  if (c) goto B_v;
  return 0;
  label B_v:
  b = 
    memcpy(
      c,
      a,
      select_if(f = select_if(-4, -8, (f = d[0]) & 3) + (f & -8), b, f < b));
  dlfree(a);
  a = b;
  label B_c:
  return a;
}

function dispose_chunk(a:int, b:int_ptr) {
  var f:int_ptr;
  var g:int_ptr;
  var e:{ a:int, b:int, c:int, d:int }
  var d:int_ptr;
  var h:int_ptr;
  var c:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int, h:int } = 
    a + b;
  d = a[1]:int;
  if (d & 1) goto B_b;
  if (eqz(d & 3)) goto B_a;
  d = a[0]:int;
  b = d + b;
  a = a - d;
  if (a == 0[16431]:int) goto B_d;
  if (d > 255) goto B_e;
  e = a[2]:int;
  e == (g = ((f = d >> 3) << 3) + 65744);
  d = a[3]:int;
  if (d != e) goto B_c;
  0[16426]:int = 0[16426]:int & -2 << f;
  goto B_b;
  label B_e:
  h = a[6]:int;
  g = a[3]:int;
  if (g == a) goto B_g;
  d = a[2]:int;
  d < 0[16430]:int;
  g[2] = d;
  d[3] = g;
  goto B_f;
  label B_g:
  d = a + 20;
  e = d[0];
  if (e) goto B_h;
  d = a + 16;
  e = d[0];
  if (e) goto B_h;
  g = 0;
  goto B_f;
  label B_h:
  loop L_i {
    f = d;
    g = e;
    d = g + 20;
    e = d[0];
    if (e) continue L_i;
    d = g + 16;
    e = g[4];
    if (e) continue L_i;
  }
  f[0] = 0;
  label B_f:
  if (eqz(h)) goto B_b;
  if (a != (d = ((e = a[7]:int) << 2) + 66008)[0]) goto B_k;
  d[0] = g;
  if (g) goto B_j;
  0[16427]:int = 0[16427]:int & -2 << e;
  goto B_b;
  label B_k:
  (h + select_if(16, 20, h[4] == a))[0]:int = g;
  if (eqz(g)) goto B_b;
  label B_j:
  g[6] = h;
  d = a[4]:int;
  if (eqz(d)) goto B_l;
  g[4] = d;
  d[6] = g;
  label B_l:
  d = a[5]:int;
  if (eqz(d)) goto B_b;
  (g + 20)[0]:int = d;
  d[6] = g;
  goto B_b;
  label B_d:
  d = c.b;
  if ((d & 3) != 3) goto B_b;
  c.b = d & -2;
  0[16428]:int = b;
  c.a = b;
  a[1]:int = b | 1;
  return ;
  label B_c:
  d == g;
  d[2] = e;
  e.d = d;
  label B_b:
  d = c.b;
  if (d & 2) goto B_n;
  if (c != 0[16432]:int) goto B_o;
  0[16432]:int = a;
  0[16429]:int = (b = 0[16429]:int + b);
  a[1]:int = b | 1;
  if (a != 0[16431]:int) goto B_a;
  0[16428]:int = 0;
  0[16431]:int = 0;
  return ;
  label B_o:
  if (c != 0[16431]:int) goto B_p;
  0[16431]:int = a;
  0[16428]:int = (b = 0[16428]:int + b);
  a[1]:int = b | 1;
  (a + b)[0]:int = b;
  return ;
  label B_p:
  b = (d & -8) + b;
  if (d > 255) goto B_r;
  e = c.c;
  e == (g = ((f = d >> 3) << 3) + 65744);
  d = c.d;
  if (d != e) goto B_s;
  0[16426]:int = 0[16426]:int & -2 << f;
  goto B_q;
  label B_s:
  d == g;
  d[2] = e;
  e.d = d;
  goto B_q;
  label B_r:
  h = c.g;
  g = c.d;
  if (g == c) goto B_u;
  d = c.c;
  d < 0[16430]:int;
  g[2] = d;
  d[3] = g;
  goto B_t;
  label B_u:
  e = c + 20;
  d = e.a;
  if (d) goto B_v;
  e = c + 16;
  d = e.a;
  if (d) goto B_v;
  g = 0;
  goto B_t;
  label B_v:
  loop L_w {
    f = e;
    g = d;
    e = g + 20;
    d = e.a;
    if (d) continue L_w;
    e = g + 16;
    d = g[4];
    if (d) continue L_w;
  }
  f[0] = 0;
  label B_t:
  if (eqz(h)) goto B_q;
  if (c != (d = ((e = c.h) << 2) + 66008)[0]) goto B_y;
  d[0] = g;
  if (g) goto B_x;
  0[16427]:int = 0[16427]:int & -2 << e;
  goto B_q;
  label B_y:
  (h + select_if(16, 20, h[4] == c))[0]:int = g;
  if (eqz(g)) goto B_q;
  label B_x:
  g[6] = h;
  d = c.e;
  if (eqz(d)) goto B_z;
  g[4] = d;
  d[6] = g;
  label B_z:
  d = c.f;
  if (eqz(d)) goto B_q;
  (g + 20)[0]:int = d;
  d[6] = g;
  label B_q:
  (a + b)[0]:int = b;
  a[1]:int = b | 1;
  if (a != 0[16431]:int) goto B_m;
  0[16428]:int = b;
  return ;
  label B_n:
  c.b = d & -2;
  (a + b)[0]:int = b;
  a[1]:int = b | 1;
  label B_m:
  if (b > 255) goto B_aa;
  d = (b & -8) + 65744;
  e = 0[16426]:int;
  if (e & (b = 1 << (b >> 3))) goto B_ca;
  0[16426]:int = e | b;
  b = d;
  goto B_ba;
  label B_ca:
  b = d[2];
  label B_ba:
  b[3] = a;
  d[2] = a;
  a[3]:int = d;
  a[2]:int = b;
  return ;
  label B_aa:
  d = 31;
  if (b > 16777215) goto B_da;
  d = (b >> 38 - (d = clz(b >> 8)) & 1) - (d << 1) + 62;
  label B_da:
  a[7]:int = d;
  a[4]:long@4 = 0L;
  e = (d << 2) + 66008;
  g = 0[16427]:int;
  if (g & (c = 1 << d)) goto B_ea;
  e.a = a;
  0[16427]:int = g | c;
  a[6]:int = e;
  a[2]:int = a;
  a[3]:int = a;
  return ;
  label B_ea:
  d = b << select_if(0, 25 - (d >> 1), d == 31);
  g = e.a;
  loop L_ga {
    e = g;
    if ((e.b & -8) == b) goto B_fa;
    g = d >> 29;
    d = d << 1;
    c = e + (g & 4) + 16;
    g = c.a;
    if (g) continue L_ga;
  }
  c.a = a;
  a[6]:int = e;
  a[3]:int = a;
  a[2]:int = a;
  return ;
  label B_fa:
  b = e.c;
  b[3] = a;
  e.c = a;
  a[6]:int = 0;
  a[3]:int = e;
  a[2]:int = b;
  label B_a:
}

export function posix_memalign(a:int_ptr, b:int, c:int):int {
  var d:int;
  if (b != 16) goto B_c;
  b = dlmalloc(c);
  goto B_b;
  label B_c:
  d = 28;
  if (b < 4) goto B_a;
  if (b & 3) goto B_a;
  var e:int = b >> 2;
  if (e & e + -1) goto B_a;
  d = 48;
  if (-64 - b < c) goto B_a;
  b = internal_memalign(select_if(b, 16, b > 16), c);
  label B_b:
  if (b) goto B_d;
  return 48;
  label B_d:
  a[0] = b;
  d = 0;
  label B_a:
  return d;
}

function internal_memalign(a:{ a:int, b:int }, b:int):int {
  var c:{ a:int, b:int }
  var d:int_ptr;
  c = select_if(a, 16, a > 16);
  if (c & c + -1) goto B_b;
  a = c;
  goto B_a;
  label B_b:
  d = 32;
  loop L_c {
    a = d;
    d = a << 1;
    if (a < c) continue L_c;
  }
  label B_a:
  if (-64 - a > b) goto B_d;
  0[16550]:int = 48;
  return 0;
  label B_d:
  d = dlmalloc(a + (b = select_if(16, b + 19 & -16, b < 11)) + 12);
  if (d) goto B_e;
  return 0;
  label B_e:
  c = d + -8;
  if (a + -1 & d) goto B_g;
  a = c;
  goto B_f;
  label B_g:
  var e:int_ptr = d + -4;
  var f:int = e[0];
  var g:int_ptr = 
    (f & -8) -
    (d = 
       (a = (d = (d + a + -1 & 0 - a) + -8) + select_if(0, a, d - c > 15)) -
       c);
  if (f & 3) goto B_h;
  a.b = g;
  a.a = c.a + d;
  goto B_f;
  label B_h:
  a.b = (g | (a.b & 1)) | 2;
  g = a + g;
  g[1] = g[1] | 1;
  e[0] = (d | (e[0] & 1)) | 2;
  g = c + d;
  g[1] = g[1] | 1;
  dispose_chunk(c, d);
  label B_f:
  d = a.b;
  if (eqz(d & 3)) goto B_i;
  c = d & -8;
  if (c <= b + 16) goto B_i;
  a.b = (b | (d & 1)) | 2;
  d = a + b;
  d[1] = (b = c - b) | 3;
  c = a + c;
  c.b = c.b | 1;
  dispose_chunk(d, b);
  label B_i:
  return a + 8;
}

export function aligned_alloc(a:int, b:int):int {
  if (a > 16) goto B_a;
  return dlmalloc(b);
  label B_a:
  return internal_memalign(a, b);
}

export function malloc_usable_size(a:int):int {
  if (eqz(a)) goto B_a;
  a = (a + -4)[0]:int;
  var b:int = a & 3;
  if (b == 1) goto B_a;
  return select_if(-4, -8, b) + (a & -8);
  label B_a:
  return 0;
}

export function fstat(a:int, b:int):int {
  var d:long;
  var e:long;
  var f:long;
  var g:long;
  var h:long;
  var i:long;
  var c:int = stack_pointer - 96;
  stack_pointer = c;
  a = wasi_fd_filestat_get(a, c);
  if (eqz(a)) goto B_b;
  0[16550]:int = a;
  a = -1;
  goto B_a;
  label B_b:
  b[3]:long = 0L;
  b[2]:long = c[3]:long;
  b[1]:long = c[1]:long;
  b[0]:long = c[0]:long;
  b[8]:long = 0L;
  a = 0;
  b[14]:int = 0;
  b[6]:long = c[4]:long;
  (c + 80)[0]:long@4 = 0L;
  (c + 88)[0]:long@4 = 0L;
  (b + 32)[0]:long = 0L;
  (b + 40)[0]:long = 0L;
  b[13]:long = (e = (d = c[7]:long) / 1000000000L);
  b[11]:long = (g = (f = c[6]:long) / 1000000000L);
  b[9]:long = (i = (h = c[5]:long) / 1000000000L);
  b[28]:int = d - e * 1000000000L;
  b[24]:int = f - g * 1000000000L;
  b[20]:int = h - i * 1000000000L;
  c[18]:long@4 = 0L;
  (b + 140)[0]:int = (c + 68 + 24)[0]:int;
  (b + 132)[0]:long@4 = (c + 84)[0]:long@4;
  (b + 124)[0]:long@4 = (c + 76)[0]:long@4;
  b[29]:long@4 = c[17]:long@4;
  var j:int = c[16]:ubyte + -1;
  if ((j & 255) > 6) goto B_a;
  (b + 24)[0]:int = ((i32_extend8_s(j) << 2) + 61024)[0]:int;
  label B_a:
  stack_pointer = c + 96;
  return a;
}

export function close(a:int):int {
  a = wasi_fd_close(a);
  if (a) goto B_a;
  return 0;
  label B_a:
  0[16550]:int = a;
  return -1;
}

export function pread(a:int, b:int, c:int, d:long):int {
  var e:int = stack_pointer - 48;
  stack_pointer = e;
  if (d > -1L) goto B_b;
  0[16550]:int = 28;
  a = -1;
  goto B_a;
  label B_b:
  e[11]:int = c;
  e[10]:int = b;
  c = wasi_fd_pread(a, e + 40, 1, d, e + 36);
  if (eqz(c)) goto B_c;
  if (c != 76) goto B_d;
  c = 76;
  if (wasi_fd_fdstat_get(a, e + 8)) goto B_d;
  c = select_if(70, 8, e[16]:ubyte & 2);
  label B_d:
  0[16550]:int = c;
  a = -1;
  goto B_a;
  label B_c:
  a = e[9]:int;
  label B_a:
  stack_pointer = e + 48;
  return a;
}

export function wasi_args_get(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_args_get(a, b) & 65535
}

export function wasi_args_sizes_get(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_args_sizes_get(a, b) & 65535
}

export function wasi_environ_get(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_environ_get(a, b) & 65535
}

export function wasi_environ_sizes_get(a:int, b:int):int {
  return 
    imported_wasi_snapshot_preview1_environ_sizes_get(a, b) & 65535
}

export function wasi_clock_res_get(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_clock_res_get(a, b) & 65535
}

export function wasi_clock_time_get(a:int, b:long, c:int):int {
  return 
    imported_wasi_snapshot_preview1_clock_time_get(a, b, c) & 65535
}

export function wasi_fd_advise(a:int, b:long, c:long, d:int):int {
  return imported_wasi_snapshot_preview1_fd_advise(a, b, c, d) & 65535
}

export function wasi_fd_allocate(a:int, b:long, c:long):int {
  return imported_wasi_snapshot_preview1_fd_allocate(a, b, c) & 65535
}

export function wasi_fd_close(a:int):int {
  return imported_wasi_snapshot_preview1_fd_close(a) & 65535
}

export function wasi_fd_datasync(a:int):int {
  return imported_wasi_snapshot_preview1_fd_datasync(a) & 65535
}

export function wasi_fd_fdstat_get(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_fd_fdstat_get(a, b) & 65535
}

export function wasi_fd_fdstat_set_flags(a:int, b:int):int {
  return 
    imported_wasi_snapshot_preview1_fd_fdstat_set_flags(a, b) & 65535
}

export function wasi_fd_fdstat_set_rights(a:int, b:long, c:long):int {
  return 
    imported_wasi_snapshot_preview1_fd_fdstat_set_rights(a, b, c) & 65535
}

export function wasi_fd_filestat_get(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_fd_filestat_get(a, b) & 65535
}

export function wasi_fd_filestat_set_size(a:int, b:long):int {
  return 
    imported_wasi_snapshot_preview1_fd_filestat_set_size(a, b) & 65535
}

export function wasi_fd_filestat_set_times(a:int, b:long, c:long, d:int):int {
  return 
    imported_wasi_snapshot_preview1_fd_filestat_set_times(a, b, c, d) &
    65535
}

export function wasi_fd_pread(a:int, b:int, c:int, d:long, e:int):int {
  return 
    imported_wasi_snapshot_preview1_fd_pread(a, b, c, d, e) & 65535
}

export function wasi_fd_prestat_get(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_fd_prestat_get(a, b) & 65535
}

export function wasi_fd_prestat_dir_name(a:int, b:int, c:int):int {
  return 
    imported_wasi_snapshot_preview1_fd_prestat_dir_name(a, b, c) & 65535
}

export function wasi_fd_pwrite(a:int, b:int, c:int, d:long, e:int):int {
  return 
    imported_wasi_snapshot_preview1_fd_pwrite(a, b, c, d, e) & 65535
}

export function wasi_fd_read(a:int, b:int, c:int, d:int):int {
  return imported_wasi_snapshot_preview1_fd_read(a, b, c, d) & 65535
}

export function wasi_fd_readdir(a:int, b:int, c:int, d:long, e:int):int {
  return 
    imported_wasi_snapshot_preview1_fd_readdir(a, b, c, d, e) & 65535
}

export function wasi_fd_renumber(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_fd_renumber(a, b) & 65535
}

export function wasi_fd_seek(a:int, b:long, c:int, d:int):int {
  return imported_wasi_snapshot_preview1_fd_seek(a, b, c, d) & 65535
}

export function wasi_fd_sync(a:int):int {
  return imported_wasi_snapshot_preview1_fd_sync(a) & 65535
}

export function wasi_fd_tell(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_fd_tell(a, b) & 65535
}

export function wasi_fd_write(a:int, b:int, c:int, d:int):int {
  return imported_wasi_snapshot_preview1_fd_write(a, b, c, d) & 65535
}

export function wasi_path_create_directory(a:int, b:int):int {
  return 
    imported_wasi_snapshot_preview1_path_create_directory(a, b, strlen(b)) &
    65535
}

export function wasi_path_filestat_get(a:int, b:int, c:int, d:int):int {
  return 
    imported_wasi_snapshot_preview1_path_filestat_get(a, b, c, strlen(c), d) &
    65535
}

export function wasi_path_filestat_set_times(a:int, b:int, c:int, d:long, e:long, f:int):int {
  return 
    imported_wasi_snapshot_preview1_path_filestat_set_times(a,
                                                            b,
                                                            c,
                                                            strlen(c),
                                                            d,
                                                            e,
                                                            f) &
    65535
}

export function wasi_path_link(a:int, b:int, c:int, d:int, e:int):int {
  return 
    imported_wasi_snapshot_preview1_path_link(a, b, c, strlen(c), d, e, strlen(e)) &
    65535
}

export function wasi_path_open(a:int, b:int, c:int, d:int, e:long, f:long, g:int, h:int):int {
  return 
    imported_wasi_snapshot_preview1_path_open(a, b, c, strlen(c), d, e, f, g, h) &
    65535
}

export function wasi_path_readlink(a:int, b:int, c:int, d:int, e:int):int {
  return 
    imported_wasi_snapshot_preview1_path_readlink(a, b, strlen(b), c, d, e) &
    65535
}

export function wasi_path_remove_directory(a:int, b:int):int {
  return 
    imported_wasi_snapshot_preview1_path_remove_directory(a, b, strlen(b)) &
    65535
}

export function wasi_path_rename(a:int, b:int, c:int, d:int):int {
  return 
    imported_wasi_snapshot_preview1_path_rename(a, b, strlen(b), c, d, strlen(d)) &
    65535
}

export function wasi_path_symlink(a:int, b:int, c:int):int {
  return 
    imported_wasi_snapshot_preview1_path_symlink(a, strlen(a), b, c, strlen(c)) &
    65535
}

export function wasi_path_unlink_file(a:int, b:int):int {
  return 
    imported_wasi_snapshot_preview1_path_unlink_file(a, b, strlen(b)) &
    65535
}

export function wasi_poll_oneoff(a:int, b:int, c:int, d:int):int {
  return 
    imported_wasi_snapshot_preview1_poll_oneoff(a, b, c, d) & 65535
}

export function wasi_proc_exit(a:int) {
  imported_wasi_snapshot_preview1_proc_exit(a);
  unreachable;
}

export function wasi_sched_yield():int {
  return imported_wasi_snapshot_preview1_sched_yield() & 65535
}

export function wasi_random_get(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_random_get(a, b) & 65535
}

export function wasi_sock_accept(a:int, b:int, c:int):int {
  return imported_wasi_snapshot_preview1_sock_accept(a, b, c) & 65535
}

export function wasi_sock_recv(a:int, b:int, c:int, d:int, e:int, f:int):int {
  return 
    imported_wasi_snapshot_preview1_sock_recv(a, b, c, d, e, f) & 65535
}

export function wasi_sock_send(a:int, b:int, c:int, d:int, e:int):int {
  return 
    imported_wasi_snapshot_preview1_sock_send(a, b, c, d, e) & 65535
}

export function wasi_sock_shutdown(a:int, b:int):int {
  return imported_wasi_snapshot_preview1_sock_shutdown(a, b) & 65535
}

export function abort() {
  unreachable;
  unreachable;
}

export function wasilibc_nocwd_openat_nomode(a:int, b:int, c:int):int {
  var f:long;
  var e:int;
  var g:long;
  var d:int = stack_pointer - 32;
  stack_pointer = d;
  e = (c & 503316480) + -33554432 >> 25;
  if (e > 9) goto B_d;
  e = 1 << e;
  if (e & 642) goto B_c;
  f = -4211012L;
  if (e & 9) goto B_b;
  label B_d:
  0[16550]:int = 28;
  e = -1;
  goto B_a;
  label B_c:
  f = select_if(-4194626L, -4211012L, c & 67108864);
  f = select_if(f | 4194625L, f, c & 268435456);
  label B_b:
  e = wasi_fd_fdstat_get(a, d + 8);
  if (eqz(e)) goto B_e;
  0[16550]:int = e;
  e = -1;
  goto B_a;
  label B_e:
  e = -1;
  c = wasi_path_open(a,
                     (c ^ -1) >> 24 & 1,
                     b,
                     c >> 12 & 4095,
                     (g = d[3]:long) & f,
                     g,
                     c & 4095,
                     d + 4);
  if (eqz(c)) goto B_f;
  0[16550]:int = c;
  goto B_a;
  label B_f:
  e = d[1]:int;
  label B_a:
  stack_pointer = d + 32;
  return e;
}

export function wasilibc_nocwd_faccessat(a:int, b:int, c:int, d:int):int {
  var e:int = stack_pointer - 96;
  stack_pointer = e;
  if (c > 7) goto B_d;
  if (eqz(d)) goto B_c;
  label B_d:
  0[16550]:int = 28;
  goto B_b;
  label B_c:
  d = wasi_path_filestat_get(a, 1, b, e + 32);
  if (eqz(d)) goto B_e;
  0[16550]:int = d;
  goto B_b;
  label B_e:
  d = 0;
  if (eqz(c)) goto B_a;
  a = wasi_fd_fdstat_get(a, e + 8);
  if (a) goto B_f;
  a = 2;
  var f:long = 
    select_if(select_if(16384L, 2L, e[48]:ubyte == 3), 0L, c & 4) |
    i64_extend_i32_u(c << 5 & 64);
  if ((f & e[3]:long) == f) goto B_a;
  label B_f:
  0[16550]:int = a;
  label B_b:
  d = -1;
  label B_a:
  stack_pointer = e + 96;
  return d;
}

export function wasilibc_nocwd_readlinkat(a:int, b:int, c:int, d:int):int {
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  d = wasi_path_readlink(a, b, c, d, e + 12);
  if (eqz(d)) goto B_b;
  0[16550]:int = d;
  d = -1;
  goto B_a;
  label B_b:
  d = e[3];
  label B_a:
  stack_pointer = e + 16;
  return d;
}

export function wasilibc_nocwd_fstatat(a:int, b:int, c:int, d:int):int {
  var g:long;
  var h:long;
  var i:long;
  var j:long;
  var k:long;
  var l:long;
  var e:int = stack_pointer - 96;
  stack_pointer = e;
  var f:int = -1;
  d = wasi_path_filestat_get(a, (d ^ -1) & 1, b, e);
  if (eqz(d)) goto B_b;
  0[16550]:int = d;
  goto B_a;
  label B_b:
  c[3]:long = 0L;
  c[2]:long = e[3]:long;
  c[1]:long = e[1]:long;
  c[0]:long = e[0]:long;
  c[8]:long = 0L;
  f = 0;
  c[14]:int = 0;
  c[6]:long = e[4]:long;
  (e + 80)[0]:long@4 = 0L;
  (e + 88)[0]:long@4 = 0L;
  (c + 32)[0]:long = 0L;
  (c + 40)[0]:long = 0L;
  c[13]:long = (h = (g = e[7]:long) / 1000000000L);
  c[11]:long = (j = (i = e[6]:long) / 1000000000L);
  c[9]:long = (l = (k = e[5]:long) / 1000000000L);
  c[28]:int = g - h * 1000000000L;
  c[24]:int = i - j * 1000000000L;
  c[20]:int = k - l * 1000000000L;
  e[18]:long@4 = 0L;
  (c + 140)[0]:int = (e + 68 + 24)[0]:int;
  (c + 132)[0]:long@4 = (e + 84)[0]:long@4;
  (c + 124)[0]:long@4 = (e + 76)[0]:long@4;
  c[29]:long@4 = e[17]:long@4;
  d = e[16]:ubyte + -1;
  if ((d & 255) > 6) goto B_a;
  (c + 24)[0]:int = ((i32_extend8_s(d) << 2) + 61052)[0]:int;
  label B_a:
  stack_pointer = e + 96;
  return f;
}

export function wasilibc_nocwd_utimensat(a:int, b:int, c:{ a:long, b:int, c:long }, d:int):int {
  var i:int;
  var g:long;
  var k:long;
  var f:int;
  var h:long;
  var l:long;
  var j:int;
  var e:int = stack_pointer - 48;
  stack_pointer = e;
  if (c) goto B_d;
  f = 10;
  g = 0L;
  h = 0L;
  goto B_c;
  label B_d:
  f = 0;
  h = 0L;
  g = 0L;
  i = c.b;
  br_table[B_e, B_g, ..B_f](i + 2);
  label B_g:
  g = 0L;
  f = 2;
  goto B_e;
  label B_f:
  j = 28;
  if (i > 999999999) goto B_b;
  g = c.a;
  if (g < 0L) goto B_b;
  e[11]:int = 0;
  muloti4(e + 24, g, 0L, 1000000000L, 0L, e + 44);
  if (
    (0L - (g = (k = (e + 32)[0]:long) & 1L) ^ k) != 0L | e[11]:int != 0) goto B_b;
  l = e[3]:long;
  if (((l ^ (l & -512L)) | g) != 0L) goto B_b;
  l = 
    0L -
    ((k = i64_extend_i32_u((g = l + i64_extend_i32_u(i)) < l) - (k & 1L)) &
     1L);
  if ((l ^ k) != 0L) goto B_b;
  f = 1;
  if (l < 0L) goto B_b;
  label B_e:
  i = (c + 24)[0]:int;
  br_table[B_c, B_i, ..B_h](i + 2);
  label B_i:
  f = f | 8;
  goto B_c;
  label B_h:
  j = 28;
  if (i > 999999999) goto B_b;
  h = c.c;
  if (h < 0L) goto B_b;
  e[5]:int = 0;
  muloti4(e, h, 0L, 1000000000L, 0L, e + 20);
  if (
    (0L - (h = (k = (e + 8)[0]:long) & 1L) ^ k) != 0L | e[5]:int != 0) goto B_b;
  l = e[0]:long;
  if (((l ^ (l & -512L)) | h) != 0L) goto B_b;
  l = 
    0L -
    ((k = i64_extend_i32_u((h = l + i64_extend_i32_u(i)) < l) - (k & 1L)) &
     1L);
  if ((l ^ k) != 0L) goto B_b;
  if (l < 0L) goto B_b;
  f = f | 4;
  label B_c:
  j = wasi_path_filestat_set_times(a, (d ^ -1) & 1, b, g, h, f);
  if (j) goto B_b;
  c = 0;
  goto B_a;
  label B_b:
  0[16550]:int = j;
  c = -1;
  label B_a:
  stack_pointer = e + 48;
  return c;
}

export function wasilibc_nocwd_wasilibc_unlinkat(a:int, b:int):int {
  b = wasi_path_unlink_file(a, b);
  if (b) goto B_a;
  return 0;
  label B_a:
  0[16550]:int = b;
  return -1;
}

export function wasilibc_nocwd_wasilibc_rmdirat(a:int, b:int):int {
  b = wasi_path_remove_directory(a, b);
  if (b) goto B_a;
  return 0;
  label B_a:
  0[16550]:int = b;
  return -1;
}

export function wasilibc_nocwd_mkdirat_nomode(a:int, b:int):int {
  b = wasi_path_create_directory(a, b);
  if (b) goto B_a;
  return 0;
  label B_a:
  0[16550]:int = b;
  return -1;
}

export function fdopendir(a:int):int {
  var b:int = 0;
  var c:int = malloc(40);
  if (eqz(c)) goto B_a;
  c[4]:int = (b = malloc(4096));
  if (b) goto B_b;
  free(c);
  return 0;
  label B_b:
  b = wasi_fd_readdir(a, b, 4096, 0L, c + 28);
  if (eqz(b)) goto B_c;
  free(c[4]:int);
  free(c);
  0[16550]:int = b;
  return 0;
  label B_c:
  c[4]:long = 4294967296L;
  c[5]:long@4 = 17592186044416L;
  c[1]:long = 0L;
  c[0]:int = a;
  b = c;
  label B_a:
  return b;
}

export function wasilibc_nocwd_opendirat(a:int, b:int):int {
  var c:int = 0;
  b = wasilibc_nocwd_openat_nomode(a, b, 67117060);
  if (b == -1) goto B_a;
  c = fdopendir(b);
  if (c) goto B_a;
  close(b);
  c = 0;
  label B_a:
  return c;
}

export function wasilibc_nocwd_symlinkat(a:int, b:int, c:int):int {
  c = wasi_path_symlink(a, b, c);
  if (c) goto B_a;
  return 0;
  label B_a:
  0[16550]:int = c;
  return -1;
}

export function wasilibc_nocwd_linkat(a:int, b:int, c:int, d:int, e:int):int {
  e = wasi_path_link(a, e >> 1 & 1, b, c, d);
  if (e) goto B_a;
  return 0;
  label B_a:
  0[16550]:int = e;
  return -1;
}

export function wasilibc_nocwd_renameat(a:int, b:int, c:int, d:int):int {
  d = wasi_path_rename(a, b, c, d);
  if (d) goto B_a;
  return 0;
  label B_a:
  0[16550]:int = d;
  return -1;
}

export function openat(a:int, b:ubyte_ptr, c:int, d:int):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return open(b, c, 0);
  label B_a:
  return wasilibc_nocwd_openat_nomode(a, b, c);
}

export function symlinkat(a:int, b:int, c:ubyte_ptr):int {
  if (b == -2) goto B_b;
  if (c[0] != 47) goto B_a;
  label B_b:
  return symlink(a, c);
  label B_a:
  return wasilibc_nocwd_symlinkat(a, b, c);
}

export function readlinkat(a:int, b:ubyte_ptr, c:int, d:int):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return readlink(b, c, d);
  label B_a:
  return wasilibc_nocwd_readlinkat(a, b, c, d);
}

export function mkdirat(a:int, b:ubyte_ptr, c:int):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return mkdir(b, c);
  label B_a:
  return wasilibc_nocwd_mkdirat_nomode(a, b);
}

export function opendirat(a:int, b:ubyte_ptr):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return opendir(b);
  label B_a:
  return wasilibc_nocwd_opendirat(a, b);
}

export function scandirat(a:int, b:ubyte_ptr, c:int, d:int, e:int):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return scandir(b, c, d, e);
  label B_a:
  return wasilibc_nocwd_scandirat(a, b, c, d, e);
}

export function faccessat(a:int, b:ubyte_ptr, c:int, d:int):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return wasilibc_access(b, c, d);
  label B_a:
  return wasilibc_nocwd_faccessat(a, b, c, d);
}

export function fstatat(a:int, b:ubyte_ptr, c:int, d:int):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return wasilibc_stat(b, c, d);
  label B_a:
  return wasilibc_nocwd_fstatat(a, b, c, d);
}

export function utimensat(a:int, b:ubyte_ptr, c:int, d:int):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return wasilibc_utimens(b, c, d);
  label B_a:
  return wasilibc_nocwd_utimensat(a, b, c, d);
}

export function linkat(a:int, b:ubyte_ptr, c:int, d:ubyte_ptr, e:int):int {
  if (a == -2) goto B_c;
  if (b[0] != 47) goto B_b;
  label B_c:
  if (c == -2) goto B_e;
  if (d[0] != 47) goto B_d;
  label B_e:
  return wasilibc_link(b, d, e);
  label B_d:
  if (a == -2) goto B_f;
  if (b[0] != 47) goto B_a;
  label B_f:
  return wasilibc_link_newat(b, c, d, e);
  label B_b:
  if (c == -2) goto B_g;
  if (d[0] != 47) goto B_a;
  label B_g:
  return wasilibc_link_oldat(a, b, d, e);
  label B_a:
  return wasilibc_nocwd_linkat(a, b, c, d, e);
}

export function renameat(a:int, b:ubyte_ptr, c:int, d:ubyte_ptr):int {
  if (a == -2) goto B_c;
  if (b[0] != 47) goto B_b;
  label B_c:
  if (c == -2) goto B_e;
  if (d[0] != 47) goto B_d;
  label B_e:
  return rename(b, d);
  label B_d:
  if (a == -2) goto B_f;
  if (b[0] != 47) goto B_a;
  label B_f:
  return wasilibc_rename_newat(b, c, d);
  label B_b:
  if (c == -2) goto B_g;
  if (d[0] != 47) goto B_a;
  label B_g:
  return wasilibc_rename_oldat(a, b, d);
  label B_a:
  return wasilibc_nocwd_renameat(a, b, c, d);
}

export function wasilibc_unlinkat(a:int, b:ubyte_ptr):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return unlink(b);
  label B_a:
  return wasilibc_nocwd_wasilibc_unlinkat(a, b);
}

export function wasilibc_rmdirat(a:int, b:ubyte_ptr):int {
  if (a == -2) goto B_b;
  if (b[0] != 47) goto B_a;
  label B_b:
  return rmdir(b);
  label B_a:
  return wasilibc_nocwd_wasilibc_rmdirat(a, b);
}

export function wasilibc_iftodt(a:int):int {
  var b:int = 0;
  a = a << 19 | a + -8192 >> 13;
  if (a > 5) goto B_a;
  b = ((a << 2) + 61080)[0]:int;
  label B_a:
  return b;
}

export function wasilibc_dttoif(a:int):int {
  var b:int = 49152;
  a = a + -1;
  if (a > 6) goto B_a;
  b = ((a << 2) + 61104)[0]:int;
  label B_a:
  return b;
}

export function wasilibc_nocwd_scandirat(a:int, b:int_ptr, c:int_ptr, d:{ a:long, b:byte }, e:int):int {
  var i:int;
  var o:int;
  var p:int;
  var r:long;
  var f:int = stack_pointer - 160;
  stack_pointer = f;
  var g:int = -1;
  var h:int = wasilibc_nocwd_openat_nomode(a, b, 67117060);
  if (h == -1) goto B_a;
  b = 4096;
  i = malloc(4096);
  if (i) goto B_b;
  close(h);
  goto B_a;
  label B_b:
  var j:int = select_if(d, 199, d);
  f[3]:int = 4096;
  var k:long = 0L;
  g = 0;
  var l:int = 0;
  var m:int = 0;
  var n:int = 4096;
  a = 4096;
  loop L_c {
    o = b - n;
    if (o > 23) goto B_j;
    if (b < a) goto B_e;
    d = i;
    b = a;
    goto B_i;
    label B_j:
    p = i + n;
    b = p[16]:int@1;
    d = b + 24;
    if (b) goto B_k;
    n = d + n;
    b = f[3]:int;
    continue L_c;
    label B_k:
    if (o >= d) goto B_h;
    loop L_l {
      b = a;
      a = b << 1;
      if (b < d) continue L_l;
    }
    d = realloc(i, b);
    if (eqz(d)) goto B_f;
    label B_i:
    n = 0;
    a = wasi_fd_readdir(h, d, b, k, f + 12);
    if (a) goto B_g;
    i = d;
    a = b;
    b = f[3]:int;
    continue L_c;
    label B_h:
    o = p[20]:ubyte;
    var q:long = p[8]:long@1;
    r = p[0]:long@1;
    n = d + n;
    p = p + 24;
    if (memchr(p, 0, b)) goto B_m;
    d = malloc(b + 10);
    if (eqz(d)) goto B_f;
    d.b = o;
    p = memcpy(d + 9, p, b);
    (p + b)[0]:byte = 0;
    if (q != 0L) goto B_n;
    if (eqz(fstatat(h, p, f + 16, 1))) goto B_o;
    g = -1;
    goto B_a;
    label B_o:
    q = f[3]:long;
    o = wasilibc_iftodt(f[10]:int & 57344);
    label B_n:
    d.b = o;
    d.a = q;
    if (eqz(call_indirect(d, j))) goto B_p;
    if (g == l) goto B_q;
    b = m;
    goto B_d;
    label B_q:
    b = realloc(m, (l = select_if(8, g << 1, g < 8)) << 2);
    if (b) goto B_d;
    free(d);
    goto B_f;
    label B_p:
    free(d);
    k = r;
    label B_m:
    b = f[3]:int;
    continue L_c;
    label B_g:
    66200[0]:int = a;
    i = d;
    label B_f:
    if (eqz(g)) goto B_r;
    b = m;
    loop L_s {
      free(b[0]);
      b = b + 4;
      g = g + -1;
      if (g) continue L_s;
    }
    label B_r:
    free(m);
    free(i);
    close(h);
    g = -1;
    goto B_a;
    label B_e:
    free(i);
    close(h);
    qsort(m, g, 4, e);
    c[0] = m;
    goto B_a;
    label B_d:
    b[g]:int = d;
    g = g + 1;
    k = r;
    m = b;
    b = f[3]:int;
    continue L_c;
  }
  label B_a:
  stack_pointer = f + 160;
  return g;
}

function sel_true(a:int):int {
  return 1
}

export function open(a:int, b:int, c:int):int {
  var e:int;
  var d:int = stack_pointer - 16;
  stack_pointer = d;
  if (eqz(0)) goto B_b;
  e = 
    undefined_weak_wasilibc_find_relpath_alloc(a, d + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  e = wasilibc_find_relpath(a, d + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (e != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_openat_nomode(e, 66204[0]:int, b);
  label B_c:
  stack_pointer = d + 16;
  return a;
}

export function wasilibc_open_nomode(a:int, b:int):int {
  var d:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(a, c + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(a, c + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (d != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_openat_nomode(d, 66204[0]:int, b);
  label B_c:
  stack_pointer = c + 16;
  return a;
}

export function access(a:int, b:int):int {
  var d:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(a, c + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(a, c + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (d != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_faccessat(d, 66204[0]:int, b, 0);
  label B_c:
  stack_pointer = c + 16;
  return a;
}

export function readlink(a:int, b:int, c:int):int {
  var e:int;
  var d:int = stack_pointer - 16;
  stack_pointer = d;
  if (eqz(0)) goto B_b;
  e = 
    undefined_weak_wasilibc_find_relpath_alloc(a, d + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  e = wasilibc_find_relpath(a, d + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (e != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_readlinkat(e, 66204[0]:int, b, c);
  label B_c:
  stack_pointer = d + 16;
  return a;
}

export function stat(a:int, b:int):int {
  var d:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(a, c + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(a, c + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (d != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_fstatat(d, 66204[0]:int, b, 0);
  label B_c:
  stack_pointer = c + 16;
  return a;
}

export function lstat(a:int, b:int):int {
  var d:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(a, c + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(a, c + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (d != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_fstatat(d, 66204[0]:int, b, 1);
  label B_c:
  stack_pointer = c + 16;
  return a;
}

export function utime(a:int, b:{ a:long, b:long }):int {
  var d:int;
  var c:int = stack_pointer - 48;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(a, c + 44, 66204, 66208, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(a, c + 44, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (d != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  var e:int = 66204[0]:int;
  a = 0;
  if (eqz(b)) goto B_e;
  (c + 32)[0]:int = 0;
  c[4]:int = 0;
  c[1]:long = b.a;
  c[3]:long = b.b;
  a = c + 8;
  label B_e:
  a = wasilibc_nocwd_utimensat(d, e, a, 0);
  label B_c:
  stack_pointer = c + 48;
  return a;
}

export function utimes(a:int, b:{ a:long, b:int, c:long }):int {
  var d:int;
  var c:int = stack_pointer - 48;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(a, c + 44, 66204, 66208, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(a, c + 44, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (d != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  var e:int = 66204[0]:int;
  a = 0;
  if (eqz(b)) goto B_e;
  (c + 8 + 24)[0]:int = (b + 24)[0]:int * 1000;
  c[1]:long = b.a;
  c[3]:long = b.c;
  c[4]:int = b.b * 1000;
  a = c + 8;
  label B_e:
  a = wasilibc_nocwd_utimensat(d, e, a, 0);
  label B_c:
  stack_pointer = c + 48;
  return a;
}

export function unlink(a:int):int {
  var c:int;
  var b:int = stack_pointer - 16;
  stack_pointer = b;
  if (eqz(0)) goto B_b;
  c = 
    undefined_weak_wasilibc_find_relpath_alloc(a, b + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  c = wasilibc_find_relpath(a, b + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (c != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_wasilibc_unlinkat(c, 66204[0]:int);
  label B_c:
  stack_pointer = b + 16;
  return a;
}

export function rmdir(a:int):int {
  var c:int;
  var b:int = stack_pointer - 16;
  stack_pointer = b;
  if (eqz(0)) goto B_b;
  c = 
    undefined_weak_wasilibc_find_relpath_alloc(a, b + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  c = wasilibc_find_relpath(a, b + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (c != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_wasilibc_rmdirat(c, 66204[0]:int);
  label B_c:
  stack_pointer = b + 16;
  return a;
}

export function remove(a:int):int {
  var c:int;
  var e:int;
  var d:int_ptr;
  var b:int = stack_pointer - 16;
  stack_pointer = b;
  if (eqz(0)) goto B_b;
  c = 
    undefined_weak_wasilibc_find_relpath_alloc(a, b + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  c = wasilibc_find_relpath(a, b + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (c != -1) goto B_e;
  d = 66200;
  goto B_d;
  label B_e:
  a = wasilibc_nocwd_wasilibc_unlinkat(c, e = 66204[0]:int);
  if (a) goto B_f;
  a = 0;
  goto B_c;
  label B_f:
  br_table[B_g, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_c, B_g, ..B_c](
    0[16550]:int + -31)
  label B_g:
  d = 66200;
  a = wasilibc_nocwd_wasilibc_rmdirat(c, e);
  if (66200[0]:int != 54) goto B_c;
  label B_d:
  d[0] = 44;
  label B_c:
  stack_pointer = b + 16;
  return a;
}

export function mkdir(a:int, b:int):int {
  var d:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(a, c + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(a, c + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (d != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_mkdirat_nomode(d, 66204[0]:int);
  label B_c:
  stack_pointer = c + 16;
  return a;
}

export function opendir(a:int):int {
  var b:int = stack_pointer - 16;
  stack_pointer = b;
  if (eqz(0)) goto B_b;
  a = 
    undefined_weak_wasilibc_find_relpath_alloc(a, b + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  a = wasilibc_find_relpath(a, b + 12, 66204, 66208[0]:int);
  label B_a:
  if (a != -1) goto B_d;
  a = 0;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_opendirat(a, 66204[0]:int);
  label B_c:
  stack_pointer = b + 16;
  return a;
}

export function scandir(a:int, b:int, c:int, d:int):int {
  var f:int;
  var e:int = stack_pointer - 16;
  stack_pointer = e;
  if (eqz(0)) goto B_b;
  f = 
    undefined_weak_wasilibc_find_relpath_alloc(a, e + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  f = wasilibc_find_relpath(a, e + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (f != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_scandirat(f, 66204[0]:int, b, c, d);
  label B_c:
  stack_pointer = e + 16;
  return a;
}

export function symlink(a:int, b:int):int {
  var d:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(b, c + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(b, c + 12, 66204, 66208[0]:int);
  label B_a:
  b = -1;
  if (d != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  b = wasilibc_nocwd_symlinkat(a, d, 66204[0]:int);
  label B_c:
  stack_pointer = c + 16;
  return b;
}

export function link(a:int, b:int):int {
  var d:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(a, c + 8, 66212, 66216, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(a, c + 8, 66212, 66216[0]:int);
  label B_a:
  a = -1;
  if (d == -1) goto B_d;
  var e:int = 66212[0]:int;
  if (eqz(0)) goto B_f;
  b = 
    undefined_weak_wasilibc_find_relpath_alloc(b, c + 12, 66204, 66208, 1);
  goto B_e;
  label B_f:
  b = wasilibc_find_relpath(b, c + 12, 66204, 66208[0]:int);
  label B_e:
  if (b == -1) goto B_d;
  a = wasilibc_nocwd_linkat(d, e, b, 66204[0]:int, 0);
  goto B_c;
  label B_d:
  0[16550]:int = 44;
  label B_c:
  stack_pointer = c + 16;
  return a;
}

export function rename(a:int, b:int):int {
  var d:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  if (eqz(0)) goto B_b;
  d = 
    undefined_weak_wasilibc_find_relpath_alloc(a, c + 8, 66212, 66216, 1);
  goto B_a;
  label B_b:
  d = wasilibc_find_relpath(a, c + 8, 66212, 66216[0]:int);
  label B_a:
  a = -1;
  if (d == -1) goto B_d;
  var e:int = 66212[0]:int;
  if (eqz(0)) goto B_f;
  b = 
    undefined_weak_wasilibc_find_relpath_alloc(b, c + 12, 66204, 66208, 1);
  goto B_e;
  label B_f:
  b = wasilibc_find_relpath(b, c + 12, 66204, 66208[0]:int);
  label B_e:
  if (b == -1) goto B_d;
  a = wasilibc_nocwd_renameat(d, e, b, 66204[0]:int);
  goto B_c;
  label B_d:
  0[16550]:int = 44;
  label B_c:
  stack_pointer = c + 16;
  return a;
}

export function wasilibc_access(a:int, b:int, c:int):int {
  var e:int;
  var d:int = stack_pointer - 16;
  stack_pointer = d;
  if (eqz(0)) goto B_b;
  e = 
    undefined_weak_wasilibc_find_relpath_alloc(a, d + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  e = wasilibc_find_relpath(a, d + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (e != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_faccessat(e, 66204[0]:int, b, c);
  label B_c:
  stack_pointer = d + 16;
  return a;
}

export function wasilibc_utimens(a:int, b:int, c:int):int {
  var e:int;
  var d:int = stack_pointer - 16;
  stack_pointer = d;
  if (eqz(0)) goto B_b;
  e = 
    undefined_weak_wasilibc_find_relpath_alloc(a, d + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  e = wasilibc_find_relpath(a, d + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (e != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_utimensat(e, 66204[0]:int, b, c);
  label B_c:
  stack_pointer = d + 16;
  return a;
}

export function wasilibc_stat(a:int, b:int, c:int):int {
  var e:int;
  var d:int = stack_pointer - 16;
  stack_pointer = d;
  if (eqz(0)) goto B_b;
  e = 
    undefined_weak_wasilibc_find_relpath_alloc(a, d + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  e = wasilibc_find_relpath(a, d + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (e != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_fstatat(e, 66204[0]:int, b, c);
  label B_c:
  stack_pointer = d + 16;
  return a;
}

export function wasilibc_link(a:int, b:int, c:int):int {
  var f:int;
  var d:int = stack_pointer - 16;
  stack_pointer = d;
  if (eqz(0)) goto B_b;
  a = 
    undefined_weak_wasilibc_find_relpath_alloc(a, d + 8, 66204, 66208, 1);
  goto B_a;
  label B_b:
  a = wasilibc_find_relpath(a, d + 8, 66204, 66208[0]:int);
  label B_a:
  var e:int = 66204[0]:int;
  if (eqz(0)) goto B_d;
  f = 
    undefined_weak_wasilibc_find_relpath_alloc(b, d + 12, 66204, 66208, 1);
  goto B_c;
  label B_d:
  f = wasilibc_find_relpath(b, d + 12, 66204, 66208[0]:int);
  label B_c:
  b = -1;
  if (a == -1) goto B_g;
  if (f != -1) goto B_f;
  label B_g:
  0[16550]:int = 44;
  goto B_e;
  label B_f:
  b = wasilibc_nocwd_linkat(a, e, f, 66204[0]:int, c);
  label B_e:
  stack_pointer = d + 16;
  return b;
}

export function wasilibc_link_oldat(a:int, b:int, c:int, d:int):int {
  var f:int;
  var e:int = stack_pointer - 16;
  stack_pointer = e;
  if (eqz(0)) goto B_b;
  f = 
    undefined_weak_wasilibc_find_relpath_alloc(c, e + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  f = wasilibc_find_relpath(c, e + 12, 66204, 66208[0]:int);
  label B_a:
  c = -1;
  if (f != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  c = wasilibc_nocwd_linkat(a, b, f, 66204[0]:int, d);
  label B_c:
  stack_pointer = e + 16;
  return c;
}

export function wasilibc_link_newat(a:int, b:int, c:int, d:int):int {
  var f:int;
  var e:int = stack_pointer - 16;
  stack_pointer = e;
  if (eqz(0)) goto B_b;
  f = 
    undefined_weak_wasilibc_find_relpath_alloc(a, e + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  f = wasilibc_find_relpath(a, e + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (f != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_linkat(f, 66204[0]:int, b, c, d);
  label B_c:
  stack_pointer = e + 16;
  return a;
}

export function wasilibc_rename_oldat(a:int, b:int, c:int):int {
  var e:int;
  var d:int = stack_pointer - 16;
  stack_pointer = d;
  if (eqz(0)) goto B_b;
  e = 
    undefined_weak_wasilibc_find_relpath_alloc(c, d + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  e = wasilibc_find_relpath(c, d + 12, 66204, 66208[0]:int);
  label B_a:
  c = -1;
  if (e != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  c = wasilibc_nocwd_renameat(a, b, e, 66204[0]:int);
  label B_c:
  stack_pointer = d + 16;
  return c;
}

export function wasilibc_rename_newat(a:int, b:int, c:int):int {
  var e:int;
  var d:int = stack_pointer - 16;
  stack_pointer = d;
  if (eqz(0)) goto B_b;
  e = 
    undefined_weak_wasilibc_find_relpath_alloc(a, d + 12, 66204, 66208, 1);
  goto B_a;
  label B_b:
  e = wasilibc_find_relpath(a, d + 12, 66204, 66208[0]:int);
  label B_a:
  a = -1;
  if (e != -1) goto B_d;
  0[16550]:int = 44;
  goto B_c;
  label B_d:
  a = wasilibc_nocwd_renameat(e, 66204[0]:int, b, c);
  label B_c:
  stack_pointer = d + 16;
  return a;
}

export function Exit(a:int) {
  wasi_proc_exit(a);
  unreachable;
}

export function wasilibc_register_preopened_fd(a:int, b:int):int {
  return internal_register_preopened_fd(a, b)
}

function internal_register_preopened_fd(a:int, b:{ a:int, b:int }):int {
  var e:int;
  var f:int;
  var d:{ a:ubyte, b:ubyte }
  var c:int;
  br_table[B_a, B_a, ..B_b](a + 2)
  label B_b:
  if (eqz(b)) goto B_a;
  c = 0[16555]:int;
  if (c != 0[16557]:int) goto B_c;
  d = 0[16556]:int;
  f = calloc(8, e = select_if(c << 1, 4, c));
  if (f) goto B_d;
  return -1;
  label B_d:
  f = memcpy(f, d, c << 3);
  0[16557]:int = e;
  0[16556]:int = f;
  free(d);
  label B_c:
  loop L_f {
    d = b;
    br_table[B_g, B_h, ..B_e](d.a + -46);
    label B_h:
    b = d + 1;
    continue L_f;
    label B_g:
    b = d + 1;
    e = d.b;
    if (eqz(e)) continue L_f;
    if (e != 47) goto B_e;
    b = d + 2;
    continue L_f;
  }
  label B_e:
  d = strdup(d);
  if (d) goto B_i;
  return -1;
  label B_i:
  0[16555]:int = c + 1;
  b = 0[16556]:int + (c << 3);
  b.b = a;
  b.a = d;
  return 0;
  label B_a:
  abort();
  return unreachable;
}

export function wasilibc_find_relpath(a:int, b:int, c:int, d:int):int {
  var e:int_ptr = stack_pointer - 16;
  stack_pointer = e;
  e[3] = d;
  if (eqz(0)) goto B_b;
  d = undefined_weak_wasilibc_find_relpath_alloc(a, b, c, e + 12, 0);
  goto B_a;
  label B_b:
  d = wasilibc_find_abspath(a, b, c);
  label B_a:
  stack_pointer = e + 16;
  return d;
}

export function wasilibc_find_abspath(a:ubyte_ptr, b:int_ptr, c:int_ptr):int {
  var h:int;
  var d:ubyte_ptr = a + -1;
  loop L_a {
    d = d + 1;
    if (d[0] == 47) continue L_a;
  }
  var e:int = 0;
  var f:int = 0[16555]:int;
  if (eqz(f)) goto B_c;
  var g:int = 0[16556]:int;
  h = -1;
  loop L_d {
    var i:{ a:int, b:int } = g + ((f = f + -1) << 3);
    var j:int = i.a;
    var k:int = strlen(j);
    if (h == -1) goto B_f;
    if (k <= e) goto B_e;
    label B_f:
    if (k) goto B_h;
    if ((d[0] & 255) != 47) goto B_g;
    label B_h:
    if (memcmp(d, j, k)) goto B_e;
    var l:int = j + -1;
    var m:int = k;
    loop L_j {
      a = m;
      if (eqz(a)) goto B_i;
      m = a + -1;
      if ((l + a)[0]:ubyte == 47) continue L_j;
    }
    label B_i:
    a = (d + a)[0]:ubyte;
    if (a == 47) goto B_g;
    if (a) goto B_e;
    label B_g:
    b[0] = j;
    h = i.b;
    e = k;
    label B_e:
    if (f) continue L_d;
  }
  if (h != -1) goto B_b;
  label B_c:
  0[16550]:int = 44;
  return -1;
  label B_b:
  a = d + e + -1;
  loop L_k {
    a = a + 1;
    d = a[0];
    if (d == 47) continue L_k;
  }
  c[0] = select_if(a, 26312, d);
  return h;
}

function wasilibc_populate_preopens() {
  var c:int;
  var a:int = stack_pointer - 16;
  stack_pointer = a;
  var b:int = 3;
  loop L_c {
    c = wasi_fd_prestat_get(b, a + 8);
    if (eqz(c)) goto B_d;
    if (c != 8) goto B_b;
    stack_pointer = a + 16;
    return ;
    label B_d:
    if (a[8]:ubyte) goto B_e;
    var d:int = a[3]:int;
    c = malloc(d + 1);
    if (eqz(c)) goto B_a;
    if (wasi_fd_prestat_dir_name(b, c, d)) goto B_b;
    (c + a[3]:int)[0]:byte = 0;
    if (internal_register_preopened_fd(b, c)) goto B_a;
    free(c);
    label B_e:
    b = b + 1;
    continue L_c;
  }
  label B_b:
  Exit(71);
  unreachable;
  label B_a:
  Exit(70);
  unreachable;
}

export function sbrk(a:int):int {
  if (a) goto B_a;
  return memory_size() << 16;
  label B_a:
  if (a & 65535) goto B_b;
  if (a <= -1) goto B_b;
  a = memory_grow(a >> 16);
  if (a != -1) goto B_c;
  0[16550]:int = 48;
  return -1;
  label B_c:
  return a << 16;
  label B_b:
  abort();
  return unreachable;
}

export function tolower(a:int):int {
  return select_if(a | 32, a, a + -65 < 26)
}

export function tolower_l(a:int, b:int):int {
  return select_if(a | 32, a, a + -65 < 26)
}

export function assert_fail(a:int, b:int, c:int, d:int) {
  var e:{ a:int, b:int, c:int, d:int } = stack_pointer - 16;
  stack_pointer = e;
  e.d = c;
  e.c = d;
  e.b = b;
  e.a = a;
  fprintf(65584, 32163, e);
  abort();
  unreachable;
}

export function fprintf(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  d[3] = c;
  c = vfprintf(a, b, c);
  stack_pointer = d + 16;
  return c;
}

function dummy(a:int, b:int):int {
  return a
}

export function lctrans(a:int, b:int):int {
  return dummy(a, b)
}

export function lctrans_cur(a:int):int {
  var b:int_ptr;
  b = 0[16566]:int;
  if (b) goto B_a;
  b = 66240;
  0[16566]:int = 66240;
  label B_a:
  return dummy(a, b[5]);
}

export function strerror_l(a:int, b:int_ptr):int {
  return 
    lctrans(((select_if(0, a, a > 76) << 1) + 62688)[0]:ushort + 61132,
            b[5])
}

export function strerror(a:int):int {
  var b:int_ptr;
  b = 0[16566]:int;
  if (b) goto B_a;
  b = 66240;
  0[16566]:int = 66240;
  label B_a:
  return 
    lctrans(((select_if(0, a, a > 76) << 1) + 62688)[0]:ushort + 61132,
            b[5]);
}

export function ofl_lock():int {
  return 66272
}

export function ofl_unlock() {
}

export function stdio_exit() {
  var c:int;
  var a:int_ptr;
  var b:int;
  a = ofl_lock()[0]:int;
  if (eqz(a)) goto B_a;
  loop L_b {
    if (a[5] == a[6]) goto B_c;
    call_indirect(a, 0, 0, a[8]);
    label B_c:
    b = a[1];
    if (b == (c = a[2])) goto B_d;
    call_indirect(a, i64_extend_i32_s(b - c), 1, a[9]);
    label B_d:
    a = a[13];
    if (a) continue L_b;
  }
  label B_a:
  a = 0[16569]:int;
  if (eqz(a)) goto B_e;
  if (a[5] == a[6]) goto B_f;
  call_indirect(a, 0, 0, a[8]);
  label B_f:
  b = a[1];
  if (b == (c = a[2])) goto B_e;
  call_indirect(a, i64_extend_i32_s(b - c), 1, a[9]);
  label B_e:
  a = 0[16569]:int;
  if (eqz(a)) goto B_g;
  if (a[5] == a[6]) goto B_h;
  call_indirect(a, 0, 0, a[8]);
  label B_h:
  b = a[1];
  if (b == (c = a[2])) goto B_g;
  call_indirect(a, i64_extend_i32_s(b - c), 1, a[9]);
  label B_g:
  a = data[524]:int;
  if (eqz(a)) goto B_i;
  if (a[5] == a[6]) goto B_j;
  call_indirect(a, 0, 0, a[8]);
  label B_j:
  b = a[1];
  if (b == (c = a[2])) goto B_i;
  call_indirect(a, i64_extend_i32_s(b - c), 1, a[9]);
  label B_i:
}

export function towrite(a:int):int {
  var b:int;
  a[15]:int = (b = a[15]:int) + -1 | b;
  b = a[0]:int;
  if (eqz(b & 8)) goto B_a;
  a[0]:int = b | 32;
  return -1;
  label B_a:
  a[1]:long@4 = 0L;
  a[6]:int = (b = a[10]:int);
  a[5]:int = b;
  a[4]:int = b + a[11]:int;
  return 0;
}

export function towrite_needs_stdio_exit() {
  stdio_exit()
}

export function fwritex(a:int, b:int, c:int_ptr):int {
  var d:int;
  var f:int;
  var e:int;
  var h:ubyte_ptr;
  d = c[4];
  if (d) goto B_b;
  e = 0;
  if (towrite(c)) goto B_a;
  d = c[4];
  label B_b:
  if (d - (f = c[5]) >= b) goto B_c;
  return call_indirect(c, a, b, c[8]);
  label B_c:
  var g:int = 0;
  if (c[16] < 0) goto B_d;
  g = 0;
  e = a;
  d = 0;
  loop L_e {
    if (b == d) goto B_d;
    d = d + 1;
    e = e + -1;
    h = e + b;
    if (h[0] != 10) continue L_e;
  }
  e = call_indirect(c, a, g = b - d + 1, c[8]);
  if (e < g) goto B_a;
  b = d + -1;
  a = h + 1;
  f = c[5];
  label B_d:
  memcpy(f, a, b);
  c[5] = c[5] + b;
  e = g + b;
  label B_a:
  return e;
}

export function fwrite(a:int, b:int, c:int, d:int_ptr):int {
  var f:int;
  var h:int;
  var g:int;
  var j:ubyte_ptr;
  var e:int = c * b;
  f = d[4];
  if (f) goto B_b;
  g = 0;
  if (towrite(d)) goto B_a;
  f = d[4];
  label B_b:
  if (f - (h = d[5]) >= e) goto B_c;
  g = call_indirect(d, a, e, d[8]);
  goto B_a;
  label B_c:
  var i:int = 0;
  if (d[16] >= 0) goto B_e;
  f = e;
  goto B_d;
  label B_e:
  g = a + e;
  i = 0;
  f = 0;
  loop L_f {
    if (e + f) goto B_g;
    f = e;
    goto B_d;
    label B_g:
    f = f + -1;
    j = f + g;
    if (j[0] != 10) continue L_f;
  }
  g = call_indirect(d, a, i = e + f + 1, d[8]);
  if (g < i) goto B_a;
  f = f ^ -1;
  a = j + 1;
  h = d[5];
  label B_d:
  memcpy(h, a, f);
  d[5] = d[5] + f;
  g = i + f;
  label B_a:
  if (g != e) goto B_h;
  return select_if(c, 0, b);
  label B_h:
  return g / b;
}

export function overflow(a:int_ptr, b:int):int {
  var d:int;
  var c:int = stack_pointer - 16;
  stack_pointer = c;
  c[15]:byte = b;
  d = a[4];
  if (d) goto B_b;
  d = -1;
  if (towrite(a)) goto B_a;
  d = a[4];
  label B_b:
  var e:byte_ptr = a[5];
  if (e == d) goto B_c;
  if (a[16] == (d = b & 255)) goto B_c;
  a[5] = e + 1;
  e[0] = b;
  goto B_a;
  label B_c:
  d = -1;
  if (call_indirect(a, c + 15, 1, a[8]) != 1) goto B_a;
  d = c[15]:ubyte;
  label B_a:
  stack_pointer = c + 16;
  return d;
}

export function fputc(a:int, b:int_ptr):int {
  var c:int;
  c = a & 255;
  if (c == b[16]) goto B_a;
  var d:byte_ptr = b[5];
  if (d == b[4]) goto B_a;
  b[5] = d + 1;
  d[0] = a;
  return c;
  label B_a:
  return overflow(b, c);
}

export function perror(a:ubyte_ptr) {
  var b:int = strerror(0[16550]:int);
  var c:int = data[511]:int;
  var d:int = data[522]:int;
  if (eqz(a)) goto B_a;
  if (eqz(a[0])) goto B_a;
  fwrite(a, strlen(a), 1, 65584);
  fputc(58, 65584);
  fputc(32, 65584);
  label B_a:
  fwrite(b, strlen(b), 1, 65584);
  fputc(10, 65584);
  data[522]:int = d;
  data[511]:int = c;
}

export function stdio_close(a:int_ptr):int {
  return close(a[14])
}

export function writev(a:int, b:int, c:int):int {
  var d:int_ptr = stack_pointer - 16;
  stack_pointer = d;
  var e:int = -1;
  if (c > -1) goto B_b;
  0[16550]:int = 28;
  goto B_a;
  label B_b:
  c = wasi_fd_write(a, b, c, d + 12);
  if (eqz(c)) goto B_c;
  0[16550]:int = c;
  e = -1;
  goto B_a;
  label B_c:
  e = d[3];
  label B_a:
  stack_pointer = d + 16;
  return e;
}

export function stdio_write(a:int, b:int, c:int):int {
  var h:int;
  var i:int;
  var d:{ a:int, b:int, c:int, d:int } = stack_pointer - 16;
  stack_pointer = d;
  d.d = c;
  d.c = b;
  d.a = (b = a[6]:int);
  d.b = (b = a[5]:int - b);
  var e:int = 2;
  var f:int = b + c;
  if (f == (b = writev(a[14]:int, d, 2))) goto B_b;
  var g:{ a:int, b:int } = d;
  loop L_c {
    if (b > -1) goto B_d;
    b = 0;
    a[6]:int = 0;
    a[2]:long = 0L;
    a[0]:int = a[0]:int | 32;
    if (e == 2) goto B_a;
    b = c - g.b;
    goto B_a;
    label B_d:
    var j:int_ptr = g + ((i = b > (h = g.b)) << 3);
    j[0] = j[0] + (h = b - select_if(h, 0, i));
    g = g + select_if(12, 4, i);
    g.a = g.a - h;
    g = j;
    f = f - b;
    if (f != (b = writev(a[14]:int, j, e = e - i))) continue L_c;
  }
  label B_b:
  a[6]:int = (b = a[10]:int);
  a[5]:int = b;
  a[4]:int = b + a[11]:int;
  b = c;
  label B_a:
  stack_pointer = d + 16;
  return b;
}

export function lseek(a:int, b:long, c:int):long {
  var d:long_ptr = stack_pointer - 16;
  stack_pointer = d;
  c = wasi_fd_seek(a, b, c & 255, d + 8);
  if (eqz(c)) goto B_b;
  0[16550]:int = select_if(70, c, c == 76);
  b = -1L;
  goto B_a;
  label B_b:
  b = d[1];
  label B_a:
  stack_pointer = d + 16;
  return b;
}

export function stdio_seek(a:int_ptr, b:long, c:int):long {
  return lseek(a[14], b, c)
}

export function wcrtomb(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:int):int {
  var d:int = 1;
  if (eqz(a)) goto B_a;
  if (b > 127) goto B_b;
  a.a = b;
  return 1;
  label B_b:
  if (0[16560]:int) goto B_d;
  if ((b & -128) == 57216) goto B_e;
  0[16550]:int = 25;
  goto B_c;
  label B_e:
  a.a = b;
  return 1;
  label B_d:
  if (b > 2047) goto B_f;
  a.b = (b & 63) | 128;
  a.a = b >> 6 | 192;
  return 2;
  label B_f:
  if (b < 55296) goto B_h;
  if ((b & -8192) != 57344) goto B_g;
  label B_h:
  a.c = (b & 63) | 128;
  a.a = b >> 12 | 224;
  a.b = (b >> 6 & 63) | 128;
  return 3;
  label B_g:
  if (b + -65536 > 1048575) goto B_i;
  a.d = (b & 63) | 128;
  a.a = b >> 18 | 240;
  a.c = (b >> 6 & 63) | 128;
  a.b = (b >> 12 & 63) | 128;
  return 4;
  label B_i:
  0[16550]:int = 25;
  label B_c:
  d = -1;
  label B_a:
  return d;
}

export function wctomb(a:int, b:int):int {
  if (a) goto B_a;
  return 0;
  label B_a:
  return wcrtomb(a, b, 0);
}

export function frexp(a:double, b:int_ptr):double {
  var c:long = i64_reinterpret_f64(a);
  var d:int = i32_wrap_i64(c >> 52L) & 2047;
  if (d == 2047) goto B_a;
  if (d) goto B_b;
  if (a != 0.0) goto B_c;
  b[0] = 0;
  return a;
  label B_c:
  a = frexp(a * 18446744073709551616.0, b);
  b[0] = b[0] + -64;
  return a;
  label B_b:
  b[0] = d + -1022;
  a = f64_reinterpret_i64(
        (c & -9218868437227405313L) | 4602678819172646912L);
  label B_a:
  return a;
}

export function fputs(a:int, b:int):int {
  var c:int = strlen(a);
  return select_if(-1, 0, c != fwrite(a, 1, c, b));
}

export function vfprintf(a:int, b:int, c:int):int {
  var f:int;
  var d:int = stack_pointer - 208;
  stack_pointer = d;
  d[51]:int = c;
  (d + 160 + 32)[0]:long = 0L;
  (d + 184)[0]:long = 0L;
  (d + 176)[0]:long = 0L;
  d[21]:long = 0L;
  d[20]:long = 0L;
  d[50]:int = c;
  if (printf_core(0, b, d + 200, d + 80, d + 160) >= 0) goto B_b;
  a = -1;
  goto B_a;
  label B_b:
  var e:int = a[0]:int;
  if (a[15]:int > 0) goto B_c;
  a[0]:int = e & -33;
  label B_c:
  if (a[11]:int) goto B_g;
  a[11]:int = 80;
  a[6]:int = 0;
  a[2]:long = 0L;
  f = a[10]:int;
  a[10]:int = d;
  goto B_f;
  label B_g:
  f = 0;
  if (a[4]:int) goto B_e;
  label B_f:
  c = -1;
  if (towrite(a)) goto B_d;
  label B_e:
  c = printf_core(a, b, d + 200, d + 80, d + 160);
  label B_d:
  b = e & 32;
  if (eqz(f)) goto B_h;
  call_indirect(a, 0, 0, a[8]:int);
  a[11]:int = 0;
  a[10]:int = f;
  a[6]:int = 0;
  f = a[5]:int;
  a[2]:long = 0L;
  c = select_if(c, -1, f);
  label B_h:
  a[0]:int = (f = a[0]:int) | b;
  a = select_if(-1, c, f & 32);
  label B_a:
  stack_pointer = d + 208;
  return a;
}

function printf_core(a:int, b:int, c:int_ptr, d:int, e:int_ptr):int {
  var v:int;
  var w:int;
  var y:int_ptr;
  var aa:int;
  var ca:int;
  var x:ubyte_ptr;
  var z:int;
  var da:int;
  var ga:long;
  var fa:int;
  var ha:long;
  var ba:int;
  var ja:int;
  var la:ubyte_ptr;
  var ma:int;
  var na:int;
  var oa:byte_ptr;
  var pa:int;
  var ka:int;
  var ea:int;
  var ra:double;
  var ia:double;
  var f:int = stack_pointer - 880;
  stack_pointer = f;
  var g:int = f + 68 + 12;
  var h:int = 0 - f + 112;
  var i:int = f + -3988;
  var j:int = f + 55;
  var k:int = f + 80 ^ -2;
  var l:int = f + 68 + 11;
  var m:int = f + 80 | 8;
  var n:int = f + 80 | 9;
  var o:int = -10 - f + 68;
  var p:int = f + 68 + 10;
  var q:int = f + 56;
  var r:int = 0;
  var s:int = 0;
  var t:int = 0;
  loop L_d {
    var u:int = b;
    if (t > (s ^ 2147483647)) goto B_c;
    s = t + s;
    t = u[0]:ubyte;
    if (eqz(t)) goto B_m;
    b = u;
    loop L_n {
      t = t & 255;
      if (eqz(t)) goto B_q;
      if (t != 37) goto B_o;
      v = b;
      t = b;
      loop L_r {
        if (t[1]:ubyte == 37) goto B_s;
        b = t;
        goto B_p;
        label B_s:
        v = v + 1;
        w = t[2]:ubyte;
        b = t + 2;
        t = b;
        if (w == 37) continue L_r;
        goto B_p;
      }
      label B_q:
      v = b;
      label B_p:
      t = v - u;
      if (t > (v = s ^ 2147483647)) goto B_c;
      if (eqz(a)) goto B_t;
      if (a[0]:ubyte & 32) goto B_t;
      fwritex(u, t, a);
      label B_t:
      if (t) continue L_d;
      t = b + 1;
      x = -1;
      y = b[1]:byte;
      w = y + -48;
      if (w > 9) goto B_u;
      if (b[2]:ubyte != 36) goto B_u;
      t = b + 3;
      y = b[3]:byte;
      r = 1;
      x = w;
      label B_u:
      z = 0;
      b = y + -32;
      if (b > 31) goto B_v;
      b = 1 << b;
      if (eqz(b & 75913)) goto B_v;
      w = t + 1;
      z = 0;
      loop L_w {
        z = b | z;
        t = w;
        y = t[0]:byte;
        b = y + -32;
        if (b >= 32) goto B_v;
        w = t + 1;
        b = 1 << b;
        if (b & 75913) continue L_w;
      }
      label B_v:
      if (y != 42) goto B_x;
      b = t[1]:byte + -48;
      if (b > 9) goto B_z;
      if (t[2]:ubyte != 36) goto B_z;
      e[b]:int = 10;
      w = t + 3;
      aa = ((t[1]:byte << 3) + d + -384)[0]:int;
      r = 1;
      goto B_y;
      label B_z:
      if (r) goto B_k;
      w = t + 1;
      if (a) goto B_aa;
      r = 0;
      aa = 0;
      goto B_l;
      label B_aa:
      c[0] = (b = c[0]) + 4;
      aa = b[0]:int;
      r = 0;
      label B_y:
      if (aa > -1) goto B_l;
      aa = 0 - aa;
      z = z | 8192;
      goto B_l;
      label B_x:
      aa = 0;
      b = y + -48;
      if (b <= 9) goto B_ba;
      w = t;
      goto B_l;
      label B_ba:
      aa = 0;
      loop L_ca {
        if (aa > 214748364) goto B_da;
        aa = select_if(-1, (w = aa * 10) + b, b > (w ^ 2147483647));
        b = t[1]:byte;
        w = t + 1;
        t = w;
        b = b + -48;
        if (b < 10) continue L_ca;
        if (aa < 0) goto B_c;
        goto B_l;
        label B_da:
        b = t[1]:byte;
        aa = -1;
        t = t + 1;
        b = b + -48;
        if (b < 10) continue L_ca;
        goto B_c;
      }
      label B_o:
      t = b[1]:ubyte;
      b = b + 1;
      continue L_n;
    }
    label B_m:
    if (a) goto B_a;
    if (r) goto B_ea;
    s = 0;
    goto B_a;
    label B_ea:
    b = e[1];
    if (b) goto B_ga;
    b = 1;
    goto B_fa;
    label B_ga:
    pop_arg(d + 8, b, c);
    b = e[2];
    if (b) goto B_ha;
    b = 2;
    goto B_fa;
    label B_ha:
    pop_arg(d + 16, b, c);
    b = e[3];
    if (b) goto B_ia;
    b = 3;
    goto B_fa;
    label B_ia:
    pop_arg(d + 24, b, c);
    b = e[4];
    if (b) goto B_ja;
    b = 4;
    goto B_fa;
    label B_ja:
    pop_arg(d + 32, b, c);
    b = e[5];
    if (b) goto B_ka;
    b = 5;
    goto B_fa;
    label B_ka:
    pop_arg(d + 40, b, c);
    b = e[6];
    if (b) goto B_la;
    b = 6;
    goto B_fa;
    label B_la:
    pop_arg(d + 48, b, c);
    b = e[7];
    if (b) goto B_ma;
    b = 7;
    goto B_fa;
    label B_ma:
    pop_arg(d + 56, b, c);
    b = e[8];
    if (b) goto B_na;
    b = 8;
    goto B_fa;
    label B_na:
    pop_arg(d + 64, b, c);
    b = e[9];
    if (b) goto B_oa;
    b = 9;
    goto B_fa;
    label B_oa:
    pop_arg(d + 72, b, c);
    s = 1;
    goto B_a;
    label B_fa:
    b = b << 2;
    loop L_pa {
      if ((e + b)[0]:int) goto B_k;
      b = b + 4;
      if (b != 40) continue L_pa;
    }
    s = 1;
    goto B_a;
    label B_l:
    t = 0;
    y = -1;
    if (w[0]:ubyte == 46) goto B_ra;
    b = w;
    ba = 0;
    goto B_qa;
    label B_ra:
    y = w[1]:byte;
    if (y != 42) goto B_sa;
    b = w[2]:byte + -48;
    if (b > 9) goto B_ua;
    if (w[3]:ubyte != 36) goto B_ua;
    e[b]:int = 10;
    b = w + 4;
    y = ((w[2]:byte << 3) + d + -384)[0]:int;
    goto B_ta;
    label B_ua:
    if (r) goto B_k;
    b = w + 2;
    if (a) goto B_va;
    y = 0;
    goto B_ta;
    label B_va:
    c[0] = (w = c[0]) + 4;
    y = w[0]:int;
    label B_ta:
    ba = (y ^ -1) >> 31;
    goto B_qa;
    label B_sa:
    b = w + 1;
    ca = y + -48;
    if (ca <= 9) goto B_wa;
    ba = 1;
    y = 0;
    goto B_qa;
    label B_wa:
    da = 0;
    w = b;
    loop L_xa {
      y = -1;
      if (da > 214748364) goto B_ya;
      y = select_if(-1, (b = da * 10) + ca, ca > (b ^ 2147483647));
      label B_ya:
      ba = 1;
      ca = w[1]:byte;
      da = y;
      b = w + 1;
      w = b;
      ca = ca + -48;
      if (ca < 10) continue L_xa;
    }
    label B_qa:
    loop L_za {
      w = t;
      t = b[0]:byte;
      if (t + -123 < -58) goto B_k;
      b = b + 1;
      t = (t + w * 58 + 62783)[0]:ubyte;
      if (t + -1 < 8) continue L_za;
    }
    if (t == 27) goto B_cb;
    if (eqz(t)) goto B_k;
    if (x < 0) goto B_db;
    e[x]:int = t;
    f[7]:long = d[x]:long;
    goto B_bb;
    label B_db:
    if (a) goto B_eb;
    s = 0;
    goto B_a;
    label B_eb:
    pop_arg(f + 56, t, c);
    goto B_ab;
    label B_cb:
    if (x > -1) goto B_k;
    label B_bb:
    t = 0;
    if (eqz(a)) continue L_d;
    label B_ab:
    da = z & -65537;
    ea = select_if(da, z, z & 8192);
    t = (b + -1)[0]:byte;
    fa = select_if(select_if(t & -33, t, (t & 15) == 3), t, w);
    br_table[B_fb, B_j, B_ib, B_j, B_fb, B_fb, B_fb, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_jb, B_j, B_j, B_j, B_j, B_sb, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_j, B_fb, B_j, B_nb, B_qb, B_fb, B_fb, B_fb, B_j, B_qb, B_j, B_j, B_j, B_mb, B_ub, B_rb, B_tb, B_j, B_j, B_lb, B_j, B_vb, B_j, B_j, B_sb, ..B_j](
      fa + -65);
    label B_vb:
    ca = 0;
    x = 1521;
    ga = f[7]:long;
    goto B_pb;
    label B_ub:
    t = 0;
    br_table[B_cc, B_bc, B_ac, B_zb, B_yb, L_d, B_xb, B_wb, ..L_d](
      w & 255)
    label B_cc:
    (f[14]:int)[0]:int = s;
    continue L_d;
    label B_bc:
    (f[14]:int)[0]:int = s;
    continue L_d;
    label B_ac:
    (f[14]:int)[0]:long = i64_extend_i32_s(s);
    continue L_d;
    label B_zb:
    (f[14]:int)[0]:short = s;
    continue L_d;
    label B_yb:
    (f[14]:int)[0]:byte = s;
    continue L_d;
    label B_xb:
    (f[14]:int)[0]:int = s;
    continue L_d;
    label B_wb:
    (f[14]:int)[0]:long = i64_extend_i32_s(s);
    continue L_d;
    label B_tb:
    y = select_if(y, 8, y > 8);
    ea = ea | 8;
    fa = 120;
    label B_sb:
    ca = 0;
    x = 1521;
    ga = f[7]:long;
    if (eqz(eqz(ga))) goto B_dc;
    u = q;
    goto B_ob;
    label B_dc:
    w = fa & 32;
    u = q;
    loop L_ec {
      u = u + -1;
      u[0]:byte = ((i32_wrap_i64(ga) & 15) + 63312)[0]:ubyte | w;
      t = ga > 15L;
      ga = ga >> 4L;
      if (t) continue L_ec;
    }
    if (eqz(ea & 8)) goto B_ob;
    x = (fa >> 4) + 1521;
    ca = 2;
    goto B_ob;
    label B_rb:
    u = q;
    ga = f[7]:long;
    if (eqz(ga)) goto B_fc;
    u = q;
    loop L_gc {
      u = u + -1;
      u[0]:byte = (i32_wrap_i64(ga) & 7) | 48;
      t = ga > 7L;
      ga = ga >> 3L;
      if (t) continue L_gc;
    }
    label B_fc:
    ca = 0;
    x = 1521;
    if (eqz(ea & 8)) goto B_ob;
    y = select_if(y, (t = q - u) + 1, y > t);
    goto B_ob;
    label B_qb:
    ga = f[7]:long;
    if (ga > -1L) goto B_hc;
    f[7]:long = (ga = 0L - ga);
    ca = 1;
    x = 1521;
    goto B_pb;
    label B_hc:
    if (eqz(ea & 2048)) goto B_ic;
    ca = 1;
    x = 1522;
    goto B_pb;
    label B_ic:
    x = select_if(1523, 1521, ca = ea & 1);
    label B_pb:
    if (ga >= 4294967296L) goto B_kc;
    ha = ga;
    u = q;
    goto B_jc;
    label B_kc:
    u = q;
    loop L_lc {
      u = u + -1;
      u[0]:byte = i32_wrap_i64(ga - (ha = ga / 10L) * 10L) | 48;
      t = ga > 42949672959L;
      ga = ha;
      if (t) continue L_lc;
    }
    label B_jc:
    t = i32_wrap_i64(ha);
    if (eqz(t)) goto B_ob;
    loop L_mc {
      u = u + -1;
      u[0]:byte = t - (w = t / 10) * 10 | 48;
      z = t > 9;
      t = w;
      if (z) continue L_mc;
    }
    label B_ob:
    if (eqz(ba)) goto B_nc;
    if (y < 0) goto B_c;
    label B_nc:
    da = select_if(ea & -65537, ea, ba);
    ga = f[7]:long;
    if (ga != 0L) goto B_oc;
    z = 0;
    if (y) goto B_oc;
    u = q;
    t = q;
    goto B_i;
    label B_oc:
    z = select_if(y, t = q - u + eqz(ga), y > t);
    t = q;
    goto B_i;
    label B_nb:
    f[55]:byte = f[7]:long;
    ca = 0;
    x = 1521;
    z = 1;
    u = j;
    t = q;
    goto B_i;
    label B_mb:
    u = strerror(66200[0]:int);
    goto B_kb;
    label B_lb:
    t = f[14]:int;
    u = select_if(t, 26366, t);
    label B_kb:
    t = u + (z = strnlen(u, select_if(y, 2147483647, y < 2147483647)));
    ca = 0;
    x = 1521;
    if (y > -1) goto B_i;
    if (eqz(t[0]:ubyte)) goto B_i;
    goto B_c;
    label B_jb:
    u = f[14]:int;
    if (y) goto B_hb;
    t = 0;
    goto B_gb;
    label B_ib:
    f[3]:int = 0;
    f[2]:int = f[7]:long;
    f[14]:int = f + 8;
    u = f + 8;
    y = -1;
    label B_hb:
    t = 0;
    v = u;
    loop L_qc {
      w = v[0]:int;
      if (eqz(w)) goto B_pc;
      w = wctomb(f + 4, w);
      z = w < 0;
      if (z) goto B_rc;
      if (w > y - t) goto B_rc;
      v = v + 4;
      if (y > (t = w + t)) continue L_qc;
      goto B_pc;
      label B_rc:
    }
    if (z) goto B_b;
    label B_pc:
    if (t < 0) goto B_c;
    label B_gb:
    z = ea & 73728;
    if (z) goto B_sc;
    if (aa <= t) goto B_sc;
    memset(f + 112, 32, select_if(v = aa - t, 256, w = v < 256));
    if (w) goto B_tc;
    loop L_uc {
      if (a[0]:ubyte & 32) goto B_vc;
      fwritex(f + 112, 256, a);
      label B_vc:
      v = v + -256;
      if (v > 255) continue L_uc;
    }
    label B_tc:
    if (a[0]:ubyte & 32) goto B_sc;
    fwritex(f + 112, v, a);
    label B_sc:
    if (eqz(t)) goto B_wc;
    v = 0;
    loop L_xc {
      w = u[0]:int;
      if (eqz(w)) goto B_wc;
      w = wctomb(f + 4, w);
      v = w + v;
      if (v > t) goto B_wc;
      if (a[0]:ubyte & 32) goto B_yc;
      fwritex(f + 4, w, a);
      label B_yc:
      u = u + 4;
      if (v < t) continue L_xc;
    }
    label B_wc:
    if (z != 8192) goto B_zc;
    if (aa <= t) goto B_zc;
    memset(f + 112, 32, select_if(v = aa - t, 256, w = v < 256));
    if (w) goto B_ad;
    loop L_bd {
      if (a[0]:ubyte & 32) goto B_cd;
      fwritex(f + 112, 256, a);
      label B_cd:
      v = v + -256;
      if (v > 255) continue L_bd;
    }
    label B_ad:
    if (a[0]:ubyte & 32) goto B_zc;
    fwritex(f + 112, v, a);
    label B_zc:
    t = select_if(aa, t, aa > t);
    continue L_d;
    label B_fb:
    if (eqz(ba)) goto B_dd;
    if (y < 0) goto B_c;
    label B_dd:
    ia = f[7]:double;
    f[27]:int = 0;
    if (i64_reinterpret_f64(ia) > -1L) goto B_fd;
    ia = -(ia);
    ja = 1;
    ka = 0;
    la = 1531;
    goto B_ed;
    label B_fd:
    if (eqz(ea & 2048)) goto B_gd;
    ja = 1;
    ka = 0;
    la = 1534;
    goto B_ed;
    label B_gd:
    la = select_if(1537, 1532, ja = ea & 1);
    ka = eqz(ja);
    label B_ed:
    if (abs(ia) < inf) goto B_hd;
    v = ja + 3;
    if (ea & 8192) goto B_id;
    if (aa <= v) goto B_id;
    memset(f + 624, 32, select_if(t = aa - v, 256, w = t < 256));
    if (w) goto B_jd;
    loop L_kd {
      if (a[0]:ubyte & 32) goto B_ld;
      fwritex(f + 624, 256, a);
      label B_ld:
      t = t + -256;
      if (t > 255) continue L_kd;
    }
    label B_jd:
    if (a[0]:ubyte & 32) goto B_id;
    fwritex(f + 624, t, a);
    label B_id:
    t = a[0]:int;
    if (t & 32) goto B_md;
    fwritex(la, ja, a);
    t = a[0]:int;
    label B_md:
    if (t & 32) goto B_nd;
    fwritex(select_if(select_if(7944, 16997, t = fa & 32),
                      select_if(9492, 18112, t),
                      ia != ia),
            3,
            a);
    label B_nd:
    if ((ea & 73728) != 8192) goto B_od;
    if (aa <= v) goto B_od;
    memset(f + 624, 32, select_if(t = aa - v, 256, w = t < 256));
    if (w) goto B_pd;
    loop L_qd {
      if (a[0]:ubyte & 32) goto B_rd;
      fwritex(f + 624, 256, a);
      label B_rd:
      t = t + -256;
      if (t > 255) continue L_qd;
    }
    label B_pd:
    if (a[0]:ubyte & 32) goto B_od;
    fwritex(f + 624, t, a);
    label B_od:
    t = select_if(v, aa, v > aa);
    continue L_d;
    label B_hd:
    ia = frexp(ia, f + 108);
    ia = ia + ia;
    if (ia == 0.0) goto B_ud;
    f[27]:int = (t = f[27]:int) + -1;
    ma = fa | 32;
    if (ma != 97) goto B_td;
    goto B_f;
    label B_ud:
    ma = fa | 32;
    if (ma == 97) goto B_f;
    ba = select_if(6, y, y < 0);
    u = f[27]:int;
    goto B_sd;
    label B_td:
    f[27]:int = (u = t + -29);
    ba = select_if(6, y, y < 0);
    ia = ia * 268435456.0;
    label B_sd:
    x = f + 112 + (oa = select_if(0, 72, na = u < 0) << 2);
    v = x;
    loop L_vd {
      if (eqz(ia < 4294967296.0 & ia >= 0.0)) goto B_xd;
      t = i32_trunc_f64_u(ia);
      goto B_wd;
      label B_xd:
      t = 0;
      label B_wd:
      v[0]:int = t;
      v = v + 4;
      ia = (ia - f64_convert_i32_u(t)) * 1000000000.0;
      if (ia != 0.0) continue L_vd;
    }
    if (u >= 1) goto B_zd;
    t = v;
    w = x;
    goto B_yd;
    label B_zd:
    w = x;
    loop L_ae {
      u = select_if(u, 29, u < 29);
      t = v + -4;
      if (t < w) goto B_be;
      ha = i64_extend_i32_u(u);
      ga = 0L;
      loop L_ce {
        t[0]:int =
          (ga = (t[0]:uint << ha) + (ga & 4294967295L)) -
          (ga = ga / 1000000000L) * 1000000000L;
        t = t + -4;
        if (t >= w) continue L_ce;
      }
      t = i32_wrap_i64(ga);
      if (eqz(t)) goto B_be;
      w = w + -4;
      w[0]:int = t;
      label B_be:
      loop L_ee {
        t = v;
        if (t <= w) goto B_de;
        v = t + -4;
        if (eqz(v[0]:int)) continue L_ee;
      }
      label B_de:
      f[27]:int = (u = f[27]:int - u);
      v = t;
      if (u > 0) continue L_ae;
    }
    label B_yd:
    if (u > -1) goto B_fe;
    pa = (ba + 25) / 9 + 1;
    loop L_ge {
      v = 0 - u;
      y = select_if(v, 9, v < 9);
      if (w < t) goto B_ie;
      v = w[0]:int;
      goto B_he;
      label B_ie:
      da = 1000000000 >> y;
      ca = -1 << y ^ -1;
      u = 0;
      v = w;
      loop L_je {
        v[0]:int = ((z = v[0]:int) >> y) + u;
        u = (z & ca) * da;
        v = v + 4;
        if (v < t) continue L_je;
      }
      v = w[0]:int;
      if (eqz(u)) goto B_he;
      t[0]:int = u;
      t = t + 4;
      label B_he:
      f[27]:int = (u = f[27]:int + y);
      v = select_if(x, w = w + (eqz(v) << 2), ma == 102);
      t = select_if(v + (pa << 2), t, t - v >> 2 > pa);
      if (u < 0) continue L_ge;
    }
    label B_fe:
    z = 0;
    if (w >= t) goto B_ke;
    z = (x - w >> 2) * 9;
    u = w[0]:int;
    if (u < 10) goto B_ke;
    v = 10;
    loop L_le {
      z = z + 1;
      if (u >= (v = v * 10)) continue L_le;
    }
    label B_ke:
    v = ba - select_if(0, z, ma == 102) - (ba != 0 & (ca = ma == 103));
    if (v >= (t - x >> 2) * 9 + -9) goto B_me;
    u = v + 9216;
    y = u / 9;
    var qa:int = y << 2;
    da = qa + f + 112 + (na = select_if(1, 73, na) << 2) + -4096;
    v = 10;
    y = u - y * 9;
    if (y > 7) goto B_ne;
    pa = 8 - y;
    u = pa & 7;
    v = 10;
    if (y + -1 < 7) goto B_oe;
    y = pa & -8;
    v = 10;
    loop L_pe {
      v = v * 100000000;
      y = y + -8;
      if (y) continue L_pe;
    }
    label B_oe:
    if (eqz(u)) goto B_ne;
    loop L_qe {
      v = v * 10;
      u = u + -1;
      if (u) continue L_qe;
    }
    label B_ne:
    pa = da + 4;
    u = da[0]:int;
    y = u - (ma = u / v) * v;
    if (y) goto B_se;
    if (pa == t) goto B_re;
    label B_se:
    if (ma & 1) goto B_ue;
    ia = 9007199254740992.0;
    if (v != 1000000000) goto B_te;
    if (da <= w) goto B_te;
    if (eqz((da + -4)[0]:ubyte & 1)) goto B_te;
    label B_ue:
    ia = 9007199254740994.0;
    label B_te:
    ra = 
      select_if(
        0.5,
        select_if(select_if(1.0, 1.5, pa == t), 1.5, y == (pa = v >> 1)),
        y < pa);
    if (ka) goto B_ve;
    if (la[0] != 45) goto B_ve;
    ra = -(ra);
    ia = -(ia);
    label B_ve:
    da[0]:int = (u = u - y);
    if (ia + ra == ia) goto B_re;
    da[0]:int = (v = u + v);
    if (v < 1000000000) goto B_we;
    v = i + na + qa;
    loop L_xe {
      (v + 4)[0]:int = 0;
      if (v >= w) goto B_ye;
      w = w + -4;
      w[0]:int = 0;
      label B_ye:
      v[0]:int = (u = v[0]:int + 1);
      v = v + -4;
      if (u > 999999999) continue L_xe;
    }
    da = v + 4;
    label B_we:
    z = (x - w >> 2) * 9;
    u = w[0]:int;
    if (u < 10) goto B_re;
    v = 10;
    loop L_ze {
      z = z + 1;
      if (u >= (v = v * 10)) continue L_ze;
    }
    label B_re:
    v = da + 4;
    t = select_if(v, t, t > v);
    label B_me:
    v = h + t - oa;
    loop L_bf {
      u = v;
      da = t;
      y = da <= w;
      if (y) goto B_af;
      v = u + -4;
      t = da + -4;
      if (eqz(t[0]:int)) continue L_bf;
    }
    label B_af:
    if (ca) goto B_df;
    pa = ea & 8;
    goto B_cf;
    label B_df:
    ba = 
      select_if(z ^ -1, -1, v = (t = select_if(ba, 1, ba)) > z & z > -5) +
      t;
    fa = select_if(-1, -2, v) + fa;
    pa = ea & 8;
    if (pa) goto B_cf;
    t = -9;
    if (y) goto B_ef;
    y = (da + -4)[0]:int;
    if (eqz(y)) goto B_ef;
    t = 0;
    if (y % 10) goto B_ef;
    v = 10;
    t = 0;
    loop L_ff {
      t = t + -1;
      if (eqz(y % (v = v * 10))) continue L_ff;
    }
    label B_ef:
    v = (u >> 2) * 9 + -9;
    if ((fa & -33) != 70) goto B_gf;
    pa = 0;
    ba = select_if(ba, t = select_if(t = v + t, 0, t > 0), ba < t);
    goto B_cf;
    label B_gf:
    pa = 0;
    ba = select_if(ba, t = select_if(t = v + z + t, 0, t > 0), ba < t);
    label B_cf:
    if (ba > select_if(2147483645, 2147483646, ka = ba | pa)) goto B_c;
    ma = ba + (ka != 0) + 1;
    na = (fa & -33) != 70;
    if (na) goto B_if;
    if (z > (ma ^ 2147483647)) goto B_c;
    t = select_if(z, 0, z > 0);
    goto B_hf;
    label B_if:
    if (z) goto B_kf;
    u = g;
    v = g;
    goto B_jf;
    label B_kf:
    t = (z ^ (t = z >> 31)) - t;
    u = g;
    v = g;
    loop L_lf {
      v = v + -1;
      v[0]:byte = t - (y = t / 10) * 10 | 48;
      u = u + -1;
      ca = t > 9;
      t = y;
      if (ca) continue L_lf;
    }
    label B_jf:
    if (g - u > 1) goto B_mf;
    v = v + p - u;
    memset(v, 48, o + u);
    label B_mf:
    oa = v + -2;
    oa[0] = fa;
    (v + -1)[0]:byte = select_if(45, 43, z < 0);
    t = g - oa;
    if (t > (ma ^ 2147483647)) goto B_c;
    label B_hf:
    t = t + ma;
    if (t > (ja ^ 2147483647)) goto B_c;
    ca = t + ja;
    ea = ea & 73728;
    if (ea) goto B_nf;
    if (aa <= ca) goto B_nf;
    memset(f + 624, 32, select_if(t = aa - ca, 256, v = t < 256));
    if (v) goto B_of;
    loop L_pf {
      if (a[0]:ubyte & 32) goto B_qf;
      fwritex(f + 624, 256, a);
      label B_qf:
      t = t + -256;
      if (t > 255) continue L_pf;
    }
    label B_of:
    if (a[0]:ubyte & 32) goto B_nf;
    fwritex(f + 624, t, a);
    label B_nf:
    if (a[0]:ubyte & 32) goto B_rf;
    fwritex(la, ja, a);
    label B_rf:
    if (ea != 65536) goto B_sf;
    if (aa <= ca) goto B_sf;
    memset(f + 624, 48, select_if(t = aa - ca, 256, v = t < 256));
    if (v) goto B_tf;
    loop L_uf {
      if (a[0]:ubyte & 32) goto B_vf;
      fwritex(f + 624, 256, a);
      label B_vf:
      t = t + -256;
      if (t > 255) continue L_uf;
    }
    label B_tf:
    if (a[0]:ubyte & 32) goto B_sf;
    fwritex(f + 624, t, a);
    label B_sf:
    if (na) goto B_h;
    z = select_if(x, w, w > x);
    y = z;
    loop L_wf {
      t = y[0];
      if (eqz(t)) goto B_ag;
      v = 8;
      loop L_bg {
        (f + 80 + v)[0]:byte = t - (w = t / 10) * 10 | 48;
        v = v + -1;
        u = t > 9;
        t = w;
        if (u) continue L_bg;
      }
      w = v + 1;
      t = w + f + 80;
      if (y == z) goto B_cg;
      if (v + 2 < 2) goto B_xf;
      goto B_yf;
      label B_cg:
      if (v != 8) goto B_xf;
      goto B_zf;
      label B_ag:
      w = 9;
      if (y != z) goto B_yf;
      label B_zf:
      f[88]:byte = 48;
      t = m;
      goto B_xf;
      label B_yf:
      t = select_if(f + 80, t = (v = w + f + 80) + -1, f + 80 < t);
      memset(t, 48, v - t);
      label B_xf:
      if (a[0]:ubyte & 32) goto B_dg;
      fwritex(t, n - t, a);
      label B_dg:
      y = y + 4;
      if (y <= x) continue L_wf;
    }
    if (eqz(ka)) goto B_eg;
    if (a[0]:ubyte & 32) goto B_eg;
    fwritex(26312, 1, a);
    label B_eg:
    if (y < da) goto B_gg;
    t = ba;
    goto B_fg;
    label B_gg:
    if (ba >= 1) goto B_hg;
    t = ba;
    goto B_fg;
    label B_hg:
    loop L_ig {
      t = y[0];
      if (t) goto B_lg;
      v = n;
      w = n;
      goto B_kg;
      label B_lg:
      w = n;
      v = n;
      loop L_mg {
        v = v + -1;
        v[0]:byte = t - (u = t / 10) * 10 | 48;
        w = w + -1;
        z = t > 9;
        t = u;
        if (z) continue L_mg;
      }
      if (v <= f + 80) goto B_jg;
      label B_kg:
      v = v + f + 80 - w;
      memset(v, 48, w - f + 80);
      label B_jg:
      if (a[0]:ubyte & 32) goto B_ng;
      fwritex(v, select_if(ba, 9, ba < 9), a);
      label B_ng:
      t = ba + -9;
      y = y + 4;
      if (y >= da) goto B_fg;
      v = ba > 9;
      ba = t;
      if (v) continue L_ig;
    }
    label B_fg:
    pad(a, 48, t + 9, 9, 0);
    goto B_g;
    label B_k:
    66200[0]:int = 28;
    goto B_b;
    label B_j:
    ca = 0;
    x = 1521;
    t = q;
    da = ea;
    z = y;
    label B_i:
    ba = select_if(z, y = t - u, z > y);
    if (ba > (ca ^ 2147483647)) goto B_c;
    t = select_if(aa, w = ca + ba, aa > w);
    if (t > v) goto B_c;
    da = da & 73728;
    if (da) goto B_og;
    if (w >= aa) goto B_og;
    memset(f + 112, 32, select_if(v = t - w, 256, ea = v < 256));
    if (ea) goto B_pg;
    loop L_qg {
      if (a[0]:ubyte & 32) goto B_rg;
      fwritex(f + 112, 256, a);
      label B_rg:
      v = v + -256;
      if (v > 255) continue L_qg;
    }
    label B_pg:
    if (a[0]:ubyte & 32) goto B_og;
    fwritex(f + 112, v, a);
    label B_og:
    if (a[0]:ubyte & 32) goto B_sg;
    fwritex(x, ca, a);
    label B_sg:
    if (da != 65536) goto B_tg;
    if (w >= aa) goto B_tg;
    memset(f + 112, 48, select_if(v = t - w, 256, ca = v < 256));
    if (ca) goto B_ug;
    loop L_vg {
      if (a[0]:ubyte & 32) goto B_wg;
      fwritex(f + 112, 256, a);
      label B_wg:
      v = v + -256;
      if (v > 255) continue L_vg;
    }
    label B_ug:
    if (a[0]:ubyte & 32) goto B_tg;
    fwritex(f + 112, v, a);
    label B_tg:
    if (y >= z) goto B_xg;
    memset(f + 112, 48, select_if(v = ba - y, 256, z = v < 256));
    if (z) goto B_yg;
    loop L_zg {
      if (a[0]:ubyte & 32) goto B_ah;
      fwritex(f + 112, 256, a);
      label B_ah:
      v = v + -256;
      if (v > 255) continue L_zg;
    }
    label B_yg:
    if (a[0]:ubyte & 32) goto B_xg;
    fwritex(f + 112, v, a);
    label B_xg:
    if (a[0]:ubyte & 32) goto B_bh;
    fwritex(u, y, a);
    label B_bh:
    if (da != 8192) continue L_d;
    if (w >= aa) continue L_d;
    memset(f + 112, 32, select_if(v = t - w, 256, w = v < 256));
    if (w) goto B_ch;
    loop L_dh {
      if (a[0]:ubyte & 32) goto B_eh;
      fwritex(f + 112, 256, a);
      label B_eh:
      v = v + -256;
      if (v > 255) continue L_dh;
    }
    label B_ch:
    if (a[0]:ubyte & 32) continue L_d;
    fwritex(f + 112, v, a);
    continue L_d;
    label B_h:
    if (ba < 0) goto B_fh;
    da = select_if(da, w + 4, da > w);
    y = w;
    loop L_gh {
      t = y[0];
      if (eqz(t)) goto B_ih;
      v = 0;
      loop L_jh {
        (f + 80 + v + 8)[0]:byte = t - (u = t / 10) * 10 | 48;
        v = v + -1;
        z = t > 9;
        t = u;
        if (z) continue L_jh;
      }
      if (eqz(v)) goto B_ih;
      t = f + 80 + v + 9;
      goto B_hh;
      label B_ih:
      f[88]:byte = 48;
      t = m;
      label B_hh:
      if (y == w) goto B_lh;
      if (t <= f + 80) goto B_kh;
      memset(f + 80, 48, t - f + 80);
      t = f + 80;
      goto B_kh;
      label B_lh:
      if (a[0]:ubyte & 32) goto B_mh;
      fwritex(t, 1, a);
      label B_mh:
      t = t + 1;
      if (pa) goto B_nh;
      if (ba < 1) goto B_kh;
      label B_nh:
      if (a[0]:ubyte & 32) goto B_kh;
      fwritex(26312, 1, a);
      label B_kh:
      v = n - t;
      if (a[0]:ubyte & 32) goto B_oh;
      fwritex(t, select_if(ba, v, ba < v), a);
      label B_oh:
      ba = ba - v;
      y = y + 4;
      if (y >= da) goto B_fh;
      if (ba > -1) continue L_gh;
    }
    label B_fh:
    pad(a, 48, ba + 18, 18, 0);
    if (a[0]:ubyte & 32) goto B_g;
    fwritex(oa, g - oa, a);
    label B_g:
    if (ea != 8192) goto B_e;
    if (aa <= ca) goto B_e;
    memset(f + 624, 32, select_if(t = aa - ca, 256, v = t < 256));
    if (v) goto B_ph;
    loop L_qh {
      if (a[0]:ubyte & 32) goto B_rh;
      fwritex(f + 624, 256, a);
      label B_rh:
      t = t + -256;
      if (t > 255) continue L_qh;
    }
    label B_ph:
    if (a[0]:ubyte & 32) goto B_e;
    fwritex(f + 624, t, a);
    goto B_e;
    label B_f:
    x = la + ((fa << 26) >> 31 & 9);
    if (y > 11) goto B_sh;
    t = 12 - y;
    v = t & 7;
    if (v) goto B_uh;
    ra = 16.0;
    goto B_th;
    label B_uh:
    t = y + -12;
    ra = 16.0;
    loop L_vh {
      t = t + 1;
      ra = ra * 16.0;
      v = v + -1;
      if (v) continue L_vh;
    }
    t = 0 - t;
    label B_th:
    if (y + -5 < 7) goto B_wh;
    loop L_xh {
      ra = ra * 16.0 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0 * 16.0;
      t = t + -8;
      if (t) continue L_xh;
    }
    label B_wh:
    if (x[0] != 45) goto B_yh;
    ia = -(ra + -(ia) - ra);
    goto B_sh;
    label B_yh:
    ia = ia + ra - ra;
    label B_sh:
    z = f[27]:int;
    if (eqz(z)) goto B_ai;
    t = (z ^ (t = z >> 31)) - t;
    v = 0;
    loop L_bi {
      (f + 68 + v + 11)[0]:byte = t - (w = t / 10) * 10 | 48;
      v = v + -1;
      u = t > 9;
      t = w;
      if (u) continue L_bi;
    }
    if (eqz(v)) goto B_ai;
    t = f + 68 + v + 12;
    goto B_zh;
    label B_ai:
    f[79]:byte = 48;
    t = l;
    label B_zh:
    ba = ja | 2;
    w = fa & 32;
    da = t + -2;
    da[0]:byte = fa + 15;
    (t + -1)[0]:byte = select_if(45, 43, z < 0);
    u = ea & 8;
    v = f + 80;
    loop L_ci {
      t = v;
      if (eqz(abs(ia) < 2147483648.0)) goto B_ei;
      v = i32_trunc_f64_s(ia);
      goto B_di;
      label B_ei:
      v = -2147483648;
      label B_di:
      t[0]:byte = (v + 63312)[0]:ubyte | w;
      ia = (ia - f64_convert_i32_s(v)) * 16.0;
      v = t + 1;
      if (v - f + 80 != 1) goto B_fi;
      if (u) goto B_gi;
      if (y > 0) goto B_gi;
      if (ia == 0.0) goto B_fi;
      label B_gi:
      t[1]:byte = 46;
      v = t + 2;
      label B_fi:
      if (ia != 0.0) continue L_ci;
    }
    if (2147483645 - (t = (z = g - da) + ba) < y) goto B_c;
    u = select_if(select_if(y + 2, w = v - f + 80, k + v < y), w, y);
    ca = u + t;
    v = ea & 73728;
    if (v) goto B_hi;
    if (aa <= ca) goto B_hi;
    memset(f + 624, 32, select_if(t = aa - ca, 256, y = t < 256));
    if (y) goto B_ii;
    loop L_ji {
      if (a[0]:ubyte & 32) goto B_ki;
      fwritex(f + 624, 256, a);
      label B_ki:
      t = t + -256;
      if (t > 255) continue L_ji;
    }
    label B_ii:
    if (a[0]:ubyte & 32) goto B_hi;
    fwritex(f + 624, t, a);
    label B_hi:
    if (a[0]:ubyte & 32) goto B_li;
    fwritex(x, ba, a);
    label B_li:
    if (v != 65536) goto B_mi;
    if (aa <= ca) goto B_mi;
    memset(f + 624, 48, select_if(t = aa - ca, 256, y = t < 256));
    if (y) goto B_ni;
    loop L_oi {
      if (a[0]:ubyte & 32) goto B_pi;
      fwritex(f + 624, 256, a);
      label B_pi:
      t = t + -256;
      if (t > 255) continue L_oi;
    }
    label B_ni:
    if (a[0]:ubyte & 32) goto B_mi;
    fwritex(f + 624, t, a);
    label B_mi:
    if (a[0]:ubyte & 32) goto B_qi;
    fwritex(f + 80, w, a);
    label B_qi:
    t = u - w;
    if (t < 1) goto B_ri;
    memset(f + 624, 48, select_if(t, 256, w = t < 256));
    if (w) goto B_si;
    loop L_ti {
      if (a[0]:ubyte & 32) goto B_ui;
      fwritex(f + 624, 256, a);
      label B_ui:
      t = t + -256;
      if (t > 255) continue L_ti;
    }
    label B_si:
    if (a[0]:ubyte & 32) goto B_ri;
    fwritex(f + 624, t, a);
    label B_ri:
    if (a[0]:ubyte & 32) goto B_vi;
    fwritex(da, z, a);
    label B_vi:
    if (v != 8192) goto B_e;
    if (aa <= ca) goto B_e;
    memset(f + 624, 32, select_if(t = aa - ca, 256, v = t < 256));
    if (v) goto B_wi;
    loop L_xi {
      if (a[0]:ubyte & 32) goto B_yi;
      fwritex(f + 624, 256, a);
      label B_yi:
      t = t + -256;
      if (t > 255) continue L_xi;
    }
    label B_wi:
    if (a[0]:ubyte & 32) goto B_e;
    fwritex(f + 624, t, a);
    label B_e:
    t = select_if(ca, aa, ca > aa);
    if (t >= 0) continue L_d;
  }
  label B_c:
  66200[0]:int = 61;
  label B_b:
  s = -1;
  label B_a:
  stack_pointer = f + 880;
  return s;
}

function pop_arg(a:int, b:int, c:int_ptr) {
  br_table[B_b, B_s, B_r, B_o, B_q, B_p, B_n, B_m, B_l, B_k, B_j, B_i, B_h, B_g, B_f, B_e, B_d, B_c, ..B_a](
    b + -9)
  label B_s:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_r:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_q:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_p:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_o:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_n:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:short;
  return ;
  label B_m:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:ushort;
  return ;
  label B_l:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:byte;
  return ;
  label B_k:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:ubyte;
  return ;
  label B_j:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_i:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_h:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_g:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:long = b[0]:long;
  return ;
  label B_f:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:int;
  return ;
  label B_e:
  c[0] = (b = c[0]) + 4;
  a[0]:long = b[0]:uint;
  return ;
  label B_d:
  c[0] = (b = c[0] + 7 & -8) + 8;
  a[0]:double = b[0]:double;
  return ;
  label B_c:
  long_double_not_supported();
  unreachable;
  label B_b:
  c[0] = (b = c[0]) + 4;
  a[0]:int = b[0]:int;
  label B_a:
}

function pad(a:ubyte_ptr, b:int, c:int, d:int, e:int) {
  var f:int = stack_pointer - 256;
  stack_pointer = f;
  if (c <= d) goto B_a;
  if (e & 73728) goto B_a;
  c = memset(f, b, select_if(d = c - d, 256, e = d < 256));
  if (e) goto B_b;
  loop L_c {
    if (a[0] & 32) goto B_d;
    fwritex(c, 256, a);
    label B_d:
    d = d + -256;
    if (d > 255) continue L_c;
  }
  label B_b:
  if (a[0] & 32) goto B_a;
  fwritex(c, d, a);
  label B_a:
  stack_pointer = f + 256;
}

function long_double_not_supported() {
  fputs(32016, 65584);
  abort();
  unreachable;
}

export function vsnprintf(a:int, b:int, c:int, d:int):int {
  var f:byte_ptr;
  var g:int;
  var e:int_ptr = stack_pointer - 128;
  stack_pointer = e;
  e[28] = (f = select_if(a, e + 126, b));
  a = -1;
  e[29] = select_if(0, g = b + -1, g > b);
  e = memset(e, 0, 112);
  e[16] = -1;
  e[8] = 203;
  e[17] = e + 112;
  e[10] = e + 127;
  if (b > -1) goto B_b;
  0[16550]:int = 61;
  goto B_a;
  label B_b:
  f[0] = 0;
  a = vfprintf(e, c, d);
  label B_a:
  stack_pointer = e + 128;
  return a;
}

function sn_write(a:int_ptr, b:int, c:int):int {
  var f:int;
  var g:byte_ptr;
  var d:{ a:int, b:int }
  var e:int;
  d = a[17];
  e = d.b;
  g = select_if(e, g = a[5] - (f = a[6]), e < g);
  if (eqz(g)) goto B_a;
  memcpy(d.a, f, g);
  d.a = d.a + g;
  d.b = (e = d.b - g);
  label B_a:
  g = d.a;
  e = select_if(e, c, e < c);
  if (eqz(e)) goto B_b;
  memcpy(g, b, e);
  d.a = (g = d.a + e);
  d.b = d.b - e;
  label B_b:
  g[0] = 0;
  a[6] = (d = a[10]);
  a[5] = d;
  return c;
}

export function qsort_r(a:int, b:int, c:int, d:int, e:int) {
  var l:int;
  var f:int = stack_pointer - 208;
  stack_pointer = f;
  f[1]:long = 1L;
  var g:int = c * b;
  if (eqz(g)) goto B_a;
  f[4]:int = c;
  f[5]:int = c;
  var h:int = 0 - c;
  var i:int_ptr = f + 16 | 8;
  var j:int = c;
  var k:int = c;
  loop L_b {
    i[0] = (j = k + c + (k = j));
    i = i + 4;
    k = k;
    if (j < g) continue L_b;
  }
  l = a + g + h;
  if (l > a) goto B_d;
  k = 0;
  j = 1;
  i = 1;
  goto B_c;
  label B_d:
  g = c * (b + -1);
  k = 0;
  i = 1;
  j = 1;
  loop L_e {
    if ((j & 3) != 3) goto B_g;
    sift(a, c, d, e, i, f + 16);
    f[3]:int = (b = k >> 2);
    j = k << 30 | j >> 2;
    i = i + 2;
    k = b;
    goto B_f;
    label B_g:
    if ((f + 16)[b = i + -1]:int < g) goto B_i;
    trinkle(a, c, d, e, f + 8, i, 0, f + 16);
    goto B_h;
    label B_i:
    sift(a, c, d, e, i, f + 16);
    label B_h:
    if (i != 1) goto B_j;
    f[3]:int = (k = k << 1 | j >> 31);
    j = j << 1;
    i = 0;
    goto B_f;
    label B_j:
    f[3]:int =
      (k = 
         (f + 8 | (k = b < 32) << 2)[0]:int << (i = select_if(b, i + -33, k)) |
         (j = select_if(j, 0, k)) >> 32 - i);
    j = j << i;
    i = 1;
    label B_f:
    f[2]:int = (j = j | 1);
    g = g - c;
    a = a + c;
    if (a < l) continue L_e;
  }
  label B_c:
  trinkle(a, c, d, e, f + 8, i, 0, f + 16);
  if (i != 1) goto B_k;
  if (j != 1) goto B_k;
  if (eqz(k)) goto B_a;
  label B_k:
  a = a + h;
  loop L_l {
    if (i > 1) goto B_n;
    g = ctz(j + -1);
    if (g) goto B_r;
    g = ctz(k);
    if (g) goto B_q;
    b = 0;
    l = k;
    g = 0;
    goto B_o;
    label B_r:
    b = 32;
    if (g >= 32) goto B_p;
    b = g;
    l = k;
    goto B_o;
    label B_q:
    b = g + 32;
    label B_p:
    g = b + -32;
    l = 0;
    j = k;
    label B_o:
    f[3]:int = (k = l >> g);
    f[2]:int = (j = l << 32 - g | j >> g);
    i = b + i;
    goto B_m;
    label B_n:
    f[3]:int = (k = k << 2 | (g = j >> 30)) >> 1;
    f[2]:int = (j = (g << 31 | (j << 1 & 2147483646)) ^ 3);
    g = i + -1;
    trinkle(a - (f + 16)[i = i + -2]:int, c, d, e, f + 8, g, 1, f + 16);
    f[3]:int = k;
    f[2]:int = (j = j << 1 | 1);
    trinkle(a, c, d, e, f + 8, i, 1, f + 16);
    label B_m:
    a = a + h;
    if (i != 1) continue L_l;
    if (j != 1) continue L_l;
    if (k) continue L_l;
  }
  label B_a:
  stack_pointer = f + 208;
}

function sift(a:int, b:int, c:int, d:int_ptr, e:int_ptr, f:int) {
  var l:int;
  var m:int;
  var n:int_ptr;
  var g:int_ptr = stack_pointer - 496;
  stack_pointer = g;
  g[0] = a;
  if (e <= 1) goto B_a;
  var h:int = 0 - b;
  var i:int_ptr = g | 4;
  var j:int = 1;
  var k:int = a;
  loop L_c {
    if (
      call_indirect(a, m = (k = k + h) - f[l = e + -2]:int, d, c) < 0) goto B_d;
    if (call_indirect(a, k, d, c) > -1) goto B_b;
    label B_d:
    i[0] = (k = select_if(m, k, n = call_indirect(m, k, d, c) > -1));
    i = i + 4;
    j = j + 1;
    e = select_if(e + -1, l, n);
    if (e > 1) continue L_c;
  }
  label B_b:
  if (j < 2) goto B_a;
  n = g + (j << 2);
  n[0] = g + 240;
  if (eqz(b)) goto B_a;
  l = j & -2;
  a = j & 1;
  loop L_e {
    memcpy(n[0], m = g[0], k = select_if(b, 256, b < 256));
    i = 0;
    if (j == 1) goto B_f;
    i = 0;
    e = g;
    loop L_g {
      e[0] = memcpy(m, c = (d = e + 4)[0], k) + k;
      d[0] = memcpy(c, m = (e = e + 8)[0], k) + k;
      if (l != (i = i + 2)) continue L_g;
    }
    label B_f:
    if (eqz(a)) goto B_h;
    e = g + (i << 2);
    e[0] = memcpy(m, (e + 4)[0]:int, k) + k;
    label B_h:
    b = b - k;
    if (b) continue L_e;
  }
  label B_a:
  stack_pointer = g + 496;
}

function trinkle(a:int_ptr, b:int, c:int, d:int, e:{ a:int, b:int }, f:int, g:int, h:int) {
  var m:int;
  var n:int;
  var k:int;
  var o:int;
  var l:int_ptr;
  var p:int;
  var i:{ a:int, b:int } = stack_pointer - 496;
  stack_pointer = i;
  i.a = a;
  var j:int_ptr = e.b;
  e = e.a;
  if (e != 1) goto B_g;
  if (eqz(j)) goto B_f;
  label B_g:
  k = a - h[f]:int;
  if (call_indirect(k, a, d, c) < 1) goto B_f;
  l = 0 - b;
  if (g) goto B_h;
  if (f < 2) goto B_h;
  g = ((f << 2) + h + -8)[0]:int;
  m = a + l;
  if (call_indirect(m, k, d, c) > -1) goto B_e;
  if (call_indirect(m - g, k, d, c) > -1) goto B_e;
  label B_h:
  i.b = k;
  m = ctz(e + -1);
  if (eqz(m)) goto B_j;
  g = 32;
  if (m > 31) goto B_i;
  g = m;
  n = j;
  j = e;
  goto B_c;
  label B_j:
  g = ctz(j);
  if (eqz(g)) goto B_d;
  g = g + 32;
  label B_i:
  m = g + -32;
  n = 0;
  goto B_c;
  label B_f:
  if (g) goto B_a;
  label B_e:
  o = a;
  goto B_b;
  label B_d:
  g = 0;
  n = j;
  j = e;
  m = 0;
  label B_c:
  f = g + f;
  g = n >> m;
  n = n << 32 - m | j >> m;
  if (n != 1) goto B_m;
  if (eqz(g)) goto B_l;
  label B_m:
  j = i | 8;
  p = 2;
  loop L_o {
    o = k - (e = h + (f << 2)).a;
    if (call_indirect(o, a, d, c) >= 1) goto B_p;
    o = k;
    goto B_n;
    label B_p:
    if (f < 2) goto B_q;
    e = (e + -8)[0]:int;
    m = k + l;
    if (call_indirect(m, o, d, c) <= -1) goto B_r;
    o = k;
    goto B_n;
    label B_r:
    if (call_indirect(m - e, o, d, c) <= -1) goto B_q;
    o = k;
    goto B_n;
    label B_q:
    j[0] = o;
    e = ctz(n + -1);
    if (e) goto B_u;
    e = ctz(g);
    if (eqz(e)) goto B_v;
    k = e + 32;
    goto B_t;
    label B_v:
    k = 0;
    m = g;
    g = n;
    e = 0;
    goto B_s;
    label B_u:
    k = 32;
    if (e >= 32) goto B_t;
    k = e;
    m = g;
    g = n;
    goto B_s;
    label B_t:
    e = k + -32;
    m = 0;
    label B_s:
    n = g >> e;
    p = p + 1;
    j = j + 4;
    f = k + f;
    g = m >> e;
    k = o;
    n = n | m << 32 - e;
    if (n != 1) continue L_o;
    k = o;
    if (g) continue L_o;
  }
  label B_n:
  if (p < 2) goto B_b;
  goto B_k;
  label B_l:
  p = 2;
  o = k;
  label B_k:
  l = i + (p << 2);
  l[0] = i + 240;
  if (eqz(b)) goto B_b;
  var q:int = p & -2;
  p = p & 1;
  n = b;
  loop L_w {
    memcpy(l[0], k = i.a, e = select_if(n, 256, n < 256));
    a = i;
    g = q;
    loop L_x {
      a[0] = memcpy(k, m = (j = a + 4)[0], e) + e;
      j[0] = memcpy(m, k = (a = a + 8)[0], e) + e;
      g = g + -2;
      if (g) continue L_x;
    }
    if (eqz(p)) goto B_y;
    a[0] = memcpy(k, (a + 4)[0]:int, e) + e;
    label B_y:
    n = n - e;
    if (n) continue L_w;
  }
  label B_b:
  sift(o, b, c, d, f, h);
  label B_a:
  stack_pointer = i + 496;
}

export function qsort(a:int, b:int, c:int, d:int) {
  qsort_r(a, b, c, 204, d)
}

function wrapper_cmp(a:int, b:int, c:int):int {
  return call_indirect(a, b, c)
}

export function toread(a:int):int {
  var b:int;
  var c:int;
  a[15]:int = (b = a[15]:int) + -1 | b;
  if (a[5]:int == a[6]:int) goto B_a;
  call_indirect(a, 0, 0, a[8]:int);
  label B_a:
  a[6]:int = 0;
  a[2]:long = 0L;
  b = a[0]:int;
  if (eqz(b & 4)) goto B_b;
  a[0]:int = b | 32;
  return -1;
  label B_b:
  a[2]:int = (c = a[10]:int + a[11]:int);
  a[1]:int = c;
  return (b << 27) >> 31;
}

export function toread_needs_stdio_exit() {
  stdio_exit()
}

export function uflow(a:int_ptr):int {
  var b:ubyte_ptr = stack_pointer - 16;
  stack_pointer = b;
  var c:int = -1;
  if (toread(a)) goto B_a;
  if (call_indirect(a, b + 15, 1, a[7]) != 1) goto B_a;
  c = b[15];
  label B_a:
  stack_pointer = b + 16;
  return c;
}

export function shlim(a:int, b:long) {
  var c:int;
  a[11]:long = b;
  a[12]:long = i64_extend_i32_s(a[10]:int - (c = a[1]:int));
  var d:int = a[2]:int;
  if (eqz(b)) goto B_a;
  if (i64_extend_i32_s(d - c) <= b) goto B_a;
  d = c + i32_wrap_i64(b);
  label B_a:
  a[21]:int = d;
}

export function shgetc(a:int):int {
  var b:int;
  var c:int;
  var e:long;
  var d:long = 
    a[12]:long + i64_extend_i32_s((b = a[1]:int) - (c = a[10]:int));
  e = a[11]:long;
  if (eqz(e)) goto B_c;
  if (d >= e) goto B_b;
  label B_c:
  c = uflow(a);
  if (c > -1) goto B_a;
  b = a[1]:int;
  c = a[10]:int;
  label B_b:
  a[11]:long = -1L;
  a[21]:int = b;
  a[12]:long = d + i64_extend_i32_s(c - b);
  return -1;
  label B_a:
  d = d + 1L;
  b = a[1]:int;
  var f:int = a[2]:int;
  e = a[11]:long;
  if (e == 0L) goto B_d;
  e = e - d;
  if (e >= i64_extend_i32_s(f - b)) goto B_d;
  f = b + i32_wrap_i64(e);
  label B_d:
  a[21]:int = f;
  a[12]:long = d + i64_extend_i32_s((f = a[10]:int) - b);
  if (b > f) goto B_e;
  (b + -1)[0]:byte = c;
  label B_e:
  return c;
}

export function intscan(a:int, b:int, c:int, d:long):long {
  var f:ubyte_ptr;
  var k:int;
  var h:long;
  var i:long;
  var j:long;
  var l:long;
  var g:int;
  var e:long_ptr = stack_pointer - 16;
  stack_pointer = e;
  if (b > 36) goto B_f;
  if (b == 1) goto B_f;
  loop L_i {
    f = a[1]:int;
    if (f == a[21]:int) goto B_k;
    a[1]:int = f + 1;
    f = f[0];
    goto B_j;
    label B_k:
    f = shgetc(a);
    label B_j:
    if (f + -9 < 5) continue L_i;
    br_table[L_i, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_h, B_l, B_h, B_l, ..B_h](
      f + -32)
    label B_l:
  }
  g = select_if(-1, 0, f == 45);
  f = a[1]:int;
  if (f == a[21]:int) goto B_m;
  a[1]:int = f + 1;
  f = f[0];
  goto B_g;
  label B_m:
  f = shgetc(a);
  goto B_g;
  label B_h:
  g = 0;
  label B_g:
  if (b != 0 & b != 16) goto B_o;
  if (f != 48) goto B_o;
  f = a[1]:int;
  if (f == a[21]:int) goto B_q;
  a[1]:int = f + 1;
  f = f[0];
  goto B_p;
  label B_q:
  f = shgetc(a);
  label B_p:
  if ((f & -33) != 88) goto B_r;
  f = a[1]:int;
  if (f == a[21]:int) goto B_t;
  a[1]:int = f + 1;
  f = f[0];
  goto B_s;
  label B_t:
  f = shgetc(a);
  label B_s:
  b = 16;
  if ((f + 63329)[0]:ubyte < 16) goto B_d;
  d = 0L;
  if (a[11]:long < 0L) goto B_v;
  a[1]:int = (f = a[1]:int) + -1;
  if (eqz(c)) goto B_u;
  a[1]:int = f + -2;
  goto B_a;
  label B_v:
  if (c) goto B_a;
  label B_u:
  d = 0L;
  shlim(a, 0L);
  goto B_a;
  label B_r:
  if (b) goto B_n;
  b = 8;
  goto B_d;
  label B_o:
  b = select_if(b, 10, b);
  if (b > (f + 63329)[0]:ubyte) goto B_n;
  d = 0L;
  if (a[11]:long < 0L) goto B_w;
  a[1]:int = a[1]:int + -1;
  label B_w:
  shlim(a, 0L);
  0[16550]:int = 28;
  goto B_a;
  label B_n:
  if (b != 10) goto B_d;
  h = 0L;
  c = f + -48;
  if (c > 9) goto B_x;
  b = 0;
  loop L_y {
    b = b * 10;
    f = a[1]:int;
    if (f == a[21]:int) goto B_aa;
    a[1]:int = f + 1;
    f = f[0];
    goto B_z;
    label B_aa:
    f = shgetc(a);
    label B_z:
    b = b + c;
    c = f + -48;
    if (c > 9) goto B_ba;
    if (b < 429496729) continue L_y;
    label B_ba:
  }
  h = i64_extend_i32_u(b);
  label B_x:
  if (c > 9) goto B_e;
  i = h * 10L;
  j = i64_extend_i32_u(c);
  loop L_ca {
    f = a[1]:int;
    if (f == a[21]:int) goto B_ea;
    a[1]:int = f + 1;
    f = f[0];
    goto B_da;
    label B_ea:
    f = shgetc(a);
    label B_da:
    h = i + j;
    c = f + -48;
    if (c > 9) goto B_e;
    if (h >= 1844674407370955162L) goto B_e;
    i = h * 10L;
    if (i <= ((j = i64_extend_i32_u(c)) ^ -1L)) continue L_ca;
  }
  b = 10;
  goto B_c;
  label B_f:
  0[16550]:int = 28;
  d = 0L;
  goto B_a;
  label B_e:
  b = 10;
  if (c <= 9) goto B_c;
  goto B_b;
  label B_d:
  if (eqz(b & b + -1)) goto B_fa;
  h = 0L;
  if (b <= (k = (f + 63329)[0]:ubyte)) goto B_ga;
  c = 0;
  loop L_ha {
    c = c * b;
    f = a[1]:int;
    if (f == a[21]:int) goto B_ja;
    a[1]:int = f + 1;
    f = f[0];
    goto B_ia;
    label B_ja:
    f = shgetc(a);
    label B_ia:
    c = k + c;
    if (b <= (k = (f + 63329)[0]:ubyte)) goto B_ka;
    if (c < 119304647) continue L_ha;
    label B_ka:
  }
  h = i64_extend_i32_u(c);
  label B_ga:
  if (b <= k) goto B_c;
  i = i64_extend_i32_u(b);
  loop L_la {
    j = h * i;
    if (j > ((l = i64_extend_i32_u(k) & 255L) ^ -1L)) goto B_c;
    f = a[1]:int;
    if (f == a[21]:int) goto B_na;
    a[1]:int = f + 1;
    f = f[0];
    goto B_ma;
    label B_na:
    f = shgetc(a);
    label B_ma:
    h = j + l;
    if (b <= (k = (f + 63329)[0]:ubyte)) goto B_c;
    multi3(e, i, 0L, h, 0L);
    if (e[1] != 0L) goto B_c;
    continue L_la;
  }
  label B_fa:
  var m:int = ((b * 23 >> 5 & 7) + 63585)[0]:byte;
  h = 0L;
  if (b <= (c = (f + 63329)[0]:ubyte)) goto B_oa;
  k = 0;
  loop L_pa {
    k = k << m;
    f = a[1]:int;
    if (f == a[21]:int) goto B_ra;
    a[1]:int = f + 1;
    f = f[0];
    goto B_qa;
    label B_ra:
    f = shgetc(a);
    label B_qa:
    k = c | k;
    if (b <= (c = (f + 63329)[0]:ubyte)) goto B_sa;
    if (k < 134217728) continue L_pa;
    label B_sa:
  }
  h = i64_extend_i32_u(k);
  label B_oa:
  if (b <= c) goto B_c;
  l = -1L >> (j = i64_extend_i32_u(m));
  if (l < h) goto B_c;
  loop L_ta {
    h = h << j;
    i = i64_extend_i32_u(c) & 255L;
    f = a[1]:int;
    if (f == a[21]:int) goto B_va;
    a[1]:int = f + 1;
    f = f[0];
    goto B_ua;
    label B_va:
    f = shgetc(a);
    label B_ua:
    h = h | i;
    if (b <= (c = (f + 63329)[0]:ubyte)) goto B_c;
    if (h <= l) continue L_ta;
  }
  label B_c:
  if (b <= (f + 63329)[0]:ubyte) goto B_b;
  loop L_wa {
    f = a[1]:int;
    if (f == a[21]:int) goto B_ya;
    a[1]:int = f + 1;
    f = f[0];
    goto B_xa;
    label B_ya:
    f = shgetc(a);
    label B_xa:
    if (b > (f + 63329)[0]:ubyte) continue L_wa;
  }
  0[16550]:int = 68;
  g = select_if(g, 0, eqz(d & 1L));
  h = d;
  label B_b:
  if (a[11]:long < 0L) goto B_za;
  a[1]:int = a[1]:int + -1;
  label B_za:
  if (h < d) goto B_ab;
  if (i32_wrap_i64(d) & 1) goto B_bb;
  if (g) goto B_bb;
  0[16550]:int = 68;
  d = d + -1L;
  goto B_a;
  label B_bb:
  if (h <= d) goto B_ab;
  0[16550]:int = 68;
  goto B_a;
  label B_ab:
  d = (h ^ (d = i64_extend_i32_s(g))) - d;
  label B_a:
  stack_pointer = e + 16;
  return d;
}

export function strtoull(a:int, b:int_ptr, c:int):long {
  var d:int_ptr = stack_pointer - 112;
  stack_pointer = d;
  d[10] = a;
  d[1] = a;
  d[2] = -1;
  shlim(d, 0L);
  var e:long = intscan(d, c, 1, -1L);
  if (eqz(b)) goto B_a;
  b[0] = a + d[1] + d[24] - d[10];
  label B_a:
  stack_pointer = d + 112;
  return e;
}

export function strtoll(a:int, b:int_ptr, c:int):long {
  var d:int_ptr = stack_pointer - 112;
  stack_pointer = d;
  d[10] = a;
  d[1] = a;
  d[2] = -1;
  shlim(d, 0L);
  var e:long = intscan(d, c, 1, -9223372036854775808L);
  if (eqz(b)) goto B_a;
  b[0] = a + d[1] + d[24] - d[10];
  label B_a:
  stack_pointer = d + 112;
  return e;
}

export function strtoul(a:int, b:int_ptr, c:int):int {
  var d:int_ptr = stack_pointer - 112;
  stack_pointer = d;
  d[10] = a;
  d[1] = a;
  d[2] = -1;
  shlim(d, 0L);
  var e:long = intscan(d, c, 1, 4294967295L);
  if (eqz(b)) goto B_a;
  b[0] = a + d[1] + d[24] - d[10];
  label B_a:
  stack_pointer = d + 112;
  return i32_wrap_i64(e);
}

export function strtol(a:int, b:int_ptr, c:int):int {
  var d:int_ptr = stack_pointer - 112;
  stack_pointer = d;
  d[10] = a;
  d[1] = a;
  d[2] = -1;
  shlim(d, 0L);
  var e:long = intscan(d, c, 1, 2147483648L);
  if (eqz(b)) goto B_a;
  b[0] = a + d[1] + d[24] - d[10];
  label B_a:
  stack_pointer = d + 112;
  return i32_wrap_i64(e);
}

export function strtoimax(a:int, b:int_ptr, c:int):long {
  var d:int_ptr = stack_pointer - 112;
  stack_pointer = d;
  d[10] = a;
  d[1] = a;
  d[2] = -1;
  shlim(d, 0L);
  var e:long = intscan(d, c, 1, -9223372036854775808L);
  if (eqz(b)) goto B_a;
  b[0] = a + d[1] + d[24] - d[10];
  label B_a:
  stack_pointer = d + 112;
  return e;
}

export function strtoumax(a:int, b:int_ptr, c:int):long {
  var d:int_ptr = stack_pointer - 112;
  stack_pointer = d;
  d[10] = a;
  d[1] = a;
  d[2] = -1;
  shlim(d, 0L);
  var e:long = intscan(d, c, 1, -1L);
  if (eqz(b)) goto B_a;
  b[0] = a + d[1] + d[24] - d[10];
  label B_a:
  stack_pointer = d + 112;
  return e;
}

export function memchr(a:ubyte_ptr, b:int, c:int):int {
  var f:int;
  var e:int;
  var d:int = c != 0;
  if (eqz(a & 3)) goto B_d;
  if (eqz(c)) goto B_d;
  if (a[0] != (b & 255)) goto B_e;
  e = a;
  f = c;
  goto B_b;
  label B_e:
  f = c + -1;
  d = f != 0;
  e = a + 1;
  if (eqz(e & 3)) goto B_c;
  if (eqz(f)) goto B_c;
  if (e[0]:ubyte == (b & 255)) goto B_b;
  f = c + -2;
  d = f != 0;
  e = a + 2;
  if (eqz(e & 3)) goto B_c;
  if (eqz(f)) goto B_c;
  if (e[0]:ubyte == (b & 255)) goto B_b;
  f = c + -3;
  d = f != 0;
  e = a + 3;
  if (eqz(e & 3)) goto B_c;
  if (eqz(f)) goto B_c;
  if (e[0]:ubyte == (b & 255)) goto B_b;
  e = a + 4;
  f = c + -4;
  d = f != 0;
  goto B_c;
  label B_d:
  f = c;
  e = a;
  label B_c:
  if (eqz(d)) goto B_a;
  if (e[0]:ubyte == (b & 255)) goto B_f;
  if (f < 4) goto B_f;
  a = (b & 255) * 16843009;
  loop L_g {
    c = e[0]:int ^ a;
    if (((c ^ -1) & c + -16843009) & -2139062144) goto B_b;
    e = e + 4;
    f = f + -4;
    if (f > 3) continue L_g;
  }
  label B_f:
  if (eqz(f)) goto B_a;
  label B_b:
  c = b & 255;
  loop L_h {
    if (e[0]:ubyte != c) goto B_i;
    return e;
    label B_i:
    e = e + 1;
    f = f + -1;
    if (f) continue L_h;
  }
  label B_a:
  return 0;
}

export function memcmp(a:ubyte_ptr, b:ubyte_ptr, c:int):int {
  var f:int;
  var e:int;
  var d:int = 0;
  if (eqz(c)) goto B_a;
  loop L_c {
    e = a[0];
    if (e != (f = b[0])) goto B_b;
    b = b + 1;
    a = a + 1;
    c = c + -1;
    if (c) continue L_c;
    goto B_a;
  }
  label B_b:
  d = e - f;
  label B_a:
  return d;
}

export function memcpy(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:int):int {
  var e:int;
  var d:int;
  var f:int;
  var g:int;
  if (c > 32) goto B_c;
  if (eqz(b & 3)) goto B_b;
  if (eqz(c)) goto B_b;
  a.a = b[0]:ubyte;
  d = c + -1;
  e = a + 1;
  f = b + 1;
  if (eqz(f & 3)) goto B_a;
  if (eqz(d)) goto B_a;
  a.b = b[1]:ubyte;
  d = c + -2;
  e = a + 2;
  f = b + 2;
  if (eqz(f & 3)) goto B_a;
  if (eqz(d)) goto B_a;
  a.c = b[2]:ubyte;
  d = c + -3;
  e = a + 3;
  f = b + 3;
  if (eqz(f & 3)) goto B_a;
  if (eqz(d)) goto B_a;
  a.d = b[3]:ubyte;
  d = c + -4;
  e = a + 4;
  f = b + 4;
  goto B_a;
  label B_c:
  memory_copy(a, b, c);
  return a;
  label B_b:
  d = c;
  e = a;
  f = b;
  label B_a:
  c = e & 3;
  if (c) goto B_e;
  if (d >= 16) goto B_g;
  c = d;
  goto B_f;
  label B_g:
  c = d + -16;
  if (c & 16) goto B_h;
  e[0]:long@4 = f[0]:long@4;
  e[2]:long@4 = f[2]:long@4;
  e = e + 16;
  f = f + 16;
  d = c;
  label B_h:
  if (c < 16) goto B_f;
  c = d;
  loop L_i {
    e[0]:long@4 = f[0]:long@4;
    e[2]:long@4 = f[2]:long@4;
    e[4]:long@4 = f[4]:long@4;
    e[6]:long@4 = f[6]:long@4;
    e = e + 32;
    f = f + 32;
    c = c + -32;
    if (c > 15) continue L_i;
  }
  label B_f:
  if (c < 8) goto B_j;
  e[0]:long@4 = f[0]:long@4;
  f = f + 8;
  e = e + 8;
  label B_j:
  if (eqz(c & 4)) goto B_k;
  e[0]:int = f[0]:int;
  f = f + 4;
  e = e + 4;
  label B_k:
  if (eqz(c & 2)) goto B_l;
  e[0]:short@1 = f[0]:ushort@1;
  e = e + 2;
  f = f + 2;
  label B_l:
  if (eqz(c & 1)) goto B_d;
  e[0]:byte = f[0]:ubyte;
  return a;
  label B_e:
  if (d < 32) goto B_q;
  br_table[B_p, B_s, B_r, ..B_d](c + -1)
  label B_s:
  e[0]:short@1 = f[0]:int;
  e[2@4]:int = (f + 2)[0]:int@2;
  e[6@4]:long@4 = (f + 6)[0]:long@2;
  c = e + 18;
  b = f + 18;
  g = 14;
  f = (f + 14)[0]:int@2;
  d = 14;
  goto B_o;
  label B_r:
  e[0]:byte = f[0]:int;
  e[1@4]:int = (f + 1)[0]:int@1;
  e[5@4]:long@4 = (f + 5)[0]:long@1;
  c = e + 17;
  b = f + 17;
  g = 13;
  f = (f + 13)[0]:int@1;
  d = 15;
  goto B_o;
  label B_q:
  if (d >= 16) goto B_u;
  c = e;
  b = f;
  goto B_t;
  label B_u:
  e[0]:byte = f[0]:ubyte;
  e[1]:int@1 = f[1]:int@1;
  e[5]:long@1 = f[5]:long@1;
  e[13]:short@1 = f[13]:ushort@1;
  e[15]:byte = f[15]:ubyte;
  c = e + 16;
  b = f + 16;
  label B_t:
  if (d & 8) goto B_n;
  goto B_m;
  label B_p:
  e[0]:byte = (c = f[0]:int);
  e[2]:byte = c >> 16;
  e[1]:byte = c >> 8;
  e[3@4]:int = (f + 3)[0]:int@1;
  e[7@4]:long@4 = (f + 7)[0]:long@1;
  c = e + 19;
  b = f + 19;
  g = 15;
  f = (f + 15)[0]:int@1;
  d = 13;
  label B_o:
  (e + g)[0]:int = f;
  label B_n:
  c[0]:long@1 = b[0]:long@1;
  c = c + 8;
  b = b + 8;
  label B_m:
  if (eqz(d & 4)) goto B_v;
  c[0]:int@1 = b[0]:int@1;
  c = c + 4;
  b = b + 4;
  label B_v:
  if (eqz(d & 2)) goto B_w;
  c[0]:short@1 = b[0]:ushort@1;
  c = c + 2;
  b = b + 2;
  label B_w:
  if (eqz(d & 1)) goto B_d;
  c[0]:byte = b[0]:ubyte;
  label B_d:
  return a;
}

export function memmove(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:ubyte_ptr):int {
  var d:int;
  var f:int;
  var g:int;
  if (c >= 33) goto B_c;
  if (a == b) goto B_a;
  if (b - (d = a + c) > 0 - (c << 1)) goto B_b;
  label B_c:
  memory_copy(a, b, c);
  goto B_a;
  label B_b:
  var e:int = (b ^ a) & 3;
  if (a >= b) goto B_f;
  if (eqz(e)) goto B_g;
  f = c;
  d = a;
  goto B_d;
  label B_g:
  if (a & 3) goto B_h;
  f = c;
  d = a;
  goto B_e;
  label B_h:
  if (eqz(c)) goto B_a;
  a.a = b[0]:ubyte;
  f = c + -1;
  d = a + 1;
  if (d & 3) goto B_i;
  b = b + 1;
  goto B_e;
  label B_i:
  if (eqz(f)) goto B_a;
  a.b = b[1]:ubyte;
  f = c + -2;
  d = a + 2;
  if (d & 3) goto B_j;
  b = b + 2;
  goto B_e;
  label B_j:
  if (eqz(f)) goto B_a;
  a.c = b[2]:ubyte;
  f = c + -3;
  d = a + 3;
  if (d & 3) goto B_k;
  b = b + 3;
  goto B_e;
  label B_k:
  if (eqz(f)) goto B_a;
  a.d = b[3]:ubyte;
  d = a + 4;
  b = b + 4;
  f = c + -4;
  goto B_e;
  label B_f:
  if (e) goto B_l;
  if (eqz(d & 3)) goto B_m;
  if (eqz(c)) goto B_a;
  e = a + (d = c + -1);
  e[0]:byte = (b + d)[0]:ubyte;
  if (e & 3) goto B_n;
  c = d;
  goto B_m;
  label B_n:
  if (eqz(d)) goto B_a;
  e = a + (d = c + -2);
  e[0]:byte = (b + d)[0]:ubyte;
  if (e & 3) goto B_o;
  c = d;
  goto B_m;
  label B_o:
  if (eqz(d)) goto B_a;
  e = a + (d = c + -3);
  e[0]:byte = (b + d)[0]:ubyte;
  if (e & 3) goto B_p;
  c = d;
  goto B_m;
  label B_p:
  if (eqz(d)) goto B_a;
  (a + (c = c + -4))[0]:byte = (b + c)[0]:ubyte;
  label B_m:
  if (c < 4) goto B_l;
  g = c + -4;
  d = (g >> 2) + 1 & 3;
  if (eqz(d)) goto B_q;
  e = b + -4;
  f = a + -4;
  loop L_r {
    (f + c)[0]:int = (e + c)[0]:int;
    c = c + -4;
    d = d + -1;
    if (d) continue L_r;
  }
  label B_q:
  if (g < 12) goto B_l;
  f = b + -16;
  g = a + -16;
  loop L_s {
    d = g + c;
    (d + 12)[0]:int = ((e = f + c) + 12)[0]:int;
    (d + 8)[0]:int = (e + 8)[0]:int;
    (d + 4)[0]:int = (e + 4)[0]:int;
    d[0]:int = e[0]:int;
    c = c + -16;
    if (c > 3) continue L_s;
  }
  label B_l:
  if (eqz(c)) goto B_a;
  d = c;
  e = c & 3;
  if (eqz(e)) goto B_t;
  f = b + -1;
  g = a + -1;
  d = c;
  loop L_u {
    (g + d)[0]:byte = (f + d)[0]:ubyte;
    d = d + -1;
    e = e + -1;
    if (e) continue L_u;
  }
  label B_t:
  if (c < 4) goto B_a;
  e = b + -4;
  f = a + -4;
  loop L_v {
    b = f + d;
    (b + 3)[0]:byte = ((c = e + d) + 3)[0]:ubyte;
    (b + 2)[0]:byte = (c + 2)[0]:ubyte;
    (b + 1)[0]:byte = (c + 1)[0]:ubyte;
    b[0]:byte = c[0];
    d = d + -4;
    if (d) continue L_v;
    goto B_a;
  }
  label B_e:
  if (f < 4) goto B_d;
  e = f + -4;
  c = (e >> 2) + 1 & 7;
  if (eqz(c)) goto B_w;
  loop L_x {
    d[0]:int = b[0]:int;
    b = b + 4;
    d = d + 4;
    f = f + -4;
    c = c + -1;
    if (c) continue L_x;
  }
  label B_w:
  if (e < 28) goto B_d;
  loop L_y {
    d[0]:int = b[0]:int;
    d[1]:int = b[1]:int;
    d[2]:int = b[2]:int;
    d[3]:int = b[3]:int;
    d[4]:int = b[4]:int;
    d[5]:int = b[5]:int;
    d[6]:int = b[6]:int;
    d[7]:int = b[7]:int;
    b = b + 32;
    d = d + 32;
    f = f + -32;
    if (f > 3) continue L_y;
  }
  label B_d:
  if (eqz(f)) goto B_a;
  e = f & 7;
  if (e) goto B_aa;
  c = f;
  goto B_z;
  label B_aa:
  c = f;
  loop L_ba {
    d[0]:byte = b[0]:ubyte;
    c = c + -1;
    d = d + 1;
    b = b + 1;
    e = e + -1;
    if (e) continue L_ba;
  }
  label B_z:
  if (f < 8) goto B_a;
  loop L_ca {
    d[0]:byte = b[0]:ubyte;
    d[1]:byte = b[1]:ubyte;
    d[2]:byte = b[2]:ubyte;
    d[3]:byte = b[3]:ubyte;
    d[4]:byte = b[4]:ubyte;
    d[5]:byte = b[5]:ubyte;
    d[6]:byte = b[6]:ubyte;
    d[7]:byte = b[7]:ubyte;
    d = d + 8;
    b = b + 8;
    c = c + -8;
    if (c) continue L_ca;
  }
  label B_a:
  return a;
}

export function memset(a:{ a:byte, b:byte, c:byte, d:byte }, b:int, c:{ a:long, b:long, c:long, d:long }):int {
  var e:int;
  if (c < 33) goto B_a;
  memory_fill(a, b, c);
  return a;
  label B_a:
  if (eqz(c)) goto B_b;
  a.a = b;
  var d:int = c + a;
  (d + -1)[0]:byte = b;
  if (c < 3) goto B_b;
  a.c = b;
  a.b = b;
  (d + -3)[0]:byte = b;
  (d + -2)[0]:byte = b;
  if (c < 7) goto B_b;
  a.d = b;
  (d + -4)[0]:byte = b;
  if (c < 9) goto B_b;
  var f:{ a:int, b:int, c:int, d:int, e:int, f:int, g:int } = 
    a + (e = 0 - a & 3);
  f.a = (d = (b & 255) * 16843009);
  c = f + (b = c - e & -4);
  (c + -4)[0]:int = d;
  if (b < 9) goto B_b;
  f.c = d;
  f.b = d;
  (c + -8)[0]:int = d;
  (c + -12)[0]:int = d;
  if (b < 25) goto B_b;
  f.g = d;
  f.f = d;
  f.e = d;
  f.d = d;
  (c + -16)[0]:int = d;
  (c + -20)[0]:int = d;
  (c + -24)[0]:int = d;
  (c + -28)[0]:int = d;
  b = b - (c = (f & 4) | 24);
  if (b < 32) goto B_b;
  var g:long = i64_extend_i32_u(d) * 4294967297L;
  c = f + c;
  loop L_c {
    c.d = g;
    c.c = g;
    c.b = g;
    c.a = g;
    c = c + 32;
    b = b + -32;
    if (b > 31) continue L_c;
  }
  label B_b:
  return a;
}

export function strchr(a:ubyte_ptr, b:int):int {
  a = strchrnul(a, b);
  return select_if(a, 0, a[0] == (b & 255));
}

export function strchrnul(a:int, b:int):int {
  var d:ubyte_ptr;
  var c:int;
  c = b & 255;
  if (eqz(c)) goto B_d;
  if (eqz(a & 3)) goto B_b;
  d = a[0]:ubyte;
  if (d) goto B_e;
  return a;
  label B_e:
  if (d != (b & 255)) goto B_c;
  return a;
  label B_d:
  return a + strlen(a);
  label B_c:
  d = a + 1;
  if (d & 3) goto B_f;
  a = d;
  goto B_b;
  label B_f:
  var e:int = d[0];
  if (eqz(e)) goto B_a;
  if (e == (b & 255)) goto B_a;
  d = a + 2;
  if (d & 3) goto B_g;
  a = d;
  goto B_b;
  label B_g:
  e = d[0];
  if (eqz(e)) goto B_a;
  if (e == (b & 255)) goto B_a;
  d = a + 3;
  if (d & 3) goto B_h;
  a = d;
  goto B_b;
  label B_h:
  e = d[0];
  if (eqz(e)) goto B_a;
  if (e == (b & 255)) goto B_a;
  a = a + 4;
  label B_b:
  d = a[0]:int;
  if (((d ^ -1) & d + -16843009) & -2139062144) goto B_i;
  c = c * 16843009;
  loop L_j {
    d = d ^ c;
    if (((d ^ -1) & d + -16843009) & -2139062144) goto B_i;
    a = a + 4;
    d = a[0]:int;
    if (eqz(((d ^ -1) & d + -16843009) & -2139062144)) continue L_j;
  }
  label B_i:
  d = a + -1;
  loop L_k {
    d = d + 1;
    a = d[0];
    if (eqz(a)) goto B_a;
    if (a != (b & 255)) continue L_k;
  }
  label B_a:
  return d;
}

export function strdup(a:int):int {
  var c:int;
  var b:int = strlen(a) + 1;
  c = malloc(b);
  if (eqz(c)) goto B_a;
  memcpy(c, a, b);
  label B_a:
  return c;
}

export function strlen(a:ubyte_ptr):int {
  var b:ubyte_ptr = a;
  if (eqz(a & 3)) goto B_b;
  b = a;
  if (eqz(a[0])) goto B_a;
  b = a + 1;
  if (eqz(b & 3)) goto B_b;
  if (eqz(b[0])) goto B_a;
  b = a + 2;
  if (eqz(b & 3)) goto B_b;
  if (eqz(b[0])) goto B_a;
  b = a + 3;
  if (eqz(b & 3)) goto B_b;
  if (eqz(b[0])) goto B_a;
  b = a + 4;
  label B_b:
  b = b + -5;
  loop L_c {
    var c:int_ptr = b + 5;
    b = b + 4;
    c = c[0];
    if (eqz(((c ^ -1) & c + -16843009) & -2139062144)) continue L_c;
  }
  loop L_d {
    b = b + 1;
    if (b[0]) continue L_d;
  }
  label B_a:
  return b - a;
}

export function strncmp(a:ubyte_ptr, b:ubyte_ptr, c:int):int {
  var f:int;
  if (c) goto B_a;
  return 0;
  label B_a:
  var d:int = 0;
  var e:int = a[0];
  if (eqz(e)) goto B_b;
  a = a + 1;
  c = c + -1;
  loop L_c {
    f = b[0];
    if (f) goto B_d;
    d = e;
    goto B_b;
    label B_d:
    if (c) goto B_e;
    d = e;
    goto B_b;
    label B_e:
    if ((e & 255) == f) goto B_f;
    d = e;
    goto B_b;
    label B_f:
    c = c + -1;
    b = b + 1;
    e = a[0];
    a = a + 1;
    if (e) continue L_c;
  }
  label B_b:
  return (d & 255) - b[0];
}

export function strnlen(a:int, b:int):int {
  var c:int = memchr(a, 0, b);
  return select_if(c - a, b, c);
}

export function muloti4(a:{ a:long, b:long }, b:long, c:long, d:long, e:long, f:int_ptr) {
  var k:long;
  var g:long_ptr = stack_pointer - 48;
  stack_pointer = g;
  f[0] = 0;
  if ((b | (c ^ -9223372036854775808L)) != 0L) goto B_c;
  if (select_if(d > 1L, e != 0L, eqz(e))) goto B_b;
  goto B_a;
  label B_c:
  if ((d | (e ^ -9223372036854775808L)) != 0L) goto B_d;
  if (select_if(b > 1L, c != 0L, eqz(c))) goto B_b;
  goto B_a;
  label B_d:
  var h:long = c >> 63L;
  var i:long = h ^ b;
  var j:long = i - h;
  if (
    select_if(j < 2L,
              (k = (h ^ c) - h - i64_extend_i32_u(i < h)) < 0L,
              eqz(k))) goto B_a;
  i = e >> 63L;
  var l:long = i ^ d;
  var m:long = l - i;
  if (
    select_if(m < 2L,
              (l = (i ^ e) - i - i64_extend_i32_u(l < i)) < 0L,
              eqz(l))) goto B_a;
  h = h ^ i;
  if ((h | h) != 0L) goto B_e;
  udivti3(g + 16, -1L, 9223372036854775807L, m, l);
  if (select_if(j > g[2], k > (h = (g + 24)[0]:long), k == h)) goto B_b;
  goto B_a;
  label B_e:
  udivti3(g + 32, 0L, -9223372036854775808L, m, l);
  if (
    select_if(j <= g[4], k <= (h = (g + 40)[0]:long), k == h)) goto B_a;
  label B_b:
  f[0] = 1;
  label B_a:
  multi3(g, d, e, b, c);
  a.b = (g + 8)[0]:long;
  a.a = g[0];
  stack_pointer = g + 48;
}

export function multi3(a:{ a:long, b:long }, b:long, c:long, d:long, e:long) {
  var f:long;
  a.b =
    e * b + c * d + (c = d >> 32L) * (e = b >> 32L) +
    ((d = 
        ((f = (d = d & 4294967295L) * (b = b & 4294967295L)) >> 32L) + d * e) >>
     32L) +
    ((b = (d & 4294967295L) + c * b) >> 32L);
  a.a = b << 32L | (f & 4294967295L);
}

export function ashlti3(a:{ a:long, b:long }, b:long, c:long, d:int) {
  var e:long;
  if (eqz(d & 64)) goto B_b;
  c = b << i64_extend_i32_u(d + -64);
  b = 0L;
  goto B_a;
  label B_b:
  if (eqz(d)) goto B_a;
  c = b >> i64_extend_i32_u(64 - d) | c << (e = i64_extend_i32_u(d));
  b = b << e;
  label B_a:
  a.a = b;
  a.b = c;
}

export function udivmodti4(a:{ a:long, b:long }, b:long, c:long, d:long, e:long, f:{ a:long, b:long }) {
  var h:long;
  var i:long;
  var j:long;
  var k:long;
  var m:long;
  var o:int;
  var l:long;
  var g:long_ptr = stack_pointer - 16;
  stack_pointer = g;
  if (select_if(d <= b, e <= c, e == c)) goto B_c;
  if (f) goto B_d;
  h = 0L;
  goto B_b;
  label B_d:
  f.a = b;
  f.b = c;
  h = 0L;
  goto B_b;
  label B_c:
  h = 0L;
  if (e != 0L) goto B_e;
  if (c >= d) goto B_g;
  i = clz(d);
  if (eqz(i)) goto B_h;
  c = c << i | (b >> 1L) >> (i ^ -1L);
  b = b << i;
  d = d << i;
  label B_h:
  j = c - (e = c / (h = d >> 32L)) * h;
  k = b & 4294967295L;
  b = b >> 32L;
  l = d & 4294967295L;
  loop L_j {
    if (e > 4294967295L) goto B_k;
    if (e * l <= (j << 32L | b)) goto B_i;
    label B_k:
    e = e + -1L;
    j = j + h;
    if (j < 4294967296L) continue L_j;
  }
  label B_i:
  c = (b | c << 32L) - e * d;
  b = c - (j = c / h) * h;
  loop L_m {
    if (j > 4294967295L) goto B_n;
    if (j * l <= (b << 32L | k)) goto B_l;
    label B_n:
    j = j + -1L;
    b = b + h;
    if (b < 4294967296L) continue L_m;
  }
  label B_l:
  b = (c << 32L | k) - j * d >> i;
  l = 0L;
  goto B_f;
  label B_g:
  i = c - (l = c / d) * d;
  m = clz(d);
  if (eqz(m)) goto B_o;
  i = i << m | b >> 64L - m;
  b = b << m;
  d = d << m;
  label B_o:
  j = i - (e = i / (c = d >> 32L)) * c;
  k = b & 4294967295L;
  b = b >> 32L;
  h = d & 4294967295L;
  loop L_q {
    if (e > 4294967295L) goto B_r;
    if (e * h <= (j << 32L | b)) goto B_p;
    label B_r:
    e = e + -1L;
    j = j + c;
    if (j < 4294967296L) continue L_q;
  }
  label B_p:
  i = (b | i << 32L) - e * d;
  b = i - (j = i / c) * c;
  loop L_t {
    if (j > 4294967295L) goto B_u;
    if (j * h <= (b << 32L | k)) goto B_s;
    label B_u:
    j = j + -1L;
    b = b + c;
    if (b < 4294967296L) continue L_t;
  }
  label B_s:
  b = (i << 32L | k) - j * d >> m;
  label B_f:
  h = j + (e << 32L);
  if (eqz(f)) goto B_a;
  f.b = 0L;
  f.a = b;
  goto B_a;
  label B_e:
  var n:int = i32_wrap_i64(clz(e));
  var p:int = n - (o = i32_wrap_i64(clz(c)));
  if (p < 0) goto B_v;
  ashlti3(g, d, e, p);
  n = (n ^ -1) + o;
  e = (g + 8)[0]:long;
  h = 0L;
  j = g[0];
  loop L_w {
    c = 
      c -
      ((l = (d = e + (c ^ -1L) + i64_extend_i32_u(j + (b ^ -1L) < j)) >> 63L) &
       e) -
      i64_extend_i32_u(b < (l = l & j));
    j = j >> 1L | e << 63L;
    h = h << 1L | d >> 63L;
    b = b - l;
    e = e >> 1L;
    n = n + 1;
    if (n) continue L_w;
  }
  label B_v:
  if (eqz(f)) goto B_b;
  f.b = c;
  f.a = b;
  label B_b:
  l = 0L;
  label B_a:
  a.a = h;
  a.b = l;
  stack_pointer = g + 16;
}

export function udivti3(a:{ a:long, b:long }, b:long, c:long, d:long, e:long) {
  var f:long_ptr = stack_pointer - 16;
  stack_pointer = f;
  udivmodti4(f, b, c, d, e, 0);
  e = f[0];
  a.b = (f + 8)[0]:long;
  a.a = e;
  stack_pointer = f + 16;
}

