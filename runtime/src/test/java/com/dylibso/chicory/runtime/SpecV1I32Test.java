
package com.dylibso.chicory.runtime;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import com.dylibso.chicory.wasm.types.Value;
import com.dylibso.chicory.wasm.types.ValueType;
import org.junit.Test;

public class SpecV1I32Test {

	@Test
	public void testFunc() {
		var instance = Module.build("src/test/resources/wasm/specv1/i32.0.wasm").instantiate();
		var add = instance.getExport("add");
		assertEquals((int)(2L & 0xFFFFFFFFL), add.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), add.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967294L & 0xFFFFFFFFL), add.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), add.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), add.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483647L & 0xFFFFFFFFL), add.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), add.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1073741824L & 0xFFFFFFFFL), add.apply(Value.i32(1073741823L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		var sub = instance.getExport("sub");
		assertEquals((int)(0L & 0xFFFFFFFFL), sub.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), sub.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), sub.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), sub.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483647L & 0xFFFFFFFFL), sub.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), sub.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1073741824L & 0xFFFFFFFFL), sub.apply(Value.i32(1073741823L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		var mul = instance.getExport("mul");
		assertEquals((int)(1L & 0xFFFFFFFFL), mul.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), mul.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), mul.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), mul.apply(Value.i32(268435456L & 0xFFFFFFFFL), Value.i32(4096L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), mul.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), mul.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483649L & 0xFFFFFFFFL), mul.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(898528368L & 0xFFFFFFFFL), mul.apply(Value.i32(19088743L & 0xFFFFFFFFL), Value.i32(1985229328L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), mul.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		var divs = instance.getExport("div_s");
		assertEquals((int)(1L & 0xFFFFFFFFL), divs.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), divs.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), divs.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), divs.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(3221225472L & 0xFFFFFFFFL), divs.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4292819813L & 0xFFFFFFFFL), divs.apply(Value.i32(2147483649L & 0xFFFFFFFFL), Value.i32(1000L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divs.apply(Value.i32(5L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967294L & 0xFFFFFFFFL), divs.apply(Value.i32(4294967291L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967294L & 0xFFFFFFFFL), divs.apply(Value.i32(5L & 0xFFFFFFFFL), Value.i32(4294967294L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divs.apply(Value.i32(4294967291L & 0xFFFFFFFFL), Value.i32(4294967294L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divs.apply(Value.i32(7L & 0xFFFFFFFFL), Value.i32(3L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967294L & 0xFFFFFFFFL), divs.apply(Value.i32(4294967289L & 0xFFFFFFFFL), Value.i32(3L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967294L & 0xFFFFFFFFL), divs.apply(Value.i32(7L & 0xFFFFFFFFL), Value.i32(4294967293L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divs.apply(Value.i32(4294967289L & 0xFFFFFFFFL), Value.i32(4294967293L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divs.apply(Value.i32(11L & 0xFFFFFFFFL), Value.i32(5L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divs.apply(Value.i32(17L & 0xFFFFFFFFL), Value.i32(7L & 0xFFFFFFFFL)).asInt());
		var divu = instance.getExport("div_u");
		assertEquals((int)(1L & 0xFFFFFFFFL), divu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), divu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), divu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), divu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1073741824L & 0xFFFFFFFFL), divu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(36847L & 0xFFFFFFFFL), divu.apply(Value.i32(2414874608L & 0xFFFFFFFFL), Value.i32(65537L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483L & 0xFFFFFFFFL), divu.apply(Value.i32(2147483649L & 0xFFFFFFFFL), Value.i32(1000L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divu.apply(Value.i32(5L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483645L & 0xFFFFFFFFL), divu.apply(Value.i32(4294967291L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), divu.apply(Value.i32(5L & 0xFFFFFFFFL), Value.i32(4294967294L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), divu.apply(Value.i32(4294967291L & 0xFFFFFFFFL), Value.i32(4294967294L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divu.apply(Value.i32(7L & 0xFFFFFFFFL), Value.i32(3L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divu.apply(Value.i32(11L & 0xFFFFFFFFL), Value.i32(5L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), divu.apply(Value.i32(17L & 0xFFFFFFFFL), Value.i32(7L & 0xFFFFFFFFL)).asInt());
		var rems = instance.getExport("rem_s");
		assertEquals((int)(0L & 0xFFFFFFFFL), rems.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), rems.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), rems.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), rems.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), rems.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), rems.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), rems.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294966649L & 0xFFFFFFFFL), rems.apply(Value.i32(2147483649L & 0xFFFFFFFFL), Value.i32(1000L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rems.apply(Value.i32(5L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), rems.apply(Value.i32(4294967291L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rems.apply(Value.i32(5L & 0xFFFFFFFFL), Value.i32(4294967294L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), rems.apply(Value.i32(4294967291L & 0xFFFFFFFFL), Value.i32(4294967294L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rems.apply(Value.i32(7L & 0xFFFFFFFFL), Value.i32(3L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), rems.apply(Value.i32(4294967289L & 0xFFFFFFFFL), Value.i32(3L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rems.apply(Value.i32(7L & 0xFFFFFFFFL), Value.i32(4294967293L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), rems.apply(Value.i32(4294967289L & 0xFFFFFFFFL), Value.i32(4294967293L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rems.apply(Value.i32(11L & 0xFFFFFFFFL), Value.i32(5L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(3L & 0xFFFFFFFFL), rems.apply(Value.i32(17L & 0xFFFFFFFFL), Value.i32(7L & 0xFFFFFFFFL)).asInt());
		var remu = instance.getExport("rem_u");
		assertEquals((int)(0L & 0xFFFFFFFFL), remu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), remu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), remu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), remu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), remu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(32769L & 0xFFFFFFFFL), remu.apply(Value.i32(2414874608L & 0xFFFFFFFFL), Value.i32(65537L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(649L & 0xFFFFFFFFL), remu.apply(Value.i32(2147483649L & 0xFFFFFFFFL), Value.i32(1000L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), remu.apply(Value.i32(5L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), remu.apply(Value.i32(4294967291L & 0xFFFFFFFFL), Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(5L & 0xFFFFFFFFL), remu.apply(Value.i32(5L & 0xFFFFFFFFL), Value.i32(4294967294L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967291L & 0xFFFFFFFFL), remu.apply(Value.i32(4294967291L & 0xFFFFFFFFL), Value.i32(4294967294L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), remu.apply(Value.i32(7L & 0xFFFFFFFFL), Value.i32(3L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), remu.apply(Value.i32(11L & 0xFFFFFFFFL), Value.i32(5L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(3L & 0xFFFFFFFFL), remu.apply(Value.i32(17L & 0xFFFFFFFFL), Value.i32(7L & 0xFFFFFFFFL)).asInt());
		var and = instance.getExport("and");
		assertEquals((int)(0L & 0xFFFFFFFFL), and.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), and.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), and.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), and.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), and.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483647L & 0xFFFFFFFFL), and.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4042322160L & 0xFFFFFFFFL), and.apply(Value.i32(4042326015L & 0xFFFFFFFFL), Value.i32(4294963440L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), and.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		var or = instance.getExport("or");
		assertEquals((int)(1L & 0xFFFFFFFFL), or.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), or.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), or.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), or.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), or.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), or.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), or.apply(Value.i32(4042326015L & 0xFFFFFFFFL), Value.i32(4294963440L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), or.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		var xor = instance.getExport("xor");
		assertEquals((int)(1L & 0xFFFFFFFFL), xor.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), xor.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), xor.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), xor.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), xor.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), xor.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483647L & 0xFFFFFFFFL), xor.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), xor.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(252645135L & 0xFFFFFFFFL), xor.apply(Value.i32(4042326015L & 0xFFFFFFFFL), Value.i32(4294963440L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), xor.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		var shl = instance.getExport("shl");
		assertEquals((int)(2L & 0xFFFFFFFFL), shl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967294L & 0xFFFFFFFFL), shl.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967294L & 0xFFFFFFFFL), shl.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), shl.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), shl.apply(Value.i32(1073741824L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), shl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(31L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(32L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), shl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(33L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), shl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), shl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		var shrs = instance.getExport("shr_s");
		assertEquals((int)(0L & 0xFFFFFFFFL), shrs.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shrs.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), shrs.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1073741823L & 0xFFFFFFFFL), shrs.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(3221225472L & 0xFFFFFFFFL), shrs.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(536870912L & 0xFFFFFFFFL), shrs.apply(Value.i32(1073741824L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shrs.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(32L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), shrs.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(33L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), shrs.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), shrs.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shrs.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), shrs.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(31L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), shrs.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(32L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), shrs.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(33L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), shrs.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), shrs.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), shrs.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var shru = instance.getExport("shr_u");
		assertEquals((int)(0L & 0xFFFFFFFFL), shru.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shru.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483647L & 0xFFFFFFFFL), shru.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1073741823L & 0xFFFFFFFFL), shru.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1073741824L & 0xFFFFFFFFL), shru.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(536870912L & 0xFFFFFFFFL), shru.apply(Value.i32(1073741824L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shru.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(32L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), shru.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(33L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), shru.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), shru.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shru.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shru.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(31L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), shru.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(32L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483647L & 0xFFFFFFFFL), shru.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(33L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shru.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), shru.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), shru.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var rotl = instance.getExport("rotl");
		assertEquals((int)(2L & 0xFFFFFFFFL), rotl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rotl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), rotl.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rotl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(32L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1469788397L & 0xFFFFFFFFL), rotl.apply(Value.i32(2882377846L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(3758997519L & 0xFFFFFFFFL), rotl.apply(Value.i32(4261469184L & 0xFFFFFFFFL), Value.i32(4L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(406477942L & 0xFFFFFFFFL), rotl.apply(Value.i32(2965492451L & 0xFFFFFFFFL), Value.i32(5L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1048576L & 0xFFFFFFFFL), rotl.apply(Value.i32(32768L & 0xFFFFFFFFL), Value.i32(37L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(406477942L & 0xFFFFFFFFL), rotl.apply(Value.i32(2965492451L & 0xFFFFFFFFL), Value.i32(65285L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1469837011L & 0xFFFFFFFFL), rotl.apply(Value.i32(1989852383L & 0xFFFFFFFFL), Value.i32(4294967277L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1469837011L & 0xFFFFFFFFL), rotl.apply(Value.i32(1989852383L & 0xFFFFFFFFL), Value.i32(2147483661L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), rotl.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(31L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rotl.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		var rotr = instance.getExport("rotr");
		assertEquals((int)(2147483648L & 0xFFFFFFFFL), rotr.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rotr.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), rotr.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rotr.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(32L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2139121152L & 0xFFFFFFFFL), rotr.apply(Value.i32(4278242304L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(32768L & 0xFFFFFFFFL), rotr.apply(Value.i32(524288L & 0xFFFFFFFFL), Value.i32(4L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(495324823L & 0xFFFFFFFFL), rotr.apply(Value.i32(2965492451L & 0xFFFFFFFFL), Value.i32(5L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1024L & 0xFFFFFFFFL), rotr.apply(Value.i32(32768L & 0xFFFFFFFFL), Value.i32(37L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(495324823L & 0xFFFFFFFFL), rotr.apply(Value.i32(2965492451L & 0xFFFFFFFFL), Value.i32(65285L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(3875255509L & 0xFFFFFFFFL), rotr.apply(Value.i32(1989852383L & 0xFFFFFFFFL), Value.i32(4294967277L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(3875255509L & 0xFFFFFFFFL), rotr.apply(Value.i32(1989852383L & 0xFFFFFFFFL), Value.i32(2147483661L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), rotr.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(31L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), rotr.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(31L & 0xFFFFFFFFL)).asInt());
		var clz = instance.getExport("clz");
		assertEquals((int)(0L & 0xFFFFFFFFL), clz.apply(Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(32L & 0xFFFFFFFFL), clz.apply(Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(16L & 0xFFFFFFFFL), clz.apply(Value.i32(32768L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(24L & 0xFFFFFFFFL), clz.apply(Value.i32(255L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), clz.apply(Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(31L & 0xFFFFFFFFL), clz.apply(Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(30L & 0xFFFFFFFFL), clz.apply(Value.i32(2L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), clz.apply(Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		var ctz = instance.getExport("ctz");
		assertEquals((int)(0L & 0xFFFFFFFFL), ctz.apply(Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(32L & 0xFFFFFFFFL), ctz.apply(Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(15L & 0xFFFFFFFFL), ctz.apply(Value.i32(32768L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(16L & 0xFFFFFFFFL), ctz.apply(Value.i32(65536L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(31L & 0xFFFFFFFFL), ctz.apply(Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ctz.apply(Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		var popcnt = instance.getExport("popcnt");
		assertEquals((int)(32L & 0xFFFFFFFFL), popcnt.apply(Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), popcnt.apply(Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), popcnt.apply(Value.i32(32768L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(2L & 0xFFFFFFFFL), popcnt.apply(Value.i32(2147516416L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(31L & 0xFFFFFFFFL), popcnt.apply(Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(16L & 0xFFFFFFFFL), popcnt.apply(Value.i32(2863311530L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(16L & 0xFFFFFFFFL), popcnt.apply(Value.i32(1431655765L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(24L & 0xFFFFFFFFL), popcnt.apply(Value.i32(3735928559L & 0xFFFFFFFFL)).asInt());
		var extend8s = instance.getExport("extend8_s");
		assertEquals((int)(0L & 0xFFFFFFFFL), extend8s.apply(Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(127L & 0xFFFFFFFFL), extend8s.apply(Value.i32(127L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967168L & 0xFFFFFFFFL), extend8s.apply(Value.i32(128L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), extend8s.apply(Value.i32(255L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), extend8s.apply(Value.i32(19088640L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967168L & 0xFFFFFFFFL), extend8s.apply(Value.i32(4275878528L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), extend8s.apply(Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		var extend16s = instance.getExport("extend16_s");
		assertEquals((int)(0L & 0xFFFFFFFFL), extend16s.apply(Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(32767L & 0xFFFFFFFFL), extend16s.apply(Value.i32(32767L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294934528L & 0xFFFFFFFFL), extend16s.apply(Value.i32(32768L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), extend16s.apply(Value.i32(65535L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), extend16s.apply(Value.i32(19070976L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294934528L & 0xFFFFFFFFL), extend16s.apply(Value.i32(4275863552L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(4294967295L & 0xFFFFFFFFL), extend16s.apply(Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		var eqz = instance.getExport("eqz");
		assertEquals((int)(1L & 0xFFFFFFFFL), eqz.apply(Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eqz.apply(Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eqz.apply(Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eqz.apply(Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eqz.apply(Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		var eq = instance.getExport("eq");
		assertEquals((int)(1L & 0xFFFFFFFFL), eq.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), eq.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eq.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), eq.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), eq.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), eq.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eq.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eq.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eq.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eq.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eq.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eq.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eq.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), eq.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var ne = instance.getExport("ne");
		assertEquals((int)(0L & 0xFFFFFFFFL), ne.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ne.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ne.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ne.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ne.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ne.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ne.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ne.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ne.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ne.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ne.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ne.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ne.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ne.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var lts = instance.getExport("lt_s");
		assertEquals((int)(0L & 0xFFFFFFFFL), lts.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), lts.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), lts.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), lts.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), lts.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), lts.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), lts.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), lts.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), lts.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), lts.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), lts.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), lts.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), lts.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), lts.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var ltu = instance.getExport("lt_u");
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ltu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ltu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ltu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ltu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ltu.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var les = instance.getExport("le_s");
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), les.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), les.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), les.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), les.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), les.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var leu = instance.getExport("le_u");
		assertEquals((int)(1L & 0xFFFFFFFFL), leu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), leu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), leu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), leu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), leu.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), leu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), leu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), leu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), leu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), leu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), leu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), leu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), leu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), leu.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var gts = instance.getExport("gt_s");
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), gts.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), gts.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), gts.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gts.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), gts.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var gtu = instance.getExport("gt_u");
		assertEquals((int)(0L & 0xFFFFFFFFL), gtu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gtu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), gtu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gtu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gtu.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gtu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), gtu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gtu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), gtu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gtu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gtu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), gtu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), gtu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), gtu.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var ges = instance.getExport("ge_s");
		assertEquals((int)(1L & 0xFFFFFFFFL), ges.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ges.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ges.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ges.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ges.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ges.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ges.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ges.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ges.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ges.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ges.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ges.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), ges.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), ges.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		var geu = instance.getExport("ge_u");
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(1L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), geu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(1L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(0L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), geu.apply(Value.i32(0L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), geu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(4294967295L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(4294967295L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(1L & 0xFFFFFFFFL), geu.apply(Value.i32(2147483648L & 0xFFFFFFFFL), Value.i32(2147483647L & 0xFFFFFFFFL)).asInt());
		assertEquals((int)(0L & 0xFFFFFFFFL), geu.apply(Value.i32(2147483647L & 0xFFFFFFFFL), Value.i32(2147483648L & 0xFFFFFFFFL)).asInt());
	}
}
