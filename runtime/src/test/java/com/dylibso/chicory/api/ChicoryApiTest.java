package com.dylibso.chicory.api;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import com.dylibso.chicory.runtime.ExportFunction;
import com.dylibso.chicory.runtime.Instance;
import com.dylibso.chicory.runtime.Module;
import java.io.InputStream;
import org.junit.jupiter.api.Test;

public class ChicoryApiTest {

    @WasmModule("wasm/count_vowels.rs.wasm")
    public interface HelloWorld {

        @WasmFunction("count_vowels")
        int countVowels(String input);
    }

    @Test
    public void shouldCreateDynamicProxy() {

        HelloWorld hw = //
                // Chicory.DYNAMIC.proxy(HelloWorld.class);
                Chicory.proxy(HelloWorld.class);

        assertNotNull(hw);
        assertEquals(3, hw.countVowels("AAAx"));

        assertEquals(hw, hw);
        assertEquals(hw.hashCode(), hw.hashCode());
        assertNotNull(hw.toString());
    }

    @Test
    public void shouldCreateStaticProxy() {

        HelloWorld hw = //
                // Chicory.STATIC.proxy(HelloWorld.class);
                new StaticHelloWorldProxy();

        assertNotNull(hw);
        assertEquals(3, hw.countVowels("AAAx"));

        assertEquals(hw, hw);
        assertEquals(hw.hashCode(), hw.hashCode());
        assertNotNull(hw.toString());
    }

    /**
     * This could be generated by an annotation processor
     */
    static class StaticHelloWorldProxy extends ChicoryProxyFactory.WasmInvocationAdapter
            implements HelloWorld, ChicoryProxyFactory.ChicoryProxy {

        private static final Instance instance;

        private static final ExportFunction countVowels_function;

        static {
            InputStream moduleBytes =
                    ChicoryProxyFactory.resolveModule(
                            Thread.currentThread().getContextClassLoader(),
                            "wasm/count_vowels.rs.wasm");
            Module module = Module.build(moduleBytes);
            instance = module.instantiate();

            try {
                countVowels_function = instance.getExport("count_vowels");
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }
        }

        @Override
        public int countVowels(String input) {
            return (Integer)
                    invokeInternal(
                            instance,
                            countVowels_function,
                            int.class,
                            new Class[] {String.class},
                            new Object[] {input});
        }
    }
}
